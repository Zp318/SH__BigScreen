/**
 * @fileOverview sweet core组件国际化资源
 * @date 2012/12/13
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */
(function() {
    var ZHCN = "zh_CN",
        ENUS = "en_US";
    // 国际化资源
    global = this;
    if (typeof I18N === "undefined") {
        global.I18N = {};
    }

    I18N.core = {};

    // 中文
    I18N.core[ZHCN] = {
        // 月
        month: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        // 周
        week: ["一", "二", "三", "四", "五", "六", "日"],
        // 日期组件
        date: {
            time: "时间",
            okButton: "确定",
            formatCheckTip: "请输入正确的时间格式："
        },
        // dialog对话框
        dialog: {
            prompt: "提示",
            alert: "注意",
            success: "成功",
            error: "错误",
            confirm: "确认",
            warn: "警告",
            ok: "确定",
            cancel: "取消"
        },
        // 容器
        container: {
            save: "保存",
            prev: "上一步",
            next: "下一步",
            done: "完成"
        },
        // 树
        tree: {
            info: "提示告警",
            warn: "紧急告警",
            search: "搜索",
            clickLoad: "点击加载更多",
            clickLoadOver: "数据全部加载完成",
            nodeName: "节点",
            add: "增加",
            "delete": "删除",
            edit: "编辑"
        },
        // 图表
        chart: {
            unit: "单位: ",
            meter: {
                name: "名称",
                value: "当前值",
                major: "紧急阀值",
                minor: "提示阀值",
                min: "最小值",
                max: "最大值"
            },
            view: "视图",
            legend: "隐藏图例",
            balloon: "只显示一个提示",
            zoom: "缩放",
            noDataTips: "无数据"
        },
        // 计算器
        calculator: {
            title: "公式:",
            button: "清除公式",
            tip: "不合法的输入！",
            emptyText: "请输入！……"
        },
        // 表格
        grid: {
            pageRow: "每页{0}行",
            text: "共计:{0}条记录",
            prev: "上一页",
            next: "下一页",
            go: "跳转",
            hideCol: "隐藏该列",
            filter: "过滤",
            exactMatch: "精确匹配",
            fuzzyMatch: "模糊匹配",
            notEqual: "不等于",
            eqNull: "为空",
            notNull: "非空",
            from: "从",
            to: "至",
            okBtn: "确认",
            resetBtn: "重置",
            clearSingleFilter: "清除过滤",
            selectCol: "列选择",
            multiSort: "多列组合排序",
            secondStat: "二次统计",
            clearFilter: "清除所有过滤",
            qClearFilter: "确定要清除所有过滤吗？",
            "export": "导出",
            "delete": "删除",
            edit: "编辑",
            modify: "修改",
            close: "关闭",
            pause: "暂停",
            start: "启动",
            reset: "复位",
            detail: "详情",
            confirm: "确认",
            SN: "序号",
            validate: {
                beginDate: "请输入开始时间！",
                endDate: "请输入结束时间！",
                compare: "开始时间必须早于结束时间！"
            },
            multiSortWin: {
                winWidth: 450,
                comboLabelWidth: "30%",
                comboWidth: 280,
                radioWidth: 120,
                title: "列排序设置",
                asc: "升序",
                desc: "降序",
                firstSort: "第一排序列",
                secondSort: "第二排序列",
                thirdSort: "第三排序列",
                firstNoSelectTip: "请选择第一排序列，排序方式。",
                secondNoSelectTip: "请选择第二排序列，排序方式。",
                thirdNoSelectTip: "请选择第三排序列，排序方式。"
            }
        },
        // 遮罩
        mask: {
            loading: "加载中...",
            second: "秒"
        },
        //下拉框
        combobox: {
            pleaseCheck: "请选择...",
            pleaseSelect: "请选择",
            checkAll: "全选"
        },
        // Tab布局
        tab: {
            menu: {
                closeCurrent: "关闭标签",
                closeOthers: "关闭其它标签",
                closeAll: "关闭所有标签"
            }
        },
        // tip默认提示内容
        tip: {
            EMPTY_TITLE: "不能为空。",
            HEX_TIP_TITLE: "请输入合法的十六进制数！",
            IP_TIP_TITLE: "请输入合法的IP地址！",
            NUMBERFEILD_MAX_TIP: "允许输入的最大数值：",
            NUMBERFEILD_MIN_TIP: "允许输入的最小数值：",
            LENGTH_RANGE_1: "字符长度范围应该在",
            LENGTH_RANGE_2: "~",
            LENGTH_RANGE_3: "之间！"
        },
        // listbox
        listbox: {
            clearAll: "清空",
            close: "关闭"
        },
        //（需要重新翻译）
        labelImage: {
            setting: "设置",
            // 修改问题单：DTS2013072607353
            plus: "添加",
            add: "添加",
            minus: "删除",
            delete: "删除",
            save: "保存",
            import: "导入",
            export: "导出",
            print: "打印",
            lock: "锁定",
            unlock: "未锁定",
            reset: "重置"
        },
        // 导出
        exportType: {
            csv: "CSV",
            pdf: "PDF",
            xls: "Excel"
        },
        // 文件上传
        fileUpload: {
            browse: "浏览",
            importType: "导入方式",
            appendImport: "追加式导入",
            overWriteImport: "覆盖式导入"
        },
        // 文件上传窗口
        fileUploadWin: {
            title: "文件上传",
            fileName: "文件名"
        },
        // list组件
        list: {
            total: "总数",
            selected: "已选",
            minRemains: "最少选择{0}个。",
            maxRemains: "最多选择{0}个。"
        },
        map: {
            layer: "层级：",
            areaName: "区域："
        },
        widgetPanel: {
            refresh: "刷新",
            setting: "设置",
            close: "删除"
        },
        stateItem: {
            plus: "新增",
            "delete": "删除",
            check: "设置默认",
            headerText: "状态",
            stateText: "状态"
        }
    };

    // 英文
    I18N.core[ENUS] = {
        // 月
        month: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        // 周
        week: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
        // 日期组件
        date: {
            time: "Time",
            okButton: "OK",
            formatCheckTip: "Please specify the time in correct format: "
        },
        // dialog对话框
        dialog: {
            prompt: "Prompt",
            alert: "Alert",
            success: "Success",
            error: "Error",
            confirm: "Confirm",
            warn: "Warning",
            ok: "OK",
            cancel: "Cancel"
        },
        // 容器
        container: {
            save: "Save",
            prev: "Previous",
            next: "Next",
            done: "Finish"
        },
        // 树
        tree: {
            info: "Warning",
            warn: "Major",
            search: "Search",
            clickLoad: "Click here to load more data",
            clickLoadOver: "Data loading is complete.",
            nodeName: "Node",
            add: "Add",
            "delete": "Delete",
            edit: "Edit"
        },
        // 图表
        chart: {
            unit: "Unit: ",
            meter: {
                name: "Name",
                value: "Value",
                major: "Major",
                minor: "Minor",
                min: "Min",
                max: "Max"
            },
            view: "View",
            zoom: "Zoom",
            legend: "Hide Legend",
            balloon: "Only One Balloon",
            noDataTips: "No data"
        },
        // 计算器
        calculator: {
            title: "Formula: ",
            button: "Clear",
            tip: "Invalid value!",
            emptyText: "entry text……"
        },
        // 表格
        grid: {
            pageRow: "{0} rows/page",
            text: "Total:{0} records",
            prev: "Previous",
            next: "Next",
            go: "Go",
            hideCol: "Hide Column",
            filter: "Filter",
            exactMatch: "Exact match",
            fuzzyMatch: "Fuzzy match",
            notEqual: "Not equal",
            eqNull: "Is null",
            notNull: "Not null",
            from: "From",
            to: "To",
            okBtn: "OK",
            resetBtn: "Reset",
            clearSingleFilter: "Clear",
            selectCol: "Select Column",
            multiSort: "Multi-column Sorting",
            secondStat: "Secondary Statistics",
            clearFilter: "Clear All Filters",
            qClearFilter: "Are you sure to clear all filters?",
            "export": "Export",
            "delete": "Delete",
            edit: "Edit",
            modify: "Modify",
            close: "Close",
            pause: "Pause",
            start: "Start",
            reset: "Reset",
            detail: "Details",
            confirm: "Confirm",
            SN: "SN",
            validate: {
                beginDate: "Please input the start time.",
                endDate: "Please input the end time.",
                compare: "The start time should be earlier than the end time."
            },
            multiSortWin: {
                winWidth: 650,
                comboLabelWidth: "45%",
                comboWidth: 350,
                radioWidth: 250,
                title: "Column Sorting Setup",
                asc: "Ascending Order",
                desc: "Descending Order",
                firstSort: "First Sorting Column",
                secondSort: "Second Sorting Column",
                thirdSort: "Third Sorting Column",
                firstNoSelectTip: "Please select the first sorting column and sorting mode.",
                secondNoSelectTip: "Please select the second sorting column and sorting mode.",
                thirdNoSelectTip: "Please select the third sorting column and sorting mode."
            }
        },
        // 遮罩
        mask: {
            loading: "Loading...",
            second: "s"
        },
        //下拉框
        combobox: {
            pleaseCheck: "Please select…",
            pleaseSelect: "Please select",
            checkAll: "All"
        },
        // Tab布局
        tab: {
            menu: {
                closeCurrent: "Close Current Tab",
                closeOthers: "Close Other Tabs",
                closeAll: "Close All Tabs"
            }
        },
        // tip默认提示内容（需要重新翻译）
        tip: {
            EMPTY_TITLE: "This value cannot be empty.",
            HEX_TIP_TITLE: "Please enter a valid hexadecimal number.",
            IP_TIP_TITLE: "Please enter a valid IP address.",
            NUMBERFEILD_MAX_TIP: "Maximum value allowed: ",
            NUMBERFEILD_MIN_TIP: "Minimum value allowed: ",
            LENGTH_RANGE_1: "The length must be ",
            LENGTH_RANGE_2: " to ",
            LENGTH_RANGE_3: " characters."
        },
        // listbox
        listbox: {
            clearAll: "Clear",
            close: "Close"
        },
        //（需要重新翻译）
        labelImage: {
            setting: "Setting",
            // 修改问题单：DTS2013072607353
            plus: "Add",
            add: "Add",
            minus: "Delete",
            delete: "Delete",
            save: "Save",
            import: "Import",
            export: "Export",
            print: "Print",
            lock: "Lock",
            unlock: "Unlock",
            reset: "ReSet"
        },
        // 导出
        exportType: {
            csv: "CSV",
            pdf: "PDF",
            xls: "Excel"
        },
        // 文件上传
        fileUpload: {
            browse: "Browse",
            importType: "Import Mode",
            appendImport: "Appended",
            overWriteImport: "Overwritten"
        },
        // 文件上传窗口
        fileUploadWin: {
            title: "Upload File",
            fileName: "File Name"
        },
        // list组件
        list: {
            total: "Total",
            selected: "Selected",
            minRemains: "At least {0} of them must be selected.",
            maxRemains: "A maximum of {0} of them can be selected."
        },
        map: {
            layer: "Level:",
            areaName: "Area:"
        },
        widgetPanel: {
            refresh: "Refresh",
            setting: "Setting",
            close: "Remove"
        },
        stateItem: {
            plus: "Add",
            "delete": "Delete",
            check: "Set as default",
            headerText: "State",
            stateText: "state"
        }
    };
})();;
/**
 * @fileOverview sweet components组件国际化资源
 * @date 2012/12/13
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */
(function() {
    var ZHCN = "zh_CN",
        ENUS = "en_US";
    I18N.cmp = {};

    // 中文
    I18N.cmp[ZHCN] = {
        holiday: "节假日",
        timeSchedule: {
            buttonText: "忙时"
        },
        stat: {
            // 统计
            calculation_msg: "统计",
            // 确定
            confirm_msg: "确定",
            // 取消
            cancel_msg: "取消",
            // 总数
            total_msg: "计数",
            // 删除
            delete_msg: "删除",
            // 最大值
            max_msg: "最大值",
            // 最小值
            min_msg: "最小值",
            // 求和
            sum_msg: "求和",
            // 平均
            average_msg: "平均",
            // 二次统计
            secondary_statistics_msg: "二次统计",
            // 指标
            indicators_msg: "指标",
            // 统计项
            statistics_item_msg: "统计项",
            // 待选分析维度
            analysis_dimensions_msg: "待选分析维度",
            // 已选分析维度
            selected_analysis_dimensions_msg: "已选分析维度",
            // 统计
            statistics_msg: "统计",
            // 请选择指标
            select_indicators_msg: "请选择指标！",
            // 请选择分析维度
            analysis_dimension_msg: "请选择分析维度！",
            // 提示
            prompt_msg: "提示"
        },
        officeDirection: {
            sourceCombLabel: "源",
            destinationCombLabel: "目的",
            optionsMsg: "选择项",
            selectedMsg: "已选择"

        },
        listWindow: {
            fromTitle: "选择项",
            toTitle: "已选择"

        }
    };

    // 英文
    I18N.cmp[ENUS] = {
        holiday: "节假日",
        timeSchedule: {
            buttonText: "Time Schedules"
        },
        stat: {
            // 统计
            calculation_msg: "Calculate",
            // 确定
            confirm_msg: "Confirm",
            // 取消
            cancel_msg: "Cancel",
            // 总数
            total_msg: "Count",
            // 删除
            delete_msg: "Delete",
            // 最大值
            max_msg: "Maximum",
            // 最小值
            min_msg: "Minimum",
            // 求和
            sum_msg: "Sum",
            // 平均
            average_msg: "Average",
            // 二次统计
            secondary_statistics_msg: "Secondary statistics",
            // 指标
            indicators_msg: "Indicator",
            // 统计项
            statistics_item_msg: "Statistic",
            // 待选分析维度
            analysis_dimensions_msg: "Analysis dimensions",
            // 已选分析维度
            selected_analysis_dimensions_msg: "Selected analysis dimensions",
            // 统计
            statistics_msg: "Statistics",
            // 请选择指标
            select_indicators_msg: "Please select indicator!",
            // 请选择分析维度
            analysis_dimension_msg: "Select the analysis dimension!",
            // 提示
            prompt_msg: "Reminder"
        },
        officeDirection: {
            sourceCombLabel: "Source",
            destinationCombLabel: "Destination",
            optionsMsg: "Options",
            selectedMsg: "Selected"
        },
        listWindow: {
            fromTitle: "Options",
            toTitle: "Selected"

        }
    };
})();;
/**
 * @fileOverview sweet 业务组件国际化资源
 * @date 2013/2/27
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 */
(function() {
    var ZHCN = "zh_CN",
        ENUS = "en_US";
    I18N.business = {};

    // 中文
    BusinessI18NZH = I18N.business[ZHCN] = {};

    // 英文
    BusinessI18NEN = I18N.business[ENUS] = {};
})();;
/**
 * @fileOverview 背景遮罩
 * @description 遮罩类，是jquery的插件， 使用时请按照jquery插件的方式使用
 * @date 2013/1/28
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 */

/**
 * 遮罩类，是jquery的插件
 * @name jquery.sweetMask
 * @class 
 * @extends 
 * <pre>
 * jquery-1.9.1.min.js
 * </pre>
 * @example
 * <pre>
 * $("#testdivid").sweetMask({
 *          propagation: false,   
 *          maskAll: false,        
 *          loading: true,          
 *          msg : "Loading..."  
 * })
 * 现在支持此四个参数，默认值如下 ：
 *          propagation: false,     // 是否阻止事件冒泡
 *          maskAll: false,         // 遮住当前文档
 *          loading: false,          // 是否显示loading，默认false
 *          msg : Sweet.core.i18n.mask.loading  //出遮罩时显示的提示信息，默认为"loading"
 * </pre>
 */
(function($) {
    var dataMaskCacheName = "sweetMask",
        dataMaskLoadingCacheName = "sweetMaskLoading",
        dataMaskTimerName = "sweetMaskRecordTime",
        dataOptionsCacheName = "options",
        maskClass = "sweet-mask",
        maskAllClass = "sweet-mask-all",
        maskedClass = "sweet-mask-masked",
        maskedRelativeClass = "sweet-mask-relative",
        maskedLoadingClass = "sweet-mask-loading",
        maskedLoadingMsgClass = "sweet-mask-loading-msg",
        maskedLoadingPicClass = "sweet-mask-loading-pic";

    /**
     * 增加遮罩
     * @param {Object} options 遮罩描述参数
     */
    $.fn.sweetMask = function(options) {
        var defaults = {
            propagation: false, // 是否阻止事件冒泡
            maskAll: false, // 遮住当前文档
            loading: false, // 是否显示loading，默认false
            msg: Sweet.core.i18n.mask.loading //出遮罩时显示的提示信息，默认为"loading"
        },
        opacity = 0.5, // 淡入效果最终的透明度
            opts = $.extend({}, defaults, options),
            zIndex,
            loadingZIndex,
            ele = $(this),
            maskEl,
            loadingEl,
            loadingParentEl,
            loadingParentAppend,
            WH = {};
        if ($(this).hasClass(maskedClass)) {
            return;
        }

        zIndex = $.getMaxZIndex();
        loadingZIndex = zIndex + 1;
        maskEl = $("<div>").addClass(maskClass).css({
            "z-index": zIndex
        }).attr("tabindex", "-1");
        ele.addClass(maskedClass)
            .data(dataMaskCacheName, maskEl)
            .data(dataOptionsCacheName, opts);

        // 淡入效果。duration同时用于unMask的淡出效果
        if (opts.duration) {
            maskEl.css("opacity", 0);
            maskEl.animate({
                "opacity": opacity
            }, opts.duration);
        }

        // 是否全局遮罩判断
        if (opts.maskAll) {
            loadingParentEl = $(document);
            loadingParentAppend = document.body;
            maskEl.addClass(maskAllClass).appendTo(document.body);
            // -----修改问题单DTS2013062405843-start
            // -----遮罩在某些分辨率下高度不够.
            //问题单：DTS2013122403809 
            //出滚动体的情况下，遮罩高度不够
            var winWidth = $(document).width();
            var winHeight = $(document).height();
            maskEl.width(winWidth).height(winHeight);
            // -----修改问题单DTS2013062405843-end
            // ------DTS2014070305004 start
            // ------DTS2014070305004 end
        } else {
            loadingParentAppend = loadingParentEl = ele;
            if ("static" === ele.css("position")) {
                ele.addClass(maskedRelativeClass);
            }
            maskEl.appendTo(ele);
        }

        // 是否需要组件事件冒泡
        if (opts.propagation) {
            maskEl.bind("click", function(e) {
                // 阻止事件冒泡
                e.stopImmediatePropagation();
            });
        }

        // 对loading的处理
        if (opts.loading) {
            loadingEl = $("<div>").css({
                "z-index": loadingZIndex
            })
                .addClass(maskedLoadingClass).appendTo(loadingParentAppend);
            $("<div>").addClass(maskedLoadingMsgClass + " " + maskedLoadingPicClass)
                .html(opts.msg).appendTo(loadingEl);
            ele.data(dataMaskLoadingCacheName, loadingEl);

            // sweetDebug在sweet-ui-all中声明的全局变量，只有在开启调试模式时才出现计数
            if (sweetDebug) {
                var loadingCounter = function() {
                    var child = loadingEl.children(),
                        text = child.html(),
                        begin = text.indexOf("("),
                        end = text.indexOf(")");
                    if (-1 !== begin) {
                        text = text.substr(0, begin + 1) + ($.string.toNumber(text.substring(begin + 1, end - 1)) + 1) + Sweet.core.i18n.mask.second + text.substr(end);
                    } else {
                        text += "&nbsp;&nbsp;(1" + Sweet.core.i18n.mask.second + ")";
                    }
                    child.html(text);
                };
                // 1秒刷新一次
                var interval = setInterval(loadingCounter, 1000);
                ele.data(dataMaskTimerName, interval);
            }
        }
        maskEl.focus();
    };

    /**
     * 删除遮罩
     */
    $.fn.unSweetMask = function() {
        var ele = $(this),
            opts = ele.data(dataOptionsCacheName),
            maskEl,
            loadingEl,
            interval;

        if (!opts) {
            return;
        }
        // 找到maskEl
        if (opts.maskAll) {
            maskEl = ele.data(dataMaskCacheName);
        } else {
            maskEl = ele.find("." + maskClass).first();
        }

        // 如果不需要淡出效果，延迟为0
        var duration = opts.duration || 0;

        // 淡出效果统一处理
        maskEl.animate({
            "opacity": 0
        }, {
            duration: duration,
            complete: function() {
                // 删除遮罩
                maskEl.remove();

                // 如果是最后一个全局遮罩，恢复body的overflow属性
                var maskAllNum = $("." + maskAllClass).length;
                if (opts.maskAll && maskAllNum < 1) {
                    $(document.body).css("overflow", "auto");
                }

                // 是否有loading
                if (opts.loading) {
                    // 销毁定时器
                    if (sweetDebug) {
                        interval = ele.data(dataMaskTimerName);
                        clearInterval(interval);
                    }

                    loadingEl = ele.data(dataMaskLoadingCacheName);
                    loadingEl.remove();
                }

                ele.removeClass(maskedClass + " " + maskedRelativeClass)
                    .removeData(dataOptionsCacheName + " " + dataMaskCacheName + " " + dataMaskLoadingCacheName + " " + dataMaskTimerName);
            }
        });
    };

    /**
     * 获取当前遮罩z-index值
     */
    $.fn.getSweetMaskZIndex = function() {
        return $(this).data(dataMaskCacheName).css("z-index");
    };
})(jQuery);;
/**
 * @fileOverview  
 * <pre>
 * 插件--tips提示
 * 2013.2.21
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 提示功能类
 * @name jquery.sweettip
 * @class 
 * @extends 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.ui.position.js
 * </pre>
 * @example 
 * <pre>
 * var t = $("#testdivid");
 * //出现新的提示
 * t.sweettip();
 * //清除提示
 * t.sweettip("destroy");
 * //立刻出现红色边框
 * t.sweettip("showErrorBorder");
 * //打开提示功能
 * t.sweettip("open");
 * //关闭提示功能
 * t.sweettip("close");
 * </pre>
 */
(function($) {

    var increments = 0,
        modelNone = "none",
        modelSide = "side";

    function addInputRedBoder(elem, obj) {
        //增加文本框上的红色边框
        var type = obj.options.getAttrTipType.call(elem, ",") || obj.options.tipType;
        if ("error" === type) {
            if (elem.hasClass("sweet-form-input-text") || elem.hasClass("sweet-form-combobox-element") || elem.hasClass("sweet-form-comboboxv1-input")) {
                elem.addClass("sweet-tips-input");
                elem.parent().addClass("sweet-tips-inputParent");
            } else if (elem.hasClass("sweet-form-textarea-errorRedBorder")) {
                elem.parent().addClass("sweet-tips-input sweet-tips-inputParent");
            }
        }
    }

    function removeInputRedBoder(elem, obj) {
        //去掉文本框上的红色边框
        var type = obj.options.getAttrTipType.call(elem, ",") || obj.options.tipType;
        if ("error" === type) {
            if (elem.hasClass("sweet-form-input-text") || elem.hasClass("sweet-form-combobox-element") || elem.hasClass("sweet-form-comboboxv1-input")) {
                elem.removeClass("sweet-tips-input");
                elem.parent().removeClass("sweet-tips-inputParent");
            } else if (elem.hasClass("sweet-form-textarea-errorRedBorder")) {
                elem.parent().removeClass("sweet-tips-input sweet-tips-inputParent");
            }
        }
    }

    function addDescribedBy(elem, id) {
        var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
        describedby.push(id);
        elem.data("ui-sweettip-id", id)
            .attr("aria-describedby", $.trim(describedby.join(" ")));
    }

    function removeDescribedBy(elem, obj) {
        var id = elem.data("ui-sweettip-id"),
            describedby = (elem.attr("aria-describedby") || "").split(/\s+/),
            index = $.inArray(id, describedby);
        if (index !== -1) {
            describedby.splice(index, 1);
        }

        elem.removeData("ui-sweettip-id");
        describedby = $.trim(describedby.join(" "));
        if (describedby) {
            elem.attr("aria-describedby", describedby);
        } else {
            elem.removeAttr("aria-describedby");
        }
        //不同的errormodel，去掉文本框上的红色边框的条件不一样
        var type = obj.options.getAttrTipType.call(elem, ",") || obj.options.tipType,
            model = obj.options.getAttrErrorModel.call(elem, ",") || "none";
        if ("error" === type && "side" === model) {
            removeInputRedBoder(elem, obj);
        }
    }

    $.widget("ui.sweettip", {
        version: "1.0",
        options: {
            getAttrTipType: function() {
                var tiptype = $(this).attr("tiptype") || "";
                // Escape title, since we're going from an attribute to raw HTML
                return $("<a>").text(tiptype).html();
            },
            getAttrErrorModel: function() {
                var errormodel = $(this).attr("errormodel") || "";
                // Escape title, since we're going from an attribute to raw HTML
                return $("<a>").text(errormodel).html();
            },
            content: function() {
                // support: IE<9, Opera in jQuery <1.7
                // .text() can't accept undefined, so coerce to a string
                var title = $(this).attr("title") || "";

                // Escape title, since we're going from an attribute to raw HTML

                // 转义大于号、小于号，保持<br>的换行功能
                return title.replace(/>/g, "&gt;").replace(/</g, "&lt;")
                    .replace(/&lt;br&gt;/g, "<br>");
            },
            hide: true,
            // Disabled elements have inconsistent behavior across browsers (#8661)
            items: "[title]:not([disabled])",
            position: {
                my: "left+20 top-40",
                at: "right top",
                collision: "flipfit flip"
            },
            show: true,
            sweettipClass: null,
            track: true,
            // callbacks
            close: null,
            open: null,
            /* 添加tipType属性：normal ,error*/
            tipType: "normal",
            /* 添加tipFloat属性：浮动or固定*/
            tipFloat: true
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            });

            // IDs of generated sweettips, needed for destroy
            this.sweettips = {};
            // IDs of parent sweettips where we removed the title attribute
            this.parents = {};

            if (this.options.disabled) {
                this._disable();
            }
        },
        _setOption: function(key, value) {
            var that = this;

            if (key === "disabled") {
                this[value ? "_disable" : "_enable"]();
                this.options[key] = value;
                // disable element style changes
                return;
            }

            this._super(key, value);

            if (key === "content") {
                $.each(this.sweettips, function(id, element) {
                    that._updateContent(element);
                });
            }
        },
        _disable: function() {
            var that = this;

            // close open sweettip
            $.each(this.sweettips, function(id, element) {
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, true);
            });

            // remove title attributes to prevent native sweettip
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                if (element.is("[title]")) {
                    element.data("ui-sweettip-title", element.attr("title"))
                        .attr("title", "");
                }
            });
        },
        _enable: function() {
            // restore title attributes
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                if (element.data("ui-sweettip-title")) {
                    element.attr("title", element.data("ui-sweettip-title"));
                }
            });
        },
        // shirunxiang  2013.5.14 仅显示红色边框，外部调用
        showErrorBorder: function(event) {
            var that = this,
                target = $(event ? event.currentTarget : this.element);
            addInputRedBoder(target, this);
        },
        open: function(event) {
            var that = this,
                target = $(event ? event.target : this.element)
                // we need closest here due to mouseover bubbling,
                // but always pointing at the same event target
                .closest(this.options.items);

            // No element to show a sweettip for or the sweettip is already open
            if (!target.length || target.data("ui-sweettip-id")) {
                return;
            }

            // SVG中不显示提示，由图表自己处理
            var p = target;
            var tag = p.prop("tagName").toUpperCase();
            while (tag !== "BODY") {
                if (tag === "SVG") {
                    return;
                }
                p = p.parent();
                if (!p || p.length <= 0) {
                    break;
                }
                tag = p.prop("tagName").toUpperCase();
            }

            if (target.attr("title")) {
                var tit = target.data("ui-sweettip-title");
                // title设置为“none”时，表示title属性的值为空
                if (tit && "none" === target.attr("title")) {
                    target.attr("title", "");
                    this._destroy();
                    target.data("ui-sweettip-title", "");
                    this.tipChange = true;
                } else {
                    target.data("ui-sweettip-title", target.attr("title"));
                    this.tipChange = false;
                }
            }

            target.data("ui-sweettip-open", true);

            // kill parent sweettips, custom or native, for hover
            if (event && event.type === "mouseover") {
                target.parents().each(function() {
                    var parent = $(this),
                        blurEvent;
                    if (parent.data("ui-sweettip-open")) {
                        blurEvent = $.Event("blur");
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, true);
                    }
                    if (parent.attr("title")) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr("title")
                        };
                        parent.attr("title", "");
                    }
                });
            }
            this._updateContent(target, event);
        },
        _updateContent: function(target, event) {
            var content,
            contentOption = this.options.content,
                that = this,
                eventType = event ? event.type : null;

            if (typeof contentOption === "string") {
                return this._open(event, target, contentOption);
            }

            content = contentOption.call(target[0], function(response) {
                // ignore async response if sweettip was closed already
                if (!target.data("ui-sweettip-open")) {
                    return;
                }
                // IE may instantly serve a cached response for ajax requests
                // delay this call to _open so the other call to _open runs first
                that._delay(function() {
                    // jQuery creates a special event for focusin when it doesn't
                    // exist natively. To improve performance, the native event
                    // object is reused and the type is changed. Therefore, we can't
                    // rely on the type being correct after the event finished
                    // bubbling, so we set it back to the previous value. (#8740)
                    if (event) {
                        event.type = eventType;
                    }
                    this._open(event, target, response);
                });
            });
            if (content) {
                this._open(event, target, content);
            }
        },
        _open: function(event, target, content) {
            var sweettip, events, delayedShow,
            positionOption = $.extend({}, this.options.position);

            if (!content) {


                return;
            }

            // Content can be updated multiple times. If the sweettip already
            // exists, then just update the content and bail.
            sweettip = this._find(target);
            if (sweettip.length) {
                sweettip.find(".ui-sweettip-content").html(content);
                return;
            }

            // if we have a title, clear it to prevent the native sweettip
            // we have to check first to avoid defining a title if none exists
            // (we don't want to cause an element to start matching [title])
            //
            // We use removeAttr only for key events, to allow IE to export the correct
            // accessible attributes. For mouse events, set to empty string to avoid
            // native sweettip showing up (happens only when removing inside mouseover).
            if (target.is("[title]")) {
                if (event && event.type === "mouseover") {
                    target.attr("title", "");
                } else {
                    target.removeAttr("title");
                }
            }

            sweettip = this._sweettip(target);
            addDescribedBy(target, sweettip.attr("id"));
            sweettip.find(".sweet-tip-content").html(content);
            //--begin--问题单号：DTS2014040408912
            sweettip.css({
                "left": 0,
                "top": 0
            });
            var domTip = sweettip.get(0),
                tipWid = getComputedStyle(domTip, "").width;
            sweettip.width(tipWid);
            //--end--问题单号：DTS2014040408912
            function position(event) {
                positionOption.of = event;
                if (sweettip.is(":hidden")) {
                    return;
                }
                sweettip.position(positionOption);
            }
            if (this.options.track && event && /^mouse/.test(event.type)) {
                this._on(this.document, {
                    mousemove: position
                });
                // trigger once to override element-relative positioning
                position(event);
            } else {
                sweettip.position($.extend({
                    of: target
                }, this.options.position));
            }

            sweettip.hide();

            this._show(sweettip, this.options.show);
            // Handle tracking sweettips that are shown with a delay (#8644). As soon
            // as the sweettip is visible, position the sweettip using the most recent
            // event.
            if (this.options.show && this.options.show.delay) {
                delayedShow = this.delayedShow = setInterval(function() {
                    if (sweettip.is(":visible")) {
                        position(positionOption.of);
                        clearInterval(delayedShow);
                    }
                }, $.fx.interval);
            }

            this._trigger("open", event, {
                sweettip: sweettip
            });

            events = {
                keydown: function(event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0];
                        this.close(fakeEvent, true);
                    }
                },
                remove: function() {
                    this._removesweettip(sweettip);
                }
            };
            if (!event || event.type === "mouseover") {
                events.mouseleave = "close";
                events.focusout = "close";
            }
            if (!event || event.type === "focusin") {
                events.focusout = "close";
            }
            this._on(true, target, events);
        },
        close: function(event) {
            var that = this,
                target = $(event ? event.currentTarget : this.element),
                sweettip = this._find(target),
                type = this.options.getAttrTipType.call(target, ",") || this.options.tipType,
                model = this.options.getAttrErrorModel.call(target, ",") || "none";
            // disabling closes the sweettip, so we need to track when we're closing
            // to avoid an infinite loop in case the sweettip becomes disabled on close
            // 设置不同tip类型和模式下默认的tipFloat属性
            if ("normal" === type || "error" === type && "none" === model) {
                this.options.tipFloat = true;
            } else if ("error" === type && "side" === model) {
                this.options.tipFloat = false;
            }

            // 添加tipFloat属性，控制提示框是否浮动
            if (!this.options.tipFloat) {
                //如果tip为true且有校验报红,在这种场景下此处将closing置为true,则在下面判断为true直接return,导致tips提示关不掉
                //解决方案:如果非tipFloat时,则提示出直接return保持显示,不应将closing置为true
                removeDescribedBy(target, this);
                if (!this.tipChange) {
                    addInputRedBoder(target, that);
                }
                return;
            }
            if (this.closing) {
                return;
            }

            // Clear the interval for delayed tracking sweettips
            clearInterval(this.delayedShow);

            // only set title if we had one before and title is not changed manually (see comment in _open())
            if (target.data("ui-sweettip-title") && $.isNull(target.attr("title"))) {
                target.attr("title", target.data("ui-sweettip-title"));
            }

            removeDescribedBy(target, this);

            sweettip.stop(true);
            this._hide(sweettip, this.options.hide, function() {
                that._removesweettip($(this));
            });

            target.removeData("ui-sweettip-open");
            this._off(target, "mouseleave focusout keyup");
            // Remove 'remove' binding only on delegated targets
            if (target[0] !== this.element[0]) {
                this._off(target, "remove");
            }
            this._off(this.document, "mousemove");

            if (event && event.type === "mouseleave") {
                $.each(this.parents, function(id, parent) {
                    $(parent.element).attr("title", parent.title);
                    delete that.parents[id];
                });
            }

            this.closing = true;
            this._trigger("close", event, {
                sweettip: sweettip
            });
            this.closing = false;
        },
        _sweettip: function(element) {
            var id = "ui-sweettip-" + increments++,
                sweettip = $("<div>")
                    .attr({
                    id: id,
                    role: "sweettip"
                }),
                model = this.options.getAttrErrorModel.call(element, ",") || "none",
                type = this.options.getAttrTipType.call(element, ",") || this.options.tipType;
            // 采用side方式提示，追加到目标元素之后
            if ("error" === type && modelSide === model) {
                sweettip.insertAfter(this.element.parent().parent().parent());
            } else {
                sweettip.appendTo(this.document[0].body);
            }
            if ("normal" === type) {
                sweettip.addClass("sweet-tips-tipBox" + (this.options.sweettipClass || ""));
                $("<div>")
                    .addClass("sweet-tip-content sweet-tip-content-normal")
                    .appendTo(sweettip);
            } else if ("error" === type) {
                if ("none" === model) {
                    sweettip.addClass("sweet-tips-errorBox" + (this.options.sweettipClass || ""));
                    var tipContent0 = $("<div>").appendTo(sweettip),
                        imageDiv0 = $("<div>").addClass("sweet-tips-errorImage").appendTo(tipContent0),
                        textDiv0 = $("<div>").addClass("sweet-tip-content sweet-tip-content-error")
                            .appendTo(tipContent0);
                    addInputRedBoder(element, this);
                } else if ("side" === model) {
                    sweettip.addClass("sweet-tips-errorBox-side" + (this.options.sweettipClass || ""));
                    var tipContent = $("<div>").appendTo(sweettip),
                        imageDiv = $("<div>").addClass("sweet-tips-errorImage-side").appendTo(tipContent),
                        textDiv = $("<div>").addClass("sweet-tip-content sweet-tip-content-error")
                            .appendTo(tipContent);
                    addInputRedBoder(element, this);
                    this.options.tipFloat = false;
                    // 下拉框、日期组件的提示在距离上离得宽一些
                    if ((element.hasClass("sweet-form-combobox-element") || element.hasClass("sweet-form-comboboxv1-input")) || (element.hasClass("sweet-form-input-text") && element.parent().attr("class").indexOf("sweet-form-input-date") >= 0)) {
                        this.options.position = {
                            my: "left+43 top+15",
                            at: "right+10 top-17",
                            collision: "flipfit flip"
                        };
                    } else {
                        this.options.position = {
                            my: "left+10 top+15",
                            at: "right+10 top-17",
                            collision: "flipfit flip"
                        };
                    }

                }

            }

            this.sweettips[id] = element;
            return sweettip;
        },
        _find: function(target) {
            var id = target.data("ui-sweettip-id");
            return id ? $("#" + id) : $();
        },
        _removesweettip: function(sweettip) {
            sweettip.remove();
            delete this.sweettips[sweettip.attr("id")];
        },
        _destroy: function() {
            var that = this;
            // 解决tipModel为“none”时，红色边框不能去掉的问题
            removeInputRedBoder(that.element, that);
            // close open sweettips
            $.each(this.sweettips, function(id, element) {
                // Delegate to close method to handle common cleanup
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, true);

                // Remove immediately; destroying an open sweettip doesn't use the
                // hide animation
                $("#" + id).remove();
                //去掉文本框上的红色边框
                removeInputRedBoder(element, that);
                // Restore the title
                if (element.data("ui-sweettip-title")) {
                    //注释掉了，去掉html自带的提示
                    element.removeData("ui-sweettip-title");
                }
                element.removeAttr("title");
            });
        }
    });

}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 为jQuery扩展简单拖拽功能
 * 2013.2.18
 * http://www.huawei.com
 * Huawei Technologies Co., Ltd. Copyright 1988-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

/**
 * 为jQuery扩展简单拖拽功能
 * @name jquery.sweetdrag
 * @class 
 * @requires 
 * <pre>
 * jquery-1.9.1.min.js
 * </pre>
 * @example 
 * <pre>
 * //执行相应动作时的回调函数
 * var startFun = function(){};
 * var endFun = function(){};
 * var moveFun = function(){};
 * $("div").sweetDrag(startFun, endFun, moveFun);
 * </pre>
 */

/**
 * 启动拖拽功能
 * @param {Function} startFn 启动拖动时的回调函数
 * @param {Function} endFn 结束拖动时的回调函数
 * @param {Function} moveFn 拖动中的回调函数
 * @example
 * $("div").sweetDrag();
 */
jQuery.fn.sweetDrag = function(startFn, endFn, moveFn) {
    'use strict';

    var M = false;
    var Rx, Ry;
    var t = $(this);
    var offsetX = 0;
    var offsetY = 0;

    // 按下鼠标左键，开始拖动
    t.mousedown(function(event) {

        // 执行回调函数
        var ret = true;
        if ($.isFunction(startFn)) {
            ret = startFn(event);
        }

        // 如果回调函数返回false，取消拖动
        if (ret === false) {
            return;
        }

        Rx = event.pageX - (parseInt(t.css("left"), 10) || 0);
        Ry = event.pageY - (parseInt(t.css("top"), 10) || 0);
        M = true;

        // 如果回调函数返回null，取消默认操作
        if (ret !== null) {
            t.css("position", "absolute");
        }
    });

    // 释放鼠标，停止拖动
    function mouseUp(event) {
        M = false;
        t.css('cursor', 'default');

        if ($.isFunction(startFn)) {
            endFn(event);
        }
    }

    // 同时在当前对象和文档对象上监听鼠标释放事件，保证可以停止拖动
    t.mouseup(mouseUp);
    $(document).mouseup(mouseUp);

    // 在文档对象上监听鼠标移动事件，同时移动当前对象
    $(document).mousemove(function(event) {
        if (M) {
            event.preventDefault();

            offsetX = event.pageX - Rx;
            offsetY = event.pageY - Ry;

            // 如果回调函数返回false，禁止缺省处理
            if ($.isFunction(moveFn) && moveFn(event, offsetX, offsetY) === false) {
                return false;
            }

            t.css('cursor', 'move');
            t.css({
                top: offsetY,
                left: offsetX
            });

            return false;
        }
    });
};;
/**
 * @fileOverview
 * <pre>
 * 为jQuery扩展的一些常用功能，使用方法与使用jquery的方法一致
 * 2013.3.19
 * http://www.huawei.com
 * Huawei Technologies Co., Ltd. Copyright 1988-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($) {
    'use strict';

    /**
     * 设置、获取外部宽度，包括margin/border/padding
     * @param width
     * @return {*}
     */
    jQuery.fn.externalWidth = function(width) {
        var obj = this;

        // 如果输入参数为空，返回当前宽度
        if ($.isNull(width)) {
            return obj.outerWidth(true);
        }

        // 如果输入参数为数字，直接设置
        if (typeof width === "number") {
            obj.outerWidth(width, true);
            return obj;
        }

        // 如果输入参数是auto，设置为auto
        if (width === "auto") {
            obj.width(width);
            return obj;
        }

        // 如果输入参数是百分比，计算实际值
        if (typeof width === 'string' && /\d+%/.test(width)) {
            // 如果没有margin/border/padding，不需要计算绝对值，使用百分比即可
            if (obj.outerWidth(true) - obj.width() === 0) {
                obj.width(width);
            } else {
                try {
                    var r = parseInt(width, 10);
                    obj.outerWidth(obj.parent().width() * r / 100, true);
                } catch (e) {
                    $.log(e);
                }
            }
            return obj;
        }

        // 最终返回obj，避免异常
        return obj;
    };

    /**
     * 设置、获取外部高度，包括margin/border/padding
     * @param height
     * @return {*}
     */
    jQuery.fn.externalHeight = function(height) {
        var obj = this;

        // 如果输入参数为空，返回当前高度
        if ($.isNull(height)) {
            return obj.outerHeight(true);
        }

        // 如果输入参数为数字，直接设置
        if (typeof height === "number") {
            obj.outerHeight(height, true);
            return obj;
        }

        // 如果输入参数是auto，设置为auto
        if (height === "auto") {
            obj.height(height);
            return obj;
        }

        // 如果输入参数是百分比，计算实际值
        if (typeof height === 'string' && /\d+%/.test(height)) {
            // 如果没有margin/border/padding，不需要计算绝对值，使用百分比即可
            if (obj.outerHeight() - obj.height() === 0) {
                obj.height(height);
            } else {
                try {
                    var r = parseInt(height, 10);
                    obj.outerHeight(obj.parent().height() * r / 100, true);
                } catch (e) {
                    $.log(e);
                }
            }

            return obj;
        }

        // 最终返回obj，避免异常
        return obj;
    };

    // 记录需要监控尺寸变化的对象列表
    var resizeObjects = [];
    // 监控开关
    var monitor = false;
    var monitorId = "jquery.sweetutil.obj_size_monitor";

    /**
     * @private
     * 页面不活动的情况下，监控尺寸的活动只持续5秒，超过则停止检查，减少CPU占用
     */
    function _enableSizeMonitor() {
        monitor = true;
        Sweet.Task.Delay.start({
            id: monitorId,
            run: function() {
                monitor = false;
            },
            delay: 5000
        });
    }

    // 页面加载后5秒钟内允许监控
    $(function() {
        $("body").bind("mousedown mouseup keydown", function() {
            _enableSizeMonitor();
        });
        $(window).resize(function() {
            _enableSizeMonitor();
        });

        _enableSizeMonitor();
    });

    /**
     * 扩展resize方法
     * @type {function}
     */
    $.fn.onResize = function(fn) {
        // 立即启动监控
        _enableSizeMonitor();

        var temp,
        a,
        b;
        for (var i = 0; i < resizeObjects.length; i++) {
            temp = resizeObjects[i].obj;
            a = temp[0];
            b = this[0];
            //原来对象直接比较相等是不可能的，所以比较他们的id
            if (a && b && a.id === b.id) {
                if ($.isNull(fn)) {
                    resizeObjects.splice(i, 1);
                    i--;
                } else {
                    resizeObjects[i].handler = fn;
                }
                return;
            }
        }

        var size = {
            width: this.width(),
            height: this.height()
        };
        resizeObjects.push({
            obj: this,
            handler: fn,
            size: size
        });
    };

    /**
     * 每隔100毫秒，检查登记resize事件的Dom，如果大小发生变化，调用登记的回调函数
     */
    window.setInterval(function() {
        if (!monitor) {
            return;
        }
        var handlers = [];
        $.each(resizeObjects, function(index, item) {
            if (item.obj.is(":hidden")) {
                return;
            }

            if (item.obj.width() !== item.size.width || item.obj.height() !== item.size.height) {
                // 如果有刷新，延长监控时间
                _enableSizeMonitor();

                // 记录新大小
                item.size.width = item.obj.width();
                item.size.height = item.obj.height();

                if ($.isFunction(item.handler)) {
                    handlers.push(item);
                }
            }
        });
        var temp;
        for (var i = 0; i < handlers.length; i++) {
            temp = handlers[i];
            temp.handler(temp.obj);
        }
    }, 100);

    /* 鼠标滚轮事件的处理 */
    var _mouseWheelListeners = [];

    /**
     * 鼠标滚动事件的处理
     * @param event
     */
    function wheel(event) {
        var delta = 0;
        var data, obj, callback, element;

        if (!event) {
            /* For IE. */
            event = window.event;
        }

        if (event.wheelDelta) {
            /* IE/Opera. */
            delta = event.wheelDelta / 120;
        } else if (event.detail) {
            /**
             * Mozilla case.
             * In Mozilla, sign of delta is different than in IE.
             * Also, delta is multiple of 3.
             */
            delta = -event.detail / 3;
        }

        /**
         * If delta is nonzero, handle it.
         * Basically, delta is now positive if wheel was scrolled up,
         * and negative, if wheel was scrolled down.
         */
        if (delta) {
            for (var i = 0; i < _mouseWheelListeners.length; i++) {
                obj = _mouseWheelListeners[i].obj;
                callback = _mouseWheelListeners[i].callback;

                // 检查事件来源，只处理当前元素的事件
                element = event.originalTarget || event.srcElement;
                if (element && element.id !== obj.attr('id') && !$.contains(obj.get(0), element)) {
                    continue;
                }

                // 执行注册的回调函数
                if ($.isFunction(callback)) {
                    data = {
                        ui: obj,
                        delta: delta
                    };

                    // 如果回调函数返回false，禁止事件冒泡
                    if (callback(event, data) === false) {
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        event.returnValue = false;
                    }
                }
            }
        }
    }

    /**
     * 向Window对象注册滚轮事件
     */
    function startWheelListener() {
        // 鼠标滚轮事件
        if (window.addEventListener) {
            /** DOMMouseScroll is for mozilla. */
            window.addEventListener('DOMMouseScroll', wheel, false);
        } else {
            /** IE/Opera. */
            window.onmousewheel = wheel;
        }
    }

    // 启动监听
    startWheelListener();

    /**
     * 为指定元素增加鼠标滚轮事件
     * @param obj
     * @param callback
     */
    jQuery.fn.onMouseWheel = function(obj, callback) {
        // 检查是否重复
        for (var i = 0; i < _mouseWheelListeners.length; i++) {
            if ($(obj).attr("id") === _mouseWheelListeners[i].obj.attr("id")) {
                // 如果callback没有指定，删除监听。否则更新callback
                if (typeof callback === 'undefined') {
                    _mouseWheelListeners.splice(i, 1);
                } else {
                    _mouseWheelListeners[i].callback = callback;
                }
                return this;
            }
        }

        // 新注册
        _mouseWheelListeners.push({
            obj: $(obj),
            callback: callback
        });

        obj.onmousewheel = wheel;
        return this;
    };

    /**
     * 为Div增加自定义滚动功能
     * 要求容器内容全部放在一个div中，此div类名包含sweet-scroll-content（可自定义）
     * @param dir
     * @param opt
     * @returns {*}
     */
    jQuery.fn.scrollPanel = function(dir, opt) {
        var me = this;
        var baseOffset = 5;
        var minBarSize = 10;

        var width = this.width();
        var height = this.height();
        var contentWidth;
        var contentHeight;
        var barSize;
        var obj;
        var dragging = false;
        var VERTICAL = "vertical",
            HORIZON = "horizon",
            BOTH = "both";

        var config = {
            thick: 6,
            radius: 3,
            color: '#7E838B',
            opacity: 0.5,
            contentClass: "sweet-scroll-content"
        };

        $.extend(config, opt);

        // 修正样式
        var position = this.css("position");
        if (position !== 'absolute' && position !== "relative") {
            this.css("position", "relative");
        }
        this.css("overflow", "hidden");

        /**
         * 根据类名，获取内容Div
         * @returns {*}
         */
        function getContent() {
            var child = me.find(">." + config.contentClass);
            if (child.length > 0) {
                return child.first();
            } else {
                return me.children().first();
            }
        }

        /**
         * 拖动滚动条滚动开始事件的处理
         * @param scrollDir
         */
        function startScroll(scrollDir) {
            if (scrollDir === VERTICAL) {
                me.__verticalScrollBar.css("opacity", 1);
            } else if (scrollDir === HORIZON) {
                me.__horizonScrollBar.css("opacity", 1);
            }

            dragging = true;
        }

        /**
         * 拖动滚动条滚动结束事件的处理
         * @param scrollDir
         */
        function endScroll(scrollDir) {
            if (scrollDir === VERTICAL) {
                me.__verticalScrollBar.css("opacity", config.opacity);
            } else if (scrollDir === HORIZON) {
                me.__horizonScrollBar.css("opacity", config.opacity);
            }

            dragging = false;
        }

        /**
         * 按指定偏移，移动滚动条和内容Div
         * @param left
         * @param top
         * @returns {boolean}
         */
        function scroll(left, top) {
            var ret = false;
            contentWidth = getContent().externalWidth();
            contentHeight = getContent().externalHeight();
            width = me.width();
            height = me.height();

            // 垂直方向
            if ($.isNumeric(top) && me.__verticalScrollBar && contentHeight > height) {
                // 防止滚动超出范围
                if (top < baseOffset) {
                    top = baseOffset;
                }

                var maxTop = me.height() - baseOffset - me.__verticalScrollBar.outerHeight(true);
                if (top > maxTop) {
                    top = maxTop;
                }

                // 判断是否需要滚动
                var oldTop = parseInt(me.__verticalScrollBar.css("top"), 10) || 0;
                if (top !== oldTop) {
                    me.__verticalScrollBar.css("top", top);

                    // 滚动内容div
                    top = Math.ceil(((top - baseOffset) / (maxTop - baseOffset)) * (contentHeight - height));
                    getContent().css("top", 0 - top);

                    ret = true;
                }
            }

            // 水平方向
            if ($.isNumeric(left) && me.__horizonScrollBar) {
                // 防止滚动超出范围
                if (left < baseOffset) {
                    left = baseOffset;
                }

                var maxLeft = me.width() - baseOffset - me.__horizonScrollBar.outerWidth(true);
                if (left > maxLeft) {
                    left = maxLeft;
                }

                // 判断是否需要滚动
                var oldLeft = parseInt(me.__horizonScrollBar.css("top"), 10) || 0;
                if (left !== oldLeft) {
                    me.__horizonScrollBar.css("left", left);

                    // 滚动内容div
                    left = Math.ceil(((left - baseOffset) / (maxLeft - baseOffset)) * (contentWidth - width));
                    getContent().css("left", 0 - left);

                    ret = true;
                }
            }

            return ret;
        }

        /**
         * 创建滚动条div
         * @param {String} dir 方向
         */
        function createScoller(dir) {
            var width, height;
            var right = null,
                bottom = null,
                top = null,
                left = null;
            var scroller;

            // 创建div
            if (dir === VERTICAL && !me.__verticalScrollBar) {
                width = config.thick;
                height = 0;
                right = 3;
                top = baseOffset;
                scroller = me.__verticalScrollBar = $("<div>");
            } else if (dir === HORIZON && !me.__horizonScrollBar) {
                width = 0;
                height = config.thick;
                bottom = 3;
                left = baseOffset;
                scroller = me.__horizonScrollBar = $("<div>");
            } else {
                return;
            }

            // 设置属性
            scroller.css("width", width)
                .css("border-radius", config.radius)
                .css("background-color", config.color)
                .css("opacity", config.opacity)
                .css("z-index", 10)
                .css("position", "absolute")
                .css("top", top)
                .css("right", right)
                .css("bottom", bottom)
                .css("left", left)
                .appendTo(me);

            // 拖动滚动条事件
            scroller.sweetDrag(

            function() {
                startScroll(dir);
            },

            function() {
                endScroll(dir);
            },

            function(event, offsetX, offsetY) {
                if (dir === VERTICAL) {
                    scroll(null, offsetY);
                } else {
                    scroll(offsetX, null);
                }
                return false;
            });

            // 悬停事件
            scroller.hover(function() {
                scroller.css("opacity", 1);
            }, function() {
                scroller.css("opacity", config.opacity);
            });
        }

        /**
         * 更新滚动条大小
         * @param {String} dir 方向
         */
        function updateScrollerSize(dir) {
            var width, height;
            var contentWidth, contentHeight;

            // 垂直滚动条
            if (dir === VERTICAL) {
                contentHeight = getContent().outerHeight(true);
                height = me.height();

                // 内容高度超出容器高度，显示滚动条；否则，隐藏滚动条
                if (contentHeight > height) {
                    barSize = Math.floor((height - baseOffset * 2) * height / contentHeight);
                    if (barSize < minBarSize && minBarSize < height) {
                        barSize = minBarSize;
                    }
                    me.__verticalScrollBar.outerHeight(barSize, true)
                        .show();
                } else {
                    me.__verticalScrollBar.hide();
                    getContent().css('top', 0);
                }

            }
            // 水平滚动条
            else if (dir === HORIZON) {
                contentWidth = getContent().outerWidth(true);
                width = me.width();

                // 内容宽度超出容器宽度，显示滚动条；否则，隐藏滚动条
                if (contentWidth > width) {
                    barSize = Math.floor((width - baseOffset * 2) * width / contentWidth);
                    if (barSize < minBarSize && minBarSize < width) {
                        barSize = minBarSize;
                    }
                    me.__horizonScrollBar.outerWidth(barSize, true)
                        .show();
                } else {
                    me.__horizonScrollBar.hide();
                    getContent().css('left', 0);
                }
            }
        }

        // 如果输入参数为空，隐藏滚动条
        if ($.type(dir) === 'undefined' || dir === null) {
            if (this.__verticalScrollBar instanceof $) {
                this.__verticalScrollBar.hide();
                scroll(null, -2000);
            }
            if (this.__horizonScrollBar instanceof $) {
                this.__horizonScrollBar.hide();
                scroll(-2000, null);
            }

            return this;
        }

        // 内容区域修改为绝对定位
        getContent().css("position", "absolute");

        // 垂直滚动条
        if (dir === VERTICAL || dir === BOTH) {
            // 创建垂直滚动条，并绑定事件
            if ($.type(this.__verticalScrollBar) === 'undefined') {
                createScoller(VERTICAL);

                // 鼠标滚轮事件（暂时只支持垂直方向）
                obj = this.get(0);
                this.onMouseWheel(obj, function(event, data) {
                    var delta = (parseInt(me.__verticalScrollBar.css("top"), 10) || 0) - data.delta * 10;
                    if (scroll(null, delta) === true) {
                        return false;
                    }
                });
            }

            // 刷新滚动条大小
            updateScrollerSize(VERTICAL);
        }

        // 水平滚动条
        if (dir === HORIZON || dir === BOTH) {
            // 创建水平滚动条，并绑定事件
            if ($.type(this.__horizonScrollBar) === 'undefined') {
                createScoller(HORIZON);
            }

            // 刷新滚动条大小
            updateScrollerSize(HORIZON);
        }

        return this;
    };
})(jQuery);;
/**
 * @fileOverview 扩展jquery工具类
 * @description 扩展jquery工具类, 使用方法与使用jquery的方法一致
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 扩展jquery的工具类,具体的方法，请查看上面的js源文件，下面的cookie, cursor, date, e, matrix, regExp都是类，方法需要在源js文件中查找
 * @name Sweet.util
 * @class 
 * @requires 
 * <pre>
 * jquery-1.9.1.min.js
 * </pre>
 * @example 
 * <pre>
 * $.error("出错了");
 * // string类的方法
 * $.string.toNumber("3422");
 * </pre>
 */

jQuery.extend( /**@lends Sweet.util.prototype*/ {
    /**
     * @description 日志打印
     * @param {String} msg 输出日志
     */
    log: function(msg) {
        if (!sweetDebug) {
            return;
        }
        if (window.console && window.console.log) {
            window.console.log(msg);
        }
    },
    /**
     * @description 错误日志打印
     * @param {String} msg 输出日志
     */
    error: function(msg) {
        if (!sweetDebug) {
            return;
        }
        if (window.console && window.console.error) {
            window.console.log("%c " + msg + " ", "background:#222;color:#bada55");
            window.console.error(msg);
        }
    },
    /**
     * @description 对象克隆
     * @param {Object} obj 源对象
     * @return {Object} 返回克隆对象
     */
    objClone: function(obj) {
        if ($.isNull(obj) || ($.isArray(obj) && 0 === obj.length)) {
            return obj;
        }
        var clone;
        if (Object === obj.constructor) {
            clone = new obj.constructor();
        } else {
            clone = new obj.constructor(obj.valueOf());
        }
        for (var key in obj) {
            if (clone[key] !== obj[key]) {
                if ("object" === typeof(obj[key])) {
                    clone[key] = $.objClone(obj[key]);
                } else {
                    clone[key] = obj[key];
                }
            }
        }
        return clone;
    },
    /**
     * @description 对象浅拷贝，不拷贝object和function
     * @param {Object} obj 源对象
     * @returns {Object} 对象的拷贝
     */
    objCopy: function(obj) {
        if ($.isNull(obj)) {
            return;
        }

        var copy = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (typeof obj[key] !== 'object' && !$.isFunction(obj[key])) {
                    copy[key] = obj[key];
                }
            }
        }
        return copy;
    },
    /**
     * @description 对象数组的多列排序
     * @param {Array} sorts 排序数组，格式为[{"name": , "order": , "dataType":}, ...]
     */
    objMultiSort: function(sorts) {
        return function(o1, o2) {
            var val1, val2, val = 0,
                sort;
            for (var i = 0; i < sorts.length; i++) {
                sort = sorts[i];
                val1 = o1[sort.name];
                val2 = o2[sort.name];
                if ("number" === sort.dataType) {
                    val1 = $.string.toNegativeInfinity(val1);
                    val2 = $.string.toNegativeInfinity(val2);
                }

                val = $._getCompareValue(val1, val2, sort.order);

                if (0 !== val) {
                    return val;
                }
            }

            return 0;
        };
    },
    /**
     * @description 对象数组比较器
     * @param {String} porpertyName 比较的属性名
     * @param {String} sortType 排序方式，ASC 升序，DESC 降序
     */
    objSort: function(porpertyName, sortType) {
        return function(obj1, obj2) {
            var val1 = obj1[porpertyName],
                val2 = obj2[porpertyName];
            return $._getCompareValue(val1, val2, sortType);
        };
    },
    /**
     * @description 对象数组比较器，处理数值类型比较，对非数值类型会做转换，再比较
     * @param {String} porpertyName 比较的属性名
     * @param {String} sortType 排序方式，ASC 升序，DESC 降序
     */
    objNumberSort: function(porpertyName, sortType) {
        return function(obj1, obj2) {
            var val1 = $.string.toNegativeInfinity(obj1[porpertyName]),
                val2 = $.string.toNegativeInfinity(obj2[porpertyName]);

            return $._getCompareValue(val1, val2, sortType);
        };
    },
    /**
     * @private
     * @description 获取排序比较结果
     * @param {String/Number} val1 值1
     * @param {String/Number} val2 值2
     * @param {String} sortType 排序方式，asc：升序 desc：降序
     */
    _getCompareValue: function(val1, val2, sortType) {
        var val = 0;
        if (val1 < val2) {
            val = 1;
        } else if (val1 > val2) {
            val = -1;
        } else {
            val = 0;
        }

        if (Sweet.constants.sortType.ASC === sortType) {
            return -val;
        } else if (Sweet.constants.sortType.DESC === sortType) {
            return val;
        } else {
            throw new Error("Do not support the type of sort!");
        }
    },
    /**
     * @description 元素是否可见，true：可见，false：不可见
     * @param {Object} obj 目标对象
     */
    isVisiable: function(obj) {
        return !obj.is(":hidden");
    },
    /**
     * @description 判断参数是否为空或未定义
     * @param {Object} obj 参数
     * @return {Boolean} true: 为空，false: 不为空
     */
    isNull: function(obj) {
        return (obj === undefined) || null === obj || ('' === obj);
    },
    /**
     * @description 判断参数是否为空或未定义
     * @param {Object} obj 参数
     * @return {Boolean} false: 为空，true: 不为空
     */
    isNotNull: function(obj) {
        if ($.isNull(obj)) {
            return false;
        }

        return true;
    },
    /**
     * @description 判断值是否String类型
     * @param {String} value 值
     * @return {Boolean} true: 是 false: 不是
     */
    isString: function(value) {
        return "string" === $.type(value);
    },
    /**
     * @description 判断值是否Boolean类型
     * @param {Boolean} value 值
     * @return {Boolean} true: 是 false: 不是
     */
    isBoolean: function(value) {
        return "boolean" === $.type(value);
    },
    /**
     * @description 判断值是否Date类型
     * @param {Object} value 值
     * @return {Boolean} true: 是 false: 不是
     */
    isDate: function(value) {
        return "date" === $.type(value);
    },
    /**
     * @description 判断值是否正则类型
     * @param {Object} value 值
     * @return {Boolean} true: 是 false: 不是
     */
    isRegExp: function(value) {
        return "regexp" === $.type(value);
    },
    /**
     * @description 判断值是否数值类型
     * @param {Object} value 值
     * @return {Boolean} true: 是 false: 不是
     */
    isNumber: function(value) {
        return "number" === $.type(value);
    },
    /**
     * @private
     * @description 判断值是否为undefined
     * @param {Object/String/Number/Array/Boolean} value 值
     * @return {Boolean} true：值为undefined，false：值不为undefined
     */
    isUndefined: function(value) {
        return undefined === value;
    },
    /**
     * @private
     * @description 判断值是否为空数组
     * @param {Object/String/Number/Array/Boolean} value 值
     * @return {Boolean} true：值为空数组，false：值不为空数组
     */
    isEmptyArray: function(value) {
        return $.isArray(value) && 0 === value.length;
    },
    /**
     * @description 判断参数是否为空或未定义
     * @param {Object} obj 参数
     * @return {String} null值返回空串，否则原值返回
     */
    nullToString: function(obj) {
        if (obj && typeof obj === "function") {
            return "";
        }

        if ($.isNull(obj)) {
            return "";
        }

        return obj;
    },
    /**
     * @description 比较两个对象是否相等
     * @param {Object} obj1 对象参数1
     * @param {Object} obj2 对象参数2
     * @return {Boolean} true: 相等 false: 不相等
     */
    equals: function(obj1, obj2) {
        // 是否同一个引用
        if (obj1 === obj2) {
            return true;
        }
        // 两个必须都是对象
        if (typeof(obj1) === "undefined" || obj1 === null || typeof(obj1) !== "object") {
            return false;
        }
        if (typeof(obj2) === "undefined" || obj2 === null || typeof(obj2) !== "object") {
            return false;
        }
        var length1 = 0,
            length2 = 0;
        // 比较属性个数是否相等
        for (var ele1 in obj1) {
            length1++;
        }
        for (var ele2 in obj2) {
            length2++;
        }
        if (length1 !== length2) {
            return false;
        }
        if (obj1.constructor === obj2.constructor) {
            for (var ele in obj1) {
                if (typeof(obj1[ele]) === "object") {
                    if (!$.equals(obj1[ele], (obj2[ele]))) {
                        return false;
                    }
                } else if (typeof(obj1[ele]) === "function") {
                    if (!$.equals(obj1[ele].toString(), (obj2[ele].toString()))) {
                        return false;
                    }
                } else if (obj1[ele] !== obj2[ele]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    },
    /**
     * @description 字符串工具函数
     */
    string: {
        /**
         * 字符串左补齐
         * @param {String/Number} value 待补齐值
         * @param {Number} length 总长度
         * @param {String/Number} padString 填充内容
         * @examples $.string.lpad("1", 3, "0")，执行后返回“001”
         */
        lpad: function(value, length, padString) {
            if ($.isNull(value)) {
                $.error("lpad() The input parameter is null.");
                return;
            }
            if ("string" === $.type(value) || "number" === $.type(value)) {
                var temp = value.toString(),
                    tempLength = temp.length,
                    sub;
                if (tempLength >= length) {
                    return value;
                }
                sub = length - tempLength;
                for (var i = 0; i < sub; i++) {
                    temp = padString + temp;
                }
                return temp;
            }
        },
        /**
         * @description 字符串转数值，如果不能正常转换，返回负无穷大
         * @param {String} value 值
         * @return {Number} 返回转换后的数值
         */
        toNegativeInfinity: function(value) {
            if ($.isNumber(value)) {
                return value;
            }

            var temp = parseFloat(value);
            if (0 !== temp && isNaN(temp)) {
                temp = Number.NEGATIVE_INFINITY;
            }

            return temp;
        },
        /**
         * 转换成整型数值
         * @param {String} value 以字符串型形式表示的数值
         */
        toNumber: function(value) {
            if ($.isNull(value)) {
                $.error("toNumber() The input parameter is null.");
                return;
            }
            var radix = 10;
            if ("string" === $.type(value)) {
                if (!$.isNumeric(value)) {
                    $.error("toNumber() The input parameter 'value' is not a number. value=" + value);
                    return value;
                }
                // 以0开头
                if (-1 !== value.indexOf("0")) {
                    // 截去前缀0
                    var i;
                    for (i = 0; i < value.length; i++) {
                        if ("0" !== value.charAt(i)) {
                            break;
                        }
                    }
                    if (i !== value.length) {
                        return parseInt(value.substr(i), radix);
                    }
                }
                return parseInt(value, radix);
            }
            return value;
        },
        /**
         * @description 将形式url后拼接的参数转换成json，例如a=1&b=2
         * @param {String} s 字符串
         */
        urlParamToJson: function(s) {
            if ($.isNull(s)) {
                $.error("Function urlParamToJson(): The input arg is null.");
                return;
            }
            var arr,
            tempArr,
            obj = {};
            arr = s.split("&");
            for (var i = 0; i < arr.length; i++) {
                tempArr = arr[i].split("=");
                obj[tempArr[0]] = tempArr[1];
            }

            return obj;
        },
        /**
         * @description 将字符串校正为有意义的数字字符串，例如"01.20"校正为"1.2"
         * @param {String} s 字符串
         */
        reviseNumber: function(s) {
            var result = "";
            // 为空返回空字符
            if ($.isNull(s)) {
                $.error("Function reviseNumber(): the input arg is null.");
                return result;
            }
            // 非数字
            if (!$.isNumeric(s)) {
                $.error("Function reviseNumber(): the input parameter 'value' is not a number. value=" + s);
                return s;
            }
            // 判断是否带有负号
            var str = s;
            var isNegative = false;
            if ("-" === s[0]) {
                str = s.slice(1);
                isNegative = true;
            }
            // 判断是否为浮点数
            var decimalSeparator = ".";
            var indexDecimal = str.indexOf(decimalSeparator);
            // 获取第一个和最后一个非0字符的下标
            var firstNoZero = -1;
            var lastNoZero = -1;
            for (var i = 0; i < str.length; i++) {
                if ("0" !== str[i] && firstNoZero < 0) {
                    firstNoZero = i;
                }
                if ("0" !== str[str.length - 1 - i] && lastNoZero < 0) {
                    lastNoZero = str.length - 1 - i;
                }
            }
            if (firstNoZero > lastNoZero) {
                $.error("A no-specific error!");
                return result;
            }
            //  去除没有意义的0
            if (indexDecimal > -1) {
                if (firstNoZero > indexDecimal || lastNoZero < indexDecimal) {
                    $.error("A no-specific error!");
                    return result;
                }
                // 浮点数
                if (firstNoZero === indexDecimal && lastNoZero === indexDecimal) {
                    result = "0";
                } else if (firstNoZero === indexDecimal && lastNoZero !== indexDecimal) {
                    result = str.slice(firstNoZero - 1, lastNoZero + 1);
                } else if (firstNoZero !== indexDecimal && lastNoZero === indexDecimal) {
                    result = str.slice(firstNoZero, lastNoZero);
                } else {
                    result = str.slice(firstNoZero, lastNoZero + 1);
                }
            } else {
                // 整数
                result = str.slice(firstNoZero);
            }
            // 还原负号
            return isNegative ? "-" + result : result;
        }
    },
    /**
     * @description 日期工具函数
     */
    date: {
        /**
         * @description 获取UTC格式的从1970.1.1 0:00以来的毫秒数
         * @return {String} 毫秒数
         */
        getMilliseconds: function() {
            var date = new Date();
            return date.getTime();
        },
        /**
         * @descripition 日期格式化
         * @param {Object} date 日期对象
         * @param {String} format 格式
         * @return 格式化后日期字符串
         */
        format: function(date, format) {
            var str = format;

            str = str.replace(/yyyy|YYYY/, date.getFullYear());
            str = str.replace(/yy|YY/, (date.getYear() % 100) > 9 ? (date.getYear() % 100).toString() :
                '0' + (date.getYear() % 100));

            str = str.replace(/MM/, date.getMonth() >= 9 ? (date.getMonth() + 1).toString() :
                '0' + (date.getMonth() + 1));
            str = str.replace(/M/g, date.getMonth() + 1);

            str = str.replace(/w|W/g, Sweet.core.i18n.week[date.getDay()]);

            str = str.replace(/dd|DD/, date.getDate() > 9 ? date.getDate().toString() : '0' + date.getDate());
            str = str.replace(/d|D/g, date.getDate());

            str = str.replace(/hh|HH/, date.getHours() > 9 ? date.getHours().toString() : '0' + date.getHours());
            str = str.replace(/h|H/g, date.getHours());

            str = str.replace(/mm/, date.getMinutes() > 9 ? date.getMinutes().toString() : '0' + date.getMinutes());
            str = str.replace(/m/g, date.getMinutes());

            str = str.replace(/ss|SS/, date.getSeconds() > 9 ? date.getSeconds().toString() : '0' + date.getSeconds());
            str = str.replace(/s|S/g, date.getSeconds());

            return str;
        },
        /**
         * @private
         * @description 获取本地机器相对于UTC事件的偏移量，单位秒
         */
        getLocalOffset: function() {
            var date = new Date();
            return date.getTimezoneOffset() * 60;
        },
        /**
         * @description 毫秒转换成日期
         * @param {Number} milliseconds 毫秒数
         * @param {String} format 日期格式，默认“年-月-日 时:分:秒”
         * @return 转换后日期字符串
         */
        millisecondsToDate: function(milliseconds, format) {
            if ("number" !== typeof milliseconds) {
                $.log("millisecondsToDate(): The input parameter 'milliseconds' is not a number! milliseconds=" + milliseconds);
                return;
            }

            if ($.isNull(format)) {
                format = "YYYY-MM-dd HH:mm:ss";
            }

            return this.format(new Date(milliseconds), format);
        },
        /**
         * @description 转换UTC时间
         * @param {String} strTime 日期字符串，格式为 年/月/日 时:分:秒
         * @param {Number} timeZone 时区
         * @return {number}返回utc秒数
         */
        dateToUTC: function(strTime, timeZone) {
            if ($.isNull(timeZone)) {
                timeZone = -new Date().getTimezoneOffset() / 60;
            }
            if ("string" !== typeof strTime) {
                $.log("Function dateToUTC(): The input parameter 'date' is not a string! date=" + strTime);
                return;
            }
            if ("number" !== typeof timeZone) {
                $.log("Function dateToUTC(): The input parameter 'timeZone' is not a number! timeZone=" + timeZone);
                return;
            }

            var resultTime,
            localOffset,
            custTimeZone = -new Date().getTimezoneOffset() / 60,
                strTimeData = strTime.split(" "),
                strDateData = strTimeData[0].split("/"),
                strYear = strDateData[0],
                strMonth = strDateData[1] - 1,
                strDay = strDateData[2],
                strTimeData1 = !strTimeData[1] ? ["00", "00", "00"] : strTimeData[1].split(":"),
                strHour = !strTimeData1[0] ? "00" : strTimeData1[0],
                strMinute = !strTimeData1[1] ? "00" : strTimeData1[1],
                strSecond = !strTimeData1[2] ? "00" : strTimeData1[2];
            var pDate = new Date(strYear, strMonth, strDay, strHour, strMinute, strSecond, 0);

            if (!isNaN(pDate)) {
                custTimeZone = -pDate.getTimezoneOffset() / 60;
                resultTime = pDate.getTime() - 3600 * 1000 * (timeZone - custTimeZone);
                resultTime = resultTime / 1000;
                resultTime = Math.floor(resultTime);
                if ($.isNull(resultTime)) {
                    return 0;
                } else {
                    return resultTime;
                }
            } else {
                return 0;
            }
        },
        /**
         * @description UTC时间转换为本地时间
         * @param {Number} value utc时间秒数
         */
        UTCToDate: function(value) {
            // 为空判断
            if ($.isNull(value)) {
                $.error("Function UTCToDate(): The input args is null.");
                return;
            }

            var date = new Date();
            date.setTime(value * 1000);
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            if ((String(month)).length < 2) {
                month = "0" + month;
            }
            var day = date.getDate();
            if ((String(day)).length < 2) {
                day = "0" + day;
            }
            var hour = date.getHours();
            if ((String(hour)).length < 2) {
                hour = "0" + hour;
            }
            var minute = date.getMinutes();
            if ((String(minute)).length < 2) {
                minute = "0" + minute;
            }
            var second = date.getSeconds();
            if ((String(second)).length < 2) {
                second = "0" + second;
            }

            return year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second;
        },
        /**
         * @description 判断是否闰年
         * @param {Number} year 年
         */
        isLeapYear: function(year) {
            if (!$.isNumeric(year)) {
                $.error("Function isLeapYear(): The input parameter 'year' is not a number! year=" + year);
                return false;
            }
            if ("number" !== typeof year) {
                year = parseInt(year, 10);
            }
            // 判断是否闰年
            if (((0 === year % 4) && (0 !== year % 100)) || (0 === year % 400)) {
                return true;
            }
            return false;
        },
        /**
         * @description 时间向后规整,目前支持15分钟，1小时，1天三个粒度时间规整，可用根据实际扩展
         * @param {Number} utc :要规整的UTC时间，单位：秒
         * @param {Number} currentUtc :当前服务器UTC秒数，若设置的时间超出当前时间则向前规整,为空的话默认采用客户端当前时间
         * @param {Number} intervalSeconds :规整粒度的秒数
         * @param {Number} timeZone:时区
         * @return {Number} 返回规整后的UTC时间，单位：秒
         */
        setDateAfterOrder: function(intervalSeconds, utc, currentUtc, timeZone) {
            var tempUtc = utc,
                timeOffset,
                secDifference,
                intervalKey = parseInt(intervalSeconds, 10),
                custmerTodayUtc = new Date().getTime() / 1000,
                custermorTimezone = -new Date(currentUtc * 1000).getTimezoneOffset() / 60,
                todayUTC = $.isNotNull(currentUtc) ? currentUtc : custmerTodayUtc;

            timeZone ? timeZone : (timeZone = custermorTimezone);
            timeOffset = timeZone * 3600;
            (tempUtc >= currentUtc) ? (tempUtc = currentUtc) : "";

            if ($.isNotNull(intervalKey)) {
                secDifference = (tempUtc + timeOffset) % intervalKey;

                if (0 < secDifference) {
                    tempUtc = ((tempUtc - secDifference) / intervalKey + 1) * intervalKey;
                    while (tempUtc > todayUTC) {
                        tempUtc = tempUtc - intervalKey;
                    }
                }
            }

            return tempUtc;
        },

        /**
         * @description 开始时间、结束时间规整函数
         * @param {Number} cycle 时间粒度秒数
         * @param {Number} startTimeUtc 开始时间的utc秒数
         * @param {Number} endTimeUtc 结束时间的utc秒数
         * @param {Number} currentUtc 当前时间的utc秒数
         * @param {Number} timezone:时区
         * @return {Object} 返回规整后开始、结束时间，格式为{"start": startTime, "end": endTime}
         */
        setTimeAlignment: function(cycle, startTimeUtc, endTimeUtc, currentUtc, timezone) {
            var _startTime = $.date.setDateAfterOrder(cycle, startTimeUtc, currentUtc, timezone),
                _endTime = $.date.setDateAfterOrder(cycle, endTimeUtc, currentUtc, timezone);

            if (_startTime === _endTime) {
                _startTime = _startTime - cycle;
            }

            return {
                "start": _startTime,
                "end": _endTime
            };
        },

        /**
         * @description 时间向后规整,目前支持15分钟，1小时，1天三个粒度时间规整，可用根据实际扩展
         * @param {Number} utc :要规整的时间，单位：秒
         * @param {Number} granularity :规整粒度的秒数
         * @return {Number} 返回规整后的时间，单位：秒
         */
        fixTime: function(granularity, utc) {
            if ($.isNull(utc) || $.isNull(granularity) || parseInt(granularity, 10) === 0) {
                $.log("Granularity Error value:" + granularity);
                return utc;
            }
            var timeZoneVar = new Date();
            var timeOffset = timeZoneVar.getTimezoneOffset() * 60;
            var localTime = parseInt(utc, 10) - timeOffset; //转成本地时间
            var mod = localTime % parseInt(granularity, 10);
            var restime = localTime - mod + parseInt(granularity, 10);
            restime = restime + timeOffset; //规整后转为UTC
            return restime;
        },
        /**
         * @description 把UTC时间规整为当地时间，根据granularity和period决定规整成时间、日期+时间、月+日期+时间、或者年+月+日+时间
         * @value utc时间
         * @granularity 时间粒度
         * @period  数据的周期
         */
        UTCToDateTime: function(value, granularity, period) {
            // 为空判断
            if ($.isNull(value)) {
                $.error("Function UTCToDateTime(): The input args is null.");
                return;
            }
            var date = new Date();
            date.setTime(value * 1000);
            var month = date.getMonth() + 1;
            month = month < 10 ? "0" + month : month;
            var day = date.getDate();
            day = day < 10 ? "0" + day : day;
            var hour = date.getHours();
            hour = hour < 10 ? "0" + hour : hour;
            var minute = date.getMinutes();
            minute = minute < 10 ? "0" + minute : minute;
            if ($.isNull(granularity) || $.isNull(period)) {
                return hour + ":" + minute;
            }

            //Dashboard只支持：15分钟/小时/天(没有考虑跨天情况，需要优化)
            if (parseInt(granularity, 10) >= 86400) { //粒度天
                return month + "/" + day;
            } else if (parseInt(granularity, 10) >= 3600) { //粒度小时
                return month + "/" + day + " " + hour + ":" + minute;
            } else if (parseInt(granularity, 10) >= 900) { //粒度15分钟
                return hour + ":" + minute;
            }
        },
        /**
         * @description 比较日期大小。开始日期大返回1，相等返回0，开始日期小返回-1
         * @param {String} beginDate 开始日期，形如2013-08-02 12:07:58
         * @param {String} endDate 结束日期
         * @param {String} separator 日期分割符，默认"-"
         */
        compare: function(beginDate, endDate, separator) {
            var date1, date2, regExp, time1, time2;
            if ($.isNotNull(separator)) {
                regExp = new RegExp(separator, "g");
                date1 = new Date(beginDate.replace(regExp, "/"));
                date2 = new Date(endDate.replace(regExp, "/"));
            } else {
                date1 = new Date(beginDate);
                date2 = new Date(endDate);
            }

            time1 = date1.getTime();
            time2 = date2.getTime();
            if (time1 > time2) {
                return 1;
            } else if (time1 === time2) {
                return 0;
            } else {
                return -1;
            }
        },
        /**
         * @private
         * @description 获取指定年份的夏令时起始时间
         * @param {Number} year 年
         * @return {Array/null} 返回夏令时起始时间[year, month, day, hours, minutes, seconds],如果无夏令时则返回null
         */
        getSDstSwitchDate: function(year) {
            var me = this,
                firstDstDate = null,
                firstSwitch = 0,
                lastOffset = 99,
                newDate,
                tz;
            year = parseInt(year);
            if (isNaN(year)) {
                return firstDstDate;
            }
            if (year < 1000) {
                year += 1900;
            }
            for (var i = 0; i < 12; i++) {
                newDate = new Date(Date.UTC(year, i, 0, 0, 0, 0, 0));
                tz = -1 * newDate.getTimezoneOffset() / 60;
                if (tz > lastOffset) {
                    firstSwitch = i - 1;
                }
                lastOffset = tz;
            }
            firstDstDate = me._findDstSwitchDate(year, firstSwitch);
            return firstDstDate;
        },
        /**
         * @private
         * @description 内部获得夏令时函数处理
         * @param {Number} year 年
         * @param {Number} month 月
         */
        _findDstSwitchDate: function(year, month) {
            var me = this,
                baseDate = new Date(Date.UTC(year, month, 0, 0, 0, 0, 0)),
                changeMinute = -1,
                baseOffset = -1 * baseDate.getTimezoneOffset() / 60,
                dstDate,
                dstDay,
                tmpDate,
                tmpHours,
                tmpMinutes,
                tmpSeconds,
                tmpOffset,
                minutes = 0,
                tmpArray,
                days;
            for (var day = 0; day < 50; day++) {
                tmpDate = new Date(Date.UTC(year, month, day, 0, 0, 0, 0));
                tmpOffset = -1 * tmpDate.getTimezoneOffset() / 60;
                if (tmpOffset != baseOffset) {
                    minutes = 0;
                    tmpDate = new Date(Date.UTC(year, month, day - 1, 0, 0, 0, 0));
                    tmpOffset = -1 * tmpDate.getTimezoneOffset() / 60;
                    while (changeMinute == -1) {
                        tmpDate = new Date(Date.UTC(year, month, day - 1, 0, minutes, 0, 0));
                        tmpOffset = -1 * tmpDate.getTimezoneOffset() / 60;
                        if (tmpOffset != baseOffset) {
                            tmpOffset = new Date(Date.UTC(year, month, day - 1, 0, minutes - 1, 0, 0));
                            changeMinute = minutes;
                            break;
                        } else {
                            minutes++;
                        }
                    }
                    dstDate = tmpOffset.getMonth() + 1;
                    dstDay = tmpOffset.getDate();
                    tmpDate = new Date(Date.UTC(year, month, day - 1, 0, minutes - 1, 0, 0));
                    tmpArray = tmpDate.toTimeString().split(' ')[0].split(':');
                    tmpHours = parseInt(tmpArray[0]);
                    tmpMinutes = parseInt(tmpArray[1]);
                    tmpSeconds = parseInt(tmpArray[2]);
                    if (month == 1) {
                        if (me.isLeapYear(year)) {
                            days = 29;
                        } else {
                            days = 28;
                        }
                    } else if (month == 0 || month == 2 || month == 4 || month == 6 || month == 7 || month == 9 || month == 11) {
                        days = 31;
                    } else {
                        days = 30;
                    }
                    if ((tmpMinutes + 1) >= 60) {
                        tmpMinutes = 0;
                        tmpHours += 1;
                    }
                    if (tmpHours > 23) {
                        tmpHours = 0;
                        dstDay += 1;
                    }
                    if (dstDay > days) {
                        dstDay = 1;
                        month += 1;
                    }
                    if (month > 11) {
                        month = 0;
                        year += 1;
                    }
                    return [year, month, dstDay, tmpHours, tmpMinutes, tmpSeconds];
                }
            }
            return null;
        }
    },
    number: {
        /**
         * 修正小数精度
         * @param {Number} value 待修正值
         * @param {Number} precision 精度
         * @return {Number} 返回修正后值
         */
        fixPrecision: function(value, precision) {
            if (!$.isNumeric(value)) {
                $.log("Function fixPrecision(): The input parameter 'value' is not a number! value=" + value);
                return;
            }
            return parseFloat(parseFloat(value).toFixed(precision));
        },
        /**
         * 判断是否浮点数
         * @param {Number} value 浮点数值
         * @return {Boolean} true浮点数 false非浮点数
         */
        isFloat: function(value) {
            if (!$.isNumeric(value)) {
                $.log("Function isFloat(): The input parameter 'value' is not a number! value=" + value);
                return;
            }
            if ("string" === typeof value) {
                return -1 !== value.indexOf(".");
            }
            return value !== Math.round(value);
        },
        /**
         * @description 将数字转换为16进制表示
         * @param {String/Number} N : 范围是0 ~ 255
         * @returns {String}16进制字符串
         */
        toHex: function(N) {
            if ($.isNull(N)) {
                return "00";
            }

            N = parseInt(N, 10);

            if (0 === N || isNaN(N)) {
                return "00";
            }

            N = Math.max(0, N);
            N = Math.min(N, 255);
            N = Math.round(N);

            return "0123456789abcdef".charAt((N - N % 16) / 16) + "0123456789abcdef".charAt(N % 16);
        }
    },
    /**
     * 对event处理
     */
    e: {
        /**
         * 获取键盘ascii编码值
         * @param {Object} e 按键对象
         */
        getCharCode: function(e) {
            var event = e.browserEvent || e;
            return event.charCode || event.keyCode || 0;
        },
        /**
         * 获取所标位置
         * @param {Object} event 按键对象
         */
        getMousePosition: function(event) {
            var e = event || window.event,
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft,
                scrollY = document.documentElement.scrollTop || document.body.scrollTop,
                x = e.pageX || e.clientX + scrollX,
                y = e.pageY || e.clientY + scrollY;
            return {
                "x": x,
                "y": y
            };
        },
        /**
         * @description 只允许输入数字
         * @param {Object} event 事件对象
         */
        onlyNumber: function(event) {
            // 退格键、回车键、删除键、上下左右方向键，不做处理
            if (Sweet.constants.keyCode.BACKSPACE === event.keyCode || Sweet.constants.keyCode.ENTER === event.keyCode || Sweet.constants.keyCode.DELETE === event.keyCode || Sweet.constants.keyCode.LEFT === event.keyCode || Sweet.constants.keyCode.RIGHT === event.keyCode || Sweet.constants.keyCode.DOWN === event.keyCode || Sweet.constants.keyCode.UP === event.keyCode || Sweet.constants.keyCode.TAB === event.keyCode) {
                return;
            }
            var charRe = new RegExp("[0123456789]"),
                ch = String.fromCharCode($.e.getCharCode(event));
            if (!charRe.test(ch)) {
                event.preventDefault();
            }
        }
    },
    /**
     * 对光标处理
     */
    cursor: {
        /**
         * 获取光标位置
         * @param {Object} domObj 数值框对象
         * @returns {Object} {start: 光标起始位置，end: 光标结束位置}
         */
        getSelection: function(domObj) {
            if (domObj.createTextRange) {
                var s1 = document.selection.createRange().duplicate();
                s1.moveStart("character", -domObj.value.length);
                var p1 = s1.text.length;

                var s2 = document.selection.createRange().duplicate();
                s2.moveEnd("character", domObj.value.length);
                var p2 = domObj.value.lastIndexOf(s2.text);
                if ("" === s2.text) {
                    p2 = domObj.value.length;
                }
                return {
                    start: p2,
                    end: p1
                };
            } else {
                return {
                    start: domObj.selectionStart,
                    end: domObj.selectionEnd
                };
            }
        }
    },
    /**
     * 对cookie操作
     */
    cookie: {
        /**
         * @description 设置cookie值
         * @param {String} key 键
         * @param {String} value 值
         * @param {Number} expiredays 有效时间，单位：天
         */
        set: function(key, value, expiredays) {
            var exdate = new Date();
            exdate.setDate(exdate.getDate() + expiredays);
            document.cookie = key +
                "=" + escape(value) + ((null === expiredays) ? "" : ";expires=" + exdate.toGMTString()) + ";path=/";
        },
        /**
         * @description 获取指定键的cookie值
         * @param {String} key 键
         */
        get: function(key) {
            if (document.cookie.length > 0) {
                var start = document.cookie.indexOf(key + "="),
                    end;
                if (-1 !== start) {
                    start = start + key.length + 1;
                    end = document.cookie.indexOf(";", start);
                    if (-1 === end) {
                        end = document.cookie.length;
                    }
                    return unescape(document.cookie.substring(start, end));
                }
            }
            return;
        }
    },
    /**
     * @description 对正则的公共处理
     */
    regExp: {
        /**
         * @description 正则表达式转义特殊字符，涉及特殊字符：$ ( ) * + [ ? \ ^
         * @param {String} value 值
         * @return {String} 转义后值
         */
        escape: function(value) {
            if ($.isNull(value)) {
                return;
            }

            return value.replace(/\\/g, "\\\\")
                .replace(/\$/g, "\\$")
                .replace(/\(/g, "\\(")
                .replace(/\)/g, "\\)")
                .replace(/\*/g, "\\*")
                .replace(/\+/g, "\\+")
                .replace(/\[/g, "\\[")
                .replace(/\?/g, "\\?")
                .replace(/\^/g, "\\^");
        }
    },
    /*
     * 取外部大小，包括margin
     */
    externalSize: function(obj) {
        var size = {
            width: 0,
            height: 0
        };
        var objEl = $(obj);

        if (objEl.length === 0) {
            return size;
        }

        size.width = objEl.externalWidth();
        size.height = objEl.externalHeight();

        return size;
    },
    /**
     * @description 列操作，返回html字符串
     * @param {Object} params 传入回调函数的值，包括：
     * row: 行数
     * column: 列数
     * data: 单元格数据
     * rowData: 行数据
     * columnDesc: 列描述
     * @return {String} 返回一段html字符串
     */
    operColumn: function(params) {
        var html = "<div class=\"sweet-common-opercolumn\">",
            data = $.extend({}, {
                "row": 0,
                "column": 0,
                "data": 0,
                "rowData": {},
                "columnDesc": {}
            }, params);

        /**
         * @description 生成操作图片，并绑定事件
         * @param {String} className 类名
         * @param {Number} row 行数
         * @param {Number} column 列数
         * @param {String} title 提示
         */
        function getOperPic(className, row, column, title) {
            return "<a href=\"javascript:void(0);\" " +
                "class=\"" + className + " space\" " +
                "row=\"" + row + "\" " +
                "column=\"" + column + "\" " +
                "title=\"" + title + "\"" +
                "></a>";
        }

        for (var temp in data.columnDesc.rendererArr) {
            if (data.columnDesc.rendererArr.hasOwnProperty(temp)) {
                if (Sweet.constants.operType.EDIT === temp) {
                    html += getOperPic("sweet-common-opercolumn-edit", data.row, data.column,
                    Sweet.core.i18n.grid.edit);
                } else if (Sweet.constants.operType.MODIFY === temp) {
                    html += getOperPic("sweet-common-opercolumn-modify", data.row, data.column,
                    Sweet.core.i18n.grid.modify);
                } else if (Sweet.constants.operType.DELETE === temp) {
                    html += getOperPic("sweet-common-opercolumn-delete", data.row, data.column,
                    Sweet.core.i18n.grid["delete"]);
                } else if (Sweet.constants.operType.CLOSE === temp) {
                    html += getOperPic("sweet-common-opercolumn-close", data.row, data.column,
                    Sweet.core.i18n.grid.close);
                } else if (Sweet.constants.operType.PAUSE === temp) {
                    html += getOperPic("sweet-common-opercolumn-pause", data.row, data.column,
                    Sweet.core.i18n.grid.pause);
                } else if (Sweet.constants.operType.START === temp) {
                    html += getOperPic("sweet-common-opercolumn-start", data.row, data.column,
                    Sweet.core.i18n.grid.start);
                } else if (Sweet.constants.operType.RESET === temp) {
                    html += getOperPic("sweet-common-opercolumn-reset", data.row, data.column,
                    Sweet.core.i18n.grid.reset);
                } else if (Sweet.constants.operType.DETAIL === temp) {
                    html += getOperPic("sweet-common-opercolumn-detail", data.row, data.column,
                    Sweet.core.i18n.grid.detail);
                } else if (Sweet.constants.operType.CONFIRM === temp) {
                    html += getOperPic("sweet-common-opercolumn-confirm", data.row, data.column,
                    Sweet.core.i18n.grid.confirm);
                }
            }
        }
        html += "<div>";
        return html;
    },
    /**
     * @description html转义
     * @param {String} value 待转义字符串
     */
    htmlEscape: function(value) {
        if ($.isNull(value) || !$.isString(value)) {
            return value;
        }
        return value.replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/ /g, "&nbsp;");
    },
    /**
     * @description html逆转义
     * @param {String} value 待处理字符串
     */
    htmlInversEscape: function(value) {
        if ($.isNull(value)) {
            return;
        }
        return value.replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&nbsp;/g, " ");
    },
    /**
     * @description 判断是否IE浏览器
     * @return {Boolean} 是否IE
     */
    isIE: function() {
        'use strict';

        var r = /MSIE\s\d+\.\d/;
        var agent = navigator.userAgent;
        return r.test(agent);
    },
    /**
     * @description 判断是否火狐浏览器
     * @return {Boolean} 是否火狐
     */
    isFirefox: function() {
        'use strict';

        var r = /Firefox\/\d+\.\d/;
        var agent = navigator.userAgent;
        return r.test(agent);
    },
    /**
     * @description 判断是否Chrome浏览器
     * @return {Boolean} 是否Chrome
     */
    isChrome: function() {
        'use strict';

        var r = /Chrome\/\d+/;
        var agent = navigator.userAgent;
        return r.test(agent);
    },
    /**
     * @description 递归给每个叶子节点赋值，适合于给[{value: , text: , data: }]型数据的data节点赋值
     * @param {Array} destArr 目标数组
     * @param {String} nodeName 节点名称
     * @param {Object} data 增加的数据
     */
    recursiveAssign: function(destArr, nodeName, data) {
        if ($.isNull(destArr)) {
            return;
        }
        var temp;
        for (var i = 0; i < destArr.length; i++) {
            temp = destArr[i];
            if (temp.children && 0 < temp.children.length) {
                if (temp.data) {
                    temp.data[nodeName] = data;
                } else {
                    temp.data = {};
                    temp.data[nodeName] = data;
                }
                $.recursiveAssign(temp.children, nodeName, data);
            } else {
                if (temp.data) {
                    temp.data[nodeName] = data;
                } else {
                    temp.data = {};
                    temp.data[nodeName] = data;
                }
            }
        }
    },
    /**
     * @description 获取指定class名元素的最大z-index值
     * @param {Number} currentZIndex 当前z-index值
     * @param {String/Array} classNames class名称
     * @return {Number} 返回最大z-index值
     */
    getMaxZIndex: function(currentZIndex, classNames) {
        var classes = [Sweet.constants.className.MASK,
        Sweet.constants.className.FLOAT_WINDOW,
        Sweet.constants.className.DIALOG];
        var tempZIndex = 0;
        var maxZIndex = Sweet.constants.Z_INDEX;

        if (!$.isNull(classNames)) {
            var type = $.type(classNames);
            if ("string" !== type && "array" !== type) {
                $.log("Illegal parameter! Not string or array.");
                return;
            }

            if ('string' === type) {
                classes.push(classNames);
            } else {
                classes.concat(classNames);
            }
        }

        $.each(classes, function(index, classNames) {
            $("." + classNames).each(function() {
                tempZIndex = $(this).css("z-index");
                if (!isNaN(tempZIndex)) {
                    maxZIndex = Math.max(maxZIndex, tempZIndex);
                }
            });
        });

        maxZIndex += Sweet.constants.Z_INDEX_STEP;
        return maxZIndex;
    },
    /**
     * @description 动态计算弹出组件的相对位置
     * @param {Object} targetEl 目标元素
     * @param {Object} floatEl 浮动元素
     * @param {Boolean} bool true:计算左右位置，否则计算上下位置
     * @return {Object} 返回top、left值，格式{top: 1, left: 1}
     */
    getFloatOffset: function(targetEl, floatEl, bool) {
        var win = $(window),
            doc = $(document),
            maxShown = win.height() + doc.scrollTop(),
            maxVShown = win.width() + doc.scrollLeft(),
            targetElOffset = targetEl.offset(),
            targetElWidth = targetEl.outerWidth(true),
            targetElHeight = targetEl.outerHeight(true),
            floatElWidth = floatEl.outerWidth(true),
            floatElHeight = floatEl.outerHeight(true);
        // 计算右边是否有足够展示空间
        if (bool) {
            // 左对齐不够显示浮动框，且右对齐可以显示浮动框，才选择右对齐
            if (maxVShown - targetElOffset.left <= floatElWidth) {
                if (targetElOffset.left + targetElWidth > floatElWidth) {
                    return {
                        "top": targetElOffset.top + targetElHeight,
                        "left": targetElOffset.left - floatElWidth + targetElWidth
                    };
                }
            }
            // 左对齐
            return {
                "top": targetElOffset.top + targetElHeight,
                "left": targetElOffset.left
            };
        }
        // 计算下部是否有空间展示
        else {
            // 下面显示不下浮动框，且上面可以显示下浮动框，才选择在上面显示
            if (maxShown - targetElOffset.top - targetElHeight <= floatElHeight) {
                if (targetElOffset.top >= floatElHeight) {
                    return {
                        "top": targetElOffset.top - floatElHeight,
                        "left": targetElOffset.left
                    };
                }
            }
            // 浮动框在下面显示
            return {
                "top": targetElOffset.top + targetElHeight,
                "left": targetElOffset.left
            };
        }
    },
    /**
     * @description 获取对象padding值
     * @param {Object} obj 待获取目标对象
     * @return {Array} 以数组形式返回padding值，格式如：[top, right, bottom, left]
     */
    getPadding: function(obj) {
        return [
        $.getPaddingTop(obj),
        $.getPaddingRight(obj),
        $.getPaddingBottom(obj),
        $.getPaddingLeft(obj)];
    },
    /**
     * @description 获取对象的padding top值
     * @param {Object} obj 待获取目标对象
     * @return {Number} padding top值
     */
    getPaddingTop: function(obj) {
        return parseInt(obj.css("padding-top").slice(0, -2), 10);
    },
    /**
     * @description 获取对象的padding right值
     * @param {Object} obj 待获取目标对象
     * @return {Number} padding right值
     */
    getPaddingRight: function(obj) {
        return parseInt(obj.css("padding-right").slice(0, -2), 10);
    },
    /**
     * @description 获取对象的padding bottom值
     * @param {Object} obj 待获取目标对象
     * @return {Number} padding bottom值
     */
    getPaddingBottom: function(obj) {
        return parseInt(obj.css("padding-bottom").slice(0, -2), 10);
    },
    /**
     * @description 获取对象的padding left值
     * @param {Object} obj 待获取目标对象
     * @return {Number} padding left值
     */
    getPaddingLeft: function(obj) {
        return parseInt(obj.css("padding-left").slice(0, -2), 10);
    },
    /**
     * @description 对矩阵处理
     */
    matrix: {
        /**
         * @descrption 矩阵的翻转处理
         * @param {Array} matrix 原始矩阵
         * @return {Array} 返回翻转后矩阵，做行、列交换
         */
        reversal: function(matrix) {
            if (!$.isArray(matrix)) {
                $.error("Function reversal(): The input arg is not array.");
                return;
            }
            var temp = [],
                length = matrix.length,
                tempLength = 0;
            for (var i = 0; i < length; i++) {
                tempLength = matrix[i].length;
                for (var j = 0; j < tempLength; j++) {
                    if (!temp[j]) {
                        temp[j] = [];
                    }
                    temp[j][i] = matrix[i][j];
                }
            }

            return temp;
        }
    },
    /**
     * @description canvas中将window坐标转换为canvas坐标系统值
     * @param {Object} canvas canvas对象
     * @param {number} x window坐标系统中的x坐标
     * @param {number} y window坐标系统中的y坐标
     * @return {obkect} 返回转换为canvas坐标系统后的x, y值
     */
    windowToCanvas: function(canvas, x, y) {
        var bbox = canvas.getBoundingClientRect();

        return {
            x: x - bbox.left * (canvas.width / bbox.width),
            y: y - bbox.top * (canvas.height / bbox.height)
        };
    },
    /**
     * @description 将16进制的颜色值转换为[255, 222, 12]rgb通道的颜色值
     * @param {String} color 16进制的颜色值
     * @return {Array} 返回rgb的颜色值
     */
    color2rgb: function(color) {
        var r = parseInt(color.substr(1, 2), 16);
        var g = parseInt(color.substr(3, 2), 16);
        var b = parseInt(color.substr(5, 2), 16);
        return [r, g, b];
    },
    /**
     * @description 将[255, 222, 12]rgb通道的颜色值转换为16进制的颜色值
     * @param {Array} rgbArr rgb颜色值的数据
     * @return {String} 返回16进制的颜色值
     */
    rgb2color: function(rgbArr) {
        var s = "";
        for (var i = 0; i < rgbArr.length; i++) {
            var c = Math.round(rgbArr[i]).toString(16);
            if (c.length === 1) {
                c = "0" + c;
            }
            s += c;
        }

        return "0x" + s.toUpperCase();
    },

    /**
     * @description 生成线性渐变的颜色
     * @param {String} sColor 开始渐变的颜色值(16进制)
     * @param {String} eColor 渐变结束的颜色值(16进制)
     * @param {number} step 开始到结束渐变总共需要分成多少等份，表示步长值
     * @return {Array} colors 分成step等份的颜色值
     */
    lineGradient: function(sColor, eColor, step) {
        var result = [];
        var srgb = $.color2rgb(sColor);
        var ergb = $.color2rgb(eColor);

        for (var i = 0; i < step; i++) {
            var temp = [];
            for (var j = 0; j < 3; j++) {
                temp.push(srgb[j] + (ergb[j] - srgb[j]) / step * i);
            }
            result.push($.rgb2color(temp));
        }

        return result;
    },
    /**
     * 颜色变浅(begincolor表示深色)或变深(begincolor表示浅色)函数
     * @param begincolor 当前要变化的点的颜色，如：0x078DC7
     * @param endcolor 颜色变化的最大程度，如：0x078DC7
     * @param data 数据集合
     * @return 变化后的颜色
     */
    colorStepByStep: function(begincolor, endcolor, data) {
        var r, g, b, r0, g0, b0,
        tr, tg, tb,
        MAX = 100,
            rate = 0,
            count = data ? data.length : 0,
            result = [];
        if (count > 0) {
            if (count === 1) {
                return [begincolor];
            }
            if (count === 2) {
                return [begincolor, endcolor];
            }
        } else {
            return result;
        }

        r = (begincolor & 0x00ff0000) >>> 16;
        g = (begincolor & 0x0000ff00) >>> 8;
        b = begincolor & 0x000000ff;
        r0 = (endcolor & 0x00ff0000) >>> 16;
        g0 = (endcolor & 0x0000ff00) >>> 8;
        b0 = endcolor & 0x000000ff;

        rate = Math.floor(MAX / (count - 1));
        for (var i = 0; i < count; i++) {
            var temp = i * rate;
            tr = ((r + temp * (r0 - r) / MAX) & 0xff);
            tg = ((g + temp * (g0 - g) / MAX) & 0xff);
            tb = ((b + temp * (b0 - b) / MAX) & 0xff);
            result.push($.rgb2color([tr, tg, tb]));
        }
        return result;
    },
    /**
     * @description 删除svg中的所有包含pattern和image的节点
     * @argument {Object} svgDom svg对象，必须是原生的dom对象
     */
    dealAttrSVG: function(svgDom) {
        // 强制对属性进行处理
        function removeSpecAttr(svg, tag) {
            var items = svg.getElementsByTagName(tag);
            var i = items.length;
            while (i--) {
                items[i].parentNode.removeChild(items[i]);
            }
        }
        //强制对此类属性进行删除
        removeSpecAttr(svgDom, 'pattern');
        removeSpecAttr(svgDom, 'image');
        return svgDom;
    },
    /**
     * @description 模糊过滤
     * @param {Array} data 数组，格式为{"value": , "text":}
     * @param {String} value 过滤的目标
     * @param {String} textFilter 是否按text过滤，默认true
     * @param {Boolean} filterDir 是否过滤目录
     * @param {Boolean} clone 是否克隆数据
     * @return {Array} 返回过滤后的数据
     */
    fuzzyFilter: function(data, value, textFilter, filterDir, clone) {
        // 入参合法性校验
        if ($.isNull(data)) {
            return data;
        }
        value = $.isNull(value) ? "" : value;
        filterDir = filterDir || false;
        clone = clone || false;
        var field = "value",
            me = this,
            tempData,
            regExp = new RegExp($.regExp.escape(value), "i");
        if (!clone) {
            tempData = $.objClone(data);
        } else {
            tempData = data;
        }
        if (!textFilter) {
            field = "text";
        }
        // 执行过滤匹配操作
        var testResult, text, allNull;
        $.each(tempData, function(index, childData) {
            if (!$.isNull(childData)) {
                if (childData.children && 0 < childData.children.length) {
                    //filterDir:true为带目录过滤，否则为叶子节点过滤
                    if (filterDir) {
                        //判断目录是否匹配
                        testResult = false;
                        text = childData[field];
                        testResult = regExp.test(text);
                        //判断是否包含过滤字符串
                        if (testResult) {
                            return;
                        } else {
                            me.fuzzyFilter(childData.children, value, textFilter, filterDir, true);
                        }
                    } else {
                        me.fuzzyFilter(childData.children, value, textFilter, filterDir, true);
                    }
                    //判断chilData.children是否都为空
                    allNull = false;
                    $.each(childData.children, function(index, child) {
                        if (!$.isNull(child)) {
                            allNull = true;
                        }
                    });
                    //删除没有叶子的节点
                    if (!allNull) {
                        delete tempData[index];
                    }
                } else {
                    testResult = false;
                    text = childData[field];
                    testResult = regExp.test(text);
                    //判断是否包含过滤字符串
                    if (!testResult) {
                        delete tempData[index];
                    }
                }
            }
        });
        return me.deleteUndefinedData(tempData);
    },
    /**
     *@description 将数据中包含的undefined节点删除，从新生成不包含undefined的数据
     *@private
     *@param {Object} data 树数据
     *@return {Array} 树节点对应的值,格式如[{text:'text1',value:'value1'},...]
     */
    deleteUndefinedData: function(data) {
        var me = this,
            selectArray = [];
        for (var key in data) {
            var mapObj = data[key];
            if (!$.isNull(mapObj) && !$.isFunction(mapObj) && !$.isNull(mapObj.value)) {
                var obj = {
                    "text": mapObj.text,
                    "value": mapObj.value,
                    "data": mapObj.data,
                    "editable": mapObj.editable
                };
                me._createChildNode(data[key].children, obj);
                selectArray.push(obj);
            }
        }
        return selectArray;
    },
    /**
     * @description 生成树形结构的子节点
     * @private
     * @param {Object} listMap 节点对应的子节点数据
     * @param {Object} obj 节点数据
     * @return {Array} 叶子节点对应的值,格式如[{text:'text1',value:'value1',data:''},...]
     */
    _createChildNode: function(listMap, obj) {
        var me = this,
            mapObj,
            arrayObj,
            isOK = true;
        if ($.isNull(listMap) || $.isNull(obj)) {
            return [];
        }
        for (var key in listMap) {
            mapObj = listMap[key];
            //如果存在text属性
            if (!$.isNull(mapObj) && !$.isNull(mapObj.text)) {
                isOK = false;
                break;
            }
        }
        if (isOK && $.isArray(listMap) && 0 === listMap.length) {
            return [];
        }
        for (var key in listMap) {
            if ($.isNull(obj.children)) {
                obj.children = [];
            }
            mapObj = listMap[key];
            if ($.isNull(mapObj) || $.isFunction(mapObj)) {
                continue;
            }
            arrayObj = {
                "text": mapObj.text,
                "value": mapObj.value,
                "data": mapObj.data,
                "editable": mapObj.editable
            };
            if (mapObj.children) {
                arrayObj.children = [];
                obj.children.push(arrayObj);
                me._createChildNode(mapObj.children, arrayObj);
            } else {
                obj.children.push(arrayObj);
            }
        }
    }
});


;
/**
 * @fileOverview sweet组件
 * @date 2012/11/29
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 */
(function() {
    // 初始化sweet
    var global = this;
    if (typeof Sweet === "undefined") {
        global.Sweet = {};
    }

    // 默认语言设置
    var defaultLocale = "en_US",
        localeKey = "locale",
        languages = {
            "zh_CN": "zh_CN",
            "en_US": "en_US"
        };

    /*****************************core begin*****************************************/
    Sweet.core = {};
    // 常量声明
    Sweet.constants = {
        // 默认z-index起始值
        Z_INDEX: 1000,
        KEY: "key",
        VALUE: "value",
        FUNC: "func",
        HREFSCRIPT: "javascript:void(0);",
        // 日志级别
        logLevel: {
            ERROR: "error",
            INFO: "info"
        },
        // 排序类型
        sortType: {
            ASC: "ASC",
            DESC: "DESC"
        },
        // 颜色范围
        colors: ["#369cd8", "#60b2df", "#63ccd3", "#b7e042", "#90cc19", "#f2a14e", "#cf7a37", "#cf4737", "#d07dd0",
            "#9a53e4", "#a5a5a5"],
        // 布局
        layout: {
            HLayout: "HLayout",
            VLayout: "VLayout",
            GridLayout: "gridLayout",
            BorderLayout: "borderLayout",
            AccordionLayout: "accordionLayout",
            CardLayout: "cardLayout"
        },
        //labelItem图片类型
        imgType: {
            INDEX: "index",
            DIM: "dim",
            CUSTOM_INDEX: "customizedIndex"
        },
        // 对齐方式
        align: {
            LEFT: "left",
            RIGHT: "right",
            CENTER: "center",
            TOP: "top",
            MIDDLE: 'middle',
            BOTTOM: 'bottom'
        },
        // 每月天数
        MONTHS: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        // 键盘ascii编码
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        },
        // 标点符号
        symbol: {
            COLON: ":",
            EQUAL: "=",
            LIKE: "LIKE",
            NOTEQUAL: "<>",
            EQNULL: "NULL",
            NOTNULL: "NOTNULL",
            LT: "<",
            GT: ">"
        },
        fontSize: 12,
        // 语言类型
        language: {
            KEY: "locale",
            ZH_CN: "zh_CN",
            EN_US: "en_US"
        },
        // 数据类型
        dataType: {
            STRING: "string",
            NUMBER: "number",
            DATE: "date",
            BOOL: "bool",
            LIST: "list"
        },
        //chart type
        graphType: {
            LINE: "line",
            AREA: "area",
            COLUMN: "column",
            BAR: "bar",
            PIE: "pie",
            MIX_COLUMN_LINE: "columnline"
        },
        chart: {
            fontFamily: "Tahoma",
            textColor: "#696d7d",
            fontSize: {
                min: 10,
                normal: 12,
                larger: 14
            },
            titleCfg: {
                labelColor: "#3c3c3c",
                labelAlpha: 1
            }
        },
        axisType: {
            VALUE: "value",
            CATEGORY: "category"
        },
        // 操作类型
        operType: {
            SETTING_STYLE1: "setting_style_1",
            ADD: "add",
            MODIFY: "modify",
            DELETE: "delete",
            MOVE: "move",
            ACTIVE: "active",
            TERMINATE: "terminate",
            SAVEAS: "save",
            CONFIRM: "confirm",
            PLUS: "plus",
            MINUS: "minus",
            EDIT: "edit",
            CLOSE: "close",
            PAUSE: "pause",
            START: "start",
            RESET: "reset",
            DETAIL: "detail",
            SETTING: "setting",
            CRITICAL: "critical",
            MAJOR: "major",
            MINOR: "minor",
            WARNING: "warning",
            WARNING_R: "warning_r",
            CRITICAL_R: "critical_r",
            CUSTOM_1: "custom_1",
            CUSTOM_2: "custom_2",
            CUSTOM_3: "custom_3",
            CUSTOM_4: "custom_4",
            CUSTOM_5: "custom_5",
            CUSTOM_6: "custom_6",
            CUSTOM_7: "custom_7",
            IMPORT: "import",
            EXPORT: "export",
            PRINT: "print",
            REFRESH: "refresh",
            FOLDER: "folder",
            CATEGORY: "category",
            VIEW: "view",
            FAVORITE_ADD: "favorite_add",
            FAVORITE_REMOVE: "favorite_remove",
            LAYOUT: "layout",
            DASHBOARD: "dashboard",
            DASHBOARD_SETTING: "dashboard_setting",
            ENTER_FULLSCREEN: "enter_fullscreen",
            EXIT_FULLSCREEN: "exit_fullscreen",
            LOCK: "lock",
            UNLOCK: "unlock",
            ADDNODE: "addNode",
            ADDCHILDREN: "addChildren"
        },
        // tip类型操作
        tipAttr: {
            TYPE_NORMAL: "normal",
            TYPE_ERROR: "error",
            MODEL_NORMAL: "none",
            MODEL_SIDE: "side"
        },
        //ip配置属性
        ipType: {
            VERSION4: "v4",
            VERSION6: "v6",
            VERSION: "v"
        },
        //记分卡常量
        scoreCard: {
            ROW: 2,
            NUM: 5,
            TYPE: "line",
            LINE_COLOR: "#99a5af",
            FILL_COLOR: "#d1dfec",
            WIDTH: "50px",
            HEIGHT: "18px",
            SPOT_COLOR: "#99a5af",
            MAX_SPOT_COLOR: "",
            MIN_SPOT_COLOR: "",
            LINE_WIDTH: 2,
            SPOT_RADIUS: 2,
            NO_VALUE: "--",
            CHAR_NUM: 2
        },
        //数值颜色
        numColor: {
            GREEN: "green",
            RED: "red",
            YELLOW: "yellow"
        },
        //与上周期的值相比
        differType: {
            EQUAL: "equal",
            INCREASE: "increase",
            DECREASE: "decrease"
        },
        //错误类型
        errorType: {
            UNCONNECTED: "server_unconnected",
            UNKNOWN: "server_unknown",
            COMMON: "common_error"
        },
        //间距
        gap: {
            IMG_TEXT: 40
        },
        //元素宽度
        elWidth: {
            MIN_WIDTH: 400,
            DIV_WIDTH: 620
        },
        // 按钮的图标类型
        btnImageType: {
            INDEX: "index",
            DIM: "dim",
            ADD: "add",
            MODIFY: "modify",
            DELETE: "delete",
            MOVE_TO: "moveto",
            ACTIVE: "active",
            TERMINATE: "terminate"
        },
        //双向列表按钮
        listWindowButton: {
            RIGHT: ">",
            LEFT: "<",
            ALL_RIGHT: ">>",
            ALL_LEFT: "<<"
        },
        // 类名称
        className: {
            MASK: "sweet-mask",
            DIALOG: "sweet-dialog-bg",
            FLOAT_WINDOW: "sweet-float-bg"
        },
        // 导出类型
        exportType: {
            CSV: "csv",
            XLS: "xls",
            PDF: "pdf"
        },
        // Overflow的处理类型
        overflow: {
            AUTO: "auto",
            HIDDEN: "hidden"
        },
        // z-index步进值
        Z_INDEX_STEP: 10
    };

    // 组件路径
    if (SweetLoad && SweetLoad.basePath) {
        Sweet.libPath = SweetLoad.basePath;
    } else {
        Sweet.libPath = "../";
    }
    // amcharts图片路径
    Sweet.amchartsImagePath = Sweet.libPath + "lib/amcharts/amcharts/images/";

    //地图小区图片路径
    Sweet.supermapThirdJsPath = Sweet.libPath + "lib/supermap/layer";
    Sweet.supermapImagePath = {
        defaultCell: Sweet.libPath + "themes/default/core/images/map/cellDef.png",
        overCell: Sweet.libPath + "themes/default/core/images/map/cellIn.png"
    };

    // 默认日志级别设定
    Sweet.logLevel = Sweet.constants.logLevel.INFO;

    // 组件对象
    Sweet._widgets = {};
    // 图表类
    Sweet.chart = {};
    // 表单类
    Sweet.form = {};
    // 对话框类
    Sweet.Dialog = {};
    // 对话框类别名
    Sweet.Msg = {};
    // 列表组件
    Sweet.list = {};
    // 容器
    Sweet.container = {};
    // 面板组件
    Sweet.panel = {};
    // Portal组件
    Sweet.portal = {};
    // 表格组件
    Sweet.grid = {};
    // menu组件
    Sweet.menu = {};
    // 树组件
    Sweet.tree = {};
    // core国际化资源
    Sweet.core.i18n = {};
    //Calculator组件
    Sweet.Calculator = {};

    // Reader类组件
    Sweet.Reader = {};

    // Store类组件
    Sweet.Store = {};

    // 定时器组件
    Sweet.Task = {};

    //地图组件
    Sweet.MapCfg = {};

    /**
     * @description 获取组件对象
     * @param {String} id 组件ID
     */
    Sweet.getWidget = function(id) {
        if ($.isNull(id)) {
            $.error("Input parameter id is empty!");
            return null;
        }

        return Sweet._widgets[id];
    };

    /** 
     * @description 设置国际化资源
     * @param {String} language 语言 
     */
    Sweet.setLocale = function(language) {
        if ($.isNull(language)) {
            $.error("Input parameter language is empty!");
            return null;
        }
        // core包国际化
        if (I18N && I18N.core && I18N.core[language]) {
            Sweet.core.i18n = I18N.core[language];
        }
        // components包国际化
        if (I18N && I18N.cmp && I18N.cmp[language]) {
            Sweet.cmp.i18n = I18N.cmp[language];
        }
        // 业务国际化
        if (I18N && I18N.business && I18N.business[language]) {
            BusinessI18N = I18N.business[language];
        }
    };

    /**
     * @description 获取当前显示语言信息
     * @return {String} en_US：英文 zh_CN：中文
     */
    Sweet.getLocale = function() {
        var locale = $.cookie.get(localeKey),
            language = languages[locale];

        return language ? language : defaultLocale;
    };

    /**
     * @description 重绘组件
     */
    Sweet.resize = function() {
        var widgets = {};
        // 优先处理容器布局类
        $.each(Sweet._widgets, function(id, obj) {
            if ("gridPanel" === obj.type ||
                "HPanel" === obj.type ||
                "VPanel" === obj.type) {
                obj.doLayout();
            } else {
                widgets[id] = obj;
            }
        });

        $.each(widgets, function(id, obj) {
            obj.doLayout();
        });
    };

    /**
     * @private
     * @description 框架统一管理，关闭浮动窗口
     */
    Sweet._closeFloatPanel = function() {
        $.each(Sweet._widgets, function(id, obj) {
            obj._closeFloatPanel();
        });
    };

    // 注册监听window对象变化事件
    $(window).resize(function() {
        // window发生变化，20ms后重绘组件
        //======DTS2014070305004 start
        //此class保持和jquery.sweetmask.js中的要保持一致
        var maskEl = $(".sweet-mask-all");
        if (maskEl && maskEl.length > 0) {
            maskEl.width($(document).width()).height($(document).height());
        }
        //======DTS2014070305004 end
    });

    /**
     * @private
     * @description 框架统一管理，设置cookie
     * @param {String/Number} id 延时ID
     */
    Sweet._changeLoadTime = function(id) {
        // 延迟修改锁屏时间的起始时间（如连续点击，只执行最后一次点击事件）
        Sweet.Task.Delay.start({
            id: id,
            run: function() {
                var myDate = new Date();
                $.cookie.set("timeNum", myDate.getTime(), null);
            },
            delay: 350
        });
    };

    /**
     * @private
     * @description 在页面点击鼠标时，关闭ECM菜单
     */
    Sweet._closeECMMenu = function() {
        if (top.clickHideMenu) {
            top.clickHideMenu();
        }
    };

    /**
     * @private
     * @description Sweet组件的垃圾回收处理
     */
    Sweet._gc = function() {
        Sweet.Task.Timeout.start({
            id: "sweet-gc",
            run: function() {
                var logPrefix = "[Sweet-gc]: ",
                    beginDate = $.date.getMilliseconds(),
                    endDate;
                $.log(logPrefix + "Begin GC!!!!!!!!!!!!!!!!");
                $.each(Sweet._widgets, function(index, obj) {
                    if ((obj.rendered || obj.getWidgetElFlag) && 0 === $("#" + obj.options.id).length) {
                        obj.destroy();
                    }
                });
                endDate = $.date.getMilliseconds();
                $.log(logPrefix + "End GC!!! Time-consuming = " + (endDate - beginDate) + "ms");
            },
            interval: 600000
        });
    };

    // 捕捉文档页面点击事件
    $(document).ready(function() {
        // 点击左键
        $("body").bind("click", function(event) {
            // 框架统一管理，20ms后关闭浮动窗口
            setTimeout(Sweet._closeFloatPanel, 20);
            Sweet._changeLoadTime("delayClickChangeLoadTime");
            Sweet._closeECMMenu();
        });

        // 点击右键
        $("body").bind("contextmenu", function(event) {
            // 框架统一管理，20ms后关闭浮动窗口
            if ($.isIE()) {
                // IE下弹出缺省上下文菜单后，会阻塞处理，所以不做延时处理
                Sweet._closeFloatPanel();
            } else {
                setTimeout(Sweet._closeFloatPanel, 20);
            }
            Sweet._changeLoadTime("delayContextmenuChangeLoadTime");
            Sweet._closeECMMenu();
        });

        // keydown
        $("body").bind("keydown", function(event) {
            Sweet._changeLoadTime("delayKeydownChangeLoadTime");
        });

        // mouseup
        $("body").bind("mouseup", function(event) {
            Sweet._changeLoadTime("delayMouseupChangeLoadTime");
        });

        // 页面加载完后，Sweet组件自己的垃圾回收机制开始运行
        Sweet._gc();

        // 默认启用SweetUI提示功能
        Sweet.ToolTip.enable();
    });
    /*****************************core end*******************************************/

    /*****************************component begin************************************/
    Sweet.cmp = {};
    // component组件国际化资源
    Sweet.cmp.i18n = {};
    /*****************************component end**************************************/

    // 设置默认语言生效
    Sweet.setLocale($.cookie.get(localeKey) ? $.cookie.get(localeKey) : defaultLocale);

    /**
     * @description Sweet组件库ajax请求
     */
    Sweet.Ajax = {
        /**
         * @param {Number} ajax个数计数器
         */
        _ajaxCount: 0,
        /**
         * @param {Number} ajax请求超时事件全局配置，默认60000，单位毫秒
         */
        timeout: 60000,
        /**
         * @description ajax请求
         * @param {Object} config ajax请求配置参数，格式为
         * {
         *  url： "http://domain//examples",    // 请求地址
         *  async: true/false,                  // 是同步还是异步请求，默认异步
         *  data: {value="1"},                  // 发送到服务器数据
         *  type: "post",                       // 请求类型，默认post
         *  dataType: "json",                   // 返回数据类型，默认json
         *  success: Function,                  // 请求成功的回调函数
         *  error: Function,                    // 请求失败时回调函数
         *  loadMask: true/false                // 是否有遮罩，默认true
         *  timeout : 60000                     // 超时设置，默认为60000，单位毫秒
         *  beforeRequest: Function             // 发送请求前处理
         *  afterRequest: Function              // 发送请求后处理,在error和success调用之后才会调用此回调
         * }
         */
        request: function(config) {
            var successFun = config && $.isFunction(config.success) ? config.success : $.noop;
            var errorFun = config && $.isFunction(config.error) ? config.error : $.noop;
            var defaultConfig = {
                async: true,
                type: "post",
                dataType: "json",
                loadMask: true,
                timeout: 60000,
                beforeRequest: $.noop,
                afterRequest: $.noop
            },
            tempConfig = $.extend({}, defaultConfig, config);
            //sweet中封装success和error，防止遮罩去不掉的情况(success或error中出错，中断了程序的执行)
            tempConfig.success = function(data, textStatus, jqXHR) {
                Sweet.Ajax._end(tempConfig.loadMask);
                successFun(data, textStatus, jqXHR);
                delete successFun;
            };
            tempConfig.error = function(XMLHttpRequest, textStatus, errorThrown) {
                Sweet.Ajax._end(tempConfig.loadMask);
                errorFun(XMLHttpRequest, textStatus, errorThrown);
                delete errorFun;
            };
            // 发送请求前处理
            tempConfig.beforeSend = function(req) {
                Sweet.Ajax._start(tempConfig.loadMask, req);
                var tokenKeyDom = $("meta[name='_csrf']"),
                    headKeyDom = $("meta[name='_csrf_header']"),
                    headKey = headKeyDom ? headKeyDom.attr("content") : "",
                    tokenKey = tokenKeyDom ? tokenKeyDom.attr("content") : "";

                if (headKey && tokenKey) {
                    req.setRequestHeader(headKey, tokenKey);
                }
                tempConfig.beforeRequest(this, req);
            };
            // 请求完成后处理
            tempConfig.complete = function(req) {
                tempConfig.afterRequest(this, req);
            };
            return $.ajax(tempConfig);
        },
        /**
         * @description ajax请求发出前处理
         * @private
         * @param {Boolean} loadMask 是否加遮罩
         * @param {Object} XMLHttpRequest 请求信息
         */
        _start: function(loadMask, XMLHttpRequest) {
            if (!loadMask) {
                return false;
            }
            if (0 === Sweet.Ajax._ajaxCount) {
                $(document).sweetMask({
                    maskAll: true,
                    loading: true
                });
            }
            Sweet.Ajax._ajaxCount++;
            $.log("start ajaxCount:" + Sweet.Ajax._ajaxCount);
        },
        /**
         * @description ajax请求结束后处理
         * @private
         * @param {Boolean} loadMask 是否加遮罩
         * @param {Object} XMLHttpRequest 请求信息
         */
        _end: function(loadMask, XMLHttpRequest) {
            if (!loadMask) {
                return false;
            }
            Sweet.Ajax._ajaxCount--;
            if (0 === Sweet.Ajax._ajaxCount) {
                $(document).unSweetMask();
            }
            $.log("stop ajaxCount:" + Sweet.Ajax._ajaxCount);
        }
    };

    /**
     * tip提示统一处理
     */
    Sweet.ToolTip = {
        enable: function() {
            $(document).sweettip({
                show: {
                    delay: 500
                }
            });
        },
        /**
         * 重置tooltip，关闭已经显示的提示
         */
        reset: function() {
            $(document).sweettip("disable");
            $(document).sweettip("enable");
        }
    };
})();;
/**
 * @fileOverview  
 * <pre>
 * 定时任务
 * 2013/4/23
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($) {
    // 处理IE下setTimeout、setInterval不能传参问题
    if ($.isIE()) {
        var st = window.setTimeout;
        var si = window.setInterval;
        window.setTimeout = function(fn, mDelay) {
            var t = new Date().getTime();
            if (typeof fn === 'function') {
                var args = Array.prototype.slice.call(arguments, 2);
                var f = function() {
                    args.push(new Date().getTime() - t - mDelay);
                    fn.apply(null, args);
                };
                return st(f, mDelay);
            }
            return st(fn, mDelay);
        };
        window.setInterval = function(fn, mDelay) {
            var t = new Date().getTime();
            if (typeof fn === 'function') {
                var args = Array.prototype.slice.call(arguments, 2);
                var f = function() {
                    args.push(new Date().getTime() - t - mDelay);
                    fn.apply(null, args);
                };
                return si(f, mDelay);
            }
            return si(fn, mDelay);
        };
    }

    var Timeout = function() {
        // 任务列表
        var logPrefix = "[Sweet.Task.Timeout]: ";
        // 任务ID与timeout对象对应关系
        var queue = {};
        // 执行任务
        var executeTask = function(task) {
            if (!task || !queue[task.id]) {
                return;
            }
            // 是否关闭任务
            if (queue[task.id]["stop"]) {
                stopTask(task.id);
                return;
            }
            // 是否暂停任务
            if (queue[task.id]["pause"]) {
                return;
            }
            task.run.call(task.scope || task, task.args);
            queue[task.id]["timeout"] = window.setTimeout(executeTask, task.interval, task);
            $.log(logPrefix + "Timer task start. ID = " + task.id);
        };
        // 启动任务
        var startTask = function(task) {
            queue[task.id] = {};
            $.extend(queue[task.id], task);
            queue[task.id]["stop"] = false;
            queue[task.id]["pause"] = false;
            queue[task.id]["timeout"] = window.setTimeout(executeTask, task.interval, task);
        };
        // 关闭任务
        var stopTask = function(id, isCallBack) {
            var task = queue[id];
            if (!task) {
                return;
            }

            var timeout = task["timeout"];
            if (timeout) {
                clearTimeout(timeout);
            }

            // 执行回调
            var callBack = task["callBack"];
            if (callBack && !isCallBack) {
                callBack.call(task.scope || task);
            }
            delete queue[id];
        };
        /**
         * @description 启动任务
         * @param {Object} task 任务配置，配置选项包括
         * {
         *      id: "",              // 任务ID
         *      run: Function,       // 定时调用执行的方法
         *      scope: Object,       // 作用域
         *      args: Arra,          // 传递给run的参数数组
         *      interval: Number     // 任务执行定时间隔，单位ms
         * }
         */
        this.start = function(task) {
            var id = task.id;
            // task id不能为空
            if ($.isNull(id)) {
                $.error(logPrefix + "Task id can not be empty!");
                return;
            }

            // 校验任务是否存在
            if (queue[id]) {
                stopTask(id, true);
                $.log(logPrefix + "The task has already exist!");
            }

            // 启动任务
            startTask(task);
        };
        /**
         * @description 激活指定任务
         * @param {String} id 任务ID
         */
        this.active = function(id) {
            var task = queue[id];
            if (task) {
                startTask(task);
            }
        };
        /**
         * @description 激活所有任务
         */
        this.activeAll = function() {
            $.each(queue, function(taskId, task) {
                if (task) {
                    startTask(task);
                }
            });
        };
        /**
         * @description 暂停指定任务
         * @param {String} id 任务ID
         * @param {Function} callBack 回调
         */
        this.pause = function(id, callBack) {
            var task = queue[id];
            if (task) {
                task["pause"] = true;
                $.isFunction(callBack) ? task["callBack"] = callBack : "";
            }
        };
        /**
         * @description 暂停所有任务
         */
        this.pauseAll = function() {
            $.each(queue, function(taskId, task) {
                if (task) {
                    task["pause"] = true;
                }
            });
        };
        /**
         * @description 停止任务
         * @param {String} id 任务ID
         * @param {Function} callBack 任务停止后回调，可选
         */
        this.stop = function(id, callBack) {
            var task = queue[id];
            if (task) {
                task["stop"] = true;
                $.isFunction(callBack) ? task["callBack"] = callBack : "";
            }
        };
        /**
         * @description 关闭所有任务
         */
        this.stopAll = function() {
            $.each(queue, function(taskId, task) {
                if (task) {
                    task["stop"] = true;
                }
            });
        };
    };

    var Interval = function() {};

    /**
     * @description 延迟任务执行
     */
    var Delay = function() {
        // 日志前缀
        var logPrefix = "[Sweet.Task.Delay]: ";
        // 任务列表
        var queue = {};

        /**
         * @description 执行定时任务
         * @param {Object} task 任务
         */
        function executeTask(task) {
            var qTask = queue[task.id];
            if (!task || !qTask) {
                return;
            }
            var date = new Date();
            if ((date.getTime() >= qTask.time + task.delay) && !qTask.execute) {
                qTask.execute = true;
                stopTask(task.id);
                task.run.call(task.scope || task, task.args);
            }
            qTask.timeout = window.setTimeout(executeTask, 50, task);
        }

        /**
         * @description 启动任务
         * @param {Object} task 任务
         */
        function startTask(task) {
            var date = new Date();
            queue[task.id] = {};
            queue[task.id]["time"] = date.getTime();
            queue[task.id]["timeout"] = window.setTimeout(executeTask, 50, task);
            queue[task.id]["execute"] = false;
        }

        /**
         * @description 停止任务
         * @param {String} id 任务ID
         */
        var stopTask = function(id) {
            var task = queue[id];
            if (!task) {
                return;
            }

            var timeout = task["timeout"];
            if (timeout) {
                clearTimeout(timeout);
            }

            delete queue[id];
        };

        /**
         * @description 启动任务
         * @param {Object} task 任务，配置属性包括
         * {
         *      id: "",              // 任务ID
         *      run: Function,       // 定时调用执行的方法
         *      scope: Object,       // 作用域
         *      args: Arra,          // 传递给run的参数数组
         *      delay: Number        // 延迟执行时间
         * }
         */
        this.start = function(task) {
            var id = task.id,
                t = queue[id];
            // task id不能为空
            if ($.isNull(id)) {
                $.error(logPrefix + "Task id can not be empty!");
                return;
            }

            // 校验任务是否存在，如果存在，更新时间
            if (t) {
                stopTask(id);
            }

            // 启动任务
            startTask(task);
        };

        /**
         * @description 取消任务
         * @param {String} id 任务ID
         */
        this.stop = function(id) {
            stopTask(id);
        };
    };

    /**
     * @description 定时任务对象，采用setTimeout实现，保证任务连续执行
     * @class
     * @example
     * 创建Timeout定时任务：
     */
    Sweet.Task.Timeout = new Timeout();

    /**
     * @description 定时任务对象，采用setInterval实现，保证任务间隔指定时间后执行
     * @class
     * @example
     * 创建Interval定时任务：
     */
    Sweet.Task.Interval = new Interval();

    /**
     * @description 延迟任务执行对象
     * @class
     * @example
     * 创建延迟执行任务：
     */
    Sweet.Task.Delay = new Delay();
})(jQuery);;
/*
 * jQuery UI sweet.widget 1.0
 * 所有组件的基础
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * 
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function($, undefined) {

    /**
     * 扩展jquery ui功能，使单个组件可以分解多个
     * @param {String} name 名称
     * @param {Function} fn 扩展的功能函数
     */
    $.widget.addExtendListener = function(name, fn) {
        var temp = name.split("."),
            $prototype = $[temp[0]][temp[1]].prototype;
        if ($prototype) {
            $prototype._extendHandlers.push(fn);
        } else {
            $prototype = [];
            $prototype._extendHandlers.push(fn);
        }
    };

    // 保存组件对象
    var uuid = 1000;

    $.widget("sweet.widget", /** @lends Sweet.widget.prototype */ {
        version: "1.0",
        sweetWidgetName: "[widget]:",
        /**
         * @private
         * 子类支持事件名称，由子类填写
         */
        eventNames: /** @lends Sweet.widget.prototype*/
        {
            /**
             * @event
             * @description 渲染完毕事件(me)
             */
            rendered: "渲染完毕事件"
        },
        /**
         * @private
         * 浮动窗口背景色样式
         */
        floatBgClass: "sweet-float-bg",
        winBgClass: "sweet-win-bg",
        options: /** @lends Sweet.widget.prototype */
        {
            /**
             * @description 组件ID，如果不填，则由系统自动生成
             * @type {String}
             * @default null
             */
            id: null,
            /**
             * @description 获取值的id
             * @type {String}
             * @default null
             */
            vID: null,
            /**
             * @description 组件名称
             * @type {String}
             * @default null
             */
            name: null,
            /**
             * @description 组件宽度，可设定百分比或绝对像素值
             * @type {String/Number}
             * @default 100%
             */
            width: "100%",
            /**
             * @description 组件高度，可设定百分比或绝对像素值
             * @type {String/Number}
             * @deault 100%
             */
            height: "100%",
            /**
             * @description 组件是否显示
             * @type {Boolean}
             * @default true
             */
            visible: true,
            /**
             * @description 样式名称，只允许添加padding,margin等样式，不允许添加颜色，图片等资源
             * @type {String}
             * @default ""
             */
            widgetClass: "",
            /**
             * @description 组件渲染的目标标签ID
             * @type {String}
             * @default null
             */
            renderTo: null,
            /**
             * @description 组件监听事件
             * @type {Object}
             * @default null
             */
            listenerEvents: null
        },
        /**
         * @description 组件隐藏
         */
        hide: function() {
            this.renderEl.hide();
            this.visible = false;
        },
        /**
         * @description 组件显示
         */
        show: function() {
            this.renderEl.show();
            this.visible = true;
            this.doLayout();
        },
        /**
         * @description 判断当前组件是隐藏还是显示状态: true:显示， false:隐藏状态
         * @returns {boolean} 返回当前组件是隐藏还是显示状态
         */
        isVisible: function() {
            return this.visible;
        },
        /**
         * @description 组件渲染
         * @param {String} id 组件ID
         */
        render: function(id) {
            var me = this;
            // 是否已创建
            if (me.rendered) {
                return;
            }
            var timeBegin = $.date.getMilliseconds(),
                timeEnd, options = me.options;
            // 渲染失败，直接返回，后续的设置毫无意义
            if (!me._render(id)) {
                return;
            }
            me.setWH(options.width, options.height);
            timeEnd = $.date.getMilliseconds();
            me._info("Render. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            if (me.rendered) {
                me._triggerHandler(me, "rendered");
            }
        },
        /**
         * @description 取得组件中的图片的Canvas对象(原生DOM对象)，如果是容器，返回的是容器中的所有图片整合成一起的图片
         * @returns {Object} return the canvas object of the image
         */
        getCanvasObject: function() {
            var me = this;

            return me._getCanvasObject();
        },
        /**
         * @private
         * @description 如果没有实现的子类，返回null，表示没有此类对象
         * @returns {Object} 返回null，表示没有此类对象
         */
        _getCanvasObject: function() {
            return null;
        },
        /**
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         * @param {Boolean} force 是否强制刷新，不管大小是否发生变化
         */
        doLayout: function(force) {
            // 不允许执行doLayout的情况
            // 1. 渲染之前也不应该进行doLayout
            // 2. 隐藏状态下，不需要doLayout，此时不能取到正确的DOM尺寸
            if (!this.rendered || !this.renderEl.is(":visible")) {
                this.lastLayoutWidth = 0;
                this.lastLayoutHeight = 0;
                return;
            }

            // 避免在同一尺寸下重复执行无谓的doLayout
            var width = this.getWidth();
            var height = this.getHeight();

            // 如果宽度、高度有一个为0，返回
            if (0 === width || (0 === height && this.options.height !== "auto")) {
                return;
            }

            if (this.lastLayoutWidth === width && this.lastLayoutHeight === height) {
                if (force !== true) {
                    return;
                }
            } else {
                this.lastLayoutWidth = width;
                this.lastLayoutHeight = height;
            }

            // 启动容器大小变化监控
            $("body").onResize();

            var timeBegin = $.date.getMilliseconds(),
                timeEnd, options = this.options;
            this._doLayout();
            timeEnd = $.date.getMilliseconds();
            this._info("Do Layout. Time-consuming = " + (timeEnd - timeBegin) + "ms");
        },
        /**
         * @description 设置值
         * @param {Object/Array} obj 值对象
         */
        setValue: function(obj) {
            if ($.isUndefined(obj)) {
                return;
            }
            this._hideEmptyText(obj);
            var timeBegin = $.date.getMilliseconds(),
                timeEnd;
            this.options.value = $.objClone(obj);
            this._setValue(obj);
            timeEnd = $.date.getMilliseconds();
            this._info("Set value. Time-consuming = " + (timeEnd - timeBegin) + "ms");
        },
        /**
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        setWidth: function(width) {
            var me = this;

            // 登记resize事件
            if ($.type(width) === "string" && me.renderEl) {
                me.renderEl.onResize(function() {
                    me.doLayout();
                });
            }

            me.options.width = width;

            // 更改_initConfig记录的width/height的情况：
            // 1. 修改百分比
            // 2. 修改绝对值
            // 3. 绝对值修改为百分比
            // 另，如果修改了百分比值，需要手动调用父级容器的doLayout刷新布局
            if ($.type(width) === "string" || ($.type(width) === "number" && $.type(me._initConfig.width) === "number")) {
                me._initConfig.width = width;
            }

            me._setWidth(width);
            me.doLayout();
        },
        /**
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        setHeight: function(height) {
            var me = this;

            // 登记Resize事件
            if ($.type(height) === "string" && me.renderEl) {
                me.renderEl.onResize(function() {
                    me.doLayout();
                });
            }

            me.options.height = height;

            // 更改_initConfig记录的width/height的情况：
            // 1. 修改百分比
            // 2. 修改绝对值
            // 3. 绝对值修改为百分比
            // 另，如果修改了百分比值，需要手动调用父级容器的doLayout刷新布局
            if ($.type(height) === "string" || ($.type(height) === "number" && $.type(me._initConfig.height) === "number")) {
                me._initConfig.height = height;
            }

            me._setHeight(height);
            me.doLayout();
        },
        /**
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        setWH: function(width, height) {
            var me = this;

            // 登记Resize事件
            if (($.type(width) === "string" || $.type(height) === "string") && me.renderEl) {
                me.renderEl.onResize(function() {
                    me.doLayout();
                });
            }

            me.options.width = width;
            me.options.height = height;

            // 更改_initConfig记录的width/height的情况：
            // 1. 修改百分比
            // 2. 修改绝对值
            // 3. 绝对值修改为百分比
            // 另，如果修改了百分比值，需要手动调用父级容器的doLayout刷新布局
            if ($.type(width) === "string" || ($.type(width) === "number" && me._initConfig && $.type(me._initConfig.width) === "number")) {
                me._initConfig.width = width;
            }

            if ($.type(height) === "string" || ($.type(height) === "number" && me._initConfig && $.type(me._initConfig.height) === "number")) {
                me._initConfig.height = height;
            }

            me._setWH(width, height);
            me.doLayout();
        },
        /**
         * @description 设置组件相对整个文档的上下左右偏移值
         * @param {String} h 水平方向位置，可选left/right
         * @param {String} v 垂直方向位置，可选top/bottom
         * @param {Object} offset 偏移值，格式为{"top": number, "left": number}，例如{"top": 10, "left": 10}
         */
        setOffset: function(h, v, offset) {
            var me = this,
                logPrefix = "Function setOffset(): ";
            if ($.isNull(offset)) {
                me._error(logPrefix + "The parameter is null!");
                return;
            }

            function _offset() {
                var top,
                align = Sweet.constants.align,
                    left;
                if (align.LEFT === h) {
                    left = offset.left;
                    if (align.TOP === v) {
                        top = offset.top;
                    } else if (align.BOTTOM === v) {
                        top = $(document).height() - me.getHeight() - offset.top;
                    } else {
                        me._error(logPrefix + "Unsupported parameter. v = " + h);
                        return;
                    }
                } else if (align.RIGHT === h) {
                    left = $(document).width() - me.getWidth() - offset.left;
                    if (align.TOP === v) {
                        top = offset.top;
                    } else if (align.BOTTOM === v) {
                        top = $(document).height() - me.getHeight() - offset.top;
                    } else {
                        me._error(logPrefix + "Unsupported parameter. v = " + h);
                        return;
                    }
                } else {
                    me._error(logPrefix + "Unsupported parameter. h = " + h);
                    return;
                }

                me.renderEl.css({
                    "position": "absolute",
                    "top": top,
                    "left": left
                });
            }

            _offset();
            $(document).onResize(function() {
                Sweet.Task.Delay.start({
                    id: "sweet-setoffset-delay",
                    run: function() {
                        _offset();
                    },
                    delay: 350
                });
            });
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        getWidth: function() {
            var me = this,
                width;
            width = me._getWidth();

            return "number" !== typeof width ? 0 : width;
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        getHeight: function() {
            var me = this,
                height;
            height = me._getHeight();

            return "number" !== typeof height ? 0 : height;
        },
        /**
         * @description 获取值
         * @return {Object/Array} obj 返回值
         */
        getValue: function() {
            var timeBegin = $.date.getMilliseconds(),
                timeEnd, obj;
            obj = this._getValue();
            timeEnd = $.date.getMilliseconds();
            this._info("Get value. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            return obj;
        },
        /**
         * 注册监听事件，只支持一次注册，第二次注册会覆盖第一次的注册
         * @param {String} eventName 事件名称
         * @param {Object} callBack 回调函数
         */
        addListener: function(eventName, callBack) {
            var me = this,
                handlers = {};
            if (!$.isNull(eventName)) {
                handlers[eventName] = callBack;
            }
            me.handlers = $.extend({}, handlers, me.handlers);
            // 组件支持事件类型校验,组件非禁用状态时，不触发事件，由子类控制
            $.each(handlers, function(handlerName, func) {
                if ($.isNull(me.eventNames[handlerName])) {
                    throw new Error("Unsupport event! Event name: " + handlerName);
                }
            });
            me._addListener(eventName, callBack);
        },
        /**
         * 删除注册监听事件
         * @param {String} eventName 事件名称
         */
        removeListener: function(eventName) {
            var me = this;
            me.handlers = me.handlers || {};
            me._removeListener(eventName);
            if ($.isNull(eventName)) {
                delete me.handlers;
            } else {
                delete me.handlers[eventName];
            }
        },
        /**
         * @description 返回组件的jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        getWidgetEl: function(original) {
            var me = this,
                obj;
            if (me.renderEl) {
                obj = original ? me.renderEl[0] : me.renderEl;
            } else {
                obj = me._getWidgetEl(original);
            }

            // 标识，垃圾回收使用
            me.getWidgetElFlag = true;

            return obj;
        },
        /**
         * @private
         * @description 隐藏emptyText，需要子组件实现
         */
        _hideEmptyText: $.noop,
        /**
         * @private
         * @description 返回组件jquery对象，适用于未指定渲染ID时返回对象，需要子组件实现
         */
        _getWidgetEl: $.noop,
        /**
         * @private
         * 子类扩展实现注册监听
         */
        _addListener: $.noop,
        /**
         * @private
         * 删除注册监听事件，子类继承实现
         */
        _removeListener: $.noop,
        /**
         * @private
         * @description 组件配置属性校验，比如属性间互斥等
         */
        _optionsValidate: $.noop,
        /**
         * @private
         * @description 组件渲染, 子类继承实现
         * @param {String} id 宿主ID
         * @return {Boolean} true:渲染成功 false:渲染失败
         */
        _render: function(id) {
            var me = this;
            if (!id || me.rendered) {
                return false;
            }
            if (!me.renderEl) {
                // 创建宿主元素
                if (!me._createRenderEl(id)) {
                    return false;
                }
            }

            return true;
        },
        /**
         * @private
         * @description 组件宽度、高度发生变化后调用，进行页面重绘，子类继承实现。
         */
        _doLayout: $.noop,
        /**
         * @private
         * @description 关闭浮动窗口，子类继承实现。框架统一调用。
         */
        _closeFloatPanel: $.noop,
        /**
         * @private
         * @description 设置值, 子类继承实现
         */
        _setValue: $.noop,
        /**
         * @private
         * @description 获取值, 子类继承实现
         */
        _getValue: $.noop,
        /**
         * @private
         * @description 设置组件宽度，子类继承实现
         */
        _setWidth: $.noop,
        /**
         * @private
         * @description 设置组件高度，子类继承实现
         */
        _setHeight: $.noop,
        /**
         * @private
         * @description 设置组件宽度、高度，子类继承实现
         */
        _setWH: $.noop,
        /**
         * @private
         * @description 返回组件宽度，子类继承实现
         */
        _getWidth: $.noop,
        /**
         * @private
         * @description 返回组件高度，子类继承实现
         */
        _getHeight: $.noop,
        /**
         * @private
         * 组件创建前，初始化操作，子类继承实现
         */
        _beforeCreateSweetWidget: $.noop,
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: $.noop,
        /**
         * @private
         * @description 创建组件
         */
        _create: function() {
            // 是否已创建
            if (this.rendered) {
                return;
            }

            var me = this,
                timeBegin = $.date.getMilliseconds(),
                timeEnd, options = me.options,
                listeners;
            // 标志是否允许进行自动doLayout
            me._frozen = false;
            me.__frozenDoLayout = $.noop;
            me.__frozenDoLayout2 = $.noop;

            me.visible = me.options.visible;
            if (!me.handlers) {
                me.handlers = {};
            }
            // id不存在, 随机分配
            if ($.isNull(options.id)) {
                options.id = "sweet-" + uuid++;
            }

            if (!$.isNull(Sweet._widgets[options.id])) {
                me._error("Duplicate ID! id=" + options.id);
                return;
            }
            listeners = options["listenerEvents"];
            if (!$.isEmptyObject(listeners)) {
                $.each(listeners, function(eventName, callback) {
                    me.addListener(("" + eventName), callback);
                });
            }
            // 保存初始配置信息
            me._initConfig = $.objCopy(me.options);

            // 创建
            me._beforeCreateSweetWidget();
            me._createSweetWidget();
            me._afterCreateSweetWidget();

            // 提供组件扩展功能，将大组件拆分成多个小组件，业务也可以基于此扩展组件
            if (me._extendHandlers) {
                $(me._extendHandlers).each(function() {
                    this.call(me);
                });
            }

            // 渲染
            me._render(options.renderTo);

            // 渲染后设置大小才生效
            me.setWH(options.width, options.height);

            // 保存组件
            Sweet._widgets[options.id] = me;

            timeEnd = $.date.getMilliseconds();
            me._info("Create widget. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            if (me.rendered) {
                me._triggerHandler(me, "rendered");
            }
        },
        /**
         * @private
         * @description 创建容器, 子类继承实现
         * @param {String} id 页面原始ID
         * @return {Boolean} true:创建成功 false:创建失败
         */
        _createRenderEl: function(id) {
            var me = this,
                options = me.options;
            if (id && !me.renderEl) {
                me.renderEl = $("#" + id);
                if (0 === me.renderEl.length) {
                    return false;
                }
                me.options.renderTo = id;
            }
            if (!options.visible) {
                me.renderEl.hide();
            }

            return true;
        },
        /**
         * @private
         * @description 子类继承实现, 绘制具体组件
         */
        _createSweetWidget: $.noop,
        /**
         * @description 销毁组件, 释放资源
         */
        destroy: function() {
            var me = this;
            // 频繁调用destroy时，减少tooltip.reset的调用
            Sweet.Task.Delay.start({
                id: "sweet-widgets-destroy-reset-tooltip",
                run: function() {
                    Sweet.ToolTip.reset();
                },
                delay: 100
            });
            me.removeListener();
            //子类实现销毁bind的事件等，dom销毁统一在_destroyDom中进行
            me._destroyWidget();
            me._destroyDom();
            if (!$.isNull(me.options)) {
                delete Sweet._widgets[me.options.id];
            }
            //删除对象的所有属性
            for (var v in me) {
                if (me.hasOwnProperty(v)) {
                    delete me[v];
                }
            }
        },
        /**
         * @description 销毁Dom, 区别于destroy
         * @private
         */
        _destroyDom: function() {
            var me = this;
            if (me.renderEl) {
                me.renderEl.empty();
                me.renderEl = null;
                me.rendered = false;
            }
        },
        /**
         * @private
         * @description 子类继承实现
         */
        _destroyWidget: $.noop,
        /**
         * 设置是否允许执行doLayout，包括doLayout和_doLayout
         * @param {Boolean} flag 标志
         * @private
         */
        _freeze: function(flag) {
            "use strict";
            var me = this;
            // 不需要重复设置同一状态
            if (me._frozen === flag) {
                return;
            } else {
                me._frozen = flag;
            }

            // 替换doLayout函数，以屏蔽原处理
            if (flag) {
                me.__frozenDoLayout = me.doLayout;
                me.__frozenDoLayout2 = me._doLayout;
                me.doLayout = $.noop;
                me._doLayout = $.noop;
            } else {
                me.doLayout = me.__frozenDoLayout;
                me._doLayout = me.__frozenDoLayout2;
                me.__frozenDoLayout = $.noop;
                me.__frozenDoLayout2 = $.noop;
            }
        },
        /**
         * @private
         * @description 触发body上的click事件
         */
        _triggerBodyClick: function() {
            $(document.body).click();
        },
        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**
         * @private
         * @description 禁止选中
         */
        _unselectable: function() {
            return false;
        },
        /**
         * @private
         * @description error级别日志打印
         * @param {String} msg 打印信息
         */
        _error: function(msg) {
            if (!sweetDebug) {
                return;
            }
            $.error("[ERROR]" + this.sweetWidgetName + msg);
        },
        /**
         * @private
         * @description info级别日志打印
         * @param {String} msg 打印信息
         */
        _info: function(msg) {
            if (!sweetDebug) {
                return;
            }
            if (Sweet.constants.logLevel.INFO === Sweet.logLevel) {
                $.log("[INFO]" + this.sweetWidgetName + msg);
            }
        }
    });
    /**
     * @description SweetUI组件基类，不能直接使用
     * @name Sweet.widget
     * @class
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * </pre>
     */
    Sweet.widget = $.sweet.widget;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * dialog组件
 * 2013/1/25
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * dialog组件
 * @name Sweet.Dialog
 * @class
 * @extends Sweet.widget
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * </pre>
 */
(function($, undefined) {

    var self,
    dialogTitleClass = "sweet-dialog-title",
        dialogTitleCloseClass = "sweet-dialog-title-close",
        dialogContentClass = "sweet-dialog-content",
        dialogSuccessClass = "sweet-dialog-content-success",
        dialogErrorClass = "sweet-dialog-content-error",
        dialogWarnClass = "sweet-dialog-content-warning",
        dialogConfirmClass = "sweet-dialog-content-confirm",
        dialogPromptClass = "sweet-dialog-content-prompt",
        dialogPromptTextClass = "sweet-dialog-content-prompt-text",
        dialogPromptInputClass = "sweet-dialog-content-prompt-input",
        dialogBottomClass = "sweet-dialog-bottom",
        dialogButtonClass = "sweet-form-button",
        dialogTextClass = "sweet-dialog-text",
        dialogTextPicClass = "sweet-dialog-text-pic",
        inputElId = "sweet-dialog-content-input";

    $.widget("sweet.widgetDialog", $.sweet.widget, /** @lends Sweet.Dialog.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-dialog]",
        defaultElement: "<div>",
        defaultDialogBg: "sweet-dialog-bg",
        // dialog组件公共配置参数
        options: /** @lends Sweet.Dialog.prototype*/
        {
            /**
             * dialog宽度
             * @type {String/Number}
             * @default 330px
             */
            width: 330,
            /**
             * dialog高度
             * @type {String/Number}
             * @default 130px
             */
            height: 130,
            /**
             * 是否模态窗口
             * @type {Boolean}
             * @default true
             */
            modal: true,
            /**
             * 是否阻止事件冒泡
             * @type {Boolean}
             */
            propagation: false
        },
        /**
         * @description 提示dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,        宽度
         *      height: 137,       高度
         *      modal: true/false, 是否模态
         *      message: "",       提示信息
         *      listeners: {
         *          "ok": func     确定按钮回调
         *      }
         *  }
         * </pre>
         */
        alert: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};
            self._showDialog({
                "dialogClass": "",
                "propagation": params.propagation,
                "prompt": param.prompt ? param.prompt : Sweet.core.i18n.dialog.alert,
                "modal": params.modal,
                "message": params.message,
                "okFun": listeners.ok
            });
            self.textEl.removeClass().addClass(dialogTextClass);
            self.cancelButtonEl.hide();
            self.inputEl.hide();
            return self;
        },
        /**
         * @description 错误dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,        宽度
         *      height: 137,       高度
         *      modal: true/false, 是否模态
         *      message: "",       提示信息
         *      listeners: {
         *          "ok": func     确定按钮回调
         *      }
         *  }
         * </pre>
         */
        success: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};
            self._showDialog({
                "dialogClass": dialogSuccessClass,
                "propagation": params.propagation,
                "prompt": Sweet.core.i18n.dialog.success,
                "modal": params.modal,
                "message": params.message,
                "okFun": listeners.ok
            });
            self.textEl.addClass(dialogTextPicClass);
            self.cancelButtonEl.hide();
            self.inputEl.hide();
            return self;
        },
        /**
         * @description 错误dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,        宽度
         *      height: 137,       高度
         *      modal: true/false, 是否模态
         *      message: "",       提示信息
         *      listeners: {
         *          "ok": func     确定按钮回调
         *      }
         *  }
         * </pre>
         */
        error: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};
            self._showDialog({
                "dialogClass": dialogErrorClass,
                "propagation": params.propagation,
                "prompt": Sweet.core.i18n.dialog.error,
                "modal": params.modal,
                "message": params.message,
                "okFun": listeners.ok
            });
            self.textEl.addClass(dialogTextPicClass);
            self.cancelButtonEl.hide();
            self.inputEl.hide();
            return self;
        },
        /**
         * @description 警告dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,        宽度
         *      height: 137,       高度
         *      modal: true/false, 是否模态
         *      message: "",       提示信息
         *      listeners: {
         *          "ok": func     确定按钮回调
         *      }
         *  }
         * </pre>
         */
        warn: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};
            self._showDialog({
                "dialogClass": dialogWarnClass,
                "propagation": params.propagation,
                "prompt": Sweet.core.i18n.dialog.warn,
                "modal": params.modal,
                "message": params.message,
                "okFun": listeners.ok,
                "cancelFun": listeners.cancel
            });
            self.textEl.addClass(dialogTextPicClass);
            self.cancelButtonEl.hide();
            self.inputEl.hide();
            return self;
        },
        /**
         * @description 确认dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,        宽度
         *      height: 137,       高度
         *      modal: true/false, 是否模态
         *      message: "",       提示信息
         *      listeners: {
         *          "ok": func,    确定按钮回调
         *          "cancel": func 取消按钮回调
         *      }
         *  }
         * </pre>
         */
        confirm: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};
            self._showDialog({
                "dialogClass": dialogConfirmClass,
                "propagation": params.propagation,
                "prompt": Sweet.core.i18n.dialog.confirm,
                "modal": params.modal,
                "message": params.message,
                "okFun": listeners.ok,
                "cancelFun": listeners.cancel
            });
            self.textEl.addClass(dialogTextPicClass);
            self.cancelButtonEl.show();
            self.inputEl.hide();
            return self;
        },
        /**
         * @description 带输入框的dialog
         * @param {Object} param
         * <pre>
         *  {
         *      width: 330,             宽度
         *      height: 137,            高度
         *      modal: true/false,      是否模态
         *      message: "",            提示信息
         *      required: true/false,   是否必填项
         *      validateFun: Function,  校验函数，同Sweet.form.TextField组件validateFun属性
         *      emptyText: "",          同Sweet.form.TextField组件emptyText属性
         *      listeners: {
         *          "ok": func,         确定按钮回调
         *          "cancel": func      取消按钮回调
         *      }
         *  }
         * </pre>
         */
        prompt: function(param) {
            var params = $.extend({}, self.options, param),
                listeners = params.listeners || {};
            self.params = params || {};

            function onOK(event) {
                if ($.isFunction(listeners.ok)) {
                    return listeners.ok(event, self.inputTextEl.getValue());
                }
            }
            self._showDialog({
                "dialogClass": dialogPromptClass,
                "propagation": params.propagation,
                "prompt": Sweet.core.i18n.dialog.prompt,
                "modal": params.modal,
                "message": params.message,
                "okFun": onOK,
                "cancelFun": listeners.cancel
            });
            self.textEl.removeClass().addClass(dialogPromptTextClass + " " + dialogTextClass);
            self.cancelButtonEl.show();
            self.inputEl.show();
            // 创建文本输入框
            if (!self.inputTextEl) {
                var vid = (params.vID ? params.vID : params.id) + "_prompt_text";
                self.inputTextEl = new Sweet.form.TextField({
                    width: self.contentEl.width(),
                    required: params.required || false,
                    minLength: params.minLength || 0,
                    maxLength: params.maxLength || Number.MAX_VALUE,
                    errorModel: Sweet.constants.tipAttr.MODEL_NORMAL,
                    validateFun: params.validateFun,
                    emptyText: params.emptyText,
                    vID: vid,
                    renderTo: inputElId
                });
            } else {
                self.inputTextEl.setValue({
                    "text": "",
                    "value": ""
                });
            }
            return self;
        },
        /**
         * @description 显示dialog
         */
        show: function() {
            self.dialogEl.show();
        },
        /**
         * @description 隐藏dialog
         */
        hide: function() {
            self.dialogEl.hide();
        },
        /**
         * @description 获取form组件对象，返回jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        _getWidgetEl: function(original) {
            return original ? this.dialogEl[0] : this.dialogEl;
        },
        /**
         * @private
         * @description 重新绘制dialog窗口
         */
        _doLayout: function() {
            var me = this,
                params = me.params || {},
                options = me.options,
                width = params.width || options.width,
                height = params.height || options.height,
                doc = $(document),
                docWidth,
                docHeight,
                top,
                left;
            // 组件初始化调用时document还未完成，捕获异常，不做处理
            try {
                docWidth = doc.width();
                docHeight = doc.height();
            } catch (e) {
                return;
            }
            top = Math.floor((docHeight - height) / 3);
            left = Math.floor((docWidth - width) / 2);
            me.dialogEl.css({
                "top": top < 0 ? 0 : top,
                "left": left
            }).width(width).height(height);
            //不是带输入框的信息对话框，当文本内容高度大于指定高度时，出滚动条
            if (me.dialogClass === dialogPromptClass) {
                var textElH = parseInt(me.textEl.css("height"));
                me.textDiv.css({
                    width: "100%",
                    height: textElH
                });
            } else {
                var textElTop = me.textEl.offset().top,
                    bottomElTop = me.bottomEl.offset().top,
                    textDivH = bottomElTop - textElTop - 7,
                    textElH = parseInt(me.textEl.css("height"));
                me.textDiv.css({
                    width: "100%",
                    height: textDivH
                });
                if (textElH > textDivH) {
                    if (me.textDiv.css("overflow-y") !== "auto") {
                        me.textDiv.css("overflow-y", "auto");
                    }
                } else {
                    me.textDiv.css("overflow-y", "hidden");
                }
            }
        },
        /**
         * @private
         * @description 显示dialog
         * @param {Object} params 参数，格式如下：
         *      {String} dialogClass 对话框样式，标识错误、提示等图片
         *      {String} prompt 对话框标题信息
         *      {String} modal 是否模态窗口
         *      {String} message dialog提示信息
         *      {Function} okFun 确定按钮回调事件
         *      {Function} cancelFun 取消按钮回调事件
         */
        _showDialog: function(params) {
            var dialogClass = params.dialogClass,
                prompt = params.prompt,
                modal = params.modal,
                message = params.message,
                okFun = params.okFun,
                cancelFun = params.cancelFun,
                propagation = params.propagation;
            // 记录当前弹出窗口样式
            self.dialogClass = dialogClass;

            function closeDialog(result) {
                // 确认或取消按钮只能关闭与之匹配的窗口
                if (dialogClass !== self.dialogClass) {
                    return;
                }
                if (("boolean" === $.type(result) && result) || undefined === result) {
                    self._closeDialog();
                }
            }

            function okFunction(event, okFun, dialogClass) {
                var result = true;
                if ($.isFunction(okFun)) {
                    result = okFun.call(null, event);
                }
                closeDialog(result, dialogClass);
            }

            function cancelFunction(event, cancelFun, dialogClass) {
                var result = true;
                if ($.isFunction(cancelFun)) {
                    result = cancelFun.call(null, event);
                }
                closeDialog(result, dialogClass);
            }

            if (!self.hasAppend) {
                self.dialogEl.appendTo("body");
                self.hasAppend = true;
            }
            var dialogEl = self.dialogEl,
                zIndex = 0;
            // 是否模态对话框
            if (modal) {
                dialogEl.sweetMask({
                    "maskAll": true,
                    "propagation": propagation
                });
                zIndex = $.string.toNumber(dialogEl.getSweetMaskZIndex()) + 1;
            } else {
                zIndex = $.getMaxZIndex();
            }
            dialogEl.css("z-index", zIndex);
            // 是否阻止事件冒泡
            if (propagation) {
                dialogEl.bind("click", function(e) {
                    // 全局遮罩时，阻止事件冒泡
                    e.stopImmediatePropagation();
                });
            }
            self.titleTextEl.html(prompt);
            self.picDivEL.removeClass().addClass(dialogClass);
            self.textEl.html(message);
            self.show();
            self._doLayout();
            // 绑定事件
            self.okButtonEl.unbind().bind("click", {
                "dialogClass": dialogClass
            }, function(event) {
                okFunction(event, okFun, event.data.dialogClass);
            });
            self.cancelButtonEl.unbind().bind("click", {
                "dialogClass": dialogClass
            }, function(event) {
                cancelFunction(event, cancelFun, event.data.dialogClass);
            });
            // 增加拖动功能
            self.dialogEl.draggable({
                handle: "#" + self.titleId,
                containment: "document",
                scroll: false
            });
        },
        /**
         * @private
         * @description 关闭dialog
         * @param {Object} e 按钮事件对象
         */
        _closeDialog: function(e) {
            var event = e || {},
            data = event.data || {},
            that = data.me || this,
                params = that.params || {},
                modal = params.modal;
            if (modal) {
                that.dialogEl.unSweetMask();
            }
            that.hide();
        },
        /**
         * @private
         * @description 绘制对话框组件
         */
        _createSweetWidget: function() {
            if (self) {
                return;
            }
            var me = this,
                options = me.options,
                dialogEl = me.dialogEl = $("<div>").hide();
            self = me;
            dialogEl.addClass(me.defaultDialogBg + options.widgetClass)
                .attr("id", options.id)
                .height(options.height)
                .width(options.width);
            // 添加标题
            me._createTitle();
            // 添加提示内容
            me._createContent();
            // 添加按钮
            me._createButtons();
        },
        /**
         * @private
         * @description 创建dialog标题
         */
        _createTitle: function() {
            var me = this,
                options = me.options,
                params = me.params || {},
                titleEl = me.titleEl = $("<div>"),
                closeSapn = me.closeSapn = $("<span>").addClass(dialogTitleCloseClass),
                titleTextEl = me.titleTextEl = $("<em>"),
                titleId = me.titleId = me.id + "-dialog-title";
            closeSapn.bind("click", function() {
                me._closeDialog();
            })
                .appendTo(titleEl);
            titleTextEl.appendTo(titleEl);
            titleEl.attr("id", titleId).addClass(dialogTitleClass)
                .appendTo(this.dialogEl);
        },
        /**
         * @private
         * @description 添加dialog主体内容
         */
        _createContent: function() {
            var me = this,
                options = me.options,
                contentEl = me.contentEl = $("<div>"),
                picDivEl = me.picDivEL = $("<div>").appendTo(contentEl),
                textDiv = me.textDiv = $("<div>").appendTo(picDivEl);
            me.textEl = $("<p>").appendTo(textDiv);
            me.inputEl = $("<div>").attr("id", inputElId).addClass(dialogPromptInputClass).appendTo(contentEl);
            contentEl.addClass(dialogContentClass)
                .appendTo(me.dialogEl);
        },
        /**
         * @private
         * @description 给dialog添加按钮
         */
        _createButtons: function() {
            var me = this,
                opt = me.options,
                id = opt.vID ? opt.vID : opt.id,
                buttonCss = {
                    "width": "65px",
                    "margin-left": "5px"
                },
                bottomEl = me.bottomEl = $("<div>").addClass(dialogBottomClass),
                okButtonEl = me.okButtonEl = $("<button>").attr("id", id + "_ok")
                    .addClass(dialogButtonClass),
                cancelButtonEl = me.cancelButtonEl = $("<button>").attr("id", id + "_cancel")
                    .addClass(dialogButtonClass);
            okButtonEl.css(buttonCss).text(Sweet.core.i18n.dialog.ok).appendTo(bottomEl);
            cancelButtonEl.css(buttonCss).text(Sweet.core.i18n.dialog.cancel).appendTo(bottomEl);
            bottomEl.appendTo(me.dialogEl);
        }
    });

    /**
     * @description dialog对象
     * @class
     * @extends jquery.sweet.widget.js
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建提示对话框：
     * var sweetAlert = Sweet.Dialog.alert({
     *     width: 330,
     *     height: 130,
     *     modal: false,
     *     message: "这是一个提示信息对话框！",
     *     listeners: {
     *         "ok": function() {
     *             alert("alert OK");
     *             sweetAlert.hide();
     *         }
     *     }
     * });
     */
    Sweet.Dialog = new $.sweet.widgetDialog({
        message: ""
    });

    /**
     * @description Sweet.Dialog的简写形式
     */
    Sweet.Msg = {
        /**
         * alert框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         */
        alert: function(message, width, height, okFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.alert({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    }
                }
            });
        },
        /**
         * 成功框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         */
        success: function(message, width, height, okFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.success({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    }
                }
            });
        },
        /**
         * 警告框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         */
        warn: function(message, width, height, okFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.warn({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    }
                }
            });
        },
        /**
         * 错误框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         */
        error: function(message, width, height, okFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.error({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    }
                }
            });
        },
        /**
         * 确认对话框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         * @param {Function} cancelFun 点击cancel按钮回调
         */
        confirm: function(message, width, height, okFun, cancelFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.confirm({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    },
                    "cancel": function(event) {
                        if ($.isFunction(cancelFun)) {
                            cancelFun.call(null, event);
                        }
                    }
                }
            });
        },
        /**
         * 带输入框的交互对话框
         * @param {String} message 提示信息
         * @param {Number} width 宽度
         * @param {Number} height 高度
         * @param {Function} okFun 点击OK按钮回调
         * @param {Function} cancelFun 点击cancel按钮回调
         */
        prompt: function(message, width, height, okFun, cancelFun) {
            if ($.isNull(message)) {
                return;
            }
            var dialog = Sweet.Dialog.prompt({
                width: width ? width : 330,
                height: height ? height : 130,
                message: message,
                listeners: {
                    "ok": function(event) {
                        if ($.isFunction(okFun)) {
                            okFun.call(null, event);
                        }
                    },
                    "cancel": function(event) {
                        if ($.isFunction(cancelFun)) {
                            cancelFun.call(null, event);
                        }
                    }
                }
            });
        }
    };
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件基类
 * 2012/11/25
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 创建form组件基类
 * @name Sweet.form
 * @class 
 * @extends Sweet.widget
 * @requires  
 * <pre>
 *  jquery.ui.core.js
 *  jquery.ui.widget.js
 *  jquery.sweet.widget.js
 * </pre>
 */
(function($, undefined) {
    var formBaseClass = "sweet-form-widget",
        textGrayClass = "sweet-form-combobox-textGray";

    $.widget("sweet.widgetForm", $.sweet.widget, /** @lends Sweet.form.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form]",
        defaultElement: "<input>",
        type: "text",
        widgetClass: "sweet.widgetForm", // 表明是Form类组件
        // form组件公共配置参数
        options: /** @lends Sweet.form.prototype*/
        {
            /**
             * @description 组件是否不可用
             * @type {Boolean}
             * @default false
             */
            disabled: false,

            /**
             * @description 组件值
             * @type {String/Number}
             * @default ""
             */
            value: ""
        },

        /**
         * @description 返回widget对象
         */
        widget: function() {
            return this.formEl;
        },

        /**
         * @description 设置组件是否可用
         * @param {Boolean} disabled true不可用 false可用
         */
        setDisabled: function(disabled) {
            var me = this,
                formEI = me.formElement;
            if ("boolean" !== typeof disabled) {
                me._error("setDisabled() Input parameter is not a Boolean type!");
                return;
            }

            formEI.removeAttr("readonly").removeAttr("disabled");
            formEI.attr("readonly", disabled);
            if (disabled) {
                formEI.addClass(textGrayClass);
            } else {
                formEI.removeClass(textGrayClass);
            }
            me.options.disabled = disabled;
            me._setDisabled(disabled);
            me.disabled = disabled;
            if (!disabled) {
                // 若配置了editable，再设置disabled不起作用
                if (false === me.editable) {
                    me.setEditable(false);
                }
            }
        },

        /**
         * @description 获取组件是否可用状态
         */
        getDisabled: function() {
            return this.options.disabled;
        },

        /**
         * @private
         * @description 获取form组件对象，返回jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        _getWidgetEl: function(original) {
            return original ? this.formEl[0] : this.formEl;
        },

        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            if (me.formEl) {
                me.formEl.externalWidth(width);
            }
        },

        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            if (me.formEl) {
                me.formEl.externalHeight(height);
            }
        },

        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.formEl.externalWidth();
        },

        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.formEl.externalHeight();
        },

        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        },
        /**
         * @description 刷新布局，子类继承实现，并调用super
         * @private
         */
        _doLayout: function() {},
        /**
         * @private
         * @description 获取组件值
         * @param {Object} value 组件值，格式为{value: 值, text: 文本， data: 值}
         */
        _setValue: function(value) {
            var me = this,
                inputText;
            if ($.isNull(value)) {
                return;
            }
            inputText = me._textCmpSetValue(value);
            me.formElement.val(inputText);
        },
        /**
         * @private
         * @description 文本框类组件在setValue时支持匹配不同的数据类型
         * @param {Object} value 组件值，格式为{value: 值, text: 文本, data: 值}
         * @return 返回值，String类型
         */
        _textCmpSetValue: function(value) {
            var me = this,
                options = me.options,
                inputText;
            // 先判断text
            if (!value) {
                return "";
            }
            if (0 === value.text) {
                inputText = value.text;
            } else if ($.isNull(value.text)) {
                inputText = "";
            } else {
                inputText = value.text;
            }

            // inputText为"",再判断value
            if ("" === inputText) {
                if (0 === value.value) {
                    inputText = 0;
                } else if ($.isNull(value.value)) {
                    inputText = "";
                } else {
                    inputText = value.value;
                }
            }
            // 若value中，只有text或只有value
            if (0 !== value.value && !value.value) {
                options.value = {
                    value: value.text,
                    text: value.text,
                    data: value.data
                };
            } else if (0 !== value.text && !value.text) {
                options.value = {
                    value: value.value,
                    text: value.value,
                    data: value.data
                };
            } else {
                options.value = value;
            }
            return inputText;
        },

        /**
         * @private
         * @description 设置组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                tempData = null,
                options = me.options;
            var val = this.formElement.val();
            // 若手动输入内容
            if (options.value) {
                tempData = options.value.data;
            }
            if (!options.value || (options.value && val !== options.value.text)) {
                options.value = {
                    text: val,
                    value: val,
                    data: tempData
                };
            }
            return $.objClone(options.value);
        },

        /**
         * @private
         * @description 创建form组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                formEl = me.formEl = $("<div>"),
                options = me.options;

            formEl.width(options.width)
                .height(options.height)
                .attr("id", options.id)
                .addClass(formBaseClass)
                .addClass(options.widgetClass);

            me._beforeCreateFormWidget();
            me._createFormWidget();
            me._afterCreateFormWidget();

            // 禁用
            me.disabled = false;
            me.setDisabled(options.disabled);
        },
        /**
         * @private
         * @description 创建form组件前操作，子类继承实现
         */
        _beforeCreateFormWidget: $.noop,

        /**
         * @private
         * @description 创建form组件
         */
        _createFormWidget: $.noop,

        /**
         * @private
         * @description 创建form组件后操作，子类继承实现
         */
        _afterCreateFormWidget: $.noop,

        /**
         * @private
         * @description 设置组件不可用样式，子类继承实现
         */
        _setDisabled: $.noop,

        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.formEl.appendTo(me.renderEl);
            me.rendered = true;

            me._afterRenderFormWidget();
            return true;
        },

        /**
         * @private
         * @description 渲染form组件后操作，子类继承实现
         */
        _afterRenderFormWidget: $.noop,

        /**
         * @private
         * @description 销毁form组件
         */
        _destroyWidget: function() {
            if (this.renderEl) {
                this.renderEl.find("*").unbind();
                this.renderEl.empty();
            }
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件-输入类组件
 * 2013/1/9
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 创建输入类组件
 * @name Sweet.form.Input
 * @class 
 * @extends Sweet.form
 * @requires 
 * <pre>
 *  jquery.ui.core.js
 *  jquery.ui.widget.js
 *  jquery.sweet.widget.js
 *  jquery.sweet.widget.form.js
 * </pre>
 */
(function($, undefined) {

    var inputContentClass = "sweet-form-content";

    $.widget("sweet.widgetFormInput", $.sweet.widgetForm, /** @lends Sweet.form.Input.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-input]",
        defaultElement: "<input>",
        type: "text",
        eventNames: /** @lends Sweet.form.Input.prototype*/
        {
            /**
             * @event
             * @description 值改变的事件
             */
            change: "改变值事件",
            /**
             * @event
             * @description 获得焦点事件
             */
            focus: "获得焦点事件"
        },
        defaultPaddingDivClass: "sweet-form-input",
        defaultPaddingDivDisabledClass: "sweet-form-input-disabled",
        defaultInputClass: "sweet-form-input-text",
        defaultInputPaddingClass: "sweet-form-input-text-padding",
        defaultInputEmptyDivClass: "sweet-form-input-emptyDiv",
        defaultInputEmptyDivDisabledClass: "sweet-form-empty-disabled",
        // form类输入组件公共配置参数
        options: /** @lends Sweet.form.Input.prototype*/
        {
            /**
             * @description 输入框为空时显示的字符
             * @type {Object/String/Number}
             * @default null
             */
            emptyText: null,
            /**
             * @description 输入类组件高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 是否可编辑
             * @type {Boolean}
             * @default true
             */
            editable: true,
            /**
             * @description 是否有label
             * @type {Boolean}
             * @default false
             */
            label: false,
            /**
             * @description label文字
             * @type {String}
             * @default null
             */
            labelText: null,
            /**
             * @description label宽度
             * @type {String/Number}
             * @default 0.3
             */
            labelWidth: 0.3,
            /**
             * @description 是否必选项
             * @type {Boolean}
             * @default false
             */
            required: false,
            /**
             * @description 错误提示的显示模式
             * @type {String}
             * @default "side"
             */
            errorModel: Sweet.constants.tipAttr.MODEL_SIDE,
            /**
             * @description 错误提示的内容
             * @type {String}
             * @default ""
             */
            tooltip: "",
            /**
             * @description 最小长度
             * @type {Number}
             * @default 0
             */
            minLength: 0,
            /**
             * @description 最大长度
             * @type {Number}
             * @default Number.MAX_VALUE
             */
            maxLength: Number.MAX_VALUE,
            /**
             * @description label文字是否显示符号
             * @type {Boolean}
             * @default true
             */
            symbol: true,
            /**
             * @description 是否包含空白字符
             * @type {Boolean}
             * @default true
             */
            blank: true,
            /**
             * @description 错误提示出现的条件，使用时自己定义
             * @type {Function}
             * @default false
             */
            validateFun: function() {
                return {
                    "success": true
                };
            }
        },
        /**
         * @description 设置输入类组件LabelText
         * @param {String} text: Label Text
         */
        setLabelText: function(text) {
            var me = this,
                opt = me.options;
            if (opt.symbol) {
                text += Sweet.constants.symbol.COLON;
            }
            if (opt.required) {
                me.label.children("label")[0].lastChild.textContent = text;
            } else {
                me.label.text(text);
            }
        },
        /**
         * @description 返回输入类组件LabelText
         * @return {String} text: Label Text
         */
        getLabelText: function() {
            var me = this;
            if (me.options.required) {
                return me.label.children("label")[0].lastChild.textContent;
            } else {
                return me.label.text();
            }
        },
        /**
         * @description 校验
         * @return {Boolean} 校验是否通过
         */
        validate: function() {
            var me = this;
            return me.check();
        },
        /**
         * @deprecated Function validate can be used instead
         * @description 内部校验（非空、长度等）
         * @return {Boolean} 校验是否通过
         */
        check: function() {
            var me = this,
                options = me.options,
                fun = options.validateFun,
                eventName = fun.eventName || "blur";
            //disabled状态下不做校验
            if (me.getDisabled()) {
                return;
            }
            // 常规校验通过后，才进行外部注册的blur校验事件
            if (me._checkFun()) {
                if ("object" !== typeof fun || eventName !== "blur") {
                    me.tipType = null;
                    me._showNormalTip();
                    return true;
                }
                return me._checkOuterFun();
            } else {
                return false;
            }
        },
        /**
         * @description 显示提示框
         * @param {Boolean} isCheckEmpty 是否为非空校验
         */
        showTip: function(isCheckEmpty) {
            var me = this,
                formEI = me.formElement,
                options = this.options,
                tipTitle = me.tipTitle,
                tipType = me.tipType,
                errorModel = options.errorModel;
            // 普通提示
            if (!tipType) {
                tipType = me.tipType = Sweet.constants.tipAttr.TYPE_NORMAL;
            }
            // 非空校验提示，tipType固定为"error",errorModel由外部设置，提示字符写死。
            if (isCheckEmpty) {
                tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                tipTitle = Sweet.core.i18n.tip.EMPTY_TITLE;
            }
            // 提示
            if (tipType && tipTitle) {
                // 若更换了提示内容
                if (!me.oldTipTitle || me.oldTipTitle !== tipTitle) {
                    if (me.oldTipTitle && me.oldTipTitle !== tipTitle) {
                        // 清除之前所有的提示
                        formEI.sweettip();
                        formEI.sweettip("destroy");
                    }
                    // 显示新的提示
                    formEI.sweettip();
                    formEI.attr({
                        tiptype: tipType,
                        errormodel: errorModel,
                        title: tipTitle
                    });
                    me.oldTipTitle = tipTitle;
                    // 立刻出现红色边框
                    if ("error" === tipType && "none" === errorModel) {
                        formEI.sweettip("showErrorBorder");
                    }
                    // 立刻出现错误提示，而不用鼠标移上去触发
                    if ("error" === tipType && "side" === errorModel) {
                        formEI.sweettip("open");
                    }
                }
            }
        },
        /**
         * @description 关闭提示框
         */
        closeTip: function() {
            if (!this.formElement) {
                return;
            }
            var me = this;
            me.formElement.attr("title", "");
            me.formElement.sweettip();
            me.formElement.sweettip("destroy");
            me.oldTipTitle = null;
        },
        /**
         * @description 设置组件只读
         * @param {Boolean} editable: true/false
         */
        setEditable: function(editable) {
            if (this.disabled) {
                return;
            }
            this.formElement.removeAttr("readonly").removeAttr("disabled");
            this.formElement.attr("readOnly", !editable);
            this.editable = editable;
            this._setEditable(editable);
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "change") {
                    //监听关闭时间面板
                    $(me.formElement).blur(function(event) {
                        if (me.oldValue !== me.formElement.val() && func) {
                            var val = me.getValue();
                            func.call(this, event, val);
                        }
                    });
                } else if (eventName === "focus") {
                    //focus事件
                    $(me.formElement).focus(function(event) {
                        func.call(this, event, me.getValue());
                    });
                }
            });
        },
        /**
         * @private
         * @description 清除事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};
            if (!eName || eName === "") {
                if (me.formElement) {
                    me.formElement.unbind();
                }
            } else {
                $.each(me.handlers, function(eventName, func) {
                    if (eName === eventName) {
                        me.formElement.unbind(eventName);
                    }
                });
            }
        },
        /**
         * @description 设置值(内部调用)
         * @param {Object} value 值对象
         * @param {Boolean} isCheck 设置值时是否要检查
         */
        _setValue: function(value, isCheck) {
            var me = this,
                inputText;
            if ($.isEmptyObject(value)) {
                value = {
                    value: ""
                };
            }
            inputText = me._textCmpSetValue(value);
            me.formElement.val(inputText);
            me.closeTip();
            if (true === isCheck || "true" === isCheck) {
                me.check();
            }
        },
        /**
         * @description 设置值
         * @param {Object} value 值对象
         * @param {Boolean} isCheck 设置值时是否要检查
         */
        setValue: function(value, isCheck) {
            var me = this,
                timeBegin,
                timeEnd;
            if ($.isEmptyObject(value)) {
                value = {
                    value: ""
                };
            }
            timeBegin = $.date.getMilliseconds();
            me.options.value = $.objClone(value);
            me._setValue(value, isCheck);
            timeEnd = $.date.getMilliseconds();
            me._info("Set value. Time-consuming = " + (timeEnd - timeBegin) + "ms");
        },
        /**
         * @private
         * @description 创建基本文本框对象
         */
        _createFormWidget: function() {
            var me = this,
                options = this.options;
            // 创建label标签
            me._createLabel();

            // 创建form组件
            me._createInputContainer();
            me._createInputField();

            // 校验
            me._check();
            me._focus();
            // 鼠标移上去，出现提示
            if (options.tooltip) {
                me.tipTitle = options.tooltip;
                me.showTip();
            }
            // 设置默认值
            if (!$.isEmptyObject(options.value)) {
                me._setValue(options.value);
            }
            // 是否只读
            me.setEditable(options.editable);
            // 设置为空时显示的字符
            me._setEmptyText();
        },
        /**
         * @description 创建输入区域容器 formDiv1El
         * @private
         */
        _createInputContainer: function() {
            "use strict";
            this.formDiv1El = $("<div>");
            this.formDiv1El.addClass(inputContentClass).appendTo(this.formEl);
        },
        /**
         * @private
         * @description 创建基本文本框前label标签
         */
        _createLabel: function() {
            if (!this.options.label) {
                return;
            }
            var me = this,
                options = me.options,
                labelClass = "sweet-form-label",
                label = me.label = $("<label>").addClass(labelClass),
                labelText = '';
            if (!$.isNull(options.labelText)) {
                labelText += $.htmlEscape(options.labelText);
                if (options.symbol) {
                    labelText += Sweet.constants.symbol.COLON;
                }
            } else {
                return;
            }
            var labelHtml = "<label><font class=\"sweet-form-label-required\" color=\"red\"";
            // 是否必选项
            if (options.required) {
                labelText = labelHtml + ">&nbsp;*&nbsp;</font>" + labelText;
            } else {
                if (options.blank) {
                    labelText = labelHtml + " style=\"visibility:hidden\">&nbsp;*&nbsp;</font>" + labelText;
                }
            }
            label.html(labelText).appendTo(me.formEl);
        },
        /**
         * @description Input类组件布局刷新基本处理
         * @private
         */
        _doLayout: function() {
            "use strict";
            var formElWidth = this.formEl.width() - $.getPaddingRight(this.formEl) - $.getPaddingLeft(this.formEl),
                labelWidth = this.labelWidth = this._doLabelLayout(formElWidth);

            if (this.formDiv1El) {
                this.formDiv1El.css("left", labelWidth);
            }
        },
        /**
         * @private
         * @description 计算label宽度
         * @param {Number} width 外层容器宽度
         */
        _doLabelLayout: function(width) {
            var me = this,
                options = me.options,
                labelWidth;
            if (me.label) {
                // 按百分比设定
                if (1 > options.labelWidth) {
                    labelWidth = Math.floor(width * options.labelWidth);
                } else {
                    labelWidth = options.labelWidth;
                }
            } else {
                labelWidth = 0;
            }

            return labelWidth;
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         */
        _setDisabled: function(disabled) {
            var me = this,
                emptyDivCls = me.defaultInputEmptyDivClass,
                emptyDisableDivCls = me.defaultInputEmptyDivDisabledClass,
                defPaddingCls = me.defaultPaddingDivClass,
                defDisablePaddingCls = me.defaultPaddingDivDisabledClass;
            if (me.emptyDiv) {
                if ($.isVisiable(me.emptyDiv)) {
                    if (disabled) {
                        if (!me.emptyDiv.hasClass(emptyDivCls)) {
                            return;
                        }
                        me.emptyDiv.removeClass(emptyDivCls).addClass(emptyDisableDivCls);
                    } else {
                        if (!me.emptyDiv.hasClass(emptyDisableDivCls)) {
                            return;
                        }
                        me.emptyDiv.removeClass(emptyDisableDivCls).addClass(emptyDivCls);
                    }
                }
            }
            if (disabled) {
                //问题单：DTS2013121403316 
                me.formElement.attr("disabled", true);
                me.formDiv2El.removeClass(defPaddingCls).addClass(defDisablePaddingCls);
            } else {
                //问题单：DTS2013121403316 
                me.formElement.attr("disabled", false);
                me.formDiv2El.removeClass(defDisablePaddingCls).addClass(defPaddingCls);
            }
            me.__setDisabled(disabled);
        },
        /**
         * @private
         * @description 子类实现，置灰除输入框以外其他控件
         */
        __setDisabled: $.noop,
        /**
         * @private
         * @description 绑定获取焦点事件
         */
        _focus: function() {
            var me = this;
            me.formElement.focus(function() {
                me.oldValue = me.formElement.val();
            });
        },
        /**
         * @private
         * @description 绑定校验事件，子类继承实现
         */
        _check: function() {
            var me = this;
            me.formElement.blur({
                "me": me
            }, me._onBlur);
        },
        /**
         * @private
         * @description 文本框失去焦点时触发
         * @param {Object} event 文本框事件对象
         */
        _onBlur: function(event) {
            var me = event.data.me;

            function delayCheck() {
                // 失去焦点之后，还有其他动作，这两个函数应该在最后调用
                me.validate();
            }

            //对于时间组件，失去焦点后就对时间纠错，防止change发生时拿到错误的时间值
            if (me.sweetWidgetName === "[widget-form-date]") {
                me._setRightTimeValue(me);
            }
            if (!me.getDisabled()) {
                me.delayCheckTimerInput = setTimeout(delayCheck, 500);
            }
        },
        /**
         * @private
         * @returns {Boolean} true 校验通过，false 校验不通过
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         */
        _checkFun: function(justGetResult) {
            var me = this;
            justGetResult = false;
            if (false === me._checkAllFun(justGetResult)) {
                return false;
            }
            if (!justGetResult) {
                me.closeTip();
            }

            return true;
        },
        /**
         * @private
         * @returns {Boolean} true 校验通过，false 校验不通过
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         */
        _checkAllFun: function(justGetResult) {
            if (!this.formElement) {
                return;
            }
            var me = this,
                options = me.options,
                val = me.formElement.val(),
                len = val.length;
            //非空校验，校验不通过直接返回，不进行长度校验
            if (options.required) {
                if (!val) {
                    if (!justGetResult) {
                        me._error("Can not be empty!");
                        me.showTip(true);
                    }
                    return false;
                }
            }
            // 长度校验
            if (len > options.maxLength || len < options.minLength) {
                if (!justGetResult) {
                    me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                    me.tipTitle = Sweet.core.i18n.tip.LENGTH_RANGE_1 + options.minLength + Sweet.core.i18n.tip.LENGTH_RANGE_2 + options.maxLength + Sweet.core.i18n.tip.LENGTH_RANGE_3;
                    me.showTip();
                }
                return false;
            }
        },
        /**
         * @description 文本框为空时设置显示的字符
         * @param {String} text 待设置的值
         */
        setEmptyText: function(text) {
            var me = this,
                formElement = me.formElement;
            if (!formElement) {
                return;
            }
            if ($.isNull(text)) {
                me.options.emptyText = null;
                formElement.removeAttr("placeholder");
            } else {
                me.options.emptyText = text;
                formElement.attr("placeholder", text);
            }
        },
        /**
         * @description 文本框为空时设置显示的字符
         * @private
         * @param {Boolean} flag 是否由获得焦点事件触发
         */
        _setEmptyText: function(flag) {
            var me = this,
                emptyText = me.options.emptyText,
                formElement = me.formElement;
            if (!formElement || !me.options.emptyText) {
                return;
            }
            if (!flag) {
                if (emptyText) {
                    formElement.attr("placeholder", emptyText);
                }
            } else {
                formElement.removeAttr("placeholder");
            }
        },
        /**
         * @private
         * @description 组件创建后执行的操作
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                options = me.options,
                fun = options.validateFun,
                eventName;
            if ("object" !== typeof fun) {
                return;
            }
            eventName = fun.eventName || "blur";
            if (eventName === "keypress" || eventName === "keyup" || eventName === "keydown" || eventName === "blur" || eventName === "focus") {
                me.formElement.bind(eventName, {
                    "me": me
                }, me._filterCharacter);
            }
        },
        /**
         * @private
         * @description 数值输入框，键盘按下时触发，过滤用户指定的字符
         * @param {type} event 数值输入框对象
         */
        _filterCharacter: function(event) {
            var me = event.data.me,
                options = me.options,
                fun = options.validateFun,
                type = event.type;

            // 防止重复执行外部注册的blur事件。
            // _onBlur()-->check()-->_checkOuterFun()-->fun.fun.call()，
            if ("blur" === type) {
                return;
            }
            var funResult = fun.fun.call(this, event, me.getValue(), fun.params);

            function delayFilterCharacter() {
                // 按照函数校验
                if (funResult && !funResult.success) {
                    me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                    me.tipTitle = funResult.message;
                    me.showTip();
                    return false;
                } else {
                    me.closeTip();
                    return true;
                }
            }
            setTimeout(delayFilterCharacter, 800);
        },
        /**
         * @private
         * @description 执行外部注册的校验函数
         * @param {type} event 数值输入框对象
         */
        _checkOuterFun: function() {
            var me = this,
                options = me.options,
                fun = options.validateFun;
            var funResult = fun.fun.call(this, null, me.getValue(), fun.params);
            // 按照函数校验
            if (funResult && !funResult.success) {
                me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                me.tipTitle = funResult.message;
                me.showTip();
                return false;
            } else {
                me.closeTip();
                me.tipType = null;
                me._showNormalTip();
                return true;
            }
        },
        /**
         * @private
         * @description 执行外部注册的校验函数
         * @param {type} event 数值输入框对象
         */
        _showNormalTip: function() {
            var me = this,
                options = me.options;

            me.showTipTimerInput = setTimeout(function() {
                // 若为普通tip提示，仍然需要提示
                if (options.tooltip && !me.tiptype) {
                    me.tipTitle = options.tooltip;
                    me.showTip();
                }
            }, 600);
        },
        /**
         * @private
         * @description 销毁form组件
         */
        _destroyWidget: function() {
            var me = this;
            me._super();
            // 关闭定时器
            if (me.delayCheckTimerInput) {
                clearTimeout(me.delayCheckTimerInput);
            }
            if (me.showTipTimerInput) {
                clearTimeout(me.showTipTimerInput);
            }
        },
        /**
         * @private
         * @description 创建form组件
         */
        _createInputField: $.noop,
        /**
         * @private
         * @description 设置是否可编辑
         */
        _setEditable: $.noop
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * label组件
 * 2012/12/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    // label标签默认样式
    var defaultWidgetClass = "sweet-form-label",
        //对齐方式
        align = Sweet.constants.align,
        alignClassObj = {};
    alignClassObj[align.CENTER] = "sweet-form-label-center";
    alignClassObj[align.RIGHT] = "sweet-form-label-right";

    $.widget("sweet.widgetFormLabel", $.sweet.widgetForm, /** @lends Sweet.form.Label.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-label]",
        defaultElement: "<label>",
        // form组件公共配置参数
        options: /** @lends Sweet.form.Label.prototype*/
        {
            /**
             * @description 组件内容对齐方式,可选值有三种：Sweet.constants.align.LEFT，Sweet.constants.align.CENTER，Sweet.constants.align.RIGHT
             * @type {String}
             * @default 默认左对齐
             */
            align: align.LEFT,
            /**
             * @description 标题文字后是否显示符号,暂只支持冒号
             * @type {Boolean}
             * @default false
             */
            symbol: false,
            /**
             * @description 组件值
             * @type {String/Number}
             * @default {text:"", value:"",data: null} text为标签文本值
             */
            value: {
                text: "",
                value: "",
                data: null
            },
            /**
             * @description 输入类组件高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 是否显示提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            required: false,
            /**
             * @description 是否包含空白字符
             * @type {Boolean}
             * @default false
             */
            blank: false
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} obj 格式为{value: 值, text: 文本, data: 值}
         */
        _setValue: function(obj) {
            if ($.isNull(obj)) {
                return;
            }
            //基类widget的setValue方法已将obj克隆给options.value
            var me = this,
                options = me.options,
                value = options.value,
                text = $.isNull(value.text) ? "" : value.text;
            //设置标签文本
            me._setText(text);
        },
        /**
         * @private
         * @description 创建基本文本框对象
         */
        _createFormWidget: function() {
            var me = this;
            // 创建label标签
            me._createLabel();
        },
        /**
         * @private
         * @description 创建label标签
         */
        _createLabel: function() {
            var me = this,
                options = me.options,
                alignClass = alignClassObj[options.align] || "",
                formParentEl = me.formParentEl = $("<div class=" + "\'" + defaultWidgetClass + " " + alignClass + "\'" + ">").appendTo(me.formEl);

            me.formElement = $("<label>").appendTo(formParentEl);
            if ($.isNotNull(options.vID)) {
                me.formElement.attr("id", options.vID);
            }
            //子类实现, label元素插入前添加
            me._addBeforeLabel();
            //生成标签文字
            me._createLabelText();
            //子类实现, label元素插入后添加
            me._addAfterLabel();
        },
        /**
         * @private
         * @description 生成标签文字
         */
        _createLabelText: function() {
            var me = this,
                options = me.options,
                value = options.value,
                text = $.isNotNull(value) && $.isNotNull(value.text) ? value.text : "";
            //配置空白符和符号
            me._setText = me._config();
            //设置标签文本
            me._setText(text);
        },
        /**
         * @private
         * @description 配置空白符和符号    
         * @return {function}  返回设置标签文本函数
         */
        _config: function() {
            var me = this,
                options = me.options,
                //将文字前添加隐藏的字符串" * "，生成空白符
                front = options.blank ?
                    "<font class=\"sweet-form-label-required\"\n\
         color=\"red\" style=\"visibility:hidden\">&nbsp;*&nbsp;</font>" : "",
                // 文字后追加符号处理
                behind = options.symbol ? Sweet.constants.symbol.COLON : "";
            front = options.required && !options.blank ? "<font class=\"sweet-form-label-required\"\n\
         color=\"red\">&nbsp;*&nbsp;</font>" : front;
            return function(text) {
                var content = text;
                //label标签不解析html标签,因此将content转义，
                //由于front包含需要被解析的html标签因此用formElement调用html方法
                text = front + $.htmlEscape(content) + behind;
                me.formElement.html(text).val(content)
                    .attr("title", options.tip ? $.nullToString(content) : "");
            };
        },
        /**
         * @private
         * @description 刷新布局
         */
        _doLayout: function() {
            if (!this.rendered) {
                return;
            }
            this._super();
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            var me = this;
            //销毁tip提示
            me.formElement.trigger("mouseout");
            me._super();
        },
        /**
         * @private
         * @description 设置标签文本
         */
        _setText: $.noop,
        /**
         * @private
         * @description 子类实现, label元素插入前添加
         */
        _addBeforeLabel: $.noop,
        /**
         * @private
         * @description 子类实现, label元素插入后添加
         */
        _addAfterLabel: $.noop
    });
    /**
     * 创建Label
     * @name Sweet.form.Label
     * @class 
     * @extends Sweet.form
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     *  sweetLabel = new Sweet.form.Label({
     *           align: Sweet.constants.align.Center,
     *           width : 100,
     *           height : 20,
     *           tip: true,
     *           value : {text:'User Name', value:'User Name',data: null},
     *           renderTo : "sweet-label"
     *       });
     * </pre>
     */
    Sweet.form.Label = $.sweet.widgetFormLabel;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--密码框
 * 2012/12/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var passwordClass = "sweet-form-password";

    $.widget("sweet.widgetFormPassword", $.sweet.widgetFormInput, /** @lends Sweet.form.Password.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-password]",
        type: 'text',
        replacement: '%u25CF',
        // 密码框组件配置参数
        options: /** @lends Sweet.form.Password.prototype*/
        {
            /**
             * @description 延迟出现密码的时间（ms）
             * @type {Number}
             * @default 0
             */
            duration: 0
        },
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 创建文本输入域
         */
        _createInputField: function() {
            var me = this,
                options = me.options,
                formElement = me.formElement = $("<input>"),
                formDiv1El = me.formDiv1El,
                formDiv2El = me.formDiv2El = $("<div>").addClass(me.defaultPaddingDivClass)
                    .addClass(passwordClass)
                    .appendTo(formDiv1El),
                value = $.nullToString(options.value.value);

            // 如果延迟时间为0,使用原生密码控件
            var type = me.options.duration === 0 ? "password" : "text";
            formElement.attr("type", type).addClass(me.defaultInputClass).val(value);
            formElement.appendTo(formDiv2El);

            me.value = [];
        },
        /**
         * @private
         * @description 组件创建后，添加其他功能：添加延时
         */
        _afterCreateFormWidget: function() {
            var me = this;
            me.__afterCreateFormWidget();
        },
        /**
         * @private
         * @description 组件创建后动作，子类继承实现
         */
        __afterCreateFormWidget: function() {
            var me = this;
            if (me.options.duration > 0) {
                me.formElement.keyup({
                    "me": me
                }, me._onKeyDown);
            }
            me.formElement.bind("paste", {
                "me": me,
                "obj": me.formElement
            }, me._onPaste);
        },
        /**
         * @private
         * @description 延时出现密码
         * @param {Object} event 事件
         */
        _onKeyDown: function(event) {
            var me = event.data.me,
                options = me.options,
                value = me.formElement.val(),
                lenVal = value.length,
                lenArr = me.value.length,
                pos = $.cursor.getSelection(me.formElement[0]),
                ch = value[pos.start - 1] || "",
                key = event.charCode || event.keyCode,
                index = pos.start,
                deleteNum = 0;
            //删除键
            if (key === 46 || key === 8) {
                if (lenArr - lenVal >= 1) {
                    deleteNum = lenArr - lenVal;
                }
                if (me.value[index]) {
                    me.value.splice(index, deleteNum);
                    me.value.length = lenArr - deleteNum;
                }
                return;
            }
            //字符
            if (ch && ch !== unescape(me.replacement)) {
                if (lenArr + 1 > lenVal) {
                    deleteNum = lenArr - lenVal + 1;
                }
                me.value.splice(pos.start - 1, deleteNum, ch);
                me.value.length = lenArr - deleteNum + 1;
                if (lenVal >= 2 && unescape(me.replacement) !== value[lenVal - 2]) {
                    clearTimeout(me.timer);
                    me._convertLastChar(me, pos.start - 1, ch, false);
                }
                var convertLastChar = function() {
                    me._convertLastChar(me, pos.start - 1, ch, true);
                };
                me.timer = setTimeout(convertLastChar, options.duration);
                return;
            }
        },
        /**
         * @private
         * @description 粘贴事件
         * @param {Object} event 事件
         */
        _onPaste: function(event) {
            //不支持粘贴
            event.preventDefault();
        },
        /**
         * @private
         * @description 转换为密码
         * @param {Object} me 该组件对象
         * @param {Number} charPos 当前字符的位置
         * @param {String} ch 当前字符
         * @param {Boolean} isFormTimer 是否为定时
         */
        _convertLastChar: function(me, charPos, ch, isFormTimer) {
            if (me.formElement.val() === '') {
                return;
            }
            var tmp = '',
                lenVal = me.formElement.val().length;
            if (lenVal === 1) {
                me.formElement.val(unescape(me.replacement));
                return;
            }

            for (var i = 0; i < lenVal - 1; i++) {
                tmp = tmp + unescape(me.replacement);
            }
            ch = (isFormTimer ? unescape(me.replacement) : ch);
            tmp = tmp.slice(0, charPos) + ch + tmp.slice(charPos);
            me.formElement.val(tmp);
        },
        /**
         * @private
         * @description 获取密码
         * @return {String} 密码
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                value = "";

            // 如果使用的原生密码控件，直接返回结果
            if (options.duration === 0) {
                value = me.formElement.val();
                return {
                    text: value,
                    value: value
                };
            }

            for (var i = 0; i < me.value.length; i++) {
                value = value + me.value[i];
            }
            // 若手动输入内容
            if (!options.value || value !== options.value.text) {
                options.value = {
                    text: value,
                    value: value
                };
            }

            return $.objClone(options.value);
        },

        /**
         * @private
         * @description 设置密码
         * @param {Object} value 设置数值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                inputText,
                temp = "";

            inputText = me._textCmpSetValue(value);

            // 如果使用的原生密码控件，不需要转换文本
            if (options.duration === 0) {
                me.formElement.val(inputText);
                return;
            }

            if ($.isNull(inputText)) {
                me.formElement.val(temp);
                options.value = {
                    value: "",
                    text: ""
                };
                return;
            }

            me.value = [];
            for (var i = 0; i < inputText.length; i++) {
                me.value[i] = inputText[i];
                temp = temp + unescape(me.replacement);
            }
            me.formElement.val(temp);
        }
    });

    /**
     * 密码框
     * @name Sweet.form.Password
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     *  jquery.sweet.widget.form.input.js
     * </pre>
     * @example 
     * <pre>
     * sweetPassword = new Sweet.form.Password({
     *      label : true,
     *      width : 200,
     *      height : 25,
     *      labelText : 'Password',
     *      required : true,
     *      renderTo : "sweet-text"
     * });
     * </pre>
     */
    Sweet.form.Password = $.sweet.widgetFormPassword;

}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * form组件--简单文本框
 * 2012/11/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var textFieldClass = "sweet-form-textfield",
        textFieldInputParentErrorClass = "sweet-tips-inputParent",
        textFieldInputErrorClass = "sweet-tips-input";

    $.widget("sweet.widgetFormTextfield", $.sweet.widgetFormInput, /** @lends Sweet.form.TextField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-textfield]",
        type: 'text',
        /**
         * @private
         * @description 文本框组件公共配置参数
         * @type {object}
         */
        options: /** @lends Sweet.form.TextField.prototype*/
        {
            /**
             * @type {String}
             * @description ip校验配置参数。"v4"表示ipv4校验，"v6"表示ipv6校验，"v"表示校验是否符合ipv4或ipv6规则,
             *              可选值："v4"、"v6"、"v"。
             * @default null
             */
            IPVersion: null,
            /**
             * @description 是否显示输入框内容的提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 创建文本输入域
         */
        _createInputField: function() {
            var me = this,
                options = me.options,
                formElement = me.formElement = $("<input>"),
                formDiv1El = me.formDiv1El,
                formDiv2El = me.formDiv2El = $("<div>"),
                value = $.nullToString(options.value);

            formDiv2El.addClass(me.defaultPaddingDivClass).addClass(textFieldClass).appendTo(formDiv1El);
            formElement.attr("type", me.type)
                .addClass(me.defaultInputClass);
            if ($.isNotNull(options.vID)) {
                formElement.attr("id", options.vID);
            }
            formElement.appendTo(formDiv2El);
            if (options.maxLength < Number.MAX_VALUE) {
                formElement.attr("maxLength", options.maxLength);
            }

            //配置tip为true并且tooltip为""时，显示输入框的合法内容
            if (options.tip) {
                var formEI = me.formElement,
                    formParentEl = me.formDiv2El;
                formEI.mouseover(function() {
                    if ($.isNull(options.tooltip) && !options.disabled) {
                        if ((formParentEl && formParentEl.hasClass(textFieldInputParentErrorClass)) || formEI.hasClass(textFieldInputErrorClass)) {
                            return;
                        }
                        var tempText = "";
                        tempText = formEI.val();
                        if ($.isNull(tempText)) {
                            tempText = "";
                        }
                        formEI.attr("title", tempText);
                        me.tipTitle = tempText;
                        me.showTip();
                    }
                });
            }
        },
        /**
         * @description 重载父类校验方法
         * @override
         * @private
         * @returns {Boolean} true 校验通过，false 校验不通过
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         */
        _checkAllFun: function(justGetResult) {
            var returnResult = true,
                me = this,
                options = me.options,
                val = me.formElement.val();
            if (me._super(justGetResult) === false) {
                returnResult = false;
            } else {
                //IP地址规则校验
                if (options.IPVersion === Sweet.constants.ipType.VERSION4) {
                    if (!me._isIPv4Fun(val)) {
                        me._checkHandler(justGetResult);
                        returnResult = false;
                    }
                } else if (options.IPVersion === Sweet.constants.ipType.VERSION6) {
                    if (!me._isIPv6Fun(val)) {
                        me._checkHandler(justGetResult);
                        returnResult = false;
                    }
                } else if (options.IPVersion === Sweet.constants.ipType.VERSION) {
                    if (!me._isIPv6Fun(val) && !me._isIPv4Fun(val)) {
                        me._checkHandler(justGetResult);
                        returnResult = false;
                    }
                }
            }
            return returnResult;
        },
        /**
         * @description IPv6校验
         * @private
         * @param {String} val IPv6地址
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _isIPv6Fun: function(val) {
            var ipv6 = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|[0-1]?\d\d?)(\.(25[0-5]|2[0-4]\d|[0-1]?\d\d?)){3}))|:)))(%.+)?\s*$/;
            return ipv6.test(val);
        },
        /**
         * @description IPv4校验
         * @private
         * @param {String} val IPv4地址
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _isIPv4Fun: function(val) {
            var ipv4 = /^\s*((25[0-5]|2[0-4]\d|[0-1]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[0-1]?\d\d?)\s*$/;
            return ipv4.test(val);
        },
        /**
         * @description 校验不通过处理方法
         * @private
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         */
        _checkHandler: function(justGetResult) {
            var me = this;
            if (!justGetResult) {
                me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                me.tipTitle = Sweet.core.i18n.tip.IP_TIP_TITLE;
                me.showTip();
            }
        }
    });

    /**
     * 文本框
     * @name Sweet.form.TextField
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     *  jquery.sweet.widget.form.input.js
     * </pre>
     * @example 
     * <pre>
     * sweetTextField = new Sweet.form.TextField({
     *       required: true,
     *       label : true,
     *       width : "20%",
     *       labelText : 'User Name',
     *       editable : true,
     *       tooltip : "这是tip测试",
     *       renderTo : "sweet-text0"
     *   });
     * </pre>
     */
    Sweet.form.TextField = $.sweet.widgetFormTextfield;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--语法高亮显示
 * 2013/3/1
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    'use strict';

    // 生成正则表达式
    function wordRegexp(words) {
        return new RegExp("^(?:" + words.join("|") + ")$", "i");
    }

    // SQL语法Token列表
    var functions = wordRegexp([
        "abs", "acos", "adddate", "aes_encrypt", "aes_decrypt", "ascii",
        "asin", "atan", "atan2", "avg", "benchmark", "bin", "bit_and",
        "bit_count", "bit_length", "bit_or", "cast", "ceil", "ceiling",
        "char_length", "character_length", "coalesce", "concat", "concat_ws",
        "connection_id", "conv", "convert", "cos", "cot", "count", "curdate",
        "current_date", "current_time", "current_timestamp", "current_user",
        "curtime", "database", "date_add", "date_format", "date_sub",
        "dayname", "dayofmonth", "dayofweek", "dayofyear", "decode", "degrees",
        "des_encrypt", "des_decrypt", "elt", "encode", "encrypt", "exp",
        "export_set", "extract", "field", "find_in_set", "floor", "format",
        "found_rows", "from_days", "from_unixtime", "get_lock", "greatest",
        "group_unique_users", "hex", "ifnull", "inet_aton", "inet_ntoa", "instr",
        "interval", "is_free_lock", "isnull", "last_insert_id", "lcase", "least",
        "left", "length", "ln", "load_file", "locate", "log", "log2", "log10",
        "lower", "lpad", "ltrim", "make_set", "master_pos_wait", "max", "md5",
        "mid", "min", "mod", "monthname", "now", "nullif", "oct", "octet_length",
        "ord", "password", "period_add", "period_diff", "pi", "position",
        "pow", "power", "quarter", "quote", "radians", "rand", "release_lock",
        "repeat", "reverse", "right", "round", "rpad", "rtrim", "sec_to_time",
        "session_user", "sha", "sha1", "sign", "sin", "soundex", "space", "sqrt",
        "std", "stddev", "strcmp", "subdate", "substring", "substring_index",
        "sum", "sysdate", "system_user", "tan", "time_format", "time_to_sec",
        "to_days", "trim", "ucase", "unique_users", "unix_timestamp", "upper",
        "user", "version", "week", "weekday", "yearweek"]);

    var keywords = wordRegexp([
        "alter", "grant", "revoke", "primary", "key", "table", "start", "top",
        "transaction", "select", "update", "insert", "delete", "create", "describe",
        "from", "into", "values", "where", "join", "inner", "left", "natural", "and",
        "or", "in", "not", "xor", "like", "using", "on", "order", "group", "by",
        "asc", "desc", "limit", "offset", "union", "all", "as", "distinct", "set",
        "commit", "rollback", "replace", "view", "database", "separator", "if",
        "exists", "null", "truncate", "status", "show", "lock", "unique", "having",
        "drop", "procedure", "begin", "end", "delimiter", "call", "else", "leave",
        "declare", "temporary", "then"]);

    var types = wordRegexp([
        "bigint", "binary", "bit", "blob", "bool", "char", "character", "date",
        "datetime", "dec", "decimal", "double", "enum", "float", "float4", "float8",
        "int", "int1", "int2", "int3", "int4", "int8", "integer", "long", "longblob",
        "longtext", "mediumblob", "mediumint", "mediumtext", "middleint", "nchar",
        "numeric", "real", "set", "smallint", "text", "time", "timestamp", "tinyblob",
        "tinyint", "tinytext", "varbinary", "varchar", "year"]);

    var operators = wordRegexp([
        ":=", "<", "<=", "==", "<>", ">", ">=", "like", "rlike", "in", "xor", "between"]);

    $.widget("sweet.widgetFormSyntax", $.sweet.widgetForm, /** @lends Sweet.form.Syntax.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-syntax]",
        type: 'syntax',
        // 配置参数
        options: /** @lends Sweet.form.Syntax.prototype*/
        {},
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            var me = this;

            // 没有渲染前，不处理
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout
            me._super();
        },
        /**
         * @private
         * @description 创建输入域
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                panelClass = "sweet-form-syntax",
                formTextArea = me.formElement = $("<textarea>").appendTo(me.formEl),
                value = $.nullToString(options.value);

            // 隐藏textArea
            formTextArea.css("position", "absolute").css("left", "-10000px");
            me.formEl.addClass(panelClass);

            // 设置值
            me.syntaxEl = $("<div>").appendTo(me.formEl);
            me.setValue(value);
        },
        /**
         * @description 设置内容
         * @param {String} value 文本内容
         */
        setValue: function(value) {
            this.value = value;
            this.formElement.val(value);

            var ret = this.parseSql(value),
                dom = this.buildDom(ret);
            this.syntaxEl.empty().append(dom.children());
        },
        /**
         * @private
         * @description 子类实现，置灰除输入框以外其他控件
         */
        __setDisabled: $.noop,
        /**
         * @description 绑定校验事件，子类继承实现
         * @private
         */
        _check: $.noop,
        /**
         * @description 对SQL代码进行词法分析
         * @param {String} source 待分析的Sql代码
         * @return {Array} 符号表
         */
        parseSql: function(source) {
            var operatorChars = /[*+\-<>=&|:\/]/,
                S_OK = 1,
                S_ERR = -1,
                S_END = 0,
                token = null,
                sLen = source.length,
                pos = 0,
                row = 0,
                col = 0,
                index = 0;

            var initToken = {
                index: 0,
                pos: pos,
                row: row,
                col: col,
                type: "",
                content: "",
                err: ""
            };

            // 是否回车符
            function isEnter(ch) {
                if (ch === "\n" || ch === "\r") {
                    return true;
                } else {
                    return false;
                }
            }

            // 取上一个字符，用于测试，不修改索引
            function peekPrev() {
                if (pos - 1 < sLen && pos - 1 >= 0) {
                    return source[pos - 1];
                } else {
                    return null;
                }
            }

            // 取当前字符，用于测试，不修改索引
            function peek() {
                if (pos < sLen) {
                    return source[pos];
                } else {
                    return null;
                }
            }

            // 取下一个字符，用于测试，不修改索引
            function peekNext() {
                if (pos + 1 < sLen) {
                    return source[pos + 1];
                } else {
                    return null;
                }
            }

            // 取当前字符，更新索引
            function get() {
                if (pos < sLen) {
                    return source[pos++];
                } else {
                    return null;
                }
            }

            // 取匹配re的内容
            function getWhileMatch(re) {
                var ch = null,
                    ret = [];
                while ((ch = peek()) !== null && re.test(ch)) {
                    ret.push(get());
                }

                return ret.join("");
            }

            // 取字符，直到匹配re
            function getUntilMatch(re, singleLine) {
                var ch = null,
                    ret = [];
                while (true) {
                    if (peek() === null) {
                        token.err = "Absent of end flag";
                        break;
                    }

                    // 判断是否允许换行，如果不允许则提示
                    if (singleLine === true && isEnter(ch)) {
                        token.err = "Token should be in a single line";
                    }

                    if (isEnter(ch)) {
                        row++;
                    }

                    ch = get();
                    ret.push(ch);
                    if (re.test(ch)) {
                        break;
                    }
                }

                return ret.join("");
            }

            // 空格和制表符
            function getBlank() {
                var ret = [],
                    ch = peek();
                while (ch === " " || ch === "\t") {
                    ret.push(get());
                    ch = peek();
                }
                return ret.join("");
            }

            // 取到行尾
            function getEndOfLine() {
                var ret = [];

                while (!isEnter(peek()) && peek() !== null) {
                    ret.push(get());
                }

                return ret.join("");
            }

            // 取字符串
            function getLiteral() {
                var startCh = get(),
                    ch = "",
                    ret = [];

                // 字符串开始
                ret.push(startCh);

                // 直到下一个引号
                while (true) {
                    if (peek() === null) {
                        token.err = "Literal is not closed";
                        break;
                    }

                    ch = get();
                    ret.push(ch);

                    // 如果不是转义的引号，结束处理
                    if (ch === startCh && peekPrev() !== "\\") {
                        break;
                    } else if (isEnter(ch)) {
                        row++;
                        token.err = "Unexpected return in literal";
                    }
                }

                return ret.join("");
            }

            // 取块注释
            function getBlockComment() {
                var ch = "",
                    ret = [];

                while (true) {
                    if (peek() === null) {
                        token.err = "Block comment is not closed";
                        break;
                    }

                    ch = get();
                    ret.push(ch);

                    // 检查结束标志
                    if (ch === "*" && peek() === "/") {
                        ret.push(get());
                        break;
                    }

                    if (isEnter(ch)) {
                        row++;
                    }
                }

                return ret.join("");
            }

            // 取下一个完整的符号
            function getNextToken() {
                /* 关闭行数过多告警，不适合再拆分 */
                /* jshint maxstatements: 100 */

                // 分析结束
                if (pos >= sLen) {
                    return S_END;
                }

                // 初始化Token缓存，用于保存结果
                token = $.extend({}, initToken);
                token.index = index++;
                token.pos = pos;

                // 取当前待分析字符
                var ch = peek();

                // 换行
                if (isEnter(ch)) {
                    token.type = "sql-enter";
                    token.content = get();
                } else if (ch === " " || ch === "\t") {
                    token.type = "sql-blank";
                    token.content = getBlank();
                } else if (ch === "@" || ch === "$") {
                    token.type = "sql-ver";
                    token.content = get() + getWhileMatch(/[\w\d]/);
                } else if (ch === "#") {
                    token.type = "sql-comment";
                    token.content = getEndOfLine();
                } else if (ch === "," || ch === ";" || ch === ".") {
                    token.type = "sql-separator";
                    token.content = get();
                } else if (ch === "\"" || ch === "'" || ch === "`") {
                    token.type = "sql-literal";
                    token.content = getLiteral();
                } else if (ch === "[" || ch === "{") {
                    token.type = "sql-word";
                    token.content = getUntilMatch(/[\]\}]/);
                } else if (/\d/.test(ch)) {
                    token.type = "sql-number";
                    token.content = getWhileMatch(/\d/);

                    if (peek() === ".") {
                        token.content += get();
                        token.content += getWhileMatch(/\d/);
                    }
                } else if (ch === "-") {
                    if (peekNext() === "-") {
                        token.type = "sql-comment";
                        token.content = getEndOfLine();
                    } else if (/\d/.test(peekNext())) {
                        // 负数
                        token.type = "sql-number";
                        token.content = get();
                        token.content += getWhileMatch(/\d/);

                        if (peek() === ".") {
                            token.content += get();
                            token.content += getWhileMatch(/\d/);
                        }
                    } else {
                        token.type = "sql-operator";
                        token.content = get();
                    }
                } else if (operatorChars.test(ch)) {
                    if (ch === "/" && peekNext() === "*") {
                        token.type = "sql-comment";
                        token.content = getBlockComment();
                    } else {
                        token.type = "sql-operator";
                        token.content = getWhileMatch(operatorChars);
                    }
                } else if (/[()]/.test(ch)) {
                    token.type = "sql-punctuation";
                    token.content = get();
                } else {
                    token.content = getWhileMatch(/[_\w\d\u4E00-\u9FA5\uf900-\ufa2d]/);

                    if (operators.test(token.content)) {
                        token.type = "sql-operator";
                    } else if (keywords.test(token.content)) {
                        token.type = "sql-keyword";
                    } else if (functions.test(token.content)) {
                        token.type = "sql-function";
                    } else if (types.test(token.content)) {
                        token.type = "sql-type";
                    } else {
                        token.type = "sql-word";
                    }
                }

                // 索引位置
                if (token.type === "sql-enter") {
                    row += 1;
                    col = 0;
                } else {
                    col += token.content.length;
                }

                return (token.err !== "" ? S_ERR : S_OK);
            }

            // 词法分析
            var loop = 0,
                tokenList = [];
            while (getNextToken() !== S_END) {
                tokenList.push(token);

                // 调试
                if ((loop++) > 10000) {
                    $.log("too many tokens");

                    // 打印最后10条记录
                    for (var j = tokenList.length - 10; j < tokenList.length; j++) {
                        $.log(tokenList[j]);
                    }
                    break;
                }
            }

            return tokenList;
        },

        /**
         * @description 把符号表用Dom标签表示
         * @param {Array} tokenList 符号表
         * @return {Object} 转换后的Dom对象
         */
        buildDom: function(tokenList) {
            var token = null,
                container = $("<div></div>"),
                dom = null,
                lines = [],
                lineEl = null,
                content = "";

            for (var i = 0; i < tokenList.length; i++) {
                token = tokenList[i];
                if (lineEl === null) {
                    lineEl = $("<pre></pre>");
                }

                if (token.type === "sql-enter") {
                    container.append(lineEl);
                    lineEl = null;
                } else {
                    lines = token.content.split("\n");

                    for (var j = 0; j < lines.length; j++) {
                        content = lines[j];
                        content = content.replace(/\t/gi, "  ");

                        // span标签
                        dom = $("<span></span>");

                        // 类名
                        dom.addClass(token.type);

                        // 提示信息
                        if (token.err !== "") {
                            dom.addClass("sql-error");
                            dom.attr("title", token.err);
                        }

                        // 内容
                        dom.text(content);
                        lineEl.append(dom);

                        // 补充换行
                        if (j < lines.length - 1) {
                            container.append(lineEl);
                            lineEl = $("<pre></pre>");
                        }
                    }
                }
            }

            if (lineEl !== null) {
                container.append(lineEl);
            }

            return container;
        }
    });

    /**
     * 语法高亮显示
     * @class
     * @extends Sweet.form
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example
     * <pre>
     * var sql = "-- SQL for test\n" +
     *     "SELECT SQL_NO_CACHE DISTINCT\n" +
     *     "       @var1 AS `val1`, @'val2', @global.'sql_mode',\n" +
     *     "       1.1 AS `float_val`, .14 AS `another_float`, 0.09e3 AS `int_with_esp`,\n" +
     *     "       0xFA5 AS `hex`, x'fa5' AS `hex2`, 0b101 AS `bin`, b'101' AS `bin2`,\n" +
     *     "       DATE '1994-01-01' AS `sql_date`, { T \"1994-01-01\" } AS `odbc_date`,\n" +
     *     "       'myString', UNKNOWN\n" +
     *     "   FROM DUALa\n" +
     *     "   -- space needed after '--'\n" +
     *     "   # 1 line comment\n" +
     *     "   \/* multiline\n" +
     *     "   comment! *\/\n" +
     *     "   LIMIT 1 OFFSET 0;\n";
     * var editor = new Sweet.form.Syntax({
     *     renderTo: "coding",
     *     width: 600,
     *     height: 300,
     *     value: sql
     * });
     * </pre>
     */
    Sweet.form.Syntax = $.sweet.widgetFormSyntax;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--数字文本框
 * 2012/12/19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    var disabledInputMethodClass = "sweet-form-input-method-disabled",
        numberFieldClass = 'sweet-form-numberfield';

    $.widget("sweet.widgetFormNumberfield", $.sweet.widgetFormTextfield, /** @lends Sweet.form.NumberField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-numberfield]",
        type: 'text',
        // 数值组件默认字符集
        baseChars: "0123456789",
        /** 
         * @private
         * @description form组件公共配置参数
         * @type object  
         */
        options: /** @lends Sweet.form.NumberField.prototype*/
        {
            /**
             * @description 是否允许小数
             * @type {Boolean}
             * @default false
             */
            allowDecimals: false,
            /**
             * @description 小数间隔符
             * @type {String}
             * @default “.”
             */
            decimalSeparator: ".",
            /**
             * @description 小数位数
             * @type {Number}
             * @default 2
             */
            decimalPrecision: 2,
            /**
             * @description 是否允许负数
             * @type {Boolean}
             * @default true
             */
            allowNegative: true,
            /**
             * @description 上限值
             * @type {Number}
             * @default 正无穷
             */
            maxValue: Number.POSITIVE_INFINITY,
            /**
             * @description 下限值
             * @type {Number}
             * @default 负无穷
             */
            minValue: Number.NEGATIVE_INFINITY
        },
        /**
         * @description 组件隐藏，覆盖父类方法触发mouseout事件，避免tips不消失
         */
        hide: function() {
            this.renderEl.hide();
            this.formElement.trigger("mouseout");
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 设置数值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            if ($.isNull(value)) {
                return;
            }
            var me = this,
                inputText;

            inputText = me._textCmpSetValue(value);
            //设置值时，如果有小数，一定要将decimalHasExsited设置为true，否则keypress时不能对保留小数进行限定
            me.decimalHasExsited = (String(inputText).indexOf(me.options.decimalSeparator) !== -1) ? true : false;
            if (me._checkRange(me, inputText)) {
                me.formElement.val($.number.fixPrecision(inputText, me.options.decimalPrecision));
            } else {
                me.formElement.val("");
            }
            me._checkAllFun(false);
        },

        /**
         * @private
         * @description 获取组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                val = me.formElement.val();
            // 若手动输入内容
            if (options.value && (val === ("" + options.value.text))) {
                return $.objClone(options.value);
            }
            options.value = {
                text: val,
                value: val
            };
            return $.objClone(options.value);
        },

        /**
         * @private
         * @description 组件创建前，准备数值型文本框合法字符集
         */
        _beforeCreateFormWidget: function() {
            var me = this,
                options = me.options;
            me.allowdChars = me.baseChars;
            if (options.allowDecimals) {
                me.allowdChars += options.decimalSeparator;
            }
        },

        /**
         * @private
         * @description 组件创建后，添加其他功能：禁用输入法切换、禁止粘贴
         */
        _afterCreateFormWidget: function() {
            var me = this;
            // 组件标志
            me.formDiv2El.addClass(numberFieldClass);

            // 添加禁用输入法样式
            me.formElement.addClass(disabledInputMethodClass);
            // 禁止粘贴
            me.formElement.on("paste", function() {
                return false;
            });
            me.__afterCreateFormWidget();
        },
        /**
         * @private
         * @description 给组件添加校验：包括数值型校验、最大最小值校验
         */
        _check: function() {
            var me = this;
            me.formElement.keypress({
                "me": me
            }, me._onKeyPress).blur({
                "me": me
            }, me._onBlur);
            // 解决谷歌下能输入中文的问题
            me.formElement.keydown({
                "me": me
            }, me._onKeyDown);
        },
        /**
         * @private
         * @description 数值输入框，键盘按下时触发
         * @param {type} event 数值输入框对象
         */
        _onKeyPress: function(event) { // 退格键、回车键、其他功能键，不做处理
            if (Sweet.constants.keyCode.BACKSPACE === event.which || Sweet.constants.keyCode.ENTER === event.which || 0 === event.which) {
                return;
            }
            var me = event.data.me,
                options = me.options,
                charRe,
                allowdChars1 = me.allowdChars,
                ch = String.fromCharCode($.e.getCharCode(event)),
                val = me.formElement.val(),
                len = val.length,
                pos = $.cursor.getSelection(me.formElement[0]);

            if (val.indexOf(options.decimalSeparator) === -1) {
                me.decimalHasExsited = false;
            }
            // 首字符不能为小数点、减号后不能跟小数点、小数点最多只能有一个
            if ((val === "" || (len === 1 && val === "-") || 0 === pos.start || (pos.start === 1 && "-" === val.charAt(0)) || len - pos.start > options.decimalPrecision || me.decimalHasExsited) && options.decimalSeparator === ch) {
                event.preventDefault();
                return;
            }
            // 小数点后保留的位数
            if (options.allowDecimals && me.decimalHasExsited) {
                var index = val.toString().indexOf(options.decimalSeparator);
                // 小数点后位数已经足够，则阻止小树点之后的输入
                if (len - index > options.decimalPrecision && pos.start > index) {
                    event.preventDefault();
                    return;
                }
            }
            if (val === "" && me.options.allowNegative) {
                allowdChars1 += "-";
            }
            if (val !== "") {
                var $t = $(me.formElement)[0];
                if (!$t.selectionStart && options.allowNegative) {
                    allowdChars1 += "-";
                }
            }
            charRe = new RegExp("[" + allowdChars1 + "]");

            if (!charRe.test(ch)) {
                event.preventDefault();
                return;
            }
            // 存在小数点后，则打标记
            if (options.decimalSeparator === ch) {
                me.decimalHasExsited = true;
            }
        },

        /**
         * @private
         * @description 数值输入框，键盘按下时触发
         * @param {type} event 数值输入框对象
         */
        _onKeyDown: function(event) {
            var key = event.charCode || event.keyCode,
                sKeyCode = Sweet.constants.keyCode,
                evtCode = event.keyCode;

            // 退格键、回车键、删除键、上下左右方向键，不做处理
            if (sKeyCode.BACKSPACE === evtCode || sKeyCode.ENTER === evtCode || sKeyCode.DELETE === evtCode || sKeyCode.LEFT === evtCode || sKeyCode.RIGHT === evtCode || sKeyCode.DOWN === evtCode || sKeyCode.UP === evtCode || sKeyCode.TAB === evtCode) {
                return;
            }
            if (key > 47 && key < 58 || key > 95 && key < 106 || // 数字键
            190 === key || 110 === key || // 小数点
            189 === key || 109 === key || 173 === key) { // 减号
                return;
            } else {
                event.preventDefault();
            }
        },

        /**
         * @private
         * @description 数值输入框，文本框失去焦点时触发
         * @param {Object} event 文本框事件对象
         */
        _onBlur: function(event) {
            var me = event.data.me,
                value = $.string.reviseNumber(me.formElement.val());

            // 2013.7.3修改文本框输入000.100的问题，单号DTS2013070403986 --start
            me.formElement.val(value);
            // 2013.7.3修改文本框输入000.100的问题，单号DTS2013070403986 --end

            function delayCheck() {
                me.validate();
                if (me.validate()) {
                    me._checkRange(me);
                }
            }
            setTimeout(delayCheck, 500);
        },

        /**
         * @private
         * @param {Object} me 数值框对象
         * @param {Number} val 将设置的数值
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _checkRange: function(me, val) {
            var options = me.options,
                obj = me.formElement,
                value = val;
            if ($.isNull(value)) {
                me._info("Can not be empty!");
                return false;
            }
            if (!$.isNumeric(value)) {
                me._error("The input value is not a number!");
                // 2013.6.28修改问题：IE下报错微调器组件不可用
                if (me.rendered) {
                    obj.focus();
                }
                return false;
            }
            // 转换成数值型
            // 小数
            if (-1 !== value.toString().indexOf(options.decimalSeparator)) {
                value = parseFloat(value);
            } else {
                value = parseInt(value, 10);
            }
            return true;
        },

        /**
         * @private
         * @returns {Boolean} true 校验通过，false 校验不通过
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         */
        _checkAllFun: function(justGetResult) {
            if (!this.formElement) {
                return;
            }
            var me = this,
                options = me.options,
                val = me.formElement.val(),
                len = val.length;
            me.closeTip();
            if (me._super(justGetResult) === false) {
                return false;
            }
            if (options.maxValue < parseFloat(val)) {
                me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                me.tipTitle = Sweet.core.i18n.tip.NUMBERFEILD_MAX_TIP + options.maxValue;
                options.errorModel = Sweet.constants.tipAttr.MODEL_NORMAL;
                me.showTip();
                return false;
            }
            if (options.minValue > parseFloat(val)) {
                me.tipType = Sweet.constants.tipAttr.TYPE_ERROR;
                me.tipTitle = Sweet.core.i18n.tip.NUMBERFEILD_MIN_TIP + options.minValue;
                options.errorModel = Sweet.constants.tipAttr.MODEL_NORMAL;
                me.showTip();
                return false;
            }
        },
        /**
         * @private
         * @description 设置上限值
         * @param {Number} value 设置数值
         */
        setMaxValue: function(value) {
            var me = this;
            me.options.maxValue = parseFloat(value);
            if (isNaN(me.options.maxValue)) {
                me.options.maxValue = Number.POSITIVE_INFINITY;
            }
            me._checkAllFun(false);
        },
        /**
         * @private
         * @description 设置下限值
         * @param {Number} value 设置数值
         */
        setMinValue: function(value) {
            var me = this;
            me.options.minValue = parseFloat(value);
            if (isNaN(me.options.minValue)) {
                me.options.maxValue = Number.NEGATIVE_INFINITY;
            }
            me._checkAllFun(false);
        },
        /**
         * @private
         * @description 组件创建后动作，子类继承实现
         */
        __afterCreateFormWidget: $.noop
    });

    /**
     * 数字文本框
     * @name Sweet.form.NumberField
     * @class 
     * @extends Sweet.form.TextField
     * @requires  
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.textfield.js
     * </pre>
     * @example 
     * <pre>
     * sweetNumberField = new Sweet.form.NumberField({
     *     label : true,
     *     width : 250,
     *     labelText : "NumberField",
     *     maxValue : 100,
     *     minValue : 0,
     *     renderTo : "sweet-text",
     *     tooltip : "这是tip测试"
     * });
     * </pre>
     */
    Sweet.form.NumberField = $.sweet.widgetFormNumberfield;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--ip文本框
 * 2012.2.19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    //var disabledInputMethodClass = "sweet-form-input-method-disabled";
    var ipFieldClass = "sweet-form-ipfield";

    $.widget("sweet.widgetFormIpfield", $.sweet.widgetFormInput, /** @lends Sweet.form.IPField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-ipfield]",
        type: 'text',
        eventNames: /** @lends Sweet.form.IPField.prototype*/
        {
            /**
             * @event
             * @description 值改变的事件
             */
            change: "改变值事件"
        },
        // 数值组件默认字符集
        baseChars: /^((?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d))))$/,
        /** 
         * @private
         * @description 组件公共配置参数
         * @type object  
         */
        options: /** @lends Sweet.form.IPField.prototype*/
        {
            /**
             * @description 显示错误提示的内容
             * @type String
             * @default null
             */
            tooltip: Sweet.core.i18n.tip.IP_TIP_TITLE
        },
        /**
         * @private
         * @description组件重绘
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this,
                options = me.options;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "change") {
                    //监听
                    $(document).bind("click", function() {
                        var val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                        if (me.oldValue !== val && func) {
                            func.call(this, me.getValue());
                        }
                    });
                }
            });
        },
        /**
         * @private
         * @description 创建文本输入域
         */
        _createInputField: function() {
            var me = this,
                inputArr = me.inputArr = [],
                formElement = me.formElement = $("<input>"),
                formDiv2Class = "sweet-form-ipfield-formDiv2",
                formDiv1El = me.formDiv1El,
                formDiv2El = me.formDiv2El = $("<div>"),
                inputElement1 = me.inputElement1 = $("<input>").attr("type", me.type)
                    .keydown({
                    "me": me,
                    "inputIndex": 0
                }, me._onKeyDown),
                inputElement2 = me.inputElement2 = $("<input>").attr("type", me.type)
                    .keydown({
                    "me": me,
                    "inputIndex": 1
                }, me._onKeyDown),
                inputElement3 = me.inputElement3 = $("<input>").attr("type", me.type)
                    .keydown({
                    "me": me,
                    "inputIndex": 2
                }, me._onKeyDown),
                inputElement4 = me.inputElement4 = $("<input>").attr("type", me.type)
                    .keydown({
                    "me": me,
                    "inputIndex": 3
                }, me._onKeyDown);

            formDiv2El.addClass(me.defaultPaddingDivClass)
                .addClass(ipFieldClass)
                .appendTo(formDiv1El);

            inputElement1.appendTo(formDiv2El);
            formDiv2El.append(".");
            inputElement2.appendTo(formDiv2El);
            formDiv2El.append(".");
            inputElement3.appendTo(formDiv2El);
            formDiv2El.append(".");
            inputElement4.appendTo(formDiv2El);
            inputArr[0] = (inputElement1);
            inputArr[1] = (inputElement2);
            inputArr[2] = (inputElement3);
            inputArr[3] = (inputElement4);
        },
        /**
         * @private
         * @description 绑定获取焦点事件
         */
        _focus: function() {
            var me = this;
            me.inputElement1.focus(function() {
                var val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                me.oldValue = val;
            });
            me.inputElement2.focus(function() {
                var val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                me.oldValue = val;
            });
            me.inputElement3.focus(function() {
                var val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                me.oldValue = val;
            });
            me.inputElement4.focus(function() {
                var val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                me.oldValue = val;
            });
        },
        /**
         * @description 显示提示框
         */
        showTip: function() {
            return;
        },
        /**
         * @description 关闭提示框
         */
        closeTip: function() {
            return;
        },
        /**
         * @description 设置组件只读
         * @param {Boolean} editable true/false
         */
        setEditable: function(editable) {
            this.inputElement1.attr("readOnly", !editable);
            this.inputElement2.attr("readOnly", !editable);
            this.inputElement3.attr("readOnly", !editable);
            this.inputElement4.attr("readOnly", !editable);
            return;
        },
        /**
         * @description 设置组件是否可用
         * @param {Boolean} disabled true可用 false不可用
         */
        setDisabled: function(disabled) {
            var me = this;
            if ("boolean" !== typeof disabled) {
                me._error("setDisabled() Input parameter is not a Boolean type!");
                return;
            }
            me.inputElement1.attr("disabled", disabled);
            me.inputElement2.attr("disabled", disabled);
            me.inputElement3.attr("disabled", disabled);
            me.inputElement4.attr("disabled", disabled);
            me.options.disabled = disabled;
            if (disabled) {
                if (!me.formDiv2El.hasClass(me.defaultPaddingDivClass)) {
                    return;
                }
                me.formDiv2El.removeClass(me.defaultPaddingDivClass).addClass(me.defaultPaddingDivDisabledClass);
            } else {
                if (!me.formDiv2El.hasClass(me.defaultPaddingDivDisabledClass)) {
                    return;
                }
                me.formDiv2El.removeClass(me.defaultPaddingDivDisabledClass).addClass(me.defaultPaddingDivClass);
            }
            //me._setDisabled(disabled);
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 设置数值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                inputText = me._textCmpSetValue(value),
                charArr = inputText.split(".");

            if ($.isNull(inputText)) {
                options.value = {
                    value: "",
                    text: ""
                };
                return;
            }
            if (charArr.length === 4 && me._checkFormat(charArr[0]) && me._checkFormat(charArr[1]) && me._checkFormat(charArr[2]) && me._checkFormat(charArr[3])) {
                me.inputElement1.val(charArr[0]);
                me.inputElement2.val(charArr[1]);
                me.inputElement3.val(charArr[2]);
                me.inputElement4.val(charArr[3]);
            } else {
                this._error("Invalid IP address：" + inputText + ".");
                me.inputElement1.val("");
                me.inputElement2.val("");
                me.inputElement3.val("");
                me.inputElement4.val("");
                options.value = {
                    value: "",
                    text: ""
                };
            }
        },
        /**
         * @private 
         * @description 获取组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                val = "";
            if (me.inputElement1.val() && me._checkFormat(me.inputElement1.val()) && me.inputElement2.val() && me._checkFormat(me.inputElement2.val()) && me.inputElement3.val() && me._checkFormat(me.inputElement3.val()) && me.inputElement4.val() && me._checkFormat(me.inputElement4.val())) {
                val = me.inputElement1.val() + "." + me.inputElement2.val() + "." + me.inputElement3.val() + "." + me.inputElement4.val();
                // 若手动输入内容
                if (!options.value || val !== options.value.text) {
                    options.value = {
                        text: val,
                        value: val
                    };
                }
                return $.objClone(options.value);
            }
            this._error("Invalid IP address：" + val + ".");
            return {
                value: "",
                text: ""
            };
        },
        /**
         * @private
         * @description 组件创建前，准备数值型文本框合法字符集
         */
        _beforeCreateFormWidget: function() {
            var me = this;
            me.allowdChars = me.baseChars;
        },
        /**
         * @private
         * @description 组件创建后，添加其他功能：禁用输入法切换、禁止粘贴
         */
        _afterCreateFormWidget: function() {
            var me = this;
            // 添加禁用输入法样式
            // 禁止粘贴
            me.__afterCreateFormWidget();
        },
        /**
         * @private
         * @description 给组件添加校验：包括数值型校验、最大最小值校验
         */
        _check: function() {
            var me = this;
        },
        /**
         * @private
         * @description 数值输入框，键盘按下时触发
         * @param {type} event 数值输入框对象
         */
        _onKeyDown: function(event) {
            var me = event.data.me,
                index = event.data.inputIndex,
                indexNext = index + 1,
                indexLast = index - 1,
                ch = String.fromCharCode($.e.getCharCode(event)),
                txt = event.target.value,
                val = txt + ch,
                key = event.charCode || event.keyCode,
                pos = $.cursor.getSelection(me.inputArr[index][0]);

            // 当前输入的字符是数字
            if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105)) {
                //小键盘上的数字键
                if (key >= 96 && key <= 105) {
                    ch = key - 96;
                    val = txt + ch;
                }
                // 文本框的数值超出范围
                if (!me._checkFormat(val)) {
                    event.preventDefault();
                    if (index < 3) {
                        setTimeout(function() {
                            me.inputArr[indexNext].focus();
                        }, 200);
                    }
                    return;
                }
                // 数值长度为3
                if (val.length === 3 && index < 3) {
                    setTimeout(function() {
                        me.inputArr[indexNext].focus();
                    }, 200);
                }
                return;
            } else if (13 === key) {
                //回车
                nextInputFocus();
            } else if (39 === key) {
                //right
                rightInputFocus();
            } else if (37 === key) {
                //left
                leftInputFocus();
            } else if (8 === key) {
                //backspace
                lastBackspace();
            } else if (46 === key) {
                //delete
                nextDelete();
            } else if (110 === key || 190 === key) {
                //小键盘的"."和主键盘的"."
                pointNextFocus();
            } else if (38 === key) {
                //up
                changNumber(1);
            } else if (40 === key) {
                //down
                changNumber(-1);
            } else if (8 === key) {
                //backspace
                event.preventDefault();
            } else {
                event.preventDefault();
                return;
            }

            // 下一个文本框获得焦点
            function nextInputFocus() {
                if (index > 2) {
                    return;
                }
                me.inputArr[indexNext].focus();
                return;
            }
            // right
            function rightInputFocus() {
                if (index > 2) {
                    return;
                }
                if (pos.start === txt.length) {
                    me.inputArr[indexNext].focus();
                    me.inputArr[indexNext][0].selectionStart = 0;
                    return;
                }
            }
            // left
            function leftInputFocus() {
                if (index < 1) {
                    return;
                }
                if (pos.end === 0) {
                    me.inputArr[indexLast].focus();
                    me.inputArr[indexLast][0].selectionStart = val.length;
                    return;
                }
            }
            // 向后删除
            function nextDelete() {
                if (index > 2) {
                    return;
                }
                if (!me.inputArr[index].val()) {
                    me.inputArr[indexNext].val("");
                    me.inputArr[indexNext].focus();
                    return;
                }
                return;
            }
            // 向前删除
            function lastBackspace() {
                if (index < 1) {
                    return;
                }
                if (!me.inputArr[index].val()) {
                    me.inputArr[indexLast].val("");
                    me.inputArr[indexLast].focus();
                    return;
                }
                return;
            }
            // 小数点
            function pointNextFocus() {
                if (index > 2) {
                    event.preventDefault();
                    return;
                }
                event.preventDefault();
                me.inputArr[indexNext].focus();
                return;
            }
            // 值变化
            function changNumber(step) {
                if (!txt) {
                    txt = 0;
                }
                if ($.number.isFloat(txt)) {
                    txt = parseFloat(txt);
                } else {
                    txt = parseInt(txt, 10);
                }
                if (me._checkFormat(txt + step)) {
                    me.inputArr[index].val(txt + step);
                    return;
                }
                if (256 === txt + step) {
                    me.inputArr[index].val(0);
                    return;
                }
                if (-1 === txt + step) {
                    me.inputArr[index].val(255);
                    return;
                }
            }
        },
        /**
         * @private
         * @description 格式校验
         * @param {Object} char 被验证的字符串
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _checkFormat: function(ch) {
            var me = this,
                ip = new RegExp(me.allowdChars);
            if (ip.test(ch)) {
                me.closeTip();
                return true;
            } else {
                me.showTip();
                return false;
            }
        },
        /**
         * @private
         * @description 组件创建后动作，子类继承实现
         */
        __afterCreateFormWidget: function() {
            var me = this;
            me.inputElement1.bind("paste", {
                "me": me,
                "obj": me.inputElement1
            }, me._onPaste);
            me.inputElement2.bind("paste", {
                "me": me,
                "obj": me.inputElement2
            }, me._onPaste);
            me.inputElement3.bind("paste", {
                "me": me,
                "obj": me.inputElement3
            }, me._onPaste);
            me.inputElement4.bind("paste", {
                "me": me,
                "obj": me.inputElement4
            }, me._onPaste);
        },
        /**
         * @private
         * @description 粘贴事件
         */
        _onPaste: function(event) {
            var me = event.data.me,
                obj = event.data.obj,
                oldVal = obj.val();

            function checkFormat() {
                var val = obj.val();
                if ($.isNull(val)) {
                    return;
                }
                if (!me._checkFormat(val)) {
                    me._error("Invalid IP address：" + val + ".");
                    obj.val(oldVal);
                }

            }
            setTimeout(checkFormat, 10);
        }
    });

    /**
     * ip文本框
     * @name Sweet.form.IPField
     * @class 
     * @extends Sweet.form
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * var ipfield = new Sweet.form.IPField () 
     */
    Sweet.form.IPField = $.sweet.widgetFormIpfield;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--十六进制文本框
 * 2012/2/19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    /**
     * 保存组件对象
     */
    var disabledInputMethodClass = "sweet-form-input-method-disabled",
        formDiv2ElPadding = "sweet-form-hexfield-formDiv2Padding",
        hexFieldClass = "sweet-form-hexfield",
        prefix = "0x";

    $.widget("sweet.widgetFormHexfield", $.sweet.widgetFormTextfield, /** @lends Sweet.form.HEXField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-hexfield]",
        type: 'text',
        /** 
         * @description 数值组件默认字符集
         * @private
         */
        baseChars: /[^0123456789ABCDEFabcdef]/,
        /** 
         * @private
         * @description form组件公共配置参数
         * @type {object}
         */
        options: /** @lends Sweet.form.HEXField.prototype*/
        {},

        /**
         * @private
         * @description 重新计算并绘制页面
         */
        _doLayout: function() {
            this._super();
        },

        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 设置数值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                charRe = new RegExp(me.allowdChars),
                ch = me._textCmpSetValue(value);
            if ($.isNull(value)) {
                this.options.value = {
                    value: "",
                    text: ""
                };
                me.formElement.val("");
                return;
            }
            // 是否有前缀
            if (prefix !== ch.slice(0, 2)) {
                me._error("Invalid hexadecimal number:" + ch + ".");
                options.value = {
                    value: "",
                    text: ""
                };
                return;
            } else {
                ch = ch.slice(2);
            }
            // 是否为十六进制数
            if (me._checkFormat(ch, charRe)) {
                me.formElement.val(ch);
            } else {
                me._error("Invalid hexadecimal number: " + ch + ".");
                me.formElement.val("");
                options.value = {
                    value: "",
                    text: ""
                };
            }
        },

        /**
         * @private
         * @description 设置组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                charRe = new RegExp(me.allowdChars),
                ch = this.formElement.val();
            if (ch && me._checkFormat(ch, charRe)) {
                ch = prefix + ch;
                // 若手动输入内容
                if (!options.value || ch !== options.value.text) {
                    options.value = {
                        text: ch,
                        value: ch
                    };
                }
                return options.value;
            } else {
                me._error("Invalid hexadecimal number: " + ch + ".");
                return {
                    value: "",
                    text: ""
                };
            }
        },

        /**
         * @private
         * @description 组件创建前，准备数值型文本框合法字符集
         */
        _beforeCreateFormWidget: function() {
            var me = this;
            me.allowdChars = me.baseChars;
        },

        /**
         * @private
         * @description 组件创建后，添加其他功能：禁用输入法切换、禁止粘贴
         */
        _afterCreateFormWidget: function() {
            var me = this;
            // 添加禁用输入法样式
            me.formElement.addClass(disabledInputMethodClass);
            // 禁止粘贴
            me.formElement.on("paste", function() {
                return false;
            });
            me.__afterCreateFormWidget();
        },

        /**
         * @private
         * @description 给组件添加校验：包括数值型校验、最大最小值校验
         */
        _check: function() {
            var me = this;
            me._super();
            me.formElement.keypress({
                "me": me
            }, me._onKeyPress);
        },

        /**
         * @private
         * @description 数值输入框，键盘按下时触发
         * @param {type} event 数值输入框对象
         */
        _onKeyPress: function(event) {
            var keyCode = Sweet.constants.keyCode,
                evtCode = event.keyCode,
                me = event.data.me,
                charRe = new RegExp(me.allowdChars),
                ch = String.fromCharCode($.e.getCharCode(event));
            // 退格键、回车键、删除键、上下左右方向键，不做处理
            if (keyCode.BACKSPACE === evtCode || keyCode.ENTER === evtCode || keyCode.DELETE === evtCode || keyCode.LEFT === evtCode || keyCode.RIGHT === evtCode || keyCode.DOWN === evtCode || keyCode.UP === evtCode || keyCode.TAB === evtCode) {
                return;
            }

            if (!me._checkFormat(ch, charRe)) {
                event.preventDefault();
                return;
            }
        },

        /**
         * @private
         * @description 检查格式
         * @param {Object} me 数值框对象
         * @param {Number} val 将设置的数值
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _checkFormat: function(ch, hexNum) {
            var me = this;
            if (hexNum.test(ch)) {
                // 出现错误提示
                me.showTip();
                return false;
            }
            // 关闭错误提示
            me.closeTip();
            return true;
        },

        /**
         * @private
         * @description 创建微调器上下翻按钮
         */
        __afterCreateFormWidget: function() {
            var me = this;
            me.formDiv2El.prepend(prefix).addClass(hexFieldClass);
        }
    });

    /**
     * 十六进制文本框
     * @name Sweet.form.HEXField
     * @class 
     * @extends Sweet.form.TextField
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.textfield.js
     * </pre>
     * @example 
     * var hexfield = new Sweet.form.HEXField () 
     */
    Sweet.form.HEXField = $.sweet.widgetFormHexfield;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--微调器
 * 2012/12/19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    /**
     * 组件全局变量定义
     */
    var spinnerChangeValue = "sweet-form-spinner-changeValue",
        spinnerChangeValSpan = "sweet-form-spinner-changeValSpan",
        spinnerChangeValTop = "sweet-form-spinner-changeValTop",
        spinnerChangeValDown = "sweet-form-spinner-changeValDown",
        spinnerChangeValueDisabled = "sweet-form-spinner-changeValue-disabled",
        spinnerChangeValTopDisabled = "sweet-form-spinner-changeValTop-disabled",
        spinnerChangeValDownDisabled = "sweet-form-spinner-changeValDown-disabled",
        spinnerClass = "sweet-form-spinner",
        hrefJs = "javascript:void(0);",
        flipType = [1, 2]; // 1 增加  2 减少

    $.widget("sweet.widgetFormSpinner", $.sweet.widgetFormNumberfield, /** @lends Sweet.form.Spinner.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-spinner]",
        type: 'text',
        eventNames: /** @lends Sweet.form.Spinner.prototype*/
        {
            /**
             * @event
             * @description 改变值事件,参数为两个(event, data)
             */
            change: "改变值事件"
        },
        /**
         * @private
         * @description 微调器组件公共配置参数
         * @type object
         */
        options: /** @lends Sweet.form.Spinner.prototype*/
        {
            /**
             * @description 步进单位
             * @type {Number}
             * @default 1
             */
            step: 1,
            /**
             * @description 起始值
             * @type {Number}
             * @default 0
             */
            start: 0
        },
        /**
         * @description 重新计算并绘制页面
         * @private
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 创建微调器上下翻按钮
         */
        __afterCreateFormWidget: function() {
            var me = this,
                spanEl = me.spanEl = $("<span>").addClass(spinnerChangeValue).insertBefore(me.formElement),
                upEl = me.upEl = $("<span>").attr("href", hrefJs)
                    .addClass(spinnerChangeValTop + " " + spinnerChangeValSpan)
                    .appendTo(spanEl),
                downEl = me.downEl = $("<span>").attr("href", hrefJs)
                    .addClass(spinnerChangeValDown + " " + spinnerChangeValSpan)
                    .appendTo(spanEl);

            me.formDiv2El.addClass(spinnerClass);
            me._setRange();
        },

        /**
         * @private
         * @description 上下翻
         * @param {Object} event 上下翻图片对象
         */
        _onFilp: function(event) {
            var me = event.data.me,
                options = me.options,
                type = event.data.type,
                obj = event.data.obj,
                value = obj.val(),
                temp;
            if (options.disabled) {
                return;
            }
            if (!me.editable) {
                return;
            }
            me.oldValue1 = obj.val();
            if ($.number.isFloat(value)) {
                value = parseFloat(value);
            } else {
                value = parseInt(value, 10);
            }
            // 增加
            if (flipType[0] === type) {
                temp = value + options.step;
                if ($.isNotNull(options.maxValue)) {
                    if (temp <= options.maxValue) {
                        obj.val(temp);
                        me._triggerHandler(event, "change", me.getValue());
                    }
                } else {
                    obj.val(temp);
                    me._triggerHandler(event, "change", me.getValue());
                }
                me._setRange();
                // 减少
            } else if (flipType[1] === type) {
                temp = value - options.step;
                if ($.isNotNull(options.minValue)) {
                    if (temp >= options.minValue) {
                        obj.val(temp);
                        me._triggerHandler(event, "change", me.getValue());
                    }
                } else {
                    obj.val(temp);
                    me._triggerHandler(event, "change", me.getValue());
                }
                me._setRange();
            } else {
                me._error("_onFilp(): Unsupported type. Type equals 1 or 2. type=" + type);
            }
            event.stopImmediatePropagation();
        },

        /**
         * @private
         * @description 根据微调器值范围改变上下翻按钮样式
         */
        _setRange: function() {
            var me = this,
                options = me.options,
                value, formEI = me.formElement,
                maxValue = options.maxValue,
                minValue = options.minValue;
            value = me.formElement.val();
            if ($.number.isFloat(value)) {
                value = parseFloat(value);
            } else {
                value = parseInt(value, 10);
            }
            if (!options.disabled) {
                // 微调器只有最大值限制时
                if ($.isNotNull(maxValue) && $.isNull(minValue)) {
                    if (value === maxValue || (value + options.step) > maxValue) {
                        me.upEl.removeClass(spinnerChangeValTop).addClass(spinnerChangeValTopDisabled);
                        me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
                        me.upEl.unbind("click");
                        me.downEl.bind("click", {
                            "me": me,
                            "type": 2,
                            "obj": formEI
                        }, me._onFilp);
                    } else {
                        me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                        me.upEl.bind("click", {
                            "me": me,
                            "type": 1,
                            "obj": formEI
                        }, me._onFilp);
                        me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
                        me.downEl.bind("click", {
                            "me": me,
                            "type": 2,
                            "obj": formEI
                        }, me._onFilp);
                    }
                    // 微调器只有最小值限制时
                } else if ($.isNull(maxValue) && $.isNotNull(minValue)) {
                    if (value === minValue || (value - options.step) < minValue) {
                        me.downEl.removeClass(spinnerChangeValDown).addClass(spinnerChangeValDownDisabled);
                        me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                        me.downEl.unbind("click");
                        me.upEl.bind("click", {
                            "me": me,
                            "type": 1,
                            "obj": formEI
                        }, me._onFilp);
                    } else {
                        me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
                        me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                        me.upEl.bind("click", {
                            "me": me,
                            "type": 1,
                            "obj": formEI
                        }, me._onFilp);
                        me.downEl.bind("click", {
                            "me": me,
                            "type": 2,
                            "obj": formEI
                        }, me._onFilp);
                    }
                    // 微调器同时设置最大值和最小值
                } else if ($.isNotNull(maxValue) && $.isNotNull(minValue)) {
                    if (value === maxValue || (value + options.step) > maxValue) {
                        me.upEl.removeClass(spinnerChangeValTop).addClass(spinnerChangeValTopDisabled);
                        me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
                        me.upEl.unbind("click");
                        me.downEl.bind("click", {
                            "me": me,
                            "type": 2,
                            "obj": formEI
                        }, me._onFilp);
                    } else if (value === minValue || (value - options.step) < minValue) {
                        me.downEl.removeClass(spinnerChangeValDown).addClass(spinnerChangeValDownDisabled);
                        me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                        me.downEl.unbind("click");
                        me.upEl.bind("click", {
                            "me": me,
                            "type": 1,
                            "obj": formEI
                        }, me._onFilp);
                    } else {
                        me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                        me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
                        me.upEl.bind("click", {
                            "me": me,
                            "type": 1,
                            "obj": formEI
                        }, me._onFilp);
                        me.downEl.bind("click", {
                            "me": me,
                            "type": 2,
                            "obj": formEI
                        }, me._onFilp);
                    }
                } else {
                    me.upEl.bind("click", {
                        "me": me,
                        "type": 1,
                        "obj": me.formElement
                    }, me._onFilp);
                    me.downEl.bind("click", {
                        "me": me,
                        "type": 2,
                        "obj": me.formElement
                    }, me._onFilp);
                }
            }
        },
        /**
         * @private
         * @description 置灰微调器上、下翻图片
         * @param {Boolean} disabled ture/false
         */
        __setDisabled: function(disabled) {
            var me = this;
            if (disabled) {
                me.spanEl.removeClass(spinnerChangeValue).addClass(spinnerChangeValueDisabled);
                me.upEl.removeClass(spinnerChangeValTop).addClass(spinnerChangeValTopDisabled);
                me.downEl.removeClass(spinnerChangeValDown).addClass(spinnerChangeValDownDisabled);
            } else {
                me.spanEl.removeClass(spinnerChangeValueDisabled).addClass(spinnerChangeValue);
                me.upEl.removeClass(spinnerChangeValTopDisabled).addClass(spinnerChangeValTop);
                me.downEl.removeClass(spinnerChangeValDownDisabled).addClass(spinnerChangeValDown);
            }
            me.spanEl.attr("disabled", disabled);
            me.upEl.attr("disabled", disabled);
            me.downEl.attr("disabled", disabled);
        }
    });

    /**
     * 创建微调器
     * @name Sweet.form.Spinner
     * @class 
     * @extends Sweet.form.NumberField
     * @requires  
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.textfield.js
     * jquery.sweet.widget.form.numberfield.js
     * </pre>
     * @example 
     * <pre>
     * sweetSpinner = new Sweet.form.Spinner({
     *     label : true,
     *     width : 200,
     *     labelText : 'spinner',
     *     value : {value:5, text:'spinner'},
     *     maxValue : 10,
     *     step : 2,
     *     minValue : 0,
     *     tooltip : "这是tip测试",
     *     renderTo :　"sweet-text"
     * });
     * </pre>
     */
    Sweet.form.Spinner = $.sweet.widgetFormSpinner;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--日期组件
 * 2013/1/9
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * 保存组件对象
     */
    var monthDivClass = "sweet-form-date-float-panel-spinner-month",
        yearDivClass = "sweet-form-date-float-panel-spinner-year",
        timeDivClass = "sweet-form-date-float-south-panel",
        spinnerUpClass = "sweet-form-date-float-panel-up",
        spinnerDownClass = "sweet-form-date-float-panel-down",
        spinnerUpGrayClass = "sweet-form-date-float-panel-up-gray",
        spinnerDownGrayClass = "sweet-form-date-float-panel-down-gray",
        dayCurrent = "current",
        dayInvalid = "invalid",
        invalidCls = "currentMonthInvalid",
        dayRest = "rest",
        dataTextCls = "sweet-form-date-text",
        datePicClass = "sweet-form-date-pic-field",
        dataPicGrayClass = "sweet-form-date-pic-field-gray",
        dateParentGrayClass = "sweet-form-date-input-field-gray",
        dateParentClass = "sweet-form-date-input-field",
        datePicDisabledClass = "sweet-form-date-input-pic-disabled",
        //客户端时区
        custmTzone = new Date().getTimezoneOffset() / 60 * (-1),
        // 微调器类型 1：月 2：年 3：时间
        spinnerType = [1, 2, 3],
        // 微调器上下翻类型 1：上翻 2：下翻
        spinnerFlipType = [1, 2],
        // 微调器时间类型 1：小时 2：分钟 3：秒
        spinnerTimeType = [1, 2, 3],
        // 小时数组
        spinnerHourArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
        // 分钟数组
        spinnerMinuteArr = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55],
        // 秒数组
        spinnerSecondArr = [0, 10, 20, 30, 40, 50],
        // 年上下翻类型 1：上翻 2：下翻
        yearFilpType = [1, 2],
        // 月份面板表格天数，最多42格
        dayGridNum = 42,
        // 面板类型 1: 年 2:月3：时间
        floatPanelType = [1, 2, 3];

    $.widget("sweet.widgetFormDate", $.sweet.widgetFormInput, /** @lends Sweet.form.Date.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-date]",
        type: 'text',
        baseChars: "0123456789:-",
        months: $.objClone(Sweet.constants.MONTHS),
        eventNames: /** @lends Sweet.form.Date.prototype*/
        {
            /**
             * @event
             * @description 日期值改变事件,参数为两个(event, data)
             */
            "change": "改变值事件",
            /**
             * @event
             * @description 图片点击事件,参数为两个(event, data)
             */
            click: "图片点击事件"
        },
        /**
         * @private
         * @description 日期组件配置参数
         * @type object
         */
        options: /** @lends Sweet.form.Date.prototype*/
        {
            /**
             * @description 设置时间格式
             * @type {String/Number}
             * @default "yyyy-MM-dd hh:mm:ss"
             */
            format: "yyyy-MM-dd hh:mm:ss",
            /**
             * @description 设置时间输入框是否可编辑
             * @type {Bollean}
             * @default true
             */
            editable: true,
            /**
             * @description 设置默认时区
             * @type {String/Number}
             * @default ""
             */
            timeZone: "",
            /**
             * @description 最大时间,日期字符串或utc秒数
             * @type {String/Number}
             * @default ""
             */
            maxDate: "",
            /**
             * @description 最小时间,日期字符串或utc秒数
             * @type {String/Number}
             * @default ""
             */
            minDate: "",
            /**
             * @description 是否只显示当月日期
             * @type {String/Number}
             * @default false
             */
            showDays: false,
            /**
             * @description 外部接口,弹出日期框前调用
             * @type {function}
             * @default $.noop
             */
            beforePopDatePanel: $.noop
        },
        /**
         * @public
         * @description 设置组件的时区
         * @param {Number} data 时区
         */
        setTimeZone: function(data) {
            var me = this;
            if ($.isNotNull(data) && $.isNumber(data)) {
                me.options.timeZone = data;
                me._isTimeZoneNull = null;
            } else {
                me.options.timeZone = new Date().getTimezoneOffset() / 60 * (-1);
                me._isTimeZoneNull = true;
            }
        },
        /**
         * @public
         * @description 设置组件时间部分的置灰
         * @param {String}data：4种类型，分别是：
         * "yyyy-MM-dd hh:mm:ss","yyyy-MM-dd hh:mm","yyyy-MM-dd hh","yyyy-MM-dd"
         */
        setDisableTimePart: function(data) {
            var me = this;

            if ($.isNotNull(data)) {
                if (me.options.format === "yyyy-MM-dd hh:mm") {
                    me._setTimeElStyle(me, data);
                }
            }
        },

        /**
         * @public
         * @description 对外提供设置时间控件屏蔽类型的接口 HMS,MS,S
         * @param {String/Number} data 时间限制的类型
         * @default Null
         */
        setFiledType: function(data) {
            var me = this,
                options = me.options;
            var val = me.formElement.val();
            if (!$.isNull(data)) {
                if (data === "HMS") {
                    me.options.format = "yyyy-MM-dd";
                }
                if (data === "MS") {
                    me.options.format = "yyyy-MM-dd hh";
                }
                if (data === "S") {
                    me.options.format = "yyyy-MM-dd hh:mm";
                }
            }
            if ($.isNotNull(val)) {
                if (me.options.format === "yyyy-MM-dd hh") {
                    me.formElement.val($.date.format(new Date(val.replace(/-/g, "/")),
                    me.options.format) + ":00");
                } else {
                    me.formElement.val($.date.format(new Date(val.replace(/-/g, "/")),
                    me.options.format));
                }
            }
        },
        /**
         * @public
         * @description 设置日期最大值
         * @param {String/Number} data 日期字符串或utc秒数
         */
        setMaxDate: function(data) {
            var me = this,
                options = me.options,
                value = me.formElement.val();
            if ($.isNotNull(data)) {
                // 如果设置最大时间,对最大时间进行自动纠错和格式转换
                options.maxDate = me._findError(data);
                var _tZone = options.timeZone;
                if (me._isTimeZoneNull) {
                    _tZone = me._getTempZone(String(value.replace(/-/g, "/")));
                }
                var selectDateUtc = $.date.dateToUTC(String(value.replace(/-/g, "/")), _tZone);
                // 设置最大时间后对文本框的内容进行校验，若不在所设置范围，默认取最大时间为文本框的值
                me._setUtcTimefield(selectDateUtc);
            }
        },
        /**
         * @public
         * @description 设置日期最小值
         * @param {String/Number} data 日期字符串或utc秒数
         */
        setMinDate: function(data) {
            var me = this,
                options = me.options,
                value = me.formElement.val();
            if ($.isNotNull(data)) {
                // 如果设置最小时间,对最小时间进行自动纠错和格式转换
                options.minDate = me._findError(data);
                var _tZone = options.timeZone;
                if (me._isTimeZoneNull) {
                    _tZone = me._getTempZone(String(value.replace(/-/g, "/")));
                }
                var selectDateUtc = $.date.dateToUTC(String(value.replace(/-/g, "/")), _tZone);
                // 设置最小时间后对文本框的内容进行校验，若不在所设置范围，默认取最小时间为文本框的值
                me._setUtcTimefield(selectDateUtc);
            }
        },
        /**
         * @public
         * @description 根据粒度时间向后规整，此方法不包含时间置灰处理
         * @param {Number} intervalSeconds :规整粒度的秒数
         * @param {Number} currentUTC 当前UTC秒数
         * @return {Number} tempVal 返回规整后的UTC时间，单位：秒
         */
        setRegularization: function(intervalSeconds, currentUTC) {
            var me = this,
                tempStr = "",
                options = me.options;
            if ($.isNull(intervalSeconds)) {
                return;
            }

            // 获取当前客户端UTC时间
            var currnetUtc = currentUTC || parseInt($.date.getMilliseconds() / 1000, 10);
            // 获取时间组件当前时间
            var val = me.formElement.val();
            var _tZone = options.timeZone,
                tempVal = 0,
                valUtc = 0;
            if (me._isTimeZoneNull) {
                _tZone = me._getTempZone(String(val.replace(/-/g, "/")));
                valUtc = $.date.dateToUTC(String(val.replace(/-/g, "/")), _tZone);
                //对时间向后规整
                tempVal = $.date.setDateAfterOrder(intervalSeconds, valUtc, currnetUtc);
                tempVal += (_tZone - (-new Date(tempVal * 1000).getTimezoneOffset() / 60)) * 3600;
            } else {
                valUtc = $.date.dateToUTC(String(val.replace(/-/g, "/")), _tZone);
                //对时间向后规整
                tempVal = $.date.setDateAfterOrder(intervalSeconds, valUtc, currnetUtc, _tZone);
            }
            // 判断规整后的时间是否在设置的时间范围中，若超出时间范围则取规整后的最大或最小边界值为组件当前值
            tempVal = me._checkMaxMin(tempVal);

            // 时间规整后重新设置时间文本框的值
            me._setUtcTimefield(tempVal);
            return tempVal;
        },
        /**
         * @public
         * @description 根据粒度时间向后规整，推荐使用新接口setRegularization
         * @param {Number} intervalSeconds :规整粒度的秒数
         * @param {Number} currentUTC 当前UTC秒数
         * @return {Number} tempVal 返回规整后的UTC时间，单位：秒
         */
        setInterval: function(intervalSeconds, currentUTC) {
            var me = this,
                tempStr = "",
                options = me.options;
            if ($.isNull(intervalSeconds)) {
                return;
            }
            options.intervalSeconds = intervalSeconds;
            // 根据规整粒度对组件的时分秒输入框进行限制
            switch (intervalSeconds) {
                case 300:
                case 900:
                    me.options.format = "yyyy-MM-dd hh:mm";
                    me.setFiledType("S");
                    break;
                case 3600:
                    me.options.format = "yyyy-MM-dd hh";
                    me.setFiledType("MS");
                    break;
                case 86400:
                    me.options.format = "yyyy-MM-dd";
                    me.setFiledType("HMS");
                    break;
                default:
                    break;
            }
            // 获取当前客户端UTC时间
            var currnetUtc = currentUTC || parseInt($.date.getMilliseconds() / 1000, 10);

            // 获取时间组件当前时间
            var val = me.formElement.val();
            var _tZone = options.timeZone,
                tempVal = 0,
                valUtc = 0;
            if (me._isTimeZoneNull) {
                _tZone = me._getTempZone(String(val.replace(/-/g, "/")));
                valUtc = $.date.dateToUTC(String(val.replace(/-/g, "/")), _tZone);
                //对时间向后规整
                tempVal = $.date.setDateAfterOrder(intervalSeconds, valUtc, currnetUtc);
                tempVal += (_tZone - (-new Date(tempVal * 1000).getTimezoneOffset() / 60)) * 3600;
            } else {
                valUtc = $.date.dateToUTC(String(val.replace(/-/g, "/")), _tZone);
                //对时间向后规整
                tempVal = $.date.setDateAfterOrder(intervalSeconds, valUtc, currnetUtc, _tZone);
            }

            // 判断规整后的时间是否在设置的时间范围中，若超出时间范围则取规整后的最大或最小边界值为组件当前值
            tempVal = me._checkMaxMin(tempVal);

            // 时间规整后重新设置时间文本框的值
            me._setUtcTimefield(tempVal);
            return tempVal;
        },
        /**
         * @private
         * @description 对最大/最小时间进行自动纠错和格式转换
         * @param {String/Number} data 日期字符串或utc秒数
         * @return {String} 日期字符串
         */
        _findError: function(data) {
            var me = this,
                formatDate,
                options = me.options,
                ymdhReg = /^(\d{4})-(\d{2})-(\d{2}) (\d{2})$/;
            // 对时间进行自动纠错和格式转换
            if ("string" === typeof data) {
                var strTime = data,
                    strTimeData = strTime.split(" "),
                    strdateData = strTimeData[0].split("-"),
                    year = strdateData[0],
                    month = strdateData[1] - 1,
                    day = strdateData[2],
                    strtimeData = (strTimeData[1] === undefined) ? ["00", "00", "00"] : strTimeData[1].split(":"),
                    hour = (strtimeData[0] === undefined) ? "00" : strtimeData[0],
                    minute = (strtimeData[1] === undefined) ? "00" : strtimeData[1],
                    second = (strtimeData[2] === undefined) ? "00" : strtimeData[2];
                formatDate = me._initFormElVal(year, month, day, hour, minute, second);
            } else if ($.isNumeric(data)) {
                formatDate = me._getTimeStrByUtc(data);
            }
            formatDate = (formatDate.match(new RegExp(ymdhReg)) === null) ? formatDate : formatDate + ":00";
            return formatDate;
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this;
            // 调用父类_destroyWidget函数销毁文本框
            me._super();
            // 销毁浮动框
            me.floatEl ? me.floatEl.empty().remove() : "";
            me.datePicEl ? me.datePicEl.unbind() : "";

            delete me.regMap;
        },
        /**
         * @private
         * @param {Object} value： UTC秒数, 形如：1368685830
         * @description 转换UTC秒数为日期组件显示的指定时区时间
         */
        _setUtcTimefield: function(value) {
            var me = this,
                utc = parseInt(value, 10),
                dateVal;
            if ($.isNumeric(utc)) {
                utc = me._checkMaxMin(utc);
                dateVal = me._getTimeStrByUtc(utc);
                me.formElement.val(dateVal);
            }
        },

        /**
         * @private
         * @param utc 秒数
         * @description 根据utc转换为指定时区的日期字符串
         * @return {String} 日期字符串，形如："yyyy-MM-dd hh：mm"
         */
        _getTimeStrByUtc: function(utc) {
            var tempUtc;
            if ($.isString(utc)) {
                utc = $.string.toNumber(utc);
            }
            var me = this,
                newVal,
                format = me.options.format,
                tZone = me.options.timeZone,
                custTimeZone = -new Date(utc * 1000).getTimezoneOffset() / 60,
                temp,
                cusUtc;
            if (me._isTimeZoneNull) {
                tZone = custTimeZone;
            }
            temp = custTimeZone - tZone;
            cusUtc = utc - 3600 * temp;

            if (me.options.format === "yyyy-MM-dd hh") {
                newVal = $.date.millisecondsToDate(cusUtc * 1000, format) + ":00";
            } else {
                newVal = $.date.millisecondsToDate(cusUtc * 1000, format);
            }

            return newVal;
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} obj 形如{value: 日期值, text: 文本: data: utc秒数}
         */
        _setValue: function(obj) {
            var me = this,
                dateVal,
                options = me.options;

            //如果data节点的值存在，首先用data节点的UTC设置组件显示的值
            if ($.isNotNull(obj.data)) {
                me._setUtcTimefield(obj.data);
            } else if ($.isNotNull(obj.value)) {
                var value = obj.value;
                // 是否数字
                if ($.isNumeric(value)) {
                    me._setUtcTimefield(value);
                } else {
                    // 不直接使用new Date,防止日期中参数超出范围如："2013-21-11 00:00:00"时返回NAN
                    var strTime, selectDateUtc2;
                    // 当obj.value是string类型时
                    if ("string" === typeof obj.value) {
                        strTime = obj.value;
                        var req = /\//g,
                            tempStr = strTime.match(req);

                        if ($.isNotNull(tempStr)) {
                            strTime = strTime.replace(req, "-");
                        }

                        var strTimeData = strTime.split(" "),
                            strdateData = strTimeData[0].split("-"),
                            year = strdateData[0],
                            month = strdateData[1] - 1,
                            day = strdateData[2],
                            strtimeData = (strTimeData[1] === undefined) ? ["00", "00", "00"] : strTimeData[1].split(":"),
                            hour = (strtimeData[0] === undefined) ? "00" : strtimeData[0],
                            minute = (strtimeData[1] === undefined) ? "00" : strtimeData[1],
                            second = (strtimeData[2] === undefined) ? "00" : strtimeData[2];
                        me.formElement.val(me._initFormElVal(year, month, day, hour, minute, second));
                        // 当obj.value是一个时间对象格式时
                    } else if ("object" === typeof obj.value) {
                        strTime = $.date.format(new Date(obj.value), me.options.format);
                        selectDateUtc2 = $.date.dateToUTC(String(strTime.replace(/-/g, "/")), options.timeZone);
                        me._setUtcTimefield(selectDateUtc2);
                    }
                }
                $.data(me.formElement[0], "value", obj);
            } else {
                // 设置数据为空时，清空日期组件
                me.formElement.val("");
            }
            me._checkFun();

            dateVal = me.formElement.val();
            //只有disabled为false时才触发用户监听的事件
            if (me.oldValue !== dateVal && !options.disabled) {
                me._triggerHandler(null, "change", me._getValue());
                me.oldValue = dateVal;
            }
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用
         */
        _setDisabled: function(disabled) {
            var me = this,
                formDiv2El = me.formDiv2El,
                datePic = me.datePicEl,
                defPaddingDisableCls = me.defaultPaddingDivDisabledClass,
                defPaddingCls = me.defaultPaddingDivClass;

            if (disabled) {
                formDiv2El.removeClass(dateParentClass).addClass(dateParentGrayClass);
                datePic.removeClass().addClass(dataPicGrayClass);
                me.emptyDiv ? me.emptyDiv.hide() : "";

                if (!formDiv2El.hasClass(defPaddingCls)) {
                    return;
                }
                formDiv2El.removeClass(defPaddingCls).addClass(defPaddingDisableCls);
            } else {
                formDiv2El.removeClass(dateParentGrayClass).addClass(dateParentClass);
                datePic.removeClass().addClass(datePicClass);

                if (!formDiv2El.hasClass(defPaddingDisableCls)) {
                    return;
                }
                formDiv2El.removeClass(defPaddingDisableCls).addClass(defPaddingCls);
            }
        },
        /**
         * @private
         * @description 获取最大值的utc
         * @param {Boolean} data 返回字符串标记，true：表示返回时间字符串，false或者空：表示默认返回utc秒数
         * @return maxUtc 当前组件最大值utc
         */
        _getMaxUtc: function(data) {
            var me = this,
                options = me.options,
                tzone = options.timeZone,
                format = options.format,
                result = "",
                maxDate = options.maxDate,
                maxDateFormat = "",
                _tDate;
            if ($.isNotNull(maxDate)) {
                if (!data) {
                    if ("number" === typeof(maxDate)) {
                        result = maxDate;
                    }
                    if ("string" === typeof(maxDate)) {
                        _tDate = new Date(maxDate.replace(/-/g, "/"));
                        maxDateFormat = $.date.format(_tDate, me.options.format);
                        if (me._isTimeZoneNull) {
                            tzone = -_tDate.getTimezoneOffset() / 60;
                        }
                        result = $.date.dateToUTC(String(maxDateFormat.replace(/-/g, "/")), tzone);
                    }
                } else {
                    if ("number" === typeof(maxDate)) {
                        result = me._getTimeStrByUtc(maxDate);
                    }
                    if ("string" === typeof(maxDate)) {
                        result = $.date.format(new Date(maxDate.replace(/-/g, "/")), me.options.format);
                    }
                    if (me.options.format === "yyyy-MM-dd hh") {
                        result = result + ":00";
                    }
                }
            }

            return result;
        },
        /**
         * @private
         * @description 获取最小值的utc
         * @param {Boolean} data 返回字符串标记，true：表示返回时间字符串，false或者空：表示默认返回utc秒数
         * @return minUtc 当前组件最小值utc
         */
        _getMinUtc: function(data) {
            var me = this,
                options = me.options,
                tzone = options.timeZone,
                minDateFormat = "",
                result = "",
                minDate = options.minDate,
                format = options.format,
                _tDate;
            if ($.isNotNull(minDate)) {
                if (!data) {
                    if ("number" === typeof(minDate)) {
                        result = minDate;
                    }
                    if ("string" === typeof(minDate)) {
                        _tDate = new Date(minDate.replace(/-/g, "/"));
                        minDateFormat = $.date.format(_tDate, me.options.format);
                        if (me._isTimeZoneNull) {
                            tzone = -_tDate.getTimezoneOffset() / 60;
                        }
                        result = $.date.dateToUTC(String(minDateFormat.replace(/-/g, "/")), tzone);
                    }
                } else {
                    if ("number" === typeof(minDate)) {
                        result = me._getTimeStrByUtc(minDate);
                    }
                    if ("string" === typeof(minDate)) {
                        result = $.date.format(new Date(minDate.replace(/-/g, "/")), me.options.format);
                    }
                    if (me.options.format === "yyyy-MM-dd hh") {
                        result = result + ":00";
                    }
                }
            }
            return result;
        },
        /**
         * @private
         * @description 判断所取时间是否在设定的时间范围
         * @return val 当前组件默认UTC时间
         */
        _checkMaxMin: function(selectDateUtc) {
            var me = this,
                options = me.options,
                val, tzone = options.timeZone,
                maxDate = options.maxDate,
                minDate = options.minDate;
            // 同时设置时间最大值和最小值
            if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                var maxDateUtc = me._getMaxUtc(),
                    minDateUtc = me._getMinUtc();
                // 如果当前设置时间在限定范围，取当前所取时间生成输入域默认时间
                if (maxDateUtc >= selectDateUtc && selectDateUtc >= minDateUtc) {
                    val = selectDateUtc;
                }
                // 如果当前设置所取时间不在限定范围，若超过最大值取最大时间生成输入域默认时间
                else if (maxDateUtc < selectDateUtc) {
                    val = maxDateUtc;
                }
                // 如果当前设置所取时间不在限定范围，若小于最小值取最小时间生成输入域默认时间
                else if (minDateUtc > selectDateUtc) {
                    val = minDateUtc;
                }
            }
            // 只设置时间最大值
            else if ($.isNotNull(maxDate) && $.isNull(minDate)) {
                var maxDateUtc1 = me._getMaxUtc();
                // 如果当前所取时间在限定范围，取当前所取时间生成输入域默认时间
                if (maxDateUtc1 >= selectDateUtc) {
                    val = selectDateUtc;
                }
                // 如果当前所取时间不在限定范围，取最大时间生成输入域默认时间
                else {
                    val = maxDateUtc1;
                }
            }
            // 只设置时间最小值
            else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                var minDateUtc1 = me._getMinUtc();
                // 如果当前所取时间在限定范围，取当前所取时间生成输入域默认时间
                if (minDateUtc1 <= selectDateUtc) {
                    val = selectDateUtc;
                }
                // 如果当前所取时间不在限定范围，取最大时间生成输入域默认时间
                else {
                    val = minDateUtc1;
                }
            }
            // 时间最大值和最小值都没有设置
            else {
                val = selectDateUtc;
            }
            return val;
        },
        /**
         * @private
         * @description 获取组件值
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                val = me.formElement.val(),
                reg = (me.options.format === "yyyy-MM-dd hh") ? me.regMap["yyyy-MM-dd hh:mm"] : me.regMap[options.format],
                regObj = new RegExp(reg),
                tzone = options.timeZone;
            if ($.isNull(val)) {
                return null;
            }
            //日期验证
            if (val.match(regObj) === null) {
                me._error("The format of the time is wrong!");
                return null;
            } else {
                if (me._isTimeZoneNull) {
                    tzone = me._getTempZone(String(val.replace(/-/g, "/")));
                }
                var utcDate = $.date.dateToUTC(String(val.replace(/-/g, "/")), tzone);
                if ($.isNotNull(options.value)) {
                    return {
                        "value": val,
                        "text": options.value.text,
                        "data": utcDate
                    };
                } else {
                    return {
                        "value": val,
                        "text": "time",
                        "data": utcDate
                    };
                }
            }
        },
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this;
            me._super();

            // 发生布局刷新时，要把弹出层关闭
            me._closeFloatPanel();
        },
        /**
         * @private
         * @description 关闭日期浮动面板
         */
        _closeFloatPanel: function() {
            var me = this;
            if (!me.floatEl) {
                return;
            }

            if (!me.openDropDownFlag && $.isVisiable(me.floatEl)) {
                me.floatEl.fadeOut(150);
                // 关闭日期面板上的浮动面板
                me._closeDateFloatPanel();
            }
            me.openDropDownFlag = false;
        },
        /**
         * @private
         * @description 关闭日期面板上的浮动面板
         */
        _closeDateFloatPanel: function() {
            var me = this;
            me.northMonthSpinnerEl.find("." + monthDivClass).hide();
            me.northYearSpinnerEl.find("." + yearDivClass).hide();
            me.southSpinnerEl.find("." + timeDivClass).hide();
        },
        /**
         * @private
         * @description 创建日期输入域
         */
        _createInputField: function() {
            var me = this,
                options = me.options,
                vid = $.isNotNull(options.vID) ? options.vID : (options.id + "_date_input"),
                formDiv2Class = "sweet-form-input-date",
                formElement = me.formElement = $("<input>").addClass(me.defaultInputClass),
                formDiv1El = me.formDiv1El.appendTo(me.formEl),
                formDiv2El = me.formDiv2El = $("<div>").addClass(me.defaultPaddingDivClass + " " + formDiv2Class)
                    .appendTo(formDiv1El),
                datePicEl = me.datePicEl = $("<span>").addClass(datePicClass);

            formElement.attr("id", vid);

            me.formEl.css({
                position: "relative"
            });
            //如果配置中没有配时区，那么默认采用客户端本地(系统)时区
            if ($.isNull(options.timeZone)) {
                me._isTimeZoneNull = true;
                options.timeZone = custmTzone;
            }

            datePicEl.appendTo(formDiv2El);
            formElement.attr("type", me.type)
                .bind("click", {
                "me": me
            }, me._onDatePicClick)
                .appendTo(formDiv2El);
            // 如果设置最大时间,对最大时间进行自动纠错
            if (!$.isNull(options.maxDate)) {
                options.maxDate = me._findError(options.maxDate);
            }
            // 如果设置最小时间,对最小时间进行自动纠错
            if (!$.isNull(options.minDate)) {
                options.minDate = me._findError(options.minDate);
            }
            var regMap = {},
            regArr = [/^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/, /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})$/,
                /^(\d{4})-(\d{2})-(\d{2}) (\d{2})$/, /^(\d{4})-(\d{2})-(\d{2})$/],
                formatArr = ["yyyy-MM-dd hh:mm:ss", "yyyy-MM-dd hh:mm", "yyyy-MM-dd hh", "yyyy-MM-dd"];
            for (var i = 0; i < regArr.length; i++) {
                regMap[formatArr[i]] = regArr[i];
            }
            me.regMap = regMap;
            // 日期图片绑定事件
            me.datePicEl.bind("click", {
                "me": me
            }, me._onDatePicClick);
        },

        /**
         * @private
         * @description 点击日期图片时触发，弹出日期面板
         * @param event {Object} 图片事件对象
         */
        _onDatePicClick: function(event) {
            var me = event.data.me,
                options = me.options,
                disabled = options.disabled,
                maxZIndex, left, top;
            if (disabled) {
                me.floatEl ? me.floatEl.hide() : "";
                return;
            }

            if ($.isFunction(options.beforePopDatePanel)) {
                options.beforePopDatePanel();
            }
            // 延迟创建
            if (!me.floatEl) {
                me._createDateFloatPanel();
            }

            if ($.isNull(me.oldValue)) {
                me.oldValue = me.formElement.val();
            }
            maxZIndex = $.getMaxZIndex(me.floatEl.css("z-index"));
            me.floatEl.css("z-index", maxZIndex);
            // 关闭日期面板上的浮动面板
            me._closeDateFloatPanel();
            if ("block" === me.floatEl.css("display")) {
                event.stopImmediatePropagation();
                return;
            }

            // 设置日期值
            me._getCurrentDate(me);
            // 设置月面板
            me._changeDateMidContent(me);
            //设置浮动窗口年月日的显示
            me._setFloatPanelDateVal(me);

            me._setTimeElStyle(me, options.format);
            //外面的点击图片的监听
            me._triggerHandler(event, "click", me.formElement.val());

            // 使用getFloatOffset()方法实现浮动框在页面上的定位
            left = $.getFloatOffset(me.formDiv2El, me.floatEl, true).left;
            top = $.getFloatOffset(me.formDiv2El, me.floatEl).top;
            me.floatEl.css("left", left).css("top", top - 1);
            if (!disabled) {
                me.floatEl.fadeIn(150);
            }
            me.openDropDownFlag = true;
        },


        /**
         * @private
         * @description 设置浮动窗口年月日的显示
         */
        _setFloatPanelDateVal: function(me) {
            // 设置月
            me.northMonthSpinnerEl.find("input").val($.string.lpad(me.month, 2, "0"));
            // 设置年
            me.northYearSpinnerEl.find("input").val($.string.lpad(me.year, 4, "0"));
            // 设置日
            me._setDayEl(null, me, me.day);
        },
        /**
         * @private
         * @description 点击日期图片时触发，修改时间输入框的样式
         * @param me {Object} 时间组件对象, tempFormat:组件的格式
         */
        _setTimeElStyle: function(me, tempFormat) {
            var timeEl, ZERO = "00";
            // 设置时间,根据不同format条件限制时间输入域
            if (tempFormat === "yyyy-MM-dd") {
                timeEl = me.southSpinnerEl.find("input");
                $(timeEl[0]).val($.string.lpad(ZERO, 2, "0"));
                $(timeEl[1]).val($.string.lpad(ZERO, 2, "0"));
                $(timeEl[2]).val($.string.lpad(ZERO, 2, "0"));
                me.inputHourEl.attr("disabled", true);
                me.inputMinuteEl.attr("disabled", true);
                me.inputSecondEl.attr("disabled", true);
                me.timeUpEl.removeClass(spinnerUpClass);
                me.timeDownEl.removeClass(spinnerDownClass);
                me.timeUpEl.addClass(spinnerUpGrayClass);
                me.timeDownEl.addClass(spinnerDownGrayClass);
            } else {
                // 设置上下翻按钮的样式
                me.timeUpEl.removeClass(spinnerUpGrayClass);
                me.timeDownEl.removeClass(spinnerDownGrayClass);
                me.timeUpEl.addClass(spinnerUpClass);
                me.timeDownEl.addClass(spinnerDownClass);
            }
            if (tempFormat === "yyyy-MM-dd hh") {
                timeEl = me.southSpinnerEl.find("input");
                $(timeEl[0]).val($.string.lpad(me.hour, 2, "0"));
                $(timeEl[1]).val($.string.lpad(ZERO, 2, "0"));
                $(timeEl[2]).val($.string.lpad(ZERO, 2, "0"));
                me.inputHourEl.attr("disabled", false);
                me.inputMinuteEl.attr("disabled", true);
                me.inputSecondEl.attr("disabled", true);
            }
            if (tempFormat === "yyyy-MM-dd hh:mm") {
                timeEl = me.southSpinnerEl.find("input");
                $(timeEl[0]).val($.string.lpad(me.hour, 2, "0"));
                $(timeEl[1]).val($.string.lpad(me.minute, 2, "0"));
                $(timeEl[2]).val($.string.lpad(ZERO, 2, "0"));
                me.inputHourEl.attr("disabled", false);
                me.inputMinuteEl.attr("disabled", false);
                me.inputSecondEl.attr("disabled", true);
            }
            if (tempFormat === "yyyy-MM-dd hh:mm:ss") {
                timeEl = me.southSpinnerEl.find("input");
                $(timeEl[0]).val($.string.lpad(me.hour, 2, "0"));
                $(timeEl[1]).val($.string.lpad(me.minute, 2, "0"));
                $(timeEl[2]).val($.string.lpad(me.second, 2, "0"));
                me.inputHourEl.attr("disabled", false);
                me.inputMinuteEl.attr("disabled", false);
                me.inputSecondEl.attr("disabled", false);
            }
        },
        /**
         * @private
         * @description 获取当前日期值
         * @param {Object} me 当前日期对象
         */
        _getCurrentDate: function(me) {
            var opt = me.options,
                newVal, valueFormat, valueUtc,
                value = me.formElement.val(),
                reg = (me.options.format === "yyyy-MM-dd hh") ? me.regMap["yyyy-MM-dd hh:mm"] : me.regMap[me.options.format],
                regObj = new RegExp(reg),
                _timeZone = opt.timeZone;
            if ($.isNull(value.match(regObj))) {
                value = new Date();
            } else {
                value = $.isNull(value) ? new Date() : new Date(value.replace(/-/g, "/"));
            }
            valueFormat = $.date.format(new Date(value), me.options.format);
            if (me._isTimeZoneNull) {
                _timeZone = me._getTempZone(String(valueFormat.replace(/-/g, "/")));
            }
            valueUtc = $.date.dateToUTC(String(valueFormat).replace(/-/g, "/"), _timeZone);
            valueUtc = me._checkMaxMin(valueUtc);
            newVal = me._getTimeStrByUtc(valueUtc);

            value = new Date(newVal.replace(/-/g, "/"));
            me.year = value.getFullYear();
            me.month = value.getMonth() + 1;
            me.day = value.getDate();
            me.hour = value.getHours();
            me.minute = value.getMinutes();
            me.second = value.getSeconds();
            return value;
        },
        /**
         * @private
         * @description 创建日期浮动面板
         */
        _createDateFloatPanel: function() {
            var me = this,
                floatClass = "sweet-form-date-float-panel",
                floatEl = me.floatEl = $("<div>").addClass(floatClass + " " + me.floatBgClass).hide();
            me._createDateNorthItem();
            me._createDateMiddlleItem();
            me._createDateSouthItem();
            floatEl.bind("click", function(event) {
                // 关闭日期面板上的浮动面板
                me._closeDateFloatPanel();
                // 阻止事件冒泡，防止点击日期面板时日期面板关闭
                event.stopImmediatePropagation();
            }).appendTo("body");
        },
        /**
         * @private
         * @description 创建日期浮动窗口顶部，包括上下年、月选择
         */
        _createDateNorthItem: function() {
            var me = this,
                northItemClass = "sweet-form-date-float-panel-north",
                northPreYearClass = "sweet-form-date-float-panel-preyear",
                northNextYearClass = "sweet-form-date-float-panel-nextyear",
                northPreMonthClass = "sweet-form-date-float-panel-premonth",
                northNextMonthClass = "sweet-form-date-float-panel-nextmonth",
                northItemEl = me.northItemEl = $("<div>").addClass(northItemClass),
                northPreYearEl = me.northPreYearEl = $("<span>").addClass(northPreYearClass),
                northNextYearEl = me.northNextYearEl = $("<span>").addClass(northNextYearClass),
                northPreMonthEl = me.northPreMonthEl = $("<span>").addClass(northPreMonthClass),
                northNextMonthEl = me.northNextMonthEl = $("<span>").addClass(northNextMonthClass),
                northMonthSpinnerEl = me.northMonthSpinnerEl = me._createDateSpinner(spinnerType[0]),
                northYearSpinnerEl = me.northYearSpinnerEl = me._createDateSpinner(spinnerType[1]);
            // 上一年
            northPreYearEl.bind("click", {
                "me": me
            }, me._onPreYearClick).appendTo(northItemEl);
            // 上一月
            northPreMonthEl.bind("click", {
                "me": me
            },

            function(event) {
                var monthJq = me.northMonthSpinnerEl.find("input"),
                    month = monthJq[0].value;
                if (parseInt(month, 10) === 1) {
                    me.month = 12;
                }
                me._onPreMonthClick(event);
            }).appendTo(northItemEl);
            // 月选择微调器
            northMonthSpinnerEl.appendTo(northItemEl);
            // 年选择显示框
            northYearSpinnerEl.appendTo(northItemEl);
            // 下一月
            northNextMonthEl.bind("click", {
                "me": me
            },

            function(event) {
                var monthJq = me.northMonthSpinnerEl.find("input"),
                    month = monthJq[0].value;
                if (parseInt(month, 10) === 12) {
                    me.month = "01";
                }
                me._onNextMonthClick(event);
            }).appendTo(northItemEl);
            // 下一年
            northNextYearEl.bind("click", {
                "me": me
            }, me._onNextYearClick).appendTo(northItemEl);
            northItemEl.appendTo(me.floatEl);
        },
        /**
         * @private
         * @description 前一年
         * @param {Object} event 前一年按钮事件对象
         */
        _onPreYearClick: function(event) {
            var me = event.data.me;
            // 触发年微调器的下翻事件
            me.northYearSpinnerEl.find("." + spinnerDownClass).click();

        },
        /**
         * @private
         * @description 下一年
         * @param {Object} event 下一年按钮事件对象
         */
        _onNextYearClick: function(event) {
            var me = event.data.me;
            // 触发年微调器的上翻事件
            me.northYearSpinnerEl.find("." + spinnerUpClass).click();
        },
        /**
         * @private
         * @description 上一月
         * @param {Object} event 前一月按钮事件对象
         */
        _onPreMonthClick: function(event) {
            var me = event.data.me,
                monthJq = me.northMonthSpinnerEl.find("input"),
                month = monthJq[0].value;
            if (parseInt(month, 10) === 1) {
                var tempShowVal = 13;
                monthJq.val(tempShowVal);
                me._onPreYearClick(event);
            }

            // 触发月微调器的下翻事件
            me.northMonthSpinnerEl.find("." + spinnerDownClass).click();
        },
        /**
         * @private
         * @description 下一月
         * @param {Object} event 下一月按钮事件对象
         */
        _onNextMonthClick: function(event) {
            var me = event.data.me,
                monthJq = me.northMonthSpinnerEl.find("input"),
                month = monthJq[0].value;
            if (parseInt(month, 10) === 12) {
                var tempShowVal = 0;
                monthJq.val(tempShowVal);
                me._onNextYearClick(event);
            }
            // 触发月微调器的上翻事件
            me.northMonthSpinnerEl.find("." + spinnerUpClass).click();
        },
        /**
         * @private
         * @description 创建日期浮动窗口输入文本框
         * @param {String} type 类型  1：月  2：年 3：时间
         * @return {Object} 返回微调器对象
         */
        _createDateSpinner: function(type) {
            var me = this,
                spanClass = "sweet-form-date-float-panel-span",
                inputClass = "sweet-form-date-float-panel-input",
                inputNorthClass = "sweet-form-date-float-panel-input-north",
                inputSouthClass = "sweet-form-date-float-panel-input-south",
                spinnerClass = "sweet-form-date-float-panel-spinner",
                spinnerNorthClass = "sweet-form-date-float-panel-spinner-north",
                spinnerSouthClass = "sweet-form-date-float-panel-spinner-south",
                spanEl = $("<span>").addClass(spanClass),
                upEl = $("<a>").addClass(spinnerUpClass),
                downEl = $("<a>").addClass(spinnerDownClass),
                spinnerEl = $("<div>").addClass(spinnerClass);
            upEl.appendTo(spanEl);
            downEl.appendTo(spanEl);
            spanEl.appendTo(spinnerEl);
            // 月/年
            if (spinnerType[0] === type || spinnerType[1] === type) {
                var inputEl = me.inputEl = $("<input>").attr("type", "text").keydown(function() {
                    return false;
                })
                    .addClass(inputClass)
                    .addClass(inputNorthClass)
                    .appendTo(spinnerEl),
                    floatPanelEl,
                    panelType;
                if (spinnerType[0] === type) {
                    inputEl.attr({
                        "maxlength": 2,
                        "max": 12,
                        "min": 1
                    });
                    panelType = floatPanelType[1];
                    floatPanelEl = me._createMonthPanel(me);
                    me.floatMonthPanelEl = floatPanelEl;
                } else {
                    // 微调器最大最小值
                    inputEl.attr({
                        "maxlength": 4,
                        "max": 9999,
                        "min": 1900
                    });
                    panelType = floatPanelType[0];
                    floatPanelEl = me._createYearPanel(inputEl);
                    me.floatYearPanelEl = floatPanelEl;
                }
                floatPanelEl.appendTo(spinnerEl);
                spinnerEl.addClass(spinnerNorthClass);

                // 点击文本框，弹出年/月选择窗口
                inputEl.bind("click", {
                    "me": me,
                    "inputObj": inputEl,
                    "panelObjs": [floatPanelEl],
                    "type": panelType
                },
                me._onInputClick);
                // 文本框失去焦点时的事件
                inputEl.blur(function() {
                    me.year = $.string.toNumber(me.northYearSpinnerEl.find("input").val());
                    me.month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val());
                    me._changeDateMidContent(me);
                });
                // 上翻
                upEl.bind("click", {
                    "me": me,
                    "type": spinnerFlipType[0],
                    "objs": inputEl,
                    "spinnerType": type
                },
                me._onSpinnerFlipClick);

                // 下翻
                downEl.bind("click", {
                    "me": me,
                    "type": spinnerFlipType[1],
                    "objs": inputEl,
                    "spinnerType": type
                },
                me._onSpinnerFlipClick);
            }

            // 时间
            else if (spinnerType[2] === type) {
                var emElClass = "sweet-form-date-float-south-time-em",
                    inputAttrs = {
                        "type": "text",
                        "maxlength": 2
                    },
                    inputHourEl = me.inputHourEl = $("<input>").attr(inputAttrs).keydown(function() {
                        return false;
                    })
                        .addClass(inputClass)
                        .addClass(inputSouthClass),
                    inputMinuteEl = me.inputMinuteEl = $("<input>").attr(inputAttrs).keydown(function() {
                        return false;
                    })
                        .addClass(inputClass)
                        .addClass(inputSouthClass),
                    inputSecondEl = me.inputSecondEl = $("<input>").attr(inputAttrs).keydown(function() {
                        return false;
                    })
                        .addClass(inputClass)
                        .addClass(inputSouthClass),
                    emEl1 = $("<em>").addClass(emElClass).text(Sweet.constants.symbol.COLON),
                    emEl2 = $("<em>").addClass(emElClass).text(Sweet.constants.symbol.COLON),
                    floatHourPanelEl,
                    floatMinutePanelEl,
                    floatSecondEl,
                    panelObjs = [];

                // 小时
                floatHourPanelEl = me._createTimePanel(me, spinnerHourArr, inputHourEl);
                me.floatHourPanelEl = floatHourPanelEl;
                floatHourPanelEl.appendTo(spinnerEl);

                // 分钟
                floatMinutePanelEl = me._createTimePanel(me, spinnerMinuteArr, inputMinuteEl);
                me.floatMinutePanelEl = floatMinutePanelEl;
                floatMinutePanelEl.appendTo(spinnerEl);

                // 秒
                floatSecondEl = me._createTimePanel(me, spinnerSecondArr, inputSecondEl);
                me.floatSecondEl = floatSecondEl;
                floatSecondEl.appendTo(spinnerEl);
                panelObjs = [floatHourPanelEl, floatMinutePanelEl, floatSecondEl];
                spinnerEl.addClass(spinnerSouthClass);
                inputHourEl.attr({
                    "max": 23,
                    "min": 0,
                    "timeType": spinnerTimeType[0]
                })
                    .bind("click", {
                    "me": me,
                    "inputObj": inputHourEl,
                    "hourObj": inputHourEl,
                    "panelObjs": panelObjs
                },
                me._onInputClick)
                    .appendTo(spinnerEl);
                me.inputHourEl = inputHourEl;
                emEl1.appendTo(spinnerEl);
                inputMinuteEl.attr({
                    "max": 59,
                    "min": 0,
                    "timeType": spinnerTimeType[1]
                })
                    .bind("click", {
                    "me": me,
                    "inputObj": inputMinuteEl,
                    "hourObj": inputHourEl,
                    "panelObjs": panelObjs
                },
                me._onInputClick)
                    .appendTo(spinnerEl);
                me.inputMinuteEl = inputMinuteEl;
                emEl2.appendTo(spinnerEl);
                inputSecondEl.attr({
                    "max": 59,
                    "min": 0,
                    "timeType": spinnerTimeType[2]
                })
                    .bind("click", {
                    "me": me,
                    "inputObj": inputSecondEl,
                    "hourObj": inputHourEl,
                    "panelObjs": panelObjs
                },
                me._onInputClick)
                    .appendTo(spinnerEl);
                me.inputSecondEl = inputSecondEl;
                // 上翻
                upEl.bind("click", {
                    "me": me,
                    "type": spinnerFlipType[0],
                    "objs": [inputHourEl, inputMinuteEl, inputSecondEl],
                    "spinnerType": type
                }, me._onSpinnerFlipClick);
                me.timeUpEl = upEl;
                // 下翻
                downEl.bind("click", {
                    "me": me,
                    "type": spinnerFlipType[1],
                    "objs": [inputHourEl, inputMinuteEl, inputSecondEl],
                    "spinnerType": type
                }, me._onSpinnerFlipClick);
                me.timeDownEl = downEl;
            } else {
                me._error("Unsupported type. type=" + type);
                return;
            }
            return spinnerEl;
        },
        /**
         * @private
         * @description 日期面板输入文本框单击事件
         * @param {type} event 文本框对象
         */
        _onInputClick: function(event) {
            var data = event.data,
                me = data.me,
                panelObjs = data.panelObjs,
                inputEl = data.inputObj,
                panelType = data.type,
                floatPanelEl, position, top = 0,
                left = 0,
                weight = 0,
                height = 0,
                inputElVal = inputEl.val();

            if (1 === panelObjs.length) {
                me.floatHourPanelEl.hide();
                me.floatMinutePanelEl.hide();
                me.floatSecondEl.hide();
                // 当点击年输入框时,重新计算年面板的年份并绘制年面板
                if (floatPanelType[0] === panelType) {
                    me.floatMonthPanelEl.hide();
                    inputEl.select();
                    me._changeYearPanel(me, inputElVal, inputEl);
                }
                // 当点击月输入框时,重新计算月面板的月份并绘制月面板
                if (floatPanelType[1] === panelType) {
                    me.floatYearPanelEl.hide();
                    inputEl.select();
                    me._changeMonthPanel(me, inputElVal, inputEl);
                }
                floatPanelEl = panelObjs[0];
                // 计算组件相对位置
                position = inputEl.position();
                height = inputEl.height() - 1;
            } else {
                var objResult = me._onInputTimeElClick(event);
                floatPanelEl = objResult.floatPanelEl;
                height = objResult.height;
                weight = objResult.weight;
                position = objResult.position;
            }

            // 实现浮动框在页面上的定位
            top = position.top + height + 3;
            left = position.left + weight;
            floatPanelEl.css({
                "top": top,
                "left": left
            }).show();
            event.stopImmediatePropagation();
        },
        /**
         * @private
         * @description 日期面板的时分秒输入文本框单击事件
         * @param {Object} event 事件对象
         */
        _onInputTimeElClick: function(event) {
            var data = event.data,
                me = data.me,
                panelObjs = data.panelObjs,
                inputEl = data.inputObj,
                floatPanelEl, position, weight = -3,
                height = 0,
                hourObj = data.hourObj,
                innerHeight;

            me.floatYearPanelEl.hide();
            me.floatMonthPanelEl.hide();
            me.spinnerTimeType = inputEl.attr("timeType") ? parseInt(inputEl.attr("timeType"), 10) : null;
            inputEl.select();
            me._changeTimePanel(me, inputEl.val(), inputEl, me.spinnerTimeType);
            if (spinnerTimeType[0] === me.spinnerTimeType) { // 小时
                innerHeight = 84;
                floatPanelEl = panelObjs[0].height(innerHeight);
                panelObjs[1].hide();
                panelObjs[2].hide();
            } else if (spinnerTimeType[1] === me.spinnerTimeType) { // 分钟
                innerHeight = 42;
                floatPanelEl = panelObjs[1].height(innerHeight);
                panelObjs[0].hide();
                panelObjs[2].hide();
            } else if (spinnerTimeType[2] === me.spinnerTimeType) { // 秒
                innerHeight = 20;
                floatPanelEl = panelObjs[2].height(innerHeight);
                panelObjs[0].hide();
                panelObjs[1].hide();
            } else {
                me._error("_onInputClick() Unsupport time type. not 1/2/3. type=" + me.spinnerTimeType);
                return;
            }

            // 根据所点击的输入框的状态该变上下翻按钮的样式
            if (floatPanelEl[0].disabled) {
                me.timeUpEl.removeClass(spinnerUpClass).addClass(spinnerUpGrayClass);
                me.timeDownEl.removeClass(spinnerDownClass).addClass(spinnerDownGrayClass);
            }
            height = -innerHeight - 11;
            position = hourObj.position();
            return {
                "floatPanelEl": floatPanelEl,
                "height": height,
                "weight": weight,
                "position": position
            };
        },
        /**
         * @private
         * @description 当点击月/年输入框微调器时，根据时间范围重新设定微调器的值范围
         * @param {Object} me 时间组件对象
         * @param {Number} spinnerTypes 输入框类型
         * @param {Object} objs 输入框对象
         */
        _clickMYInputSpinner: function(me, spinnerTypes, objs) {
            var opt = me.options,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                currentYear = $.string.toNumber(me.northYearSpinnerEl.find("input").val()),
                currentMonth = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()),
                maxDateMonth = new Date(maxDate.replace(/-/g, "/")).getMonth() + 1,
                minDateMonth = new Date(minDate.replace(/-/g, "/")).getMonth() + 1,
                maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear();

            // 当点击月输入框微调器时，根据时间范围重新设定微调器的值范围
            if (spinnerType[0] === spinnerTypes) {
                // 同时设置最大时间和最小时间
                if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (maxDateYear === minDateYear) {
                        objs.attr({
                            "maxlength": 2,
                            "max": maxDateMonth,
                            "min": minDateMonth
                        });
                    } else {
                        if (maxDateYear === currentYear) {
                            objs.attr({
                                "maxlength": 2,
                                "max": maxDateMonth,
                                "min": 1
                            });
                        } else if (minDateYear === currentYear) {
                            objs.attr({
                                "maxlength": 2,
                                "max": 12,
                                "min": minDateMonth
                            });
                        } else {
                            objs.attr({
                                "maxlength": 2,
                                "max": 12,
                                "min": 1
                            });
                        }
                    }
                }
                // 只设置时间最大值
                else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                    if (currentYear === maxDateYear) {
                        objs.attr({
                            "maxlength": 2,
                            "max": maxDateMonth,
                            "min": 1
                        });
                    } else {
                        objs.attr({
                            "maxlength": 2,
                            "max": 12,
                            "min": 1
                        });
                    }
                }
                // 只设置时间最小值
                else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (currentYear === minDateYear) {
                        objs.attr({
                            "maxlength": 2,
                            "max": 12,
                            "min": minDateMonth
                        });
                    } else {
                        objs.attr({
                            "maxlength": 2,
                            "max": 12,
                            "min": 1
                        });
                    }
                }
                // 时间最大值和最小值都没有设置
                else {
                    objs.attr({
                        "maxlength": 2,
                        "max": 12,
                        "min": 1
                    });
                }
            }

            //当点击年输入框微调器时，根据时间范围重新设定微调器的值范围
            if (spinnerType[1] === spinnerTypes) {
                objs.attr({
                    "maxlength": 4,
                    "max": ($.isNotNull(maxDate)) ? new Date(maxDate.replace(/-/g, "/")).getFullYear() : 9999,
                    "min": ($.isNotNull(minDate)) ? new Date(minDate.replace(/-/g, "/")).getFullYear() : 1900
                });
            }
        },
        /**
         * @private
         * @description 当点击时间输入框微调器时，根据时间范围重新设定微调器的值范围
         * @param {Object} me 时间组件对象
         * @param {Number} spinnerTypes 输入框类型
         * @param {String} type 类型  1：月  2：年 3：时间
         * @return {Boolean} true/false 在时间范围内返回true，否则返回false
         */
        _clickTimeInputSpinner: function(me, spinnerTypes, type) {
            if (spinnerType[2] === spinnerTypes) {
                var stepNumber = 1,
                    selectFormat, selectUtc,
                    opt = me.options,
                    tzone = opt.timeZone,
                    maxDate = opt.maxDate,
                    minDate = opt.minDate,
                    maxDateUtc = me._getMaxUtc(),
                    minDateUtc = me._getMinUtc(),
                    year = me.northYearSpinnerEl.find("input").val(), // 年
                    month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()) - stepNumber, // 月
                    day = me.dayEl.val(), // 日
                    timeEl = me.southSpinnerEl.find("input"),
                    hour, // 时
                    minute, // 分
                    second; // 秒
                // 点击时微调器
                if (spinnerTimeType[0] === me.spinnerTimeType) {
                    if (spinnerFlipType[0] === type) {
                        hour = $.string.toNumber($(timeEl[0]).val()) + stepNumber; // 时
                    }
                    if (spinnerFlipType[1] === type) {
                        hour = $.string.toNumber($(timeEl[0]).val()) - stepNumber; // 时
                    }
                    minute = "00"; // 分
                    second = "00"; // 秒 
                    // 点击分微调器
                } else if (spinnerTimeType[1] === me.spinnerTimeType) {
                    if (spinnerFlipType[0] === type) {
                        minute = $.string.toNumber($(timeEl[1]).val()) + stepNumber; // 分
                    }
                    if (spinnerFlipType[1] === type) {
                        minute = $.string.toNumber($(timeEl[1]).val()) - stepNumber; // 分
                    }
                    hour = $(timeEl[0]).val(); // 时
                    second = "00"; // 秒 
                    // 点击秒微调器
                } else if (spinnerTimeType[2] === me.spinnerTimeType) {
                    if (spinnerFlipType[0] === type) {
                        second = $.string.toNumber($(timeEl[2]).val()) + stepNumber; // 秒
                    }
                    if (spinnerFlipType[1] === type) {
                        second = $.string.toNumber($(timeEl[2]).val()) - stepNumber; // 秒
                    }
                    hour = $(timeEl[0]).val(); // 时
                    minute = $(timeEl[1]).val(); // 分
                }
                selectFormat = me._initFormElVal(year, month, day, hour, minute, second);
                if (me._isTimeZoneNull) {
                    tzone = me._getTempZone(String(selectFormat.replace(/-/g, "/")));
                }
                selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
                // 同时设置最大时间和最小时间
                if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    // 点击微调器后的时间浮动面板的值若不在设定的值范围，则return；否则继续
                    if (maxDateUtc < selectUtc || minDateUtc > selectUtc) {
                        return false;
                    } else {
                        return true;
                    }
                }
                // 只设置时间最大值
                else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                    // 点击微调器后的时间浮动面板的值若不在设定的值范围，则return；否则继续
                    if (maxDateUtc < selectUtc) {
                        return false;
                    } else {
                        return true;
                    }
                }
                // 只设置时间最小值
                else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    // 点击微调器后的时间浮动面板的值若不在设定的值范围，则return；否则继续
                    if (minDateUtc > selectUtc) {
                        return false;
                    } else {
                        return true;
                    }
                }
                // 时间最大值和最小值都没有设置
                else {
                    me.inputSecondEl.attr({
                        "max": 59,
                        "min": 0,
                        "timeType": spinnerTimeType[2]
                    });
                    me.inputHourEl.attr({
                        "max": 23,
                        "min": 0,
                        "timeType": spinnerTimeType[0]
                    });
                    me.inputMinuteEl.attr({
                        "max": 59,
                        "min": 0,
                        "timeType": spinnerTimeType[1]
                    });
                    return true;
                }
            } else {
                return true;
            }
        },
        /**
         * @private
         * @description 微调器上下翻事件
         * @param {Object} event 微调器对象
         */
        _onSpinnerFlipClick: function(event) {
            var data = event.data,
                me = event.data.me,
                type = data.type,
                timeType = me.spinnerTimeType,
                objs = data.objs,
                obj1 = objs.length > 1 ? (spinnerTimeType[0] === timeType ? objs[0] : (spinnerTimeType[1] === timeType ? objs[1] : (spinnerTimeType[2] === timeType ? objs[2] : null))) : objs,
                obj = (obj1 === null) ? objs[2] : obj1,
                spinnerTypes = data.spinnerType,
                max,
                min,
                value,
                preValue,
                nextValue;

            // 初始化时间输入框，默认选择小时输入框
            obj = (obj1 === null) ? objs[0] : obj1;
            me.spinnerTimeType = (obj1 === null) ? spinnerTimeType[0] : timeType;

            value = obj.val();

            // 当点击月/年输入框微调器时，根据时间范围重新设定微调器的值范围
            me._clickMYInputSpinner(me, spinnerTypes, objs);

            // 当点击时间输入框微调器时，根据时间范围重新设定微调器的值范围
            if (!me._clickTimeInputSpinner(me, spinnerTypes, type)) {
                return;
            }
            if ($.isNull(value)) {
                me._error("_onSpinnerFlipClick(): Can't get value.");
                return;
            }

            max = parseInt(obj.attr("max"), 10);
            min = parseInt(obj.attr("min"), 10);
            value = $.string.toNumber(value);
            preValue = value - 1;
            nextValue = value + 1;

            // 增加
            if (spinnerFlipType[0] === type) {
                if (nextValue > max) {
                    return;
                }
                if (obj[0].disabled) {
                    return;
                }
                var opt = me.options,
                    tzone = opt.timeZone,
                    maxDate = me._getMaxUtc(true),
                    maxDateUtc = me._getMaxUtc(),
                    year = me.northYearSpinnerEl.find("input").val(), // 年
                    month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()) - 1, // 月
                    day = me.dayEl.val(), // 日
                    timeEl = me.southSpinnerEl.find("input");
                var v = $.string.lpad(nextValue, 2, "0");
                // 小时
                if ($.isNotNull(maxDate) && spinnerTimeType[0] === me.spinnerTimeType) {
                    var sFormat = me._initFormElVal(year, month, day, v, $(timeEl[1]).val(), $(timeEl[2]).val());
                    if (me._isTimeZoneNull) {
                        tzone = me._getTempZone(String(sFormat.replace(/-/g, "/")));
                    }
                    var sUtc = $.date.dateToUTC(String(sFormat).replace(/-/g, "/"), tzone);
                    if (sUtc > maxDateUtc) {
                        $(timeEl[1]).val("00");
                        $(timeEl[2]).val("00");
                    }
                    // 分钟
                } else if ($.isNotNull(maxDate) && spinnerTimeType[1] === me.spinnerTimeType) {
                    var sFormat = me._initFormElVal(year, month, day, $(timeEl[0]).val(), v, $(timeEl[2]).val());
                    if (me._isTimeZoneNull) {
                        tzone = me._getTempZone(String(sFormat.replace(/-/g, "/")));
                    }
                    var sUtc = $.date.dateToUTC(String(sFormat).replace(/-/g, "/"), tzone);
                    if (sUtc > maxDateUtc) {
                        $(timeEl[2]).val("00");
                    }
                }
                obj.val(v);
                // 减少
            } else if (spinnerFlipType[1] === type) {
                if (preValue < min) {
                    return;
                }
                if (obj[0].disabled) {
                    return;
                }
                obj.val($.string.lpad(preValue, 2, "0"));
            } else {
                me._error("_onSpinnerFlipClick(): Unsupported type. Type equals 1 or 2. type=" + type);
                return;
            }

            // 说明是月或年微调器变化
            if (1 === objs.length) {
                // 点击月面板微调器
                if (spinnerType[0] === spinnerTypes) {
                    me.year = $.string.toNumber(me.northYearSpinnerEl.find("input").val());
                    me.month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val());
                    me._changeDateMidContent(me);
                    me._setDayEl(null, me, me.day);
                }
                //点击年面板微调器，判断当前所选的月份是否在时间范围
                else {
                    me._changeMonthInput();
                    me._setDayEl(null, me, me.day);
                }
            }
        },
        /**
         * @private
         * @description 创建月面板
         * @param {Object} me 日期组件对象
         * @return {Object} 返回面板对象
         */
        _createMonthPanel: function(me) {
            var monthAEl = [],
                monthLiEl,
                monthUlEl,
                monthDivEl = me.monthDivEl = $("<div>").addClass(monthDivClass + " " + me.floatBgClass).hide();
            for (var i = 0, j = 0; i < 12; i++, j++) {
                if (0 === i || 6 === i) {
                    monthLiEl = $("<li>");
                    monthUlEl = $("<ul>");
                    monthLiEl.appendTo(monthUlEl);
                    monthUlEl.appendTo(monthDivEl);
                }
                monthAEl[j] = $("<a>").val(i + 1).text(Sweet.core.i18n.month[i]);
                monthAEl[j].appendTo(monthLiEl);
            }
            monthUlEl.appendTo(monthDivEl);
            me.monthAEl = monthAEl;
            monthDivEl.bind("click", function(event) {
                event.stopImmediatePropagation();
            });
            return monthDivEl;
        },
        /**
         * @private 
         * @description 修改月面板
         * @param {Object} me 日期组建对象
         * @param {Number/String} month 月
         * @param {Object} inputEl 输入框对象
         */
        _changeMonthPanel: function(me, month, inputEl) {
            if ($.isNull(month)) {
                me._error("_changeYearPanel() The input parameter 'month' is null.");
                return;
            }
            var opt = me.options,
                tzone = opt.timeZone,
                fmt = me.options.format,
                selectFormat, selectUtc,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                currentYear = parseInt(me.northYearSpinnerEl.find("input").val(), 10),
                maxDateMonth = new Date(maxDate.replace(/-/g, "/")).getMonth() + 1,
                minDateMonth = new Date(minDate.replace(/-/g, "/")).getMonth() + 1,
                maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear(),
                maxDateFormat = $.date.format(new Date(maxDateYear, maxDateMonth - 1, "01", "00", "00", "00"), me.options.format),
                maxDateUtc = $.date.dateToUTC(String(maxDateFormat).replace(/-/g, "/"), tzone),
                minDateFormat = $.date.format(new Date(minDateYear, minDateMonth - 1, "01", "00", "00", "00"), me.options.format),
                minDateUtc = $.date.dateToUTC(String(minDateFormat).replace(/-/g, "/"), tzone);

            function addMonthBind(j) {
                me.monthAEl[j].bind("click", function() {
                    var aEl = $(this);
                    inputEl.val($.string.lpad(aEl.val(), 2, "0"));
                    me.monthDivEl.hide();
                    // 点击选中月份，重新绘制天数面板
                    me.year = $.string.toNumber(me.northYearSpinnerEl.find("input").val());
                    me.month = $.string.toNumber(inputEl.val());
                    me._changeDateMidContent(me);
                    me._setDayEl(null, me, me.day);
                });
            }

            function addMonthUnbind(j) {
                me.monthAEl[j].removeClass().unbind("click").select(function() {
                    return false;
                });
            }
            for (var i = 0, j = 0; i < 12; i++, j++) {
                addMonthUnbind(j);
                selectFormat = $.date.format(new Date(currentYear, i, "01", "00", "00", "00"), me.options.format);
                selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
                // 同时设置最大和最小时间
                if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (selectUtc <= maxDateUtc && selectUtc >= minDateUtc) {
                        addMonthBind(j);
                    } else {
                        me.monthAEl[j].addClass(dataTextCls);
                    }
                }
                // 只设置最大时间
                else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                    if (selectUtc <= maxDateUtc) {
                        addMonthBind(j);
                    } else {
                        me.monthAEl[j].addClass(dataTextCls);
                    }
                }
                // 只设置最小时间
                else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (selectUtc >= minDateUtc) {
                        addMonthBind(j);
                    } else {
                        me.monthAEl[j].addClass(dataTextCls);
                    }
                }
                // 最大时间和最小时间都不设置
                else {
                    addMonthBind(j);
                }
                me.monthAEl[j].val(i + 1).text(Sweet.core.i18n.month[i]);
            }
        },
        /**
         * @private 
         * @description 点击年微调器或年面板时根据时间范围动态修改月份输入框的值
         */
        _changeMonthInput: function() {
            var me = this,
                opt = me.options,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                northYearSpinnerEl = me.northYearSpinnerEl.find("input"),
                northMonthSpinnerEl = me.northMonthSpinnerEl.find("input"),
                currentYear = $.string.toNumber(northYearSpinnerEl.val()),
                currentMonth = $.string.toNumber(northMonthSpinnerEl.val()),
                maxDateMonth = new Date(maxDate.replace(/-/g, "/")).getMonth() + 1,
                minDateMonth = new Date(minDate.replace(/-/g, "/")).getMonth() + 1,
                maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear();
            // 同时设置最大时间和最小时间
            if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                if (maxDateYear > minDateYear) {
                    if (maxDateYear === currentYear) {
                        if (currentMonth > maxDateMonth) {
                            northMonthSpinnerEl.val($.string.lpad(maxDateMonth, 2, "0"));
                        }
                    } else if (minDateYear === currentYear) {
                        if (currentMonth < minDateMonth) {
                            northMonthSpinnerEl.val($.string.lpad(minDateMonth, 2, "0"));
                        }
                    }
                }
            }
            // 只设置时间最大值
            if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                if (maxDateYear === currentYear) {
                    if (currentMonth > maxDateMonth) {
                        northMonthSpinnerEl.val($.string.lpad(maxDateMonth, 2, "0"));
                    }
                }
            }
            // 只设置时间最小值
            if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                if (minDateYear === currentYear) {
                    if (currentMonth < minDateMonth) {
                        northMonthSpinnerEl.val($.string.lpad(minDateMonth, 2, "0"));
                    }
                }
            }
            me.year = $.string.toNumber(northYearSpinnerEl.val());
            me.month = $.string.toNumber(northMonthSpinnerEl.val());
            me._changeDateMidContent(me);
            me._changeTimeInput(me);
        },
        /**
         * @private
         * @description 创建年面板
         * @param {Object} inputObj 输入对象
         * @return {Object} 返回面板对象
         */
        _createYearPanel: function(inputObj) {
            var me = this,
                value = inputObj.val() || 2013,
                yearPicPreClass = "sweet-form-date-float-panel-spinner-year-pre",
                yearPicCenterClass = "sweet-form-date-float-panel-spinner-year-center",
                yearPicNxtClass = "sweet-form-date-float-panel-spinner-year-nxt",
                yearPicItemClass = "sweet-form-date-float-panel-spinner-year-item",
                yearUlEl = $("<ul>"),
                yearLiEl,
                yearPicDivEl,
                yearPicPreEl,
                yearPicCenterEl,
                yearPicNxtEl,
                beginYear,
                endYear,
                yearDivEl = me.yearDivEl = $("<div>").addClass(yearDivClass + " " + me.floatBgClass).hide(),
                yearAEl = [];
            if ($.isNull(value) || !$.isNumeric(value)) {
                me._error("_createYearPanel(): The value is null or not a number! value=" + value);
                return;
            }
            if ("number" !== typeof value) {
                value = parseInt(value, 10);
            }

            // 创建年面板
            beginYear = value - 5;
            endYear = value + 5;
            for (var i = beginYear, j = 0; i < endYear; i++, j++) {
                if (beginYear === i || value === i) {
                    yearLiEl = $("<li>").appendTo(yearUlEl);
                }
                yearAEl[j] = $("<a>").val(i).text(i);
                yearAEl[j].appendTo(yearLiEl);
            }
            yearUlEl.appendTo(yearDivEl);

            // 创建年面板上下翻图片
            yearPicDivEl = $("<div>").addClass(yearPicItemClass).appendTo(yearDivEl);
            yearPicPreEl = $("<a>").addClass(yearPicPreClass).appendTo(yearPicDivEl)
                .bind("click", {
                "me": me,
                "type": yearFilpType[0],
                "objs": yearAEl,
                "inputObj": inputObj
            },
            me._onNorthYearFilp);
            yearPicCenterEl = $("<a>").addClass(yearPicCenterClass).appendTo(yearPicDivEl).bind("click", function(event) {
                // 关闭浮动面板
                yearDivEl.hide();
            });
            yearPicNxtEl = $("<a>").addClass(yearPicNxtClass).appendTo(yearPicDivEl)
                .bind("click", {
                "me": me,
                "type": yearFilpType[1],
                "objs": yearAEl,
                "inputObj": inputObj
            },
            me._onNorthYearFilp);
            yearDivEl.bind("click", function(event) {
                event.stopImmediatePropagation();
            });
            me.yearAEl = yearAEl;
            me.yearUlEl = yearUlEl;
            return yearDivEl;
        },
        /**
         * @private
         * @description 年浮动面板上的年上下翻图片点击事件
         * @param {Object} event 上下翻图片对象
         */
        _onNorthYearFilp: function(event) {
            var data = event.data,
                me = data.me,
                type = data.type,
                objs = data.objs,
                inputObj = data.inputObj,
                beginYear, endYear,
                opt = me.options,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear();
            if (yearFilpType[0] === type) {
                beginYear = parseInt(objs[0].val(), 10) - 10;
            } else if (yearFilpType[1] === type) {
                beginYear = parseInt(objs[0].val(), 10) + 10;
            } else {
                me._error("_onNorthYearFilp(): Unsupported type. Type equals 1 or 2. type=" + type);
                return;
            }
            endYear = beginYear + 10;
            // 同时设置最大时间和最小时间
            if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                if (endYear < minDateYear || beginYear > maxDateYear) {
                    return;
                } else {
                    me._addYearRange(me, inputObj, beginYear, endYear);
                }
            }
            // 只设置最大时间
            else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                if (beginYear > maxDateYear) {
                    return;
                } else {
                    me._addYearRange(me, inputObj, beginYear, endYear);
                }
            }
            // 只设置最小时间
            else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                if (endYear < minDateYear) {
                    return;
                } else {
                    me._addYearRange(me, inputObj, beginYear, endYear);
                }
            }
            // 最大时间和最小时间都不设置
            else {
                me._addYearRange(me, inputObj, beginYear, endYear);
            }
        },
        /**
         * @private
         * @description 根据是否添加时间范围，重新绘制年浮动面板
         * @param {Object} me 日期组建对象
         * @param {Object} inputObj 输入对象
         * @param {String/Number} beginYear 年浮动面板的起始
         * @param {String/Number} endYear 结束年
         */
        _addYearRange: function(me, inputObj, beginYear, endYear) {
            var opt = me.options,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear();

            function addYearBind(j) {
                me.yearAEl[j].bind("click", function() {
                    var aEl = $(this);
                    inputObj.val(aEl.val());
                    me.yearDivEl.hide();
                    // 点击选中年份，重新设置月输入框的值
                    me._changeMonthInput();
                    // 点击选中年份，重新绘制天数面板
                    me.year = $.string.toNumber(inputObj.val());
                    me.month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val());
                    me._changeDateMidContent(me);
                    me._setDayEl(null, me, me.day);
                });
            }

            function addYearUnbind(j) {
                me.yearAEl[j].removeClass().unbind("click").select(function() {
                    return false;
                });
            }
            for (var i = beginYear, j = 0; i < endYear; i++, j++) {
                addYearUnbind(j);
                // 同时设置最大时间和最小时间
                if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (minDateYear > i || maxDateYear < i) {
                        me.yearAEl[j].addClass(dataTextCls);
                    } else {
                        addYearBind(j);
                    }
                }
                // 只设置最大时间
                else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                    if (maxDateYear < i) {
                        me.yearAEl[j].addClass(dataTextCls);
                    } else {
                        addYearBind(j);
                    }
                }
                // 只设置最小时间
                else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                    if (minDateYear > i) {
                        me.yearAEl[j].addClass(dataTextCls);
                    } else {
                        addYearBind(j);
                    }
                }
                // 最大时间和最小时间都不设置
                else {
                    addYearBind(j);
                }
                me.yearAEl[j].val(i).text(i);
            }
        },
        /**
         * @private
         * @description 修改年浮动面板
         * @param {Object} me 日期组建对象
         * @param {Number/String} year 年
         * @param {Object} inputEl 输入框对象
         */
        _changeYearPanel: function(me, year, inputEl) {
            if ($.isNull(year)) {
                me._error("_changeYearPanel() The input parameter 'year' is null.");
                return;
            }
            if ("string" === $.type(year)) {
                year = parseInt(year, 10);
            }
            var beginYear = year - 5,
                endYear = year + 5;
            me._addYearRange(me, inputEl, beginYear, endYear);
        },
        /**
         * @private
         * @description 创建日期浮动窗口中间部分，月选择面板
         */
        _createDateMiddlleItem: function() {
            var me = this,
                dateContentClass = "sweet-form-date-float-middle-content",
                weekClass = "sweet-form-date-float-middle-week",
                middleItemEl = me.middleItemEl = $("<div>").appendTo(me.floatEl),
                dateContentEl = me.dateContentEl = $("<div>").addClass(dateContentClass).appendTo(middleItemEl),
                weekEl = $("<div>"),
                i18nObj = Sweet.core.i18n;
            weekEl.html("<em>" + i18nObj.week[6] +
                "</em><em>" + i18nObj.week[0] +
                "</em><em>" + i18nObj.week[1] +
                "</em><em>" + i18nObj.week[2] +
                "</em><em>" + i18nObj.week[3] +
                "</em><em>" + i18nObj.week[4] +
                "</em><em>" + i18nObj.week[5] +
                "</em>")
                .addClass(weekClass).appendTo(dateContentEl);

            // 绘制日期面板
            me._createDateMidContent();
        },
        /**
         * @private
         * @description 创建浮动面板上的日期列表
         * @param {Object} event 月面板上下翻按钮对象
         */
        _createDateMidContent: function(event) {
            var monthClass = "sweet-form-date-float-middle-month",
                monthOtherClass = "sweet-form-date-float-middle-month-other",
                data = (event && event.data) ? event.data : null,
                me = (data && data.me) ? data.me : this,
                ulEl = $("<ul>").appendTo(me.dateContentEl),
                liEl,
                emEl,
                dateEmEl = me.dateEmEl = [];

            // 生成月面板，固定42格
            for (var i = 0; i < dayGridNum; i++) {
                if (0 === i % 7) {
                    liEl = $("<li>").addClass(monthClass + " " + monthOtherClass).appendTo(ulEl);
                }
                emEl = $("<em>").appendTo(liEl);
                dateEmEl[i] = emEl;
            }
        },

        /**
         * @private
         * @description 动态改变月面板显示天数
         * @param {Object} me 当前日期组件对象
         */
        _changeDateMidContent: function(me) {
            var year = me.year,
                month = me.month,
                months = me.months,
                currentDate = new Date(year, month - 1, 1),
                beginDay = currentDate.getDay(),
                endDay,
                currentDays,
                preDays,
                nextDays,
                days = [],
                dateEmEl = me.dateEmEl,
                opt = me.options,
                format = opt.format,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                tzone = opt.timeZone;
            if ($.date.isLeapYear(year)) {
                months[1] = 29;
            } else {
                // 不为闰年，应该恢复2月份天数为28天。问题单号：DTS2013072606986
                months[1] = 28;
            }
            currentDays = months[month - 1];
            endDay = beginDay + currentDays - 1;

            // 计算上个月天数
            preDays = (1 === month ? months[11] : months[month - 2]);

            // 计算下个月天数
            nextDays = (12 === month ? months[0] : months[month]);

            var maxDateYear = new Date(maxDate.replace(/-/g, "/")).getFullYear(),
                maxDateMonth = new Date(maxDate.replace(/-/g, "/")).getMonth() + 1,
                maxDateDate = new Date(maxDate.replace(/-/g, "/")).getDate(),
                minDateYear = new Date(minDate.replace(/-/g, "/")).getFullYear(),
                minDateMonth = new Date(minDate.replace(/-/g, "/")).getMonth() + 1,
                minDateDate = new Date(minDate.replace(/-/g, "/")).getDate(),
                maxDateFormat = $.date.format(new Date(maxDateYear, maxDateMonth - 1,
                maxDateDate, "00", "00", "00"), me.options.format),
                maxDateUtc = $.date.dateToUTC(String(maxDateFormat).replace(/-/g, "/"), tzone),
                minDateFormat = $.date.format(new Date(minDateYear, minDateMonth - 1, minDateDate, "00", "00", "00"), me.options.format),
                minDateUtc = $.date.dateToUTC(String(minDateFormat).replace(/-/g, "/"), tzone),
                sourVal = me._getValue() ? me._getValue().value : "",
                tempStr = sourVal ? sourVal.split(" ") : "",
                time = tempStr.length === 2 ? tempStr[1] : "00:00:00",
                selectFormat, selectUtc, newVal, newUtc, invalidTestResult;
            if (isNaN(maxDateYear) || isNaN(maxDateMonth) || isNaN(maxDateDate)) {
                maxDateUtc = null;
            }
            if (isNaN(minDateYear) || isNaN(minDateMonth) || isNaN(minDateDate)) {
                minDateUtc = null;
            }

            function _addDayUnbind(j) {
                dateEmEl[j].removeClass().unbind("click").select(function() {
                    return false;
                });
            }

            // 计算月份面板上的天数，并赋值
            for (var i = 0, j = 0, k = 0; i < dayGridNum; i++) {
                _addDayUnbind(i);

                if (i < beginDay) {
                    days[i] = preDays - beginDay + i + 1;

                    if (month > 1) {
                        newVal = year + "/" + (month - 1) + "/" + days[i] + " " + time;
                        newUtc = $.date.dateToUTC(newVal, tzone);
                    }
                    if (month === 1) {
                        newVal = (year - 1) + "/" + 12 + "/" + days[i] + " " + time;
                        newUtc = $.date.dateToUTC(newVal, tzone);
                    }

                    invalidTestResult = me._isDayValid(maxDateUtc, minDateUtc, newUtc);
                    if (invalidTestResult) {
                        dateEmEl[i].addClass(dayInvalid);
                    } else {
                        dateEmEl[i].addClass(invalidCls);
                    }

                    if (!opt.showDays) {
                        dateEmEl[i].text(days[i]).val(days[i]);
                        if (invalidTestResult) {

                            dateEmEl[i].bind("click", {
                                "me": me,
                                "dayEl": dateEmEl[i],
                                "invalidType": "up",
                                "minUtc": minDateUtc,
                                "jumpUpUtc": newUtc
                            },
                            me._setInvalDayEl);
                        }
                    } else {
                        dateEmEl[i].text("").val(days[i]).removeClass(dayInvalid).addClass(invalidCls);
                    }

                } else if (i > endDay) {
                    var jumpVal, jumpUtc, tempYear, tempMonth;
                    days[i] = ++j;
                    if (month < 12) {
                        tempYear = year;
                        tempMonth = month + 1;
                        newVal = year + "/" + tempMonth + "/" + days[i] + " " + "00:00:00";
                        jumpVal = year + "/" + tempMonth + "/" + days[i] + " " + time;
                        newUtc = $.date.dateToUTC(newVal, tzone);
                        jumpUtc = $.date.dateToUTC(jumpVal, tzone);

                    }
                    if (month === 12) {
                        tempYear = year + 1;
                        tempMonth = 1;
                        newVal = tempYear + "/" + 1 + "/" + days[i] + " " + "00:00:00";
                        jumpVal = tempYear + "/" + 1 + "/" + days[i] + " " + time;
                        newUtc = $.date.dateToUTC(newVal, tzone);
                        jumpUtc = $.date.dateToUTC(jumpVal, tzone);
                    }
                    invalidTestResult = me._isDayValid(maxDateUtc, minDateUtc, newUtc);
                    if (invalidTestResult) {
                        dateEmEl[i].addClass(dayInvalid);
                    } else {
                        dateEmEl[i].addClass(invalidCls);
                    }

                    if (!opt.showDays) {
                        dateEmEl[i].text(days[i]).val(days[i]);
                        if (invalidTestResult) {
                            var tempDay = {
                                "year": tempYear,
                                "month": tempMonth,
                                "day": days[i]
                            };
                            dateEmEl[i].bind("click", {
                                "me": me,
                                "dayEl": dateEmEl[i],
                                "invalidType": "down",
                                "maxUtc": maxDateUtc,
                                "jumpDownUtc": jumpUtc,
                                "jumpDownDay": tempDay
                            },
                            me._setInvalDayEl);
                        }
                    } else {
                        dateEmEl[i].text("").val(days[i]).removeClass(dayInvalid).addClass(invalidCls);
                    }
                } else {
                    days[i] = ++k;
                    selectFormat = $.date.format(new Date(year, month - 1, days[i], "00", "00", "00"), me.options.format);
                    selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
                    if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                        if (selectUtc <= maxDateUtc && selectUtc >= minDateUtc) {
                            dateEmEl[i].bind("click", {
                                "me": me,
                                "dayEl": dateEmEl[i]
                            }, me._setDayEl);
                            if (0 === i % 7 || 6 === i % 7) {
                                dateEmEl[i].addClass(dayRest);
                            }
                        } else {
                            dateEmEl[i].addClass(invalidCls);
                        }
                    }
                    // 只设定最大时间
                    else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                        if (selectUtc <= maxDateUtc) {
                            dateEmEl[i].bind("click", {
                                "me": me,
                                "dayEl": dateEmEl[i]
                            }, me._setDayEl);
                            if (0 === i % 7 || 6 === i % 7) {
                                dateEmEl[i].addClass(dayRest);
                            }
                        } else {
                            dateEmEl[i].addClass(invalidCls);
                        }
                    }
                    // 只设定最小时间
                    else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                        if (selectUtc >= minDateUtc) {
                            dateEmEl[i].bind("click", {
                                "me": me,
                                "dayEl": dateEmEl[i]
                            }, me._setDayEl);
                            if (0 === i % 7 || 6 === i % 7) {
                                dateEmEl[i].addClass(dayRest);
                            }
                        } else {
                            dateEmEl[i].addClass(invalidCls);
                        }
                    }
                    // 没有设置最大时间和最小时间
                    else {
                        dateEmEl[i].bind("click", {
                            "me": me,
                            "dayEl": dateEmEl[i]
                        }, me._setDayEl);
                        if (0 === i % 7 || 6 === i % 7) {
                            dateEmEl[i].addClass(dayRest);
                        }
                    }
                    dateEmEl[i].text(days[i]).val(days[i]);
                }
            }
        },

        /**
         * @private
         * @description 检查所选的日期是否合理
         * @param maxUtc 日期最大值的utc秒数
         * @param minUtc 日期最小值的utc秒数
         * @param testUtc 被检测的日期utc秒数
         * @returns {Boolean} true 被检测的日期合理，false 被检测的日期不合理
         */
        _isDayValid: function(maxUtc, minUtc, testUtc) {
            var me = this,
                maxVal = me._getMaxUtc(true),
                minVal = me._getMinUtc(true);

            if ($.isNotNull(testUtc)) {
                if ($.isNotNull(maxVal) && $.isNotNull(maxUtc) && $.isNull(minUtc)) {
                    if (maxUtc < testUtc) {
                        return false;
                    } else {
                        return true;
                    }
                } else if ($.isNotNull(minUtc) && $.isNotNull(minVal) && $.isNull(maxUtc)) {
                    if (minUtc > testUtc) {
                        return false;
                    } else {
                        return true;
                    }
                } else if ($.isNotNull(maxVal) && $.isNotNull(minVal) && $.isNotNull(maxUtc) && $.isNotNull(minUtc)) {
                    if (maxUtc >= testUtc && minUtc <= testUtc) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }
        },
        /**
         * @private
         * @description 点击灰色日期时设置选中天
         * @param event 单击置灰色的天时触发
         * @param me 日期组件对象
         * @param day 设置天时传入
         */
        _setInvalDayEl: function(event, me, day) {
            if (event) {
                var data = event.data,
                    self = data.me,
                    dayEl = data.dayEl[0].value,
                    invalType = data.invalidType,
                    minDate = self._getMinUtc(true),
                    northMonthSpinnerEl = self.northMonthSpinnerEl.find("input"),
                    year = parseInt(self.northYearSpinnerEl.find("input").val(), 10), // 年
                    month = parseInt($.string.toNumber(northMonthSpinnerEl.val()), 10); // 月;

                if ($.isNull(year) && $.isNull(month)) {
                    var tempDay = new Date();
                    year = tempDay.getFullYear();
                    month = parseInt((tempDay.getMonth() + 1), 10);
                }

                if ("up" === invalType) {
                    if (month > 1) {
                        self.day = dayEl;
                        self._onPreMonthClick(event);
                        self._setInvalidClickDayEi(self, self.day);
                    }
                    if (month === 1) {
                        self.day = dayEl;
                        self.month = 12;
                        northMonthSpinnerEl.val(self.month);
                        self._onPreYearClick(event);

                        self._setInvalidClickDayEi(self, self.day);
                    }
                    if (data.minUtc && data.jumpUpUtc && (data.jumpUpUtc < data.minUtc)) {
                        //若调整的时间utc小于组件的最小值，修改分钟和秒数的显示值为00
                        var timeEl1 = self.southSpinnerEl.find("input");
                        var tempMin, tempSec, tempMinAndSec, tempMinStr, tempMinAndSecArr;
                        if ("string" === typeof(minDate)) {
                            tempMinStr = minDate;
                        }
                        if ("number" === typeof(minDate)) {
                            tempMinStr = me._getTimeStrByUtc(minDate);
                        }
                        tempMinAndSecArr = tempMinStr.split(" ");
                        tempMinAndSec = tempMinAndSec[1].split(":");
                        tempMin = tempMinAndSec[0];
                        tempSec = tempMinAndSec[1];
                        $(timeEl1[0]).val(tempMin); // 设置小时输入框
                        $(timeEl1[1]).val(tempSec); // 设置分输入框
                        $(timeEl1[2]).val("00"); // 设置秒输入框
                    }
                }
                if ("down" === invalType) {
                    if (month < 12) {
                        self.day = dayEl;
                        self._onNextMonthClick(event);
                        self._setInvalidClickDayEi(self, self.day);
                    }
                    if (month === 12) {
                        self.day = dayEl;
                        self.month = "01";
                        northMonthSpinnerEl.val(self.month);
                        self._onNextYearClick(event);

                        self._setInvalidClickDayEi(self, self.day);
                    }
                    if (data.maxUtc && data.jumpDownUtc && (data.jumpDownUtc > data.maxUtc)) {
                        //若调整的时间utc大于组件的最大值，修改分钟和秒数的显示值为00
                        var timeEl1 = self.southSpinnerEl.find("input");
                        $(timeEl1[0]).val("00"); // 设置小时输入框
                        $(timeEl1[1]).val("00"); // 设置分输入框
                        $(timeEl1[2]).val("00"); // 设置秒输入框
                    }
                }
            }
        },

        /**
         * @private
         * @description 点击非本月的天，对此天设置选中样式
         * @param me
         * @param day
         */
        _setInvalidClickDayEi: function(me, day) {
            var temp, tempObjVal;

            for (var i = 0; i < me.dateEmEl.length; i++) {
                temp = me.dateEmEl[i];
                tempObjVal = parseInt(temp[0].innerHTML, 10);
                if (!temp.hasClass(invalidCls) && !temp.hasClass(dayInvalid) && tempObjVal === parseInt(day, 10)) {
                    temp.addClass(dayCurrent);
                    break;
                }
            }
        },

        /**
         * @private
         * @description 设置天选中
         * @param {Object} event 天组件对象，单击天时触发
         * @param {Object} me 日期组件对象
         * @param {Number} day 设置天时传入
         */
        _setDayEl: function(event, me, day) {
            if (event) {
                var self = event.data.me,
                    dayEl = event.data.dayEl;
                $.each(self.dateEmEl, function(index, obj) {
                    obj.removeClass(dayCurrent);
                });
                dayEl.addClass(dayCurrent);
                self.dayEl = dayEl;
                self.day = parseInt(dayEl[0].value, 10);
                //若所选的日期+时间超出最大值，需要修正时间值
                var timeEl1event = self.southSpinnerEl.find("input"),
                    eformat = self.options.format,
                    etzone = self.options.timeZone,
                    northMonthSpinnerEl = self.northMonthSpinnerEl.find("input"),
                    eyearInput = parseInt(self.northYearSpinnerEl.find("input").val(), 10), // 年
                    emonthInput = parseInt($.string.toNumber(northMonthSpinnerEl.val()), 10), // 月;
                    emaxUtc = self._getMaxUtc(),
                    tempHour = $(timeEl1event[0]).val(), // 时
                    tempMini = $(timeEl1event[1]).val(), // 分
                    tempSec = $(timeEl1event[2]).val(), // 秒
                    currentUtc, currentDate;
                currentDate = $.date.format(new Date(eyearInput, emonthInput - 1, self.day, tempHour, tempMini, tempSec), self.options.format),
                currentUtc = $.date.dateToUTC(String(currentDate).replace(/-/g, "/"), etzone);
                if ($.isNotNull(emaxUtc)) {
                    var emax = self._getMaxUtc(true),
                        etempMax = new Date(String(emax.replace(/-/g, "/"))),
                        emaxYear = etempMax.getFullYear(),
                        emaxMonth = etempMax.getMonth() + 1,
                        emaxDay = etempMax.getDate();
                    if (emaxYear === eyearInput && emaxMonth === emonthInput && emaxDay === self.day && currentUtc > emaxUtc) {
                        $(timeEl1event[0]).val("00");
                        $(timeEl1event[1]).val("00");
                        $(timeEl1event[2]).val("00");
                    }
                }

                self._changeTimeInput(self);
            } else {
                var max = me._getMaxUtc(true),
                    min = me._getMinUtc(true),
                    objVal, maxDay, minDay, curMonthDays, minYear, minMonth, maxYear, maxMonth, tempMin, tempMax,
                    northMonthSpinnerEl = me.northMonthSpinnerEl.find("input"),
                    yearInput = parseInt(me.northYearSpinnerEl.find("input").val(), 10), // 年
                    monthInput = parseInt($.string.toNumber(northMonthSpinnerEl.val()), 10), // 月;
                    year = me.year,
                    month = me.month,
                    months = me.months;
                if ($.date.isLeapYear(year)) {
                    months[1] = 29;
                } else {
                    // 不为闰年，应该恢复2月份天数为28天
                    months[1] = 28;
                }
                // 计算当月天数
                curMonthDays = parseInt((1 === month ? months[11] : months[month - 1]), 10);
                day = parseInt(day, 10);

                if (day > curMonthDays) {
                    //若次月不存在某日期，默认选中每月的1号
                    day = 1;
                    me.day = day;
                }
                if ($.isNotNull(max)) {
                    tempMax = new Date(String(max.replace(/-/g, "/")));
                    maxYear = tempMax.getFullYear();
                    maxMonth = tempMax.getMonth() + 1;
                    maxDay = tempMax.getDate();
                    if (yearInput === maxYear && monthInput === maxMonth && day > maxDay) {
                        //所选值超过最大值纠正为最大日期值
                        day = maxDay;
                        me.day = day;

                        //所设置的年月日超出最大值时，修改时间显示为00:00:00
                        var timeEl1 = me.southSpinnerEl.find("input"),
                            format = me.options.format,
                            tzone = me.options.timeZone,
                            maxUtc = me._getMaxUtc(),
                            hour1 = $(timeEl1[0]).val(), // 时
                            minute1 = $(timeEl1[1]).val(), // 分
                            second1 = $(timeEl1[2]).val(), // 秒
                            selectFormat = $.date.format(new Date(maxYear, maxMonth - 1, day, hour1, minute1, second1), me.options.format),
                            selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
                        if (maxUtc && selectUtc > maxUtc) {
                            $(timeEl1[0]).val("00");
                            $(timeEl1[1]).val("00");
                            $(timeEl1[2]).val("00");
                        }
                    }
                }
                if ($.isNotNull(min)) {
                    tempMin = new Date(String(min.replace(/-/g, "/")));
                    minYear = tempMin.getFullYear();
                    minMonth = tempMin.getMonth() + 1;
                    minDay = tempMin.getDate();
                    if (yearInput === minYear && monthInput === minMonth && day < minDay) {
                        //所选值小于最小值纠正为最小日期值
                        day = minDay;
                        me.day = day;
                    }
                }

                $.each(me.dateEmEl, function(index, obj) {
                    if ($.isNotNull(obj.html())) {
                        objVal = $.string.toNumber(obj.html());
                    }

                    if ((!obj.hasClass(dayInvalid)) && (!obj.hasClass(invalidCls)) && $.isNotNull(objVal) && objVal === day) {
                        me.dayEl ? me.dayEl.removeClass(dayCurrent) : "";

                        obj.addClass(dayCurrent);
                        me.dayEl = obj;
                    }
                });
                me._changeTimeInput(me);
            }
        },
        /**
         * @private
         * @description 创建时间微调器面板
         * @param {Object} me 日期组件对象
         * @param {Array} arr 面板上呈现的数组
         * @param {Object} inputObj 输入文本框对象
         */
        _createTimePanel: function(me, arr, inputObj) {
            var timeAEl = [],
                timeLiEl,
                timeUlEl,
                timeDivEl = me.timeDivEl = $("<div>").addClass(timeDivClass + " " + me.floatBgClass).hide();
            for (var i = 0; i < arr.length; i++) {
                timeLiEl = $("<li>");
                timeUlEl = $("<ul>");
                timeLiEl.appendTo(timeUlEl);
                timeUlEl.appendTo(timeDivEl);
                timeAEl[i] = $("<a>").val(arr[i]).text(arr[i]).appendTo(timeLiEl);
            }
            timeUlEl.appendTo(timeDivEl);
            timeDivEl.bind("click", function(event) {
                event.stopImmediatePropagation();
            });
            switch (arr.length) {
                case spinnerHourArr.length:
                    me.timeHourAEl = timeAEl;
                    me.timeHourDivEl = timeDivEl;
                    break;
                case spinnerMinuteArr.length:
                    me.timeMiniteAEl = timeAEl;
                    me.timeMiniteDivEl = timeDivEl;
                    break;
                case spinnerSecondArr.length:
                    me.timeSecondAEl = timeAEl;
                    me.timeSecondDivEl = timeDivEl;
                    break;
            }

            return timeDivEl;
        },
        /**
         * @private
         * @description 修改时间面板
         * @param {Object} me 日期组建对象
         * @param {Number/String} time 输入框的值
         * @param {Object} inputEl 输入框对象
         * @param {Number/String} spinnerTimeTypes 点击的输入框类型
         */
        _changeTimePanel: function(me, time, inputEl, spinnerTimeTypes) {
            if ($.isNull(time)) {
                me._error("_changeYearPanel() The input parameter 'time' is null.");
                return;
            }
            var opt = me.options,
                format = opt.format,
                tzone = opt.timeZone,
                maxDate = me._getMaxUtc(true),
                minDate = me._getMinUtc(true),
                maxDateUtc = me._getMaxUtc(),
                minDateUtc = me._getMinUtc(),
                selectFormat, selectUtc, arr = [],
                currentBlueDay, currentBluebJq,
                year = me.northYearSpinnerEl.find("input").val(), // 年
                month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()) - 1, // 月
                day, // 日
                timeEl = me.southSpinnerEl.find("input"),
                hour, // 时
                minute, // 分
                second; // 秒
            me.dayEl ? day = me.dayEl.val() : day = "1";
            for (var k = 0; k < me.dateEmEl.length; k++) {
                if (me.dateEmEl[k].hasClass(dayCurrent)) {
                    currentBluebJq = me.dateEmEl[k];
                    currentBlueDay = parseInt(currentBluebJq[0].value, 10);
                    break;
                }
            }
            if (currentBlueDay) {
                day = currentBlueDay;
            } else {
                day = me.dayEl.val();
            }

            function addTimeBind(i) {
                me.timeAEl[i].bind("click", function() {
                    var aEl = $(this),
                        v = $.string.lpad(aEl.val(), 2, "0");
                    // 小时
                    if ($.isNotNull(maxDate) && spinnerTimeType[0] === spinnerTimeTypes) {
                        var sFormat = $.date.format(new Date(year, month, day, v, $(timeEl[1]).val(), $(timeEl[2]).val()), me.options.format);
                        var sUtc = $.date.dateToUTC(String(sFormat).replace(/-/g, "/"), tzone);
                        if (sUtc > maxDateUtc) {
                            $(timeEl[1]).val("00");
                            $(timeEl[2]).val("00");
                        }
                        // 分钟
                    } else if ($.isNotNull(maxDate) && spinnerTimeType[1] === spinnerTimeTypes) {
                        var sFormat = $.date.format(new Date(year, month, day, $(timeEl[0]).val(), v, $(timeEl[2]).val()), me.options.format);
                        var sUtc = $.date.dateToUTC(String(sFormat).replace(/-/g, "/"), tzone);
                        if (sUtc > maxDateUtc) {
                            $(timeEl[2]).val("00");
                        }
                    }
                    inputEl.val(v);
                    me.timeDivEl.hide();
                });
            }

            function addTimeUnBind(i) {
                me.timeAEl[i].removeClass().unbind("click").select(function() {
                    return false;
                });
            }
            // 小时
            if (spinnerTimeType[0] === spinnerTimeTypes) {
                me.timeAEl = me.timeHourAEl;
                me.timeDivEl = me.timeHourDivEl;
                selectArr(spinnerHourArr);
                // 分钟
            } else if (spinnerTimeType[1] === spinnerTimeTypes) {
                me.timeAEl = me.timeMiniteAEl;
                me.timeDivEl = me.timeMiniteDivEl;
                selectArr(spinnerMinuteArr);
                // 秒
            } else if (spinnerTimeType[2] === spinnerTimeTypes) {
                me.timeAEl = me.timeSecondAEl;
                me.timeDivEl = me.timeSecondDivEl;
                selectArr(spinnerSecondArr);
            }

            function selectArr(arr) {
                for (var i = 0; i < arr.length; i++) {
                    addTimeUnBind(i);
                    // 小时
                    if (spinnerTimeType[0] === spinnerTimeTypes) {
                        hour = arr[i], // 时
                        minute = "00", // 分
                        second = "00"; // 秒
                        // 分钟
                    } else if (spinnerTimeType[1] === spinnerTimeTypes) {
                        hour = $(timeEl[0]).val(), // 时
                        minute = arr[i], // 分
                        second = "00"; // 秒 
                        // 秒
                    } else if (spinnerTimeType[2] === spinnerTimeTypes) {
                        hour = $(timeEl[0]).val(), // 时
                        minute = $(timeEl[1]).val(), // 分
                        second = arr[i]; // 秒 
                    }
                    selectFormat = $.date.format(new Date(year, month, day, hour, minute, second), me.options.format);
                    selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
                    // 同时设置最大时间和最小时间
                    if ($.isNotNull(maxDate) && $.isNotNull(minDate)) {
                        if (selectUtc <= maxDateUtc && selectUtc >= minDateUtc) {
                            addTimeBind(i);
                        } else {
                            me.timeAEl[i].addClass(dataTextCls);
                        }
                    }
                    // 只设置时间最大值
                    else if ($.isNotNull(maxDate) && !$.isNotNull(minDate)) {
                        if (selectUtc <= maxDateUtc) {
                            addTimeBind(i);
                        } else {
                            me.timeAEl[i].addClass(dataTextCls);
                        }
                    }
                    // 只设置时间最小值
                    else if (!$.isNotNull(maxDate) && $.isNotNull(minDate)) {
                        if (selectUtc >= minDateUtc) {
                            addTimeBind(i);
                        } else {
                            me.timeAEl[i].addClass(dataTextCls);
                        }
                    } else {
                        addTimeBind(i);
                    }
                    me.timeAEl[i].val(arr[i]).text(arr[i]);
                }
            }
        },
        /**
         * @private
         * @description 当年月日发生改变时修改时间输入框的值
         * @param {Object} obj 日期组建对象
         */
        _changeTimeInput: function(obj) {
            var me = obj,
                selectFormat,
                selectUtc,
                format = me.options.format,
                tzone = me.options.timeZone,
                year1 = me.northYearSpinnerEl.find("input").val(), // 年
                month1 = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()) - 1, // 月
                day1, // 日
                timeEl1 = me.southSpinnerEl.find("input"),
                hour1 = $(timeEl1[0]).val(), // 时
                minute1 = $(timeEl1[1]).val(), // 分
                second1 = $(timeEl1[2]).val(); // 秒
            if (me.dayEl && $.isNotNull(me.dayEl.val())) {
                day1 = me.dayEl.val();
            } else {
                day1 = new Date().getDate();
                if ((String(day1)).length < 2) {
                    day1 = "0" + day1;
                }
            }
            if ("0" === month1) {
                month1 = 1;
            }
            selectFormat = me._initFormElVal(year1, month1, day1, hour1, minute1, second1);
            if (me._isTimeZoneNull) {
                selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), me._getTempZone(String(selectFormat.replace(/-/g, "/"))));
            } else {
                selectUtc = $.date.dateToUTC(String(selectFormat).replace(/-/g, "/"), tzone);
            }
            var val = me._checkMaxMin(selectUtc),
                value = me._getTimeStrByUtc(val).replace(/-/g, "/"),
                strTimeData = value.split(" "),
                strdateData = strTimeData[0].split("/"),
                year = strdateData[0],
                month = strdateData[1] - 1,
                day = strdateData[2],
                strtimeData = (strTimeData[1] === undefined) ? ["00", "00", "00"] : strTimeData[1].split(":"),
                hour = (strtimeData[0] === undefined) ? "00" : strtimeData[0],
                minute = (strtimeData[1] === undefined) ? "00" : strtimeData[1],
                second = (strtimeData[2] === undefined) ? "00" : strtimeData[2];
            $(timeEl1[0]).val(hour), // 设置小时输入框
            $(timeEl1[1]).val(minute), // 设置分输入框
            $(timeEl1[2]).val(second); // 设置秒输入框
        },
        /**
         * @private
         * @description 创建日期浮动窗口底部，时间选择
         */
        _createDateSouthItem: function() {
            var me = this,
                i18nObj = Sweet.core.i18n.date,
                COLON = Sweet.constants.symbol.COLON,
                options = me.options,
                southItemClass = "sweet-form-date-float-south",
                southLabelClass = "sweet-form-date-float-south-label",
                spanElClass = "sweet-form-date-float-button-span",
                okButtonElClass = "sweet-form-date-float-button-ok",
                fmt = options.format,
                southItemEl = me.southItemEl = $("<div>").addClass(southItemClass).appendTo(me.floatEl),
                spanEl = $("<span>").addClass(spanElClass).appendTo(southItemEl),
                okButtonEl = me.okButtonEl = $("<button>").addClass(okButtonElClass).text(i18nObj.okButton).appendTo(spanEl),
                labelEl = $("<label>").text(i18nObj.time + COLON).addClass(southLabelClass).appendTo(southItemEl),
                southSpinnerEl = me.southSpinnerEl = me._createDateSpinner(spinnerType[2]).appendTo(southItemEl);

            // 注册确定按钮单击事件
            okButtonEl.bind("click", function(event) {
                var year = me.northYearSpinnerEl.find("input").val(), // 年
                    month = $.string.toNumber(me.northMonthSpinnerEl.find("input").val()) - 1, // 月
                    day = me.dayEl.val(), // 日
                    dateVal,
                    timeEl = me.southSpinnerEl.find("input"),
                    hour = $(timeEl[0]).val(), // 时
                    minute = $(timeEl[1]).val(), // 分
                    second = $(timeEl[2]).val(); // 秒
                me.formElement.val(me._initFormElVal(year, month, day, hour, minute, second));
                me.formElement.blur();
                me.openDropDownFlag = false;
                me._closeFloatPanel();
                me._checkFun();
                dateVal = me.formElement.val();
                if (me.oldValue !== dateVal) {
                    me.oldValue = dateVal;
                }
            });
        },

        /**
         * @private
         * @description 置灰/亮日期图片
         * @param {Boolean} disabled ture/false
         */
        __setDisabled: function(disabled) {
            var me = this;
            if (disabled) {
                me.datePicEl.removeClass(datePicClass).addClass(datePicDisabledClass);
            } else {
                me.datePicEl.removeClass(datePicDisabledClass).addClass(datePicClass);
            }
            me.datePicEl.attr("disabled", disabled);
        },
        /**
         * @private
         * @description 校验
         * @param {Object} justGetResult 只获取校验结果，不显示提示
         * @returns {Boolean} true 校验通过，false 校验不通过
         */
        _checkAllFun: function(justGetResult) {
            var me = this,
                val = me.formElement.val(),
                returnResult;

            if (me._super(justGetResult) === false) {
                returnResult = false;
            }
            if ($.isNull(val)) {
                returnResult = true;
            }

            // 日期格式验证
            returnResult = me._setRightTimeValue(me);

            return returnResult;
        },
        /**
         * @private
         * @description 组件创建后，纠正错误日期后的日期值
         */
        _setRightTimeValue: function(that) {
            var me = that,
                opt = me.options,
                tzone = opt.timeZone,
                val = me.formElement.val(),
                reg = (me.options.format === "yyyy-MM-dd hh") ? me.regMap["yyyy-MM-dd hh:mm"] : me.regMap[me.options.format],
                regObj = new RegExp(reg),
                _tZone1 = tzone,
                _tZone2 = tzone;
            // 日期格式验证
            if (val.match(regObj) === null) {
                if ($.isNull(val) && $.isNull(opt.maxDate) && $.isNull(opt.minDate) && !opt.required) {
                    me.formElement.val("");
                } else if ($.isNotNull(me.oldValue)) {
                    if (me._isTimeZoneNull) {
                        _tZone1 = me._getTempZone(String(me.oldValue.replace(/-/g, "/")));
                    }
                    var odlValDateUtc = $.date.dateToUTC(String(me.oldValue.replace(/-/g, "/")), _tZone1);
                    me._setUtcTimefield(odlValDateUtc);
                }
            } else {
                val = me._findError(val);
                if (me._isTimeZoneNull) {
                    _tZone2 = me._getTempZone(String(val.replace(/-/g, "/")));
                }
                var selectDateUtc = $.date.dateToUTC(String(val.replace(/-/g, "/")), _tZone2);
                me._setUtcTimefield(selectDateUtc);
                me.closeTip();
            }
            return true;
        },
        /**
         * @private
         * @description 组件创建后，添加其他功能：禁用输入法切换、禁止粘贴
         */
        _afterCreateFormWidget: function() {
            var me = this;
            me.allowdChars = me.baseChars;
            me.formElement.focus(function() {
                me.oldValue = me.formElement.val();
            });
            me.formElement.keypress({
                "me": me
            }, me._onKeyPress);
            me.formElement.keydown({
                "me": me
            }, me._onKeyDown);
        },
        /**
         * @private
         * @description 只允许输入数字、英文冒号、减号
         * @param {type} event 数值输入框对象
         */
        _onKeyPress: function(event) { // 退格键、回车键、其他功能键，空格，不做处理
            if (Sweet.constants.keyCode.BACKSPACE === event.which || Sweet.constants.keyCode.SPACE === event.which || Sweet.constants.keyCode.ENTER === event.which || 0 === event.which) {
                return;
            }
            var me = event.data.me,
                options = me.options,
                ch = String.fromCharCode($.e.getCharCode(event)),
                charRe = new RegExp("[" + me.allowdChars + "]");

            if (!charRe.test(ch)) {
                event.preventDefault();
                return;
            }
        },
        /**
         * @private
         * @description 解决谷歌下能输入中文的问题
         * @param {type} event 数值输入框对象
         */
        _onKeyDown: function(event) {
            var me = event.data.me,
                sKeyCode = Sweet.constants.keyCode,
                eKeyCode = event.keyCode,
                key = event.charCode || eKeyCode,
                ch = String.fromCharCode($.e.getCharCode(event));
            // 退格键、回车键、删除键、上下左右方向键，不做处理
            if (sKeyCode.BACKSPACE === eKeyCode || sKeyCode.ENTER === eKeyCode || sKeyCode.DELETE === eKeyCode || sKeyCode.LEFT === eKeyCode || sKeyCode.RIGHT === eKeyCode || sKeyCode.DOWN === eKeyCode || sKeyCode.UP === eKeyCode || sKeyCode.TAB === eKeyCode) {
                return;
            }
            if (key > 47 && key < 58 || key > 95 && key < 106 || // 数字键
            16 === key || 186 === key || 59 === key || // shift、冒号
            189 === key || 109 === key || 173 === key || 32 === key) { // 减号,空格
                return;
            } else {
                event.preventDefault();
            }
        },
        /**
         * @private
         * @description 设置VALUE时,如果有夏令时则需要处理
         * @param {Number} year 年
         * @param {Number} month 月
         * @param {Number} day 日
         * @param {Number} hour 小时
         * @param {Number} minute 分钟
         * @param {Number} second 秒
         * return {String} 返回矫正后的字符串
         */
        _initFormElVal: function(year, month, day, hour, minute, second) {
            var me = this,
                sDstSwitchDate;
            sDstSwitchDate = $.date.getSDstSwitchDate(year);
            if (sDstSwitchDate && sDstSwitchDate[0] == parseInt(year) && sDstSwitchDate[1] == parseInt(month) && sDstSwitchDate[2] == parseInt(day) && sDstSwitchDate[3] == parseInt(hour) && sDstSwitchDate[4] <= parseInt(minute)) {
                hour = parseInt(hour) + 1;
            }
            if (me.options.format === "yyyy-MM-dd hh") {
                return ($.date.format(new Date(year, month, day, hour, minute, second), me.options.format) + ":00");
            } else {
                return $.date.format(new Date(year, month, day, hour, minute, second), me.options.format);
            }
            return "";
        },
        /**
         * @private
         * @description 通过日期字符串获得时区
         * @param {String} strTime 日期字符串
         * return {Number} 返回该日期字符串对应的时区
         */
        _getTempZone: function(strTime) {
            var me = this,
                custmTzone = new Date().getTimezoneOffset() / 60 * (-1);
            if ($.isNull(strTime)) {
                return custmTzone;
            }
            if ("string" !== typeof strTime) {
                return custmTzone;
            }
            var strTimeData = strTime.split(" "),
                strDateData = strTimeData[0].split("/"),
                strYear = strDateData[0],
                strMonth = strDateData[1] - 1,
                strDay = strDateData[2],
                strTimeData1 = !strTimeData[1] ? ["00", "00", "00"] : strTimeData[1].split(":"),
                strHour = !strTimeData1[0] ? "00" : strTimeData1[0],
                strMinute = !strTimeData1[1] ? "00" : strTimeData1[1],
                strSecond = !strTimeData1[2] ? "00" : strTimeData1[2];
            return new Date(strYear, strMonth, strDay, strHour, strMinute, strSecond, 0).getTimezoneOffset() / 60 * (-1);
        }
    });

    /**
     * 创建日期组件
     * @name Sweet.form.Date
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * </pre>
     * @example 
     * <pre>
     * sweetDate = new Sweet.form.Date({
     *         width : 300,
     *         label : true,
     *         labelText : 'Date',
     *         value : {value: "2013/1/16 14:30:30", text: "time"},
     *         renderTo : "sweet-date"
     * });
     * </pre>
     */
    Sweet.form.Date = $.sweet.widgetFormDate;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * form组件--文本域
 * 2012/12/15
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var textAreaClass = "sweet-form-textarea",
        TextAreaGrayClass = "sweet-form-textarea-gray",
        textAreaErrorRedBorderClass = "sweet-form-textarea-errorRedBorder";

    $.widget("sweet.widgetFormTextarea", $.sweet.widgetFormInput, /** @lends Sweet.form.TextArea.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-textarea]",
        type: 'textarea',
        // 文本域组件配置参数
        options: /** @lends Sweet.form.TextArea.prototype*/
        {},
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 创建输入域
         */
        _createInputField: function() {
            var me = this,
                options = me.options,
                formElement = me.formElement = $("<textarea>").addClass(textAreaErrorRedBorderClass),
                formDiv1El = me.formDiv1El,
                formDiv2El = me.formDiv2El = $("<div>").appendTo(formDiv1El),
                value = $.nullToString(options.value);
            formElement.val(value);
            if ($.isNotNull(options.vID)) {
                formElement.attr("id", options.vID);
            }
            formElement.appendTo(formDiv2El);
            formDiv2El.addClass(me.defaultPaddingDivClass).addClass(textAreaClass);
            if (options.maxLength < Number.MAX_VALUE) {
                formElement.attr("maxLength", options.maxLength);
            }
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         */
        _setDisabled: function(disabled) {
            var me = this;
            if (disabled) {
                me.formDiv2El.addClass(TextAreaGrayClass);
            } else {
                me.formDiv2El.removeClass(TextAreaGrayClass);
            }
            me.__setDisabled(disabled);
        }
    });
    /**
     * 文本域
     * @name Sweet.form.TextArea
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     *  jquery.sweet.widget.form.input.js
     * </pre>
     * @example 
     * <pre>
     * sweetTextArea = new Sweet.form.TextArea({
     *     width : 400,
     *     height : 150,
     *     label: true,
     *     labelText : 'Description',
     *     renderTo : "sweet-text"
     * });
     * </pre>
     */
    Sweet.form.TextArea = $.sweet.widgetFormTextarea;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--搜索框
 * 2012/12/19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    var searchClass = "sweet-from-searchfield",
        searchDisabledClass = "sweet-from-searchfield-disabled",
        searchClassA = "sweet-from-searchfield-a",
        eClick = "click",
        eKeyup = "keyup",
        hrefJs = "javascript:void(0);";

    $.widget("sweet.widgetFormSearchfield", $.sweet.widgetFormTextfield, /** @lends Sweet.form.SearchField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-searchfield]",
        type: 'text',
        eventNames: /** @lends Sweet.form.SearchField.prototype*/
        {
            /**
             * @event
             * @description 搜索按钮单击事件,参数为两个(event, data)
             */
            click: "搜索按钮单击事件",
            /**
             * @event
             * @description 搜索框的keyup事件,参数为两个(event, data)
             */
            keyup: "搜索框的keyup事件"
        },
        /** 
         * @private
         * @description 查询框组件公共配置参数
         */
        options: /** @lends Sweet.form.SearchField.prototype*/
        {},
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 创建搜索按钮
         */
        _afterCreateFormWidget: function() {
            var me = this,
                fEi = me.formElement,
                searchPicEl = me.searchPicEl = $("<a>").attr("href", hrefJs).insertBefore(fEi);
            me.searchPicEl.bind("click", {
                "me": me
            }, me._onClick);
            fEi.bind("keyup", {
                "me": me
            }, me._onKeyup);
            me.formDiv2El.addClass(searchClass);
            searchPicEl.addClass(searchClassA);
        },
        /**
         * @private
         * @description 搜索按钮图片点击事件
         * @param {Object} event 搜索按钮图片点击对象
         */
        _onClick: function(event) {
            var me = event.data.me;
            me._triggerHandler(event, eClick, me.getValue());
        },
        /**
         * @private
         * @description 文本框的回车事件
         * @param {Object} event 搜索按钮图片点击对象
         */
        _onKeyup: function(event) {
            var me = event.data.me;
            var key = event.charCode || event.keyCode;
            // 回车
            if (13 === key) {
                me._triggerHandler(event, eClick, me.getValue());
            } else {
                me._triggerHandler(event, eKeyup, me.getValue());
            }
        },

        /**
         * @private
         * @description 置灰微调器上、下翻图片
         * @param {Boolean} disabled ture/false
         */
        __setDisabled: function(disabled) {
            var me = this,
                searchPicEI = me.searchPicEl,
                formDiv2EI = me.formDiv2El;
            if (disabled) {
                searchPicEI.removeClass(searchClassA);
                formDiv2EI.addClass(searchDisabledClass);
            } else {
                searchPicEI.addClass(searchClassA);
                formDiv2EI.removeClass(searchDisabledClass);
            }
            searchPicEI.attr("disabled", disabled);
        }
    });

    /**
     * 搜索框
     * @name Sweet.form.SearchField
     * @class 
     * @extends Sweet.form.TextField
     * @requires  
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.textfield.js
     * </pre>
     * @example 
     * <pre>
     * 创建搜索框：
     * var sweetSearchField = new Sweet.form.SearchField({
     *     label : true,
     *     width : 200,
     *     labelText : 'Search'
     * });
     * </pre>
     */
    Sweet.form.SearchField = $.sweet.widgetFormSearchfield;

}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * form组件--选择器
 * 2013/11/7
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var sweetButtonClass = "sweet-form-button",
        sweetButtonDisabledClass = "sweet-form-button-disabled",
        formButtonClass = "sweet-form-selector-button";
    $.widget("sweet.widgetFormSelector", $.sweet.widgetFormTextfield, /** @lends Sweet.form.Selector.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-selector]",
        eventNames: /** @lends Sweet.form.Selector.prototype*/
        {
            /**
             * @event
             * @description 单击按钮事件
             */
            buttonClick: "单击按钮事件"
        },
        options: /** @lends Sweet.form.Selector.prototype*/
        {
            /**
             * @description 是否有label
             * @type {Boolean}
             * @default false
             */
            label: false,
            /**
             * @description 是否可编辑
             * @type {Boolean}
             * @default false
             */
            editable: false
        },
        /**
         * @private
         * @description 创建选择器组件
         */
        _afterCreateFormWidget: function() {
            var me = this,
                formButton = me.formButton = $("<input type='button'>").attr("value", '...')
                    .addClass(sweetButtonClass)
                    .insertAfter(me.formDiv2El)
                    .bind("click", function() {
                    if (!me.options.disabled) {
                        me._triggerHandler(null, "buttonClick");
                    }
                });
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         */
        __setDisabled: function(disabled) {
            var me = this;
            me.options.disabled = disabled;
            if (disabled) {
                me.formButton.removeClass(sweetButtonClass).addClass(sweetButtonDisabledClass);
            } else {
                me.formButton.removeClass(sweetButtonDisabledClass).addClass(sweetButtonClass);
            }
        },
        /**
         * @description 组件布局刷新基本处理
         * @private
         */
        _doLayout: function() {
            var me = this,
                formButton = me.formButton,
                preDiv1Width = me.formDiv1El.width(),
                btnLeft = 0,
                nextDiv1Width = 0;
            //在父类input的_dolayout中计算text的left
            me._super();
            //因为设置为100%或auto时，formDiv1El的宽度会自动改变（preDiv1Width ！== nextDiv1Width），而固定宽度时需要我们手动设置
            nextDiv1Width = me.formDiv1El.width();
            //固定宽度时需要我们手动设置
            if (preDiv1Width === nextDiv1Width) {
                me.formDiv1El.width(nextDiv1Width - me.labelWidth);
                btnLeft = me.formDiv1El.width();
            } else {
                //30是formButton的样式中的宽度
                btnLeft = nextDiv1Width - 30;
                me.formDiv1El.width(btnLeft);
            }
            formButton.css("left", btnLeft);
            formButton.addClass(formButtonClass);
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.formEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.formEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.formDiv1El.externalWidth(width - 30);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.formDiv1El.externalHeight(height);
        }
    });
    /**
     * 选择器
     * @name Sweet.form.Selector
     * @class 
     * @extends Sweet.form.TextField
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     *  jquery.sweet.widget.form.input.js
     *  jquery.sweet.widget.form.TextField.js
     * </pre>
     * @example 
     * <pre>
     * sweetSelector = new Sweet.form.Selector({
     *       width: 250,
     *       renderTo : "selectorDiv"
     *   });
     *  sweetSelector.addListener("buttonClick", function() {
     *      $.log("click happend!");
     *  });
     * </pre>
     */
    Sweet.form.Selector = $.sweet.widgetFormSelector;
}(jQuery));


;
/**
 * @fileOverview
 * <pre>
 * CellSelect组件
 * 2013/7/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    "use strict";

    // 样式定义
    var widgetClass = "sweet-form-cell-select",
        cellClass = "sweet-form-cs-cell",
        cellUsedClass = "sweet-form-cs-used",
        cellOldClass = "sweet-form-cs-old",
        cellRmvClass = "sweet-form-cs-rmv",
        cellNewClass = "sweet-form-cs-new",
        cellSelectingClass = "sweet-form-cs-selecting";

    $.widget("sweet.widgetFormCellSelect", $.sweet.widgetForm, /** @lends Sweet.form.CellSelect.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-cellselect]",
        defaultElement: "<div>",
        eventNames: /** @lends Sweet.form.CellSelect.prototype*/
        {
            /**
             * @event
             * @description 改变值事件
             */
            change: "改变值事件"
        },
        // 组件公共配置参数
        options: /** @lends Sweet.form.CellSelect.prototype*/
        {
            /**
             * @description 组件值, {text: "", value: {rows:x, cols:y}, data: null}
             * @type {Object}
             * @default null
             */
            value: null,
            /**
             * @description 组件宽度
             * @type {String/Number}
             * @default 100%
             */
            width: "100%",
            /**
             * @description 组件高度
             * @type {String/Number}
             * @default 100%
             */
            height: "100%",
            /**
             * @description 可选择行数
             * @type {Number}
             * @default 4
             */
            rows: 4,
            /**
             * @description 可选择列数
             * @type {Number}
             * @default 5
             */
            columns: 5,
            /**
             * @description 单元格间距
             * @type {Number}
             * @default 3
             */
            padding: 3
        },
        /**
         * @private
         * @description 设置组件描述
         * @param {Object} value 组件值
         */
        _setValue: function(value) {
            var item,
            me = this,
                info;

            if ($.isNull(value)) {
                return;
            }

            // 记录值
            me.options.value = value;

            // 更新状态
            me.formElement.find("." + cellClass).each(function(index, el) {
                item = $(el);
                info = me._getCellInfo(item);

                // 清理样式
                item.removeClass(cellNewClass).removeClass(cellRmvClass);

                // 如果在范围内，设置选择区域样式
                if (info.row < value.value.rows && info.col < value.value.columns) {
                    item.addClass(cellOldClass);
                }
                // 否则，清除原来显示的已设置值
                else {
                    item.removeClass(cellOldClass);
                }
            });

            // 触发事件
            me._onValueChange();
        },
        /**
         * @private
         * @description 设置组件值
         * @return Object 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            return this.options.value;
        },
        /**
         * @description 获取单元格的信息
         * @private
         */
        _getCellInfo: function(cell, col) {
            var item;

            if (typeof col === 'undefined') {
                item = $(cell);
            } else {
                item = this.formElement.find(".row-" + cell + " .col-" + col);
            }

            return {
                row: parseInt(item.attr("_row"), 10),
                col: parseInt(item.attr("_col"), 10),
                old: item.hasClass(cellOldClass),
                "new": item.hasClass(cellNewClass),
                used: item.hasClass(cellUsedClass)
            };
        },
        /**
         * @private
         * @description 创建基本文本框对象
         */
        _createFormWidget: function() {
            var width, height,
            ulEl, liEl, cellEl,
            value, me = this,
                opt = me.options;

            // 最外层的DIV
            me.formElement = $("<div>").addClass(widgetClass).appendTo(this.formEl);

            // 计算单元格的宽高
            width = Math.round(100 / opt.columns) + "%";
            height = Math.round(100 / opt.rows) + "%";

            // 缺省值
            value = opt.value ? opt.value.value : {
                rows: 0,
                columns: 0
            };

            // 创建Cells
            for (var row = 0; row < opt.rows; row++) {
                // 添加一行
                ulEl = $("<ul></ul>").height(height).appendTo(me.formElement);
                ulEl.addClass("row-" + row);

                // 添加此行的列
                for (var col = 0; col < opt.columns; col++) {
                    liEl = $("<li>").width(width).appendTo(ulEl);
                    cellEl = $("<div>").addClass(cellClass).appendTo(liEl);

                    // 记录额外的信息，便于后续处理
                    cellEl.addClass("row-" + row).addClass("col-" + col);
                    cellEl.attr("_row", row).attr("_col", col);

                    // 设置缺省值
                    if (row < value.rows && col < value.columns) {
                        cellEl.addClass(cellOldClass);
                    }
                }
            }

            // 绑定事件
            me.formElement.unbind()
                .bind("mousemove", function(event) {
                if ($(event.target).hasClass(cellClass)) {
                    me._onCellHover(event);
                }
            })
                .bind("click", function(event) {
                if ($(event.target).hasClass(cellClass)) {
                    me._onCellClick(event);
                }
            })
                .hover(null, function() {
                me.formElement.find("." + cellClass).removeClass(cellSelectingClass);
            });
        },
        /**
         * @description 刷新布局
         * @private
         */
        _doLayout: function() {
            if (!this.rendered) {
                return;
            }

            this._super();
        },
        /**
         * @description 鼠标在单元格上悬停时，更新选择信息
         * @param event
         * @private
         */
        _onCellHover: function(event) {
            var cell = $(event.target),
                me = this,
                cellInfo = me._getCellInfo(cell),
                item, itemInfo;

            // 更新样式
            me.formElement.find("." + cellClass).each(function(index, el) {
                item = $(el);
                itemInfo = me._getCellInfo(item);

                // 如果在选择范围内，设置样式
                if (itemInfo.row <= cellInfo.row && itemInfo.col <= cellInfo.col) {
                    item.addClass(cellSelectingClass);
                }
                // 否则，清除样式
                else {
                    item.removeClass(cellSelectingClass);
                }
            });
        },
        /**
         * @description 鼠标在单元格上点击时，更新选择信息
         * @param event
         * @private
         */
        _onCellClick: function(event) {
            var cell = $(event.target),
                me = this,
                cellInfo = me._getCellInfo(cell),
                item, itemInfo;

            // 更新样式
            me.formElement.find("." + cellClass).each(function(index, el) {
                item = $(el);
                itemInfo = me._getCellInfo(item);

                // 如果在选择范围内，设置样式
                if (itemInfo.row <= cellInfo.row && itemInfo.col <= cellInfo.col && !item.hasClass(cellOldClass)) {
                    item.addClass(cellNewClass);
                }
                // 否则，清除样式
                else {
                    item.removeClass(cellNewClass);
                }

                // 如果在选择范围之外，并且是原value选择的，设置删除样式
                if ((itemInfo.row > cellInfo.row || itemInfo.col > cellInfo.col) && item.hasClass(cellOldClass)) {
                    item.addClass(cellRmvClass);
                } else {
                    item.removeClass(cellRmvClass);
                }
            });

            // 更新value
            me.options.value.value = {
                rows: cellInfo.row + 1,
                columns: cellInfo.col + 1
            };

            // 触发事件
            me._onValueChange();
        },

        /**
         * @description 选择值改变事件
         * @private
         */
        _onValueChange: function() {
            var me = this,
                value, oldValue, newValue;

            // 如果没有注册监听，直接返回
            if ($.isNull(me.handlers)) {
                return;
            }

            // 查找change事件的监听，并执行
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "change") {
                    value = me._getValue();
                    newValue = value ? value.value : {};
                    oldValue = me.oldValue ? me.oldValue.value : {};

                    // 新旧值都是空，没有变化
                    if ($.isNull(newValue.rows) && $.isNull(oldValue.rows)) {
                        return;
                    }

                    // 新旧值不同，触发事件回调函数
                    if (oldValue.rows !== newValue.rows || oldValue.columns !== newValue.columns) {
                        if ($.isFunction(func)) {
                            func.call(this, null, value);
                        }
                        me.oldValue = $.objClone(value);
                    }
                }
            });
        }
    });

    /**
     * 创建CellSelect
     * @name Sweet.form.CellSelect
     * @class
     * @extends Sweet.form
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example
     * var sweetCS = new Sweet.form.CellSelect({
     *      width: "100%",
     *      height: "100%",
     *      value: {text: '', value: {rows: 2, columns: 2}, data: null},
     *      renderTo: "cells"
     * });
     * sweetCS.addListener("change", function(event, val){
     *      $.log("change happend!");
     * });
     * <pre>
     * </pre>
     */
    Sweet.form.CellSelect = $.sweet.widgetFormCellSelect;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--按钮
 * 2013/1/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * 保存组件对象
     */
    var buttonClass = "sweet-form-button",
        buttonTextAlignLeftClass = "sweet-form-button-textalign-left",
        buttonDisabledClass = "sweet-form-button-disabled",
        buttonHighlightClass = "sweet-form-button-highlight",
        buttonHighlightDisabledClass = "sweet-form-button-highlight-disabled",
        buttonFormerImaCls = "sweet-form-button-formerIma",
        formerTextCls = "sweet-form-button-formerText",
        textImageCls = "sweet-form-button-formerText-image",
        divPanelClass = "sweet-form-button-menuPanel",
        buttonArrowClass = "sweet-form-button-arrow",
        disablePostfix = "-gray",
        operType = Sweet.constants.operType,
        oldMenuId;
    imageTypeObj = {};
    imageTypeObj[operType.ADD] = "sweet-form-button-image-add";
    imageTypeObj[operType.MODIFY] = "sweet-form-button-image-modify";
    imageTypeObj[operType.DELETE] = "sweet-form-button-image-delete";
    imageTypeObj[operType.MOVE] = "sweet-form-button-image-move";
    imageTypeObj[operType.ACTIVE] = "sweet-form-button-image-active";
    imageTypeObj[operType.TERMINATE] = "sweet-form-button-image-terminate";
    imageTypeObj[operType.SAVEAS] = "sweet-form-button-image-saveas";
    imageTypeObj[operType.CONFIRM] = "sweet-form-button-image-confirm";
    imageTypeObj[operType.IMPORT] = "sweet-form-button-image-import";
    imageTypeObj[operType.EXPORT] = "sweet-form-button-image-export";
    imageTypeObj[operType.REFRESH] = "sweet-form-button-image-refresh";

    $.widget("sweet.widgetFormButton", $.sweet.widgetForm, /** @lends Sweet.form.Button.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-button]",
        defaultElement: "<button>",
        type: "button",
        eventNames: /** @lends Sweet.form.Button.prototype*/
        {
            /**
             * @event
             * @description 单击事件,参数为两个(event, data)
             */
            click: "单击事件",
            /**
             * @event
             * @description 按钮菜单击事件,参数为两个(event, data)
             */
            menuClick: "按钮菜单击事件"
        },
        // 按钮类组件公共配置参数
        options: /** @lends Sweet.form.Button.prototype*/
        {
            /**
             * @description 按钮高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 按钮宽度
             * @type {String/Number}
             * @default 70px
             */
            width: 70,
            /**
             * @description 图片类型，现提供的值有:modify,add,delete,move,active,
             *                                     terminate,save,confirm,import,export,refresh
             * @type {String}
             * @default ""
             */
            imageType: "",
            /**
             * @description 接受参数值
             * @type {String/Number/object}
             * @default {value: "", text: "", data:null}
             */
            value: {
                value: "",
                text: "",
                data: null
            },
            /**
             * @description 按钮是否高亮显示
             * @type {Boolean}
             * @default false
             */
            highLight: false,
            /**
             * @description 按钮是否有提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * @description 设置按钮是否含有菜单，默认没有菜单
             * @type {Boolean}
             * @default false
             */
            menu: false,
            /**
             * @description 设置按钮菜单数据，当menu配置true时有效
             * @type {Array}
             * @default null
             */
            data: null
        },

        /**
         * @description 设置按钮菜单数据
         * @public
         * @param {Object} data 菜单数据, 格式形如：[{"value": 11, "text": "开始定界"},{"value": 12, "text": "结束定界"}]
         */
        setMenuData: function(data) {
            var me = this;
            if ($.isNotNull(data) && me.options.menu) {
                me.options.data = data;
                if (me.btnMenu) {
                    me.btnMenu.setData(data);
                }
            }
        },

        /**
         * @description 设置按钮置灰状态的菜单数据
         * @public
         * @param {Array} data设置是否置灰状态的菜单数据，格式形如：[{"value": 3, "text": "Three","disabled": false}]
         */
        setMenuDisable: function(data) {
            var me = this;
            if ($.isNotNull(data) && me.btnMenu) {
                me.btnMenu.setDisabled(data);
            }
        },

        /**
         * @description 重新绘制组件
         * @private
         */
        _doLayout: function() {},

        /**
         * @description 创建含菜单的按钮样式
         */
        _createMenuBtnStyle: function() {
            var me = this;
            if (me.formEl.find("." + buttonArrowClass)) {
                me.formEl.find("." + buttonArrowClass).remove();
            }
            me.btnDownArrow = $("<span>").addClass(buttonArrowClass).appendTo(me.formElement);
        },

        /**
         * @private
         * @description 创建按钮
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options;
            me._createButtonField();

            //设置菜单按钮样式
            if (options.menu) {
                me._createMenuBtnStyle();
            }
        },

        /**
         * @private
         * @description 创建按钮, 子类可覆盖实现
         */
        _createButtonField: function() {
            var me = this,
                opt = me.options,
                value = opt.value,
                imgType = opt.imageType,
                el = me.formElement = $('<button type="button">').appendTo(me.formEl),
                txtEl = me.formerTextEl = $('<div class=' + formerTextCls + '>');
            //事件绑定在创建时就应该存在，只是disabled时判断是否触发给用户
            el.bind("click", {
                "me": me
            }, me._onClick);
            if (imgType) {
                me.formerImageEl = $('<span style="float:left;">')
                    .addClass(buttonFormerImaCls + " " + imageTypeObj[imgType]).appendTo(el);
                el.addClass(buttonTextAlignLeftClass);
                txtEl.addClass(textImageCls);
            }
            txtEl.html(value.text).appendTo(el);
            if ($.isNotNull(opt.vID)) {
                el.attr("id", opt.vID);
            }

            if (opt.tip) {
                //提示的详情
                opt.tipText ? el.attr("title", opt.tipText) : el.attr("title", value.text);
            }

            // 缓存数据
            $.data(el[0], "value", value);
        },

        /**
         * @private
         * @description 关闭浮动面板
         */
        _closeFloatPanel: function() {
            var me = this;
            if (me.divPanelEl) {
                me.divPanelEl.empty().remove();
                me.divPanelEl = null;
            }
        },

        /**
         * @private
         * @description 单击事件
         * @param {Object} event 按钮单击对象
         */
        _onClick: function(event) {
            var me = event.data.me,
                opt = me.options,
                click = opt.click,
                value = null,
                disabled = opt.disabled;
            //只有disabled为false时才触发用户监听的事件
            if (!disabled) {
                value = me._getValue();
                //设置按钮菜单配置时，在点击按钮时创建菜单
                if (opt.menu) {
                    var id = me.menuId = opt.id + "sweet-btnMenu",
                        oldMenuDivJq = null;

                    if (oldMenuId !== id) {
                        if ($.isNotNull(oldMenuId)) {
                            oldMenuDivJq = $("#" + oldMenuId);
                            oldMenuDivJq.empty().remove();
                            oldMenuDivJq.parent("." + divPanelClass + " " + me.floatBgClass).empty().remove();
                        }
                        oldMenuId = id;
                    }

                    me._createMenuBtnStyle();
                    me._createMenuCmp(id);

                    me.divPanelEl.show();
                    if (me.divPanelEl && me.divPanelEl.css("display") === "block") {
                        event.stopPropagation();
                    }
                }

                if (click && $.isFunction(click)) {
                    me._trigger("click", me, value);
                }
                //如果两种方式都监听了，都触发
                me._triggerHandler(event, "click", value);
            }
        },

        /**
         *  @description 创建按钮菜单组件
         */
        _createMenuCmp: function(id) {
            var me = this,
                left = 0,
                top = me.options.height;
            if (me.divPanelEl) {
                me.divPanelEl.remove();
                me.divPanelEl = null;
            }
            me.divPanelEl = $("<div>").addClass(divPanelClass + " " + me.floatBgClass).hide().appendTo(me.formEl);
            me.divFloatPanelEi = $("<div>").appendTo(me.divPanelEl);

            me.divFloatPanelEi.attr("id", id);
            me.btnMenu = new Sweet.menu.Menu({
                renderTo: id,
                X: left,
                Y: top,
                transparent: false,
                itemClick: function(evt, data) {
                    me.selectedMenuData = data;
                    me._triggerHandler(evt, "menuClick", me.selectedMenuData);
                },
                items: me.options.data
            });
        },

        /**
         * @description 给组件设置值
         * @private
         * @param {Object} obj 设置值，格式为{value: 值, text: 文本, data: Object}
         */
        _setValue: function(obj) {
            var me = this,
                fEl = me.formElement;
            if (obj) {
                fEl.html(obj.text);
                $.data(fEl[0], "value", obj);
                me.options.value = obj;
            }
        },

        /**
         * @description 返回组件值
         * @private
         * @return {Object} 返回值，格式为{value: 值, text: 文本, data: Object}
         */
        _getValue: function() {
            var me = this;
            return $.data(me.formElement[0]).value;
        },

        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled true禁用 false可用
         */
        _setDisabled: function(disabled) {
            var me = this,
                arrowCls = "",
                opt = me.options,
                fEl = me.formElement,
                imgEl = me.formerImageEl,
                hl = me.options.highLight,
                imgt = me.options.imageType,
                imgTypeObj = imageTypeObj[imgt];

            if (disabled) {
                hl ? fEl.removeClass(buttonHighlightClass).addClass(buttonHighlightDisabledClass) : fEl.removeClass(buttonClass).addClass(buttonDisabledClass);
                if (opt.menu && me.btnDownArrow) {
                    arrowCls = buttonArrowClass + disablePostfix;
                    me.btnDownArrow.removeClass().addClass(arrowCls);
                }
                imgt ? imgEl.removeClass(imgTypeObj).addClass(imgTypeObj + disablePostfix) : "";
            } else {
                hl ? fEl.removeClass(buttonHighlightDisabledClass).addClass(buttonHighlightClass) : fEl.removeClass(buttonDisabledClass).addClass(buttonClass);
                if (opt.menu && me.btnDownArrow) {
                    arrowCls = buttonArrowClass;
                    me.btnDownArrow.removeClass().addClass(arrowCls);
                }
                imgt ? imgEl.removeClass(imgTypeObj + disablePostfix).addClass(imgTypeObj) : "";
            }
        },

        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this,
                fEl = me.formElement;
            fEl ? fEl.unbind() : "";
        }
    });
    /**
     * 按钮
     * @name Sweet.form.Button
     * @class 
     * @extends Sweet.form
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     * sweetButton = new Sweet.form.Button({
     *     value : {value: 2, text: "button"},
     *     imageType : "add",
     *     renderTo : "sweet-button"
     * });
     * sweetButton.addListener("click", function(event, data){
     *     $.log("Click happend!");
     *  });
     * </pre>
     */
    Sweet.form.Button = $.sweet.widgetFormButton;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--单选按钮组
 * 2013/4/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    /**
     * 保存组件对象
     */
    var radioGroupClass = "sweet-form-radioGroupEl",
        autoClass = "sweet-form-autoWid-autoHeight",
        radioboxUnCheckedClass = "sweet-form-radioGroup-unchecked",
        radioboxCheckedClass = "sweet-form-radioGroup-checked",
        radioboxLiClass = "sweet-form-radiobox-li",
        checkboxLabelDivCls = "sweet-form-checkbox-labelDiv",
        labelClass = "sweet-form-checkbox-label",
        radioCheckedDisabledClass = "sweet-form-radio-checked-disabled",
        radioUnCheckedDisabledClass = "sweet-form-radio-unchecked-disabled",
        _UUID = 0;

    $.widget("sweet.widgetFormRadiogroup", $.sweet.widgetForm, /** @lends Sweet.form.RadioGroup.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-radioboxgroup]",
        eventNames: /** @lends Sweet.form.RadioGroup.prototype*/
        {
            /**
             * @event
             * @description 单击事件,参数为两个(event, data)
             */
            click: "单击事件",
            /**
             * @event
             * @description change事件,参数为两个(event, data)
             */
            change: "change事件"
        },
        options: /** @lends Sweet.form.RadioGroup.prototype*/
        {
            /**
             * @description 是否平均高度
             * @type {Boolean}
             * @default true
             */
            averageHeight: true,
            /**
             * @description 基础数据
             * @type {Array}
             * @default []
             */
            data: [],
            /**
             * @description 列数
             * @type {String/Number}
             * @default auto
             */
            columns: "auto",
            /**
             * @description 是否垂直排列
             * @type {Boolean}
             * @default false
             */
            vertical: false,
            /**
             * @description item行间距
             * @type {Number}
             * @default 5
             */
            padding: 5,
            /**
             * @description 是否显示选项的提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @description 重新设置基础数据
         * @param {object} data 组件data值
         */
        setData: function(data) {
            this._removeItems();
            this.options.data = data;
            this._createRadioboxGroup();
            this._doLayout();
        },
        /**
         * @description 重置组件，只支持选项为文字的情况
         */
        reset: function() {
            var me = this;
            if (me._arrHasObject(me.originalData)) {
                return;
            }
            me.setData(me.originalData);
        },
        /**
         * @description 设置是否可编辑属性
         * @private
         * @param {Boolean} disabled true:禁用, false:可用
         */
        setDisabled: function(disabled) {
            var me = this,
                data = me.options.data,
                liEl, aLiEi, liElLabelID,
                allLiEl = me.ulEl.children("li");
            me.options.disabled = disabled;
            me.disabled = disabled;

            //外部组件
            $.each(data, function(index, val) {
                if ("object" === typeof val.text && $.isFunction(val.text.setDisabled) && "boolean" === $.type(disabled)) {
                    val.text.setDisabled(disabled);
                }
            });

            allLiEl.each(function(index, el) {
                liEl = $(el);
                aLiEi = liEl.children("a");

                if (disabled) {
                    if (aLiEi.hasClass(radioboxCheckedClass)) {
                        aLiEi.removeClass(radioboxCheckedClass).addClass(radioCheckedDisabledClass);
                    } else if (aLiEi.hasClass(radioboxUnCheckedClass)) {
                        aLiEi.removeClass(radioboxUnCheckedClass).addClass(radioUnCheckedDisabledClass);
                    }
                } else {
                    if (aLiEi.hasClass(radioCheckedDisabledClass)) {
                        aLiEi.removeClass(radioCheckedDisabledClass).addClass(radioboxCheckedClass);
                    } else if (aLiEi.hasClass(radioUnCheckedDisabledClass)) {
                        aLiEi.removeClass(radioUnCheckedDisabledClass).addClass(radioboxUnCheckedClass);
                    }
                }
            });
        },
        /**
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                data = options.data,
                liElHeight,
                aELHeight,
                allLiEl = me.ulEl.children("li"),
                cmpHeight, cmpHeightBuf, marginTop, liEl;

            if (!me.rendered) {
                return;
            }

            /* 注：
             * 每个item的宽度通过百分比控制，在create时就已经确定，这里不再计算；
             * 这里只进行高度的处理：
             *   1. 如果averageHeight=true，高度通过百分比控制，在创建时确定，这里不需要再处理
             *   2. 否则，这里需要计算高度
             *     1. li高度以最高的那个内容div来确定
             *     2. 行间距由options.padding确定
             * 两种情况下，都要对LI内部的内容进行垂直居中的处理
             */

            // 处理LI的高度
            liElHeight = 0;
            cmpHeightBuf = [];

            if (options.averageHeight !== true) {
                // 首先确定最大的高度
                allLiEl.each(function(index, el) {
                    liEl = $(el);
                    cmpHeight = liEl.children("div").children("div").height();
                    if (cmpHeight > liElHeight) {
                        liElHeight = cmpHeight;
                    }
                    cmpHeightBuf.push(cmpHeight);
                });

                // 统一高度
                if (liElHeight < 20) {
                    liElHeight = 20;
                }
                allLiEl.height(liElHeight + options.padding);
            } else {
                liElHeight = allLiEl.eq(0).height();
            }

            /* 下面，处理垂直居中 */

            // li下面的check图标居中
            aELHeight = allLiEl.eq(0).children("a").height();
            marginTop = liElHeight > aELHeight ? (liElHeight - aELHeight) / 2 : 0;
            allLiEl.children("a").css("margin-top", marginTop);

            // 外部组件上下居中
            allLiEl.each(function(index, el) {
                liEl = $(el);
                cmpHeight = cmpHeightBuf[index] || liEl.children("div").children("div").height();
                marginTop = liElHeight > cmpHeight ? (liElHeight - cmpHeight) / 2 : 0;
                liEl.children("div").css({
                    "padding-top": marginTop
                });
            });

            // 外部组件的layout
            $.each(data, function(index, val) {
                if ("object" === typeof val.text && $.isFunction(val.text.doLayout)) {
                    val.text.doLayout();
                }
            });
        },
        /**
         * @description 生成按钮
         * @private
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                data = options.data,
                ulEl = me.ulEl = $("<ul>").addClass(autoClass).appendTo(me.formEl);

            // 重置时需要的数据
            me.originalData = data;

            // 生成多选框组
            me._createRadioboxGroup();
        },
        /**
         * @description 渲染内容
         * @private
         */
        _afterRenderFormWidget: function() {
            this._renderItems();
        },
        /**
         * @description 渲染子组件
         * @private
         */
        _renderItems: function() {
            var me = this,
                innerDiv,
                innerDivId,
                data = me.options.data,
                liList = me.ulEl.children("li");

            if (!me.rendered) {
                return;
            }

            $.each(data, function(index, val) {
                innerDiv = liList.eq(index).children("div");
                innerDivId = innerDiv.attr("id");
                // 对象
                if ("object" === typeof val.text) {
                    val.text.render(innerDivId);
                }
                // 文字
                else {
                    var optionDdivEl = $("<div>").html(val.text).addClass(labelClass).appendTo(innerDiv);
                    if (me.options.tip) {
                        optionDdivEl.attr("title", val.text);
                    }
                }
            });
        },
        /**
         * @description 销毁所有子组件
         * @private
         */
        _removeItems: function() {
            var me = this,
                allLi,
                data = me.options.data;

            // 销毁子对象
            $.each(data, function(index, val) {
                // 对象
                if ("object" === typeof val.text && $.isFunction(val.text._destroyDom)) {
                    val.text._destroyDom();
                }
            });

            // 清除LI
            allLi = me.ulEl.find("li");
            allLi.remove();

            // 保存多选组的div对象
            me.dataObj = {};
            me.dataObj.length = 0;

            // 保存li对象
            me.liArrayObj = {};
            me.liArrayObj.length = 0;
        },
        /**
         * @description 更换图片
         * @private
         */
        _createRadioboxGroup: function() {
            var me = this,
                options = me.options,
                data = options.data,
                rows, columns, width, height,
                liElList;

            if (data.length < 1) {
                return;
            }

            // 保存多选组的div对象
            me.dataObj = {};
            me.dataObj.length = 0;

            // 保存li对象
            me.liArrayObj = {};
            me.liArrayObj.length = 0;
            me.haveChecked = null;
            $.each(data, function(key, value) {
                me._createOneRadiobox(value, key);
            });
            me.haveChecked = null;
            // 设置li宽高。用百分比来控制宽度，性能更好
            if ("number" === typeof options.columns) {
                columns = options.columns;
                rows = parseInt(data.length / columns, 10);
                rows = (columns * rows === data.length) ? rows : rows + 1;
            } else {
                if (!options.vertical) {
                    columns = data.length || 1;
                    rows = 1;
                } else {
                    columns = 1;
                    rows = data.length;
                }
            }

            if (options.all) {
                rows += 1;
            }

            liElList = this.ulEl.children("li");
            options.rows = rows;
            width = Math.floor(100 / columns) + "%";
            if (options.all) {
                liElList.slice(1).css("width", width);
            } else {
                liElList.css("width", width);
            }

            // 高度的处理
            if (options.averageHeight === true) {
                height = Math.floor(100 / rows) + "%";
                liElList.css("height", height);
            }

            // 渲染
            me._renderItems();
        },
        /**
         * @description 创建一个radio组件
         * @private
         * @param {object} val 一条数据
         * @param {number} index 索引
         */
        _createOneRadiobox: function(val, index) {
            var me = this,
                liEl = $("<li>").addClass(radioboxLiClass).appendTo(me.ulEl),
                aEl = $("<a>").addClass(radioGroupClass).appendTo(liEl),
                innerDiv = $("<div>").addClass(checkboxLabelDivCls).appendTo(liEl),
                aCls = radioboxUnCheckedClass,
                idPrefix = "sweet-form-checkboxgroup-uiCmp-",
                innerDivId = idPrefix + _UUID++;

            innerDiv.attr("id", innerDivId);
            me.dataObj[val.value] = {
                value: val,
                checked: false
            };
            // 初始化时，只能有一个被选中
            if (val.checked && !me.haveChecked) {
                aCls = radioboxCheckedClass;
                me.dataObj[val.value] = {
                    value: val,
                    checked: val.checked
                };
                me.dataObj.length++;
                me.haveChecked = true;
            }
            if ($.isNotNull(me.options.vID)) {
                aEl.attr("id", me.options.vID + "_" + index);
            }
            aEl.attr("value", val.value)
                .addClass(aCls)
                .bind("click", {
                "me": me,
                "obj": aEl
            }, me._onSingleClick);
            me.liArrayObj[val.value] = liEl;
            me.liArrayObj.length++;
        },
        /**
         * @private
         * @description 点击radiobox事件
         * @param {Object} e 事件对象
         */
        _onSingleClick: function(e) {
            var me = e.data.me,
                obj = e.data.obj,
                value,
                checked;
            me.oldValue = me.getValue();
            if (!me.options.disabled) {
                me._changImage(obj);
                value = me.getValue();
                me._triggerHandler(e, "click", {
                    value: value,
                    checked: checked
                });
                if (!$.equals(me.oldValue, value)) {
                    me._triggerHandler(e, "change", value);
                }
            }
        },
        /**
         * @description 更换图片
         * @private
         * @param {Object} obj 单选框对象
         * @return {Boolean} true选中 false未选中
         */
        _changImage: function(obj) {
            var me = this;
            if (obj.hasClass(radioboxCheckedClass)) {
                return;
            } else if (obj.hasClass(radioboxUnCheckedClass)) {
                // 去掉上一次选中的
                var lastCheckedObj = me.ulEl.children("li")
                    .children("a." + radioboxCheckedClass);
                if (lastCheckedObj.length > 0) {
                    var lastCheckedValue = lastCheckedObj.attr("value");
                    me.dataObj[lastCheckedValue].checked = false;
                    lastCheckedObj.removeClass(radioboxCheckedClass)
                        .addClass(radioboxUnCheckedClass);
                }
                // 选中当前的
                obj.removeClass(radioboxUnCheckedClass).addClass(radioboxCheckedClass);
                me.dataObj[obj.attr("value")].checked = true;
            } else {
                me._error("Unsupport type.");
            }
            return;
        },
        /**
         * @description 获取值
         * @private
         * @return {Array} 值
         */
        _getValue: function() {
            var me = this,
                data = [];

            for (var value in me.dataObj) {
                if ("length" !== value && me.dataObj[value].checked) {
                    data.push(me.dataObj[value].value);
                }
            }
            return data[0];
        },
        /**
         * @description 设置值
         * @private
         * @param {project} data 值
         */
        _setValue: function(data) {
            var me = this,
                val, liObj,
                val1, liObj1,
                lastCheckedObj;
            if ($.isNull(data) || data.length < 1 || me.options.disabled) {
                return;
            }
            me.oldValue = me.getValue();

            // 去掉上一次选中的
            lastCheckedObj = me.ulEl.children("li").children("a." + radioboxCheckedClass);
            if (lastCheckedObj && 0 < lastCheckedObj.length) {
                var lastCheckedValue = lastCheckedObj.attr("value");
                me.dataObj[lastCheckedValue].checked = false;
                lastCheckedObj.removeClass(radioboxCheckedClass)
                    .addClass(radioboxUnCheckedClass);
            }

            // 设置对勾
            for (var i = 0; i < data.length; i++) {
                val = data[i];
                liObj = me.dataObj[val.value] ? me.dataObj[val.value].value : null;
                // 若数据一致，才进行设置
                if (liObj) {
                    me.liArrayObj[val.value].children("a")
                        .removeClass()
                        .addClass(radioGroupClass + " " + radioboxCheckedClass);
                    me.dataObj[val.value].checked = true;
                }
            }

            // 设置选中
            val1 = data;
            liObj1 = me.dataObj[val1.value] ? me.dataObj[val1.value].value : null;
            // 若数据一致，才进行设置
            if (liObj1) {
                me.liArrayObj[val1.value].children("a")
                    .removeClass(radioboxUnCheckedClass)
                    .addClass(radioboxCheckedClass);
                me.dataObj[val1.value].checked = true;
            }
            //为setValue时添加change事件
            if (!me.options.disabled) {
                var value = me.getValue();
                if (!$.equals(me.oldValue, value)) {
                    me._triggerHandler(null, "change", value);
                }
            }
        },
        /**
         * @description 判断数据中是否有对象
         * @private
         * @param {Object} data 数据
         */
        _arrHasObject: function(data) {
            var me = this,
                hasObject = false;
            data = data || [];
            $.each(data, function(index, val) {
                // 对象
                if ("object" === typeof val.text) {
                    hasObject = true;
                }
            });
            return hasObject;
        }
    });

    /**
     * 单选按钮组
     * @name Sweet.form.RadioGroup
     * @class 
     * @extends Sweet.form
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     * var data = [
     *      {text: "第一个", value: "1", data: null, checked: false},
     *      {text: "第二个", value: "2", data: null, checked: true},
     *      {text: "第三个", value: "3", data: null, checked: false},
     *      {text: "第四个", value: "4", data: null, checked: false}
     *     ];
     * sweetRadioGroup = new Sweet.form.RadioGroup({
     *     width : 300,
     *     height : 20,
     *     data: data,
     *     renderTo : "sweet-radiobox"
     * });
     * sweetRadioGroup.addListener("change", function(event, val){
     *     $.log("change happend!");
     *});
     * </pre>
     */
    Sweet.form.RadioGroup = $.sweet.widgetFormRadiogroup;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--单选按钮
 * 2013/1/14
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var radioClass = "sweet-form-radio",
        radioLabelClass = "sweet-form-radio-label",
        autoClass = "sweet-form-autoWid-autoHeight",
        radioboxLiClass = "sweet-form-radiobox-li",
        radioCheckedClass = "sweet-form-radio-checked",
        radioUnCheckedClass = "sweet-form-radio-unchecked",
        radioCheckedDisabledClass = "sweet-form-radio-checked-disabled",
        radioUnCheckedDisabledClass = "sweet-form-radio-unchecked-disabled",
        hrefJs = "javascript:void(0);";
    $.widget("sweet.widgetFormRadio", $.sweet.widgetForm, /** @lends Sweet.form.Radio.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-radio]",
        type: "radio",
        eventNames: /** @lends Sweet.form.Radio.prototype*/
        {
            /**
             * @event
             * @description 单击事件,参数为两个(event, checked)
             */
            click: "单击事件",
            /**
             * @event
             * @description change事件,参数为两个(event, data)
             */
            change: "change事件"
        },
        // 复选按钮配置参数
        options: /** @lends Sweet.form.Radio.prototype*/
        {
            /**
             * @description 是否选中
             * @type {Boolean}
             * @default false
             */
            checked: false,
            /**
             * @description 高度
             * @type {String/Number}
             * @default 18px
             */
            height: 18,
            /**
             * @description 宽度
             * @type {String/Number}
             * @default 18px
             */
            width: 18,
            /**
             * @description 是否显示提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @description 设置组件状态，选中还是未选中
         * @param {Boolean} checked: true表示选中，false表示未选中
         */
        setChecked: function(checked) {
            var me = this;
            if ("boolean" !== $.type(checked)) {
                me._error("setChecked() Input parameter is not a Boolean type!");
                return;
            }
            me.options.checked = checked;
            if (checked) {
                me.formElement.removeClass(radioUnCheckedClass).addClass(radioCheckedClass);
            } else {
                me.formElement.removeClass(radioCheckedClass).addClass(radioUnCheckedClass);
            }
        },
        /**
         * @description 返回组件选中还是未选中状态
         * @return {Boolean} true： 选中，false：未选中
         */
        getChecked: function() {
            return this.options.checked;

        },
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                labelEl = me.labelEl,
                formElement = me.formElement,
                liEl = me.liEl,
                labelW = 0,
                labelH = 0,
                aW = 0,
                aH = 0,
                liW = 0,
                liH = 0,
                radioWidth = me.formElement.width();
            if (options.value.text) {
                me.divEl.css("padding-left", radioWidth + 6);
            }
            labelW = labelEl.width();
            aW = formElement.width();
            labelH = labelEl.height();
            aH = formElement.height();
            liW = labelW + aW;
            liH = labelH > aH ? labelH : aH;
            liEl.css("height", liH);
            liEl.css("min-height", liH);
        },
        /**
         * @private
         * @description 创建复选按钮
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                val = options.value,
                ulEl = me.ulEl = $("<ul>").addClass(autoClass).appendTo(me.formEl),
                liEl = me.liEl = $("<li>").addClass(radioboxLiClass).appendTo(ulEl),
                formElement = me.formElement = $("<a>").attr("href", hrefJs).addClass(radioClass)
                    .bind("click", {
                    "me": me
                }, me._onclick)
                    .appendTo(liEl),
                divEl = me.divEl = $("<div>"),
                labelEl = me.labelEl = $("<label>").addClass(radioLabelClass);
            if ($.isNotNull(options.vID)) {
                formElement.attr("id", options.vID);
            }
            // 是否选中
            me.setChecked(options.checked);
            // 缓存数据
            $.data(formElement[0], "value", val);
            // 是否复选框后有文字
            if (val.text) {
                divEl.appendTo(liEl);
                labelEl.html(val.text).appendTo(divEl);
            }
            if (options.tip) {
                labelEl.attr("title", val.text);
            }
            // 是否复选框后有文字
            if ($.isNotNull(val.text) && !options.disabled) {
                me.labelEl.bind("click", {
                    "me": me
                }, me._onclick);
            }
        },

        /**
         * @private
         * @description 单击事件
         * @param {Object} event 按钮单击对象
         */
        _onclick: function(event) {
            var me = event.data.me,
                value = null,
                opt = me.options,
                result;
            if (!opt.disabled) {
                value = me._getValue();
                if (me.formElement.hasClass(radioCheckedClass)) {
                    me.setChecked(false);
                } else {
                    me.setChecked(true);
                }
                if (opt.click && $.isFunction(opt.click)) {
                    result = me._trigger("click", me, opt.checked);
                }

                result = me._triggerHandler(event, "click", opt.checked);
                // 返回false时，阻止事件冒泡
                if ("boolean" === $.type(result) && !result) {
                    event.stopImmediatePropagation();
                }
            }
        },
        /**
         * @description 给组件设置值
         * @private
         * @param {Object} obj 设置值，格式为{value: 值, text: 文本, data: Object}
         */
        _setValue: function(obj) {
            var me = this;
            me.oldValue = me.getValue();
            if (obj.text) {
                me.divEl.appendTo(me.liEl);
                me.labelEl.html(obj.text).appendTo(me.divEl);
                $.data(me.formElement[0], "value", obj);
                me.options.value = obj;
            }
            if (!$.equals(me.oldValue, obj)) {
                me._triggerHandler(null, "change", me.getValue());
            }
        },
        /**
         * @description 返回组件值
         * @private
         * @return {Object} 返回值，格式为{value: 值, text: 文本, data: Object}
         */
        _getValue: function() {
            var me = this;
            return me.options.checked ? $.data(me.formElement[0]).value : null;
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled true禁用 false可用
         */
        _setDisabled: function(disabled) {
            var me = this,
                fomrEI = me.formElement;

            if (disabled) {
                if (fomrEI.hasClass(radioCheckedClass)) {
                    fomrEI.removeClass(radioCheckedClass).addClass(radioCheckedDisabledClass);
                } else if (fomrEI.hasClass(radioUnCheckedClass)) {
                    fomrEI.removeClass(radioUnCheckedClass).addClass(radioUnCheckedDisabledClass);
                }
            } else {
                if (fomrEI.hasClass(radioCheckedDisabledClass)) {
                    fomrEI.removeClass(radioCheckedDisabledClass).addClass(radioCheckedClass);
                } else if (fomrEI.hasClass(radioUnCheckedDisabledClass)) {
                    fomrEI.removeClass(radioUnCheckedDisabledClass).addClass(radioUnCheckedClass);
                }
            }
        },

        /**
         * @private
         * @description 删除注册监听事件
         * @param {String} eventName 事件名称
         */
        _removeListener: function(eventName) {
            var me = this,
                formEI = me.formElement,
                optVal = me.options.value;

            if (!$.isNull(eventName)) {
                formEI.unbind(eventName);
                // 是否复选框后有文字
                if (optVal.text) {
                    me.labelEl.unbind(eventName);
                }
            } else {
                $.each(me.handlers, function(eventName, func) {
                    formEI.unbind(eventName);
                    // 是否复选框后有文字
                    if (optVal.text) {
                        me.labelEl.unbind(eventName);
                    }
                });
            }
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this,
                fEl = me.formElement,
                labelEl = me.labelEl;
            fEl ? fEl.unbind() : "";
            labelEl ? labelEl.unbind() : "";
        }
    });

    /**
     * 单选按钮
     * @name Sweet.form.Radio
     * @class
     * @extends Sweet.form
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example
     * <pre>
     * var sweetRadio = new Sweet.form.Radio({
     *     width : 300,
     *     height : 20,
     *     renderTo : "sweet-radiobox",
     *     value : {"value":"1", "text":"P2P"}
     * });
     * sweetRadio.addListener("click", function(event, val){
     *     $.log("click happend! check is:" + val);
     * });
     * </pre>
     */
    Sweet.form.Radio = $.sweet.widgetFormRadio;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件 -- 复选按钮组
 * 2013/1/18
 * http://www.huawei.com
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    /**
     * 保存组件对象
     */
    var checkboxClass = "sweet-form-checkboxgroup",
        checkboxUnCheckedClass = "sweet-form-checkbox-unchecked",
        checkboxCheckedClass = "sweet-form-checkbox-checked",
        checkboxLiClass = "sweet-form-checkbox-li",
        checkboxLabelDivCls = "sweet-form-checkbox-labelDiv",
        labelClass = "sweet-form-checkbox-label",
        autoClass = "sweet-form-autoWid-autoHeight",
        checkboxUnCheckedDisabledClass = "sweet-form-checkbox-unchecked-disabled",
        checkboxCheckedDisabledClass = "sweet-form-checkbox-checked-disabled",
        _UUID = 0;

    $.widget("sweet.widgetFormCheckboxgroup", $.sweet.widgetForm, /** @lends Sweet.form.CheckboxGroup.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-checkboxgroup]",
        eventNames: /** @lends Sweet.form.CheckboxGroup.prototype*/
        {
            /**
             * @event
             * @description 单击事件,参数为两个(event, data)
             */
            click: "单击事件",
            /**
             * @event
             * @description change事件,参数为两个(event, data)
             */
            change: "change事件"
        },
        options: /** @lends Sweet.form.CheckboxGroup.prototype*/
        {
            /**
             * @description 是否平均高度
             * @type {Boolean}
             * @default true
             */
            averageHeight: true,
            /**
             * @description 是否可全选
             * @type {Boolean}
             * @default false
             */
            all: false,
            /**
             * @description 基础数据
             * @type {Object}
             * @default null
             */
            data: [],
            /**
             * @description 列数
             * @type {String/Number}
             * @default auto
             */
            columns: "auto",
            /**
             * @description 是否垂直排列
             * @type {Boolean}
             * @default false
             */
            vertical: false,
            /**
             * @description item行间距
             * @type {Number}
             * @default 5
             */
            padding: 5,
            /**
             * @description 是否显示选项的提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @description 重新设置基础数据
         * @param {object} data 组件data值
         */
        setData: function(data) {
            this._removeItems();
            this.options.data = data;
            this._createCheckboxGroup();
            this._doLayout();
        },
        /**
         * @description 重置组件，只支持选项为文字的情况
         */
        reset: function() {
            var me = this;
            if (me._arrHasObject(me.originalData)) {
                return;
            }
            me.setData(me.originalData);
        },
        /**
         * @description 设置是否可编辑
         * @private
         * @param {Boolean} disabled true:禁用, false:可用
         */
        setDisabled: function(disabled) {
            var me = this,
                data = me.options.data,
                liEl, aLiEi, liElLabelID,
                allLiEl = me.ulEl.children("li");
            me.options.disabled = disabled;
            me.disabled = disabled;

            //外部组件
            $.each(data, function(index, val) {
                if ("object" === typeof val.text && $.isFunction(val.text.setDisabled) && "boolean" === $.type(disabled)) {
                    val.text.setDisabled(disabled);
                }
            });

            allLiEl.each(function(index, el) {
                liEl = $(el);
                aLiEi = liEl.children("a");

                if (disabled) {
                    if (aLiEi.hasClass(checkboxCheckedClass)) {
                        aLiEi.removeClass(checkboxCheckedClass).addClass(checkboxCheckedDisabledClass);
                    } else if (aLiEi.hasClass(checkboxUnCheckedClass)) {
                        aLiEi.removeClass(checkboxUnCheckedClass).addClass(checkboxUnCheckedDisabledClass);
                    }
                } else {
                    if (aLiEi.hasClass(checkboxCheckedDisabledClass)) {
                        aLiEi.removeClass(checkboxCheckedDisabledClass).addClass(checkboxCheckedClass);
                    } else if (aLiEi.hasClass(checkboxUnCheckedDisabledClass)) {
                        aLiEi.removeClass(checkboxUnCheckedDisabledClass).addClass(checkboxUnCheckedClass);
                    }
                }
            });
        },
        /**
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                data = options.data,
                liElHeight,
                aELHeight,
                allLiEl = me.ulEl.children("li"),
                cmpHeight, cmpHeightBuf, marginTop, liEl;

            if (!me.rendered) {
                return;
            }

            /* 注：
             * 每个item的宽度通过百分比控制，在create时就已经确定，这里不再计算；
             * 这里只进行高度的处理：
             *   1. 如果averageHeight=true，高度通过百分比控制，在创建时确定，这里不需要再处理
             *   2. 否则，这里需要计算高度
             *     1. li高度以最高的那个内容div来确定
             *     2. 行间距由options.padding确定
             * 两种情况下，都要对LI内部的内容进行垂直居中的处理
             */

            // 处理LI的高度
            liElHeight = 0;
            cmpHeightBuf = [];

            if (options.averageHeight !== true) {
                // 首先确定最大的高度
                allLiEl.each(function(index, el) {
                    liEl = $(el);
                    cmpHeight = liEl.children("div").children("div").height();
                    if (cmpHeight > liElHeight) {
                        liElHeight = cmpHeight;
                    }
                    cmpHeightBuf.push(cmpHeight);
                });

                // 统一高度
                if (liElHeight < 20) {
                    liElHeight = 20;
                }
                allLiEl.height(liElHeight + options.padding);
            } else {
                liElHeight = allLiEl.eq(0).height();
            }

            /* 下面，处理垂直居中 */

            // li下面的check图标居中
            aELHeight = allLiEl.eq(0).children("a").height();
            marginTop = liElHeight > aELHeight ? (liElHeight - aELHeight) / 2 : 0;
            allLiEl.children("a").css("margin-top", marginTop);

            // 外部组件上下居中
            allLiEl.each(function(index, el) {
                liEl = $(el);
                cmpHeight = cmpHeightBuf[index] || liEl.children("div").children("div").height();
                marginTop = liElHeight > cmpHeight ? (liElHeight - cmpHeight) / 2 : 0;
                liEl.children("div").css({
                    "padding-top": marginTop
                });
            });

            // 外部组件的layout
            $.each(data, function(index, val) {
                if ("object" === typeof val.text && $.isFunction(val.text.doLayout)) {
                    val.text.doLayout();
                }
            });
        },
        /**
         * @description 生成按钮
         * @private
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                data = options.data,
                ulEl = me.ulEl = $("<ul>").addClass(autoClass).appendTo(me.formEl),
                allEl, allAEl, allDivEl, textEl;
            // 重置时需要的数据
            me.originalData = data;

            // 是否有全选
            if (options.all) {
                allEl = me.allEl = $("<li>").addClass(checkboxLiClass);
                allAEl = me.allAEl = $("<a>").addClass(checkboxClass).appendTo(allEl);
                allDivEl = $("<div>").addClass(checkboxLabelDivCls).appendTo(allEl);
                textEl = $("<div>").addClass(labelClass).appendTo(allDivEl);
                if ($.isNotNull(options.vID)) {
                    allAEl.attr("id", options.vID + "_" + "all");
                }
                allAEl.bind("click", function(e) {
                    me._onAllClick(e, $(this));
                });

                textEl.text(Sweet.core.i18n.combobox.checkAll);
                allEl.appendTo(ulEl);
            }

            // 生成多选框组
            me._createCheckboxGroup();

            // 初始是否全选
            if (options.all) {
                me._setImage(allAEl, me.dataObj.length === me.checkedLength);
            }
        },
        /**
         * @description 渲染内容
         * @private
         */
        _afterRenderFormWidget: function() {
            this._renderItems();
        },
        /**
         * @description 渲染子组件
         * @private
         */
        _renderItems: function() {
            var me = this,
                innerDiv,
                innerDivId,
                data = me.options.data,
                liList = me.ulEl.children("li"),
                offset = me.options.all ? 1 : 0;

            if (!me.rendered) {
                return;
            }

            $.each(data, function(index, val) {
                innerDiv = liList.eq(index + offset).children("div");
                innerDivId = innerDiv.attr("id");
                // 对象
                if ("object" === typeof val.text) {
                    val.text.render(innerDivId);
                }
                // 文字
                else {
                    var optionDdivEl = $("<div>").html(val.text).addClass(labelClass).appendTo(innerDiv);
                    if (me.options.tip) {
                        optionDdivEl.attr("title", val.text);
                    }
                }
            });
        },
        /**
         * @description 销毁所有子组件
         * @private
         */
        _removeItems: function() {
            var me = this,
                data = me.options.data,
                allLi;

            // 销毁子对象
            $.each(data, function(index, val) {
                // 对象
                if ("object" === typeof val.text && $.isFunction(val.text._destroyDom)) {
                    val.text._destroyDom();
                }
            });

            // 清除LI
            allLi = me.ulEl.find("li");
            if (me.options.all) {
                allLi = allLi.slice(1);
            }
            allLi.remove();

            // 保存多选组的div对象
            me.dataObj = {};
            me.dataObj.length = 0;

            // 保存li对象
            me.liArrayObj = {};
            me.liArrayObj.length = 0;
        },
        /**
         * @private
         * @description 点击全选时触发
         * @param {Object} e 事件对象
         * @param {Object} self 复选框对象
         */
        _onAllClick: function(e, self) {
            var me = this,
                checked = false;
            if (!me.options.disabled) {
                checked = me._changImage(self);
                // 选中
                if (checked) {
                    me.checkedLength = me.dataObj.length;
                    me._setDataObj(checked);
                } else {
                    me.checkedLength = 0;
                    me._setDataObj(checked);
                }

                me._triggerHandler(e, "click", {
                    value: me.getValue(),
                    checked: checked
                });
                me._triggerHandler(e, "change", me.getValue());
            }
        },
        /**
         * @private
         * @description 设置数据选中状态
         * @param {Boolean} checked 是否选中
         */
        _setDataObj: function(checked) {
            var me = this;
            for (var value in me.dataObj) {
                if ("length" !== value) {
                    me.dataObj[value].checked = checked;
                    me._setImage(me.liArrayObj[value].children("a"), checked);
                }
            }
        },
        /**
         * @description 更换图片
         * @private
         */
        _createCheckboxGroup: function() {
            var me = this,
                options = me.options,
                data = options.data,
                rows, columns, width, height,
                liElList;

            // checkbox选中个数
            me.checkedLength = 0;
            if (data.length < 1) {
                return;
            }

            // 保存多选组的div对象
            me.dataObj = {};
            me.dataObj.length = 0;

            // 保存li对象
            me.liArrayObj = {};
            me.liArrayObj.length = 0;
            $.each(data, function(key, value) {
                me._createOneCheckbox(value, key);
            });

            // 如果有全选，判断全选是否选中
            if (me.allEl) {
                me._setImage(me.allAEl, me.dataObj.length === me.checkedLength);
            }

            // 设置li宽高。用百分比来控制宽度，性能更好
            if ("number" === typeof options.columns) {
                columns = options.columns;
                rows = parseInt(data.length / columns, 10);
                rows = (columns * rows === data.length) ? rows : rows + 1;
            } else {
                if (!options.vertical) {
                    columns = data.length || 1;
                    rows = 1;
                } else {
                    columns = 1;
                    rows = data.length;
                }
            }

            if (options.all) {
                rows += 1;
            }

            liElList = me.ulEl.children("li");
            options.rows = rows;
            width = Math.floor(100 / columns) + "%";
            if (options.all) {
                liElList.slice(1).css("width", width);
            } else {
                liElList.css("width", width);
            }

            // 高度的处理
            if (options.averageHeight === true) {
                height = Math.floor(100 / rows) + "%";
                liElList.css("height", height);
            }

            // 渲染
            me._renderItems();
        },
        /**
         * @description 更换图片
         * @private
         * @param {object} val 一条数据
         * @param {number} index 索引
         */
        _createOneCheckbox: function(val, index) {
            var me = this,
                liEl = $("<li>").addClass(checkboxLiClass).appendTo(me.ulEl),
                aEl = $("<a>").addClass(checkboxClass).appendTo(liEl),
                innerDiv = $("<div>").addClass(checkboxLabelDivCls).appendTo(liEl),
                aCls = checkboxUnCheckedClass,
                idPrefix = "sweet-form-checkboxgroup-uiCmp-",
                innerDivId = idPrefix + _UUID++;

            innerDiv.attr("id", innerDivId);
            if (val.checked) {
                aCls = checkboxCheckedClass;
                this.checkedLength++;
            }
            if ($.isNotNull(me.options.vID)) {
                aEl.attr("id", me.options.vID + "_" + index);
            }
            aEl.attr("value", val.value)
                .addClass(aCls)
                .bind("click", {
                "me": me,
                "obj": aEl
            }, me._onSingleClick);
            me.dataObj[val.value] = {
                value: val,
                checked: val.checked
            };
            me.dataObj.length++;
            me.liArrayObj[val.value] = liEl;
            me.liArrayObj.length++;
        },
        /**
         * @private
         * @description 单个checkbox点击事件
         * @param {Object} e 事件对象
         */
        _onSingleClick: function(e) {
            var me = e.data.me,
                obj = e.data.obj,
                value = $(e.target).attr("value"),
                checked;
            if (!me.options.disabled) {
                checked = me._changImage(obj);
                if (checked) {
                    me.dataObj[value].checked = true;
                    me.checkedLength++;
                } else {
                    me.dataObj[value].checked = false;
                    me.checkedLength--;
                }

                // 如果有全选，判断全选是否选中
                if (me.allEl) {
                    me._setImage(me.allAEl, me.dataObj.length === me.checkedLength);
                }
                me._triggerHandler(e, "click", {
                    value: me.dataObj[value].value,
                    checked: checked
                });
                me._triggerHandler(e, "change", me.getValue());
            }
        },
        /**
         * @private
         * @description 设置是否选中图片
         * @param {Object} obj 复选框对象
         * @param {Boolan} checked 是否选中
         */
        _setImage: function(obj, checked) {
            if (checked) {
                obj.removeClass(checkboxUnCheckedClass).addClass(checkboxCheckedClass);
            } else {
                obj.removeClass(checkboxCheckedClass).addClass(checkboxUnCheckedClass);
            }
        },
        /**
         * @description 更换图片
         * @private
         * @param {Object} obj 复选框对象
         * @return {Boolean} true选中 false未选中
         */
        _changImage: function(obj) {
            var checked = false;
            if (obj.hasClass(checkboxCheckedClass)) {
                obj.removeClass(checkboxCheckedClass).addClass(checkboxUnCheckedClass);
            } else if (obj.hasClass(checkboxUnCheckedClass)) {
                obj.removeClass(checkboxUnCheckedClass).addClass(checkboxCheckedClass);
                checked = true;
            } else {
                this._error("Unsupport type.");
            }

            return checked;
        },
        /**
         * @description 获取值
         * @private
         * @return {Array} 值
         */
        _getValue: function() {
            var me = this,
                data = [];

            for (var value in me.dataObj) {
                if ("length" !== value && me.dataObj[value].checked) {
                    data.push(me.dataObj[value].value);
                }
            }
            return data;
        },
        /**
         * @description 设置值
         * @private
         * @param {project} data 值
         */
        _setValue: function(data) {
            var me = this,
                val, liObj;
            if (!data || data.length < 1) {
                return;
            }
            me.checkedLength = 0;
            me.oldValue = me.getValue();

            // 去掉所有图片上的对勾
            me.ulEl.children("li")
                .children("a")
                .removeClass()
                .addClass(checkboxClass)
                .addClass(checkboxUnCheckedClass);

            // 将所有选中标志置为false
            for (var value in me.dataObj) {
                if ("length" !== value) {
                    me.dataObj[value].checked = false;
                }
            }

            // 设置对勾
            for (var i = 0; i < data.length; i++) {
                val = data[i];
                liObj = me.dataObj[val.value] ? me.dataObj[val.value].value : null;
                // 若数据一致，才进行设置
                if (liObj) {
                    me.liArrayObj[val.value].children("a")
                        .removeClass()
                        .addClass(checkboxClass)
                        .addClass(checkboxCheckedClass);
                    me.dataObj[val.value].checked = true;
                    me.checkedLength++;
                }
            }

            // 如果有全选，判断全选是否选中
            if (me.allEl) {
                me._setImage(me.allAEl, me.dataObj.length === me.checkedLength);
            }
            if (!$.equals(me.oldValue, data)) {
                me._triggerHandler(null, "change", me.getValue());
            }
        },

        /**
         * @description 判断数据中是否有对象
         * @private
         * @param {Object} data 数据
         */
        _arrHasObject: function(data) {
            var me = this,
                hasObject = false;
            data = data || [];
            $.each(data, function(index, val) {
                // 对象
                if ("object" === typeof val.text) {
                    hasObject = true;
                }
            });
            return hasObject;
        }
    });
    /**
     * 复选按钮组
     * @name Sweet.form.CheckboxGroup
     * @class 
     * @extends Sweet.form
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example
     * var data = [{text: "饼图饼图饼图", value: "bingtu", data: null, checked: false},
     *             {text: "面积图", value: "mianjitu", data: null, checked: true},
     *             {text: "条形图", value: "tiaoxingtu", data: null, checked: false},
     *             {text: "拓扑图", value: "tuoputu", data: null, checked: true}
     *           ];
     * var checkboxGroup = new Sweet.form.CheckboxGroup({
     *      all: true,
     *      width: "100%",
     *      height: "100%",
     *      data: data,
     *      renderTo : "sweet-checkboxgroup",
     *      averageHeight: true,
     *      tip: true
     *});
     * checkboxGroup.addListener("change", function(event, val){
     *     $.log("change happend!");
     *});
     */
    Sweet.form.CheckboxGroup = $.sweet.widgetFormCheckboxgroup;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件 -- 复选按钮
 * 2012/12/28
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * 保存组件对象
     */
    var checkboxClass = "sweet-form-checkbox",
        checkboxLabelClass = "sweet-form-checkbox-label",
        checkboxLiClass = "sweet-form-checkbox-li",
        autoClass = "sweet-form-autoWid-autoHeight",
        checkboxUnCheckedClass = "sweet-form-checkbox-unchecked",
        checkboxCheckedClass = "sweet-form-checkbox-checked",
        checkboxUnCheckedDisabledClass = "sweet-form-checkbox-unchecked-disabled",
        checkboxCheckedDisabledClass = "sweet-form-checkbox-checked-disabled",
        checkboxLabelDivCls = "sweet-form-checkbox-labelDiv",
        hrefValue = "javascript:void(0);";

    $.widget("sweet.widgetFormCheckbox", $.sweet.widgetForm, /** @lends Sweet.form.CheckBox.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-checkbox]",
        defaultElement: "<a>",
        type: "checkbox",
        eventNames: /** @lends Sweet.form.CheckBox.prototype*/
        {
            /**
             * @event
             * @description 单击事件,参数为两个(event, checked)
             */
            click: "单击事件",
            /**
             * @event
             * @description change事件,参数为两个(event, data)
             */
            change: "change事件"
        },
        // 复选按钮配置参数
        options: /** @lends Sweet.form.CheckBox.prototype*/
        {
            /**
             * @description 是否选中
             * @type {Boolean}
             * @default false
             */
            checked: false,
            /**
             * @description 高度
             * @type {String/Number}
             * @default 18px
             */
            height: 18,
            /**
             * @description 宽度
             * @type {String/Number}
             * @default 18px
             */
            width: 18,
            /**
             * @description 是否显示提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @description 设置组件状态，选中还是未选中
         * @param {Boolean} checked true/false
         */
        setChecked: function(checked) {
            var me = this;
            if ("boolean" !== typeof checked) {
                me._error("setChecked() Input parameter is not a Boolean type!");
                return;
            }
            me.options.checked = checked;
            if (checked) {
                me.formElement.removeClass(checkboxUnCheckedClass).addClass(checkboxCheckedClass);
            } else {
                me.formElement.removeClass(checkboxCheckedClass).addClass(checkboxUnCheckedClass);
            }
        },
        /**
         * @description 返回当前组件的选中状态
         * @returns {boolean}  当前组件的状态：true，表示当前是选中状态；false,表示当前是非选中状态
         */
        isChecked: function() {
            return this.options.checked;
        },
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            var me = this;

            if (!me.rendered) {
                return;
            }

            // 缓存内容，避免每次都计算
            if (typeof me._checkBoxSize === 'undefined') {
                me._checkBoxSize = {
                    width: me.formElement.externalWidth(),
                    height: me.formElement.externalHeight()
                };
            }

            // 检查是否需要重新计算
            var formElHeight = me.formEl.height();
            if (typeof me._formElHeight === 'undefined') {
                me._formElHeight = formElHeight;
            } else if (me._formElHeight === formElHeight) {
                return;
            }

            // 重新计算布局
            var top = Math.floor((formElHeight - me._checkBoxSize.height) / 2);
            me.formElement.css({
                "margin-top": top
            });
            me.divEl.css({
                "line-height": me._formElHeight + "px"
            });
        },
        /**
         * @description 创建复选按钮
         * @private
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                ulEl = me.ulEl = $("<ul>").addClass(autoClass).appendTo(me.formEl),
                liEl = me.liEl = $("<li>").addClass(checkboxLiClass).appendTo(ulEl),
                formElement = me.formElement = $("<a>").attr("href", hrefValue).addClass(checkboxClass)
                    .bind("click", {
                    "me": me
                }, me._onClick)
                    .appendTo(liEl),
                divEl = me.divEl = $("<div>").addClass(checkboxLabelDivCls),
                labelEl = me.labelEl = $("<label>").addClass(checkboxLabelClass);
            if ($.isNotNull(options.vID)) {
                formElement.attr("id", options.vID);
            }
            // 是否选中
            me.setChecked(options.checked);
            // 缓存数据
            $.data(formElement[0], "value", options.value);
            // 是否复选框后有文字
            if (options.value.text) {
                divEl.appendTo(liEl);
                labelEl.html(options.value.text).appendTo(divEl);
            }
            if (options.tip) {
                labelEl.attr("title", options.value.text);
            }
            // 是否复选框后有文字
            if (options.value.text && !options.disabled) {
                me.labelEl.bind("click", {
                    "me": me
                }, me._onClick);
            }
        },

        /**
         * @description 单击事件
         * @private
         * @param {Object} event 按钮单击对象
         */
        _onClick: function(event) {
            var me = event.data.me,
                opt = me.options,
                result, value = null;
            if (!opt.disabled) {
                value = me._getValue();
                if (me.formElement.hasClass(checkboxCheckedClass)) {
                    me.setChecked(false);
                } else {
                    me.setChecked(true);
                }
                if (opt.click && $.isFunction(opt.click)) {
                    result = me._trigger("click", me, opt.checked);
                }
                result = me._triggerHandler(event, "click", opt.checked);
                // 返回false时，阻止事件冒泡
                if ("boolean" === $.type(result) && !result) {
                    event.stopImmediatePropagation();
                }
            }
        },
        /**
         * @description 给组件设置值
         * @private
         * @param {Object} obj 设置值，格式为{value: 值, text: 文本, data: Object}
         */
        _setValue: function(obj) {
            var me = this;
            me.oldValue = me.getValue();
            if (obj.text) {
                me.divEl.appendTo(me.liEl);
                me.labelEl.html(obj.text).appendTo(me.divEl);
                $.data(me.formElement[0], "value", obj);
                me.options.value = obj;
            }
            if (!$.equals(me.oldValue, obj)) {
                me._triggerHandler(null, "change", me.getValue());
            }
        },
        /**
         * @description 返回组件值
         * @private
         * @return {Object} 返回值，格式为{value: 值, text: 文本, data: Object}
         */
        _getValue: function() {
            var me = this;
            return me.options.checked ? $.data(me.formElement[0]).value : null;
        },
        /**
         * @description 设置组件禁用时样式
         * @private
         * @param {Boolean} disabled true禁用 false可用
         */
        _setDisabled: function(disabled) {
            var me = this,
                formEI = me.formElement;

            if (disabled) {
                if (formEI.hasClass(checkboxCheckedClass)) {
                    formEI.removeClass(checkboxCheckedClass).addClass(checkboxCheckedDisabledClass);
                } else if (formEI.hasClass(checkboxUnCheckedClass)) {
                    formEI.removeClass(checkboxUnCheckedClass).addClass(checkboxUnCheckedDisabledClass);
                }
            } else {
                if (formEI.hasClass(checkboxCheckedDisabledClass)) {
                    formEI.removeClass(checkboxCheckedDisabledClass).addClass(checkboxCheckedClass);
                } else if (formEI.hasClass(checkboxUnCheckedDisabledClass)) {
                    formEI.removeClass(checkboxUnCheckedDisabledClass).addClass(checkboxUnCheckedClass);
                }
            }
        },

        /**
         * @description 删除注册监听事件
         * @private
         * @param {String} eventName 事件名称
         */
        _removeListener: function(eventName) {
            var me = this,
                formEI = me.formElement,
                optVal = me.options.value;

            if (!$.isNull(eventName)) {
                formEI.unbind(eventName);
                if (optVal.text) {
                    me.labelEl.unbind(eventName);
                }
            } else {
                $.each(me.handlers, function(eventName, func) {
                    formEI.unbind(eventName);
                    if (optVal.text) {
                        me.labelEl.unbind(eventName);
                    }
                });
            }
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this,
                fEl = me.formElement,
                labelEl = me.labelEl;
            fEl ? fEl.unbind() : "";
            labelEl ? labelEl.unbind() : "";
        }
    });

    /**
     * 复选按钮
     * @name Sweet.form.CheckBox
     * @class
     * @extends Sweet.form
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example
     * <pre>
     * var checkbox = new Sweet.form.CheckBox ({
     *       checked: true,
     *       renderTo : "sweet-checkbox",
     *       value :{"value":"1", "text":"P2P"},
     *       width: 40
     * })
     * checkbox.addListener("click", function(event, val){
     *     $.log("click happend! check is:" + val);
     * });
     * </pre>
     */
    Sweet.form.CheckBox = $.sweet.widgetFormCheckbox;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * Label Field组件
 * 2013/3/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    var labelFieldDiv2Class = "sweet-form-labelfield",
        labelFieldDiv2Border = "sweet-form-labelfield-border",
        formContentClass = "sweet-form-content",
        labelClass = "sweet-form-labelfield-label",
        labelColonClass = "sweet-form-colon";

    $.widget("sweet.widgetFormLabelfield", $.sweet.widgetForm, /** @lends Sweet.form.LabelField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-labelfield]",
        defaultElement: "<div>",
        // labelField组件公共配置参数
        options: /** @lends Sweet.form.LabelField.prototype*/
        {
            /**
             * @description 是否有label
             * @type {Boolean}
             * @default false
             */
            label: false,
            /**
             * @description label文字
             * @type {String}
             * @default null
             */
            labelText: null,
            /**
             * @description label宽度,值小于按百分比设定
             * @type {String/Number}
             * @default 0.3
             */
            labelWidth: 0.3,
            /**
             * @description 组件高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description label呈现样式类型，1：输入框呈现样式 2：无边框
             * @param {Number}
             * @default 1
             */
            type: 1,
            /**
             * @description 是否显示选项的提示
             * @type {Boolean}
             * @default false
             */
            tip: false
        },
        /**
         * @private
         * @description 创建基本文本框对象
         */
        _createFormWidget: function() {
            var me = this,
                options = this.options;
            // 创建label标签
            me._createLabel();
            // 创建form组件
            me._createLabelField();
            // 设置默认值
            me._setValue(options.value);
        },
        /**
         * @private
         * @description 创建基本文本框前label标签
         */
        _createLabel: function() {
            if (!this.options.label) {
                return;
            }
            var me = this,
                options = me.options,
                labelContent = options.labelText,
                labelText = $.isNull(labelContent) ?
                    "" : "&nbsp;&nbsp;&nbsp;" + $.htmlEscape(labelContent) + Sweet.constants.symbol.COLON;
            me.label = $("<label>").addClass(labelClass).html(labelText)
                .attr("title", labelContent).appendTo(me.formEl);
            me.labelColon = $("<label>").addClass(labelColonClass)
                .text(Sweet.constants.symbol.COLON).appendTo(me.formEl);
        },
        /**
         * @private
         * @description 创建文本输入域
         */
        _createLabelField: function() {
            var me = this,
                options = me.options,
                value = $.nullToString(options.value),
                text = (value && value.text) ? value.text : "",
                tipText = "",
                formDiv1El = me.formDiv1El = $("<div>").addClass(formContentClass).appendTo(me.formEl),
                formDiv2El = me.formDiv2El = $("<div>").addClass(labelFieldDiv2Class).appendTo(formDiv1El)
                    .addClass(1 === options.type ? labelFieldDiv2Border : "");
            if (value && !(undefined === value["qtip"] || null === value["qtip"])) {
                tipText = value["qtip"];
            } else {
                tipText = text;
            }
            me.formElement = $("<div>").html(text).val(text)
                .appendTo(formDiv2El).attr("title", options.tip ? tipText : "");

            if ($.isNotNull(options.vID)) {
                me.formElement.attr("id", options.vID);
            }
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 组件值，格式为{value: 值, text: 文本,data : 值}
         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                value = $.nullToString(value),
                tempText = (value && value.text) ? value.text : "",
                tipText = "";
            if (value && !(undefined === value["qtip"] || null === value["qtip"])) {
                tipText = value["qtip"];
            } else {
                tipText = tempText;
            }
            me.formElement.html(tempText).val(tempText)
                .attr("title", options.tip ? tipText : "");
        },
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            var me = this,
                formElWidth = me.formEl.width(),
                labelWidth = me._doLabelLayout(formElWidth),
                label = me.label,
                colon = me.labelColon;
            if (label) {
                var labelW = parseInt(label.css("width")),
                    colonW = parseInt(colon.css("width"));
                if (labelW < labelWidth - colonW / 2) {
                    colon.hide();
                } else {
                    colon.show();
                    label.css("overflow", "hidden").css("text-overflow", "ellipsis");
                }
                label.css("width", labelWidth - colonW);
            }
            me.formDiv1El.css("left", labelWidth);
        },
        /**
         * @private
         * @description 计算label宽度
         * @param {Number} width 外层容器宽度
         */
        _doLabelLayout: function(width) {
            var me = this,
                options = me.options,
                labelWidth = options.labelWidth;

            labelWidth = labelWidth < 1 ? Math.floor(width * labelWidth) : labelWidth;
            labelWidth = me.label ? labelWidth : 0;
            return labelWidth;
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            var me = this;
            //销毁tip提示
            me.formElement.trigger("mouseout");
            if (me.label) {
                me.label.trigger("mouseout");
            }
        }
    });
    /**
     * LabelField
     * @name Sweet.form.LabelField
     * @class 
     * @extends Sweet.form.Label
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     * sweetLabelField = new Sweet.form.LabelField({
     *           width : 500,
     *           height : 50,
     *           label : true,
     *           tip : true,
     *           labelWidth : 0.3,
     *           labelText : 'User Name',
     *           type : 2,
     *           value : {
     *                       text: 'Hello,world!',
     *                       value: 'button'
     *                   },
     *           renderTo : "sweet-labelfield"
     * </pre>
     */
    Sweet.form.LabelField = $.sweet.widgetFormLabelfield;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--标记条
 * 2013/4/3
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * 保存组件对象
     * 
     */
    var imgObj = {},
    type = Sweet.constants.imgType,
        listboxClass = "sweet-form-labelItem-listbox",
        newaddClass = "sweet-form-labelItem-listbox_newadd",
        formElClass = "sweet-form-labelItem-formEl",
        deleteImgClass = "sweet-form-labelItem-listbox-deleteImg";
    imgObj[type.INDEX] = "sweet-form-labelItem-table_ope_kpi_pic";
    imgObj[type.DIM] = "sweet-form-labelItem-table_ope_dim_pic";
    imgObj[type.CUSTOM_INDEX] = "sweet-form-labelItem-table_ope_userkpi_pic";
    $.widget("sweet.widgetFormLabelItem", $.sweet.widgetForm, /** @lends Sweet.form.LabelItem.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-labelItem]",
        type: "labelItem",
        eventNames: /** @lends Sweet.form.LabelItem.prototype*/
        {
            /**
             * @event
             * @description 删除事件,参数为两个(event, data)
             */
            close: "删除事件"
        },
        // 按钮类组件公共配置参数
        options: /** @lends Sweet.form.LabelItem.prototype*/
        {
            /**
             * @description 按钮高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 按钮宽度
             * @type {String/Number}
             * @default 70px
             */
            width: 70,
            /**
             * @description 图片类型 可选值：index 指标;dim 维度;customizedIndex 自定义指标
             * @type {String}  
             * @default "" 
             */
            imageType: "",
            /**
             * @description 图片位置 可选值：left 居左; right 居右
             * @type {String} 
             * @default ""
             */
            imagePos: "left",
            /**
             * @description 是否可关闭
             * @type {Boolean}
             * @default true
             */
            closable: true,
            /**
             * @description 是否显示提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * @description 组件值
             * @type {String/Number}
             * @default {value: "", text: "", data:null}
             */
            value: {
                value: "",
                text: "",
                data: null
            }
        },
        /**
         * @description 新建指标样式
         */
        addIndex: function() {
            var me = this,
                formDiv2El = me.formDiv2El,
                formerImageEl = me.formerImageEl,
                indexClass = imgObj[type.INDEX];
            if (!formDiv2El.hasClass(newaddClass)) {
                formDiv2El.removeClass().addClass(newaddClass);
            }
            if (!formerImageEl.hasClass(indexClass)) {
                formerImageEl.removeClass().addClass(indexClass);
            }
        },
        /**
         * @description 设置labelItem是否显示提示
         * @param {Boolean} show
         */
        setTip: function(show) {
            var me = this,
                options = me.options,
                formElement = me.formElement;
            //show和tip值相等时则不需任何操作
            if (show ^ options.tip) {
                if (show) {
                    formElement.attr("title", options.value.text);
                    options.tip = true;
                } else {
                    // 先关闭提示，然后取消提示的内容
                    formElement.trigger("mouseout");
                    formElement.removeAttr("title");
                    options.tip = false;
                }
            }
        },
        /**
         * @private
         * @description 创建LabelItem组件总入口
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                value = $.nullToString(options.value),
                text = (value && value.text) ? value.text : "",
                imageType = imgObj[options.imageType] || "",
                formDiv1El = me.formDiv1El = $("<div>").addClass(formElClass).appendTo(me.formEl),
                formDiv2El = me.formDiv2El = $("<div>").addClass(listboxClass)
                    .css("text-align", imageType ? "left" : "center").appendTo(formDiv1El);

            me.formElement = $("<em>").html(text).val(text)
                .attr("title", options.tip ? text : "").appendTo(formDiv2El);
            if ($.isNotNull(options.vID)) {
                me.formElement.attr("id", options.vID);
            }
            if (imageType) {
                me.formerImageEl = $("<span>").addClass(imageType)
                    .css("float", options.imagePos).appendTo(formDiv2El);
            }
            if (options.closable) {
                me.afterImageEl = $("<a>").bind("click", {
                    "me": me
                }, me._clickDeleteImg)
                    .addClass(deleteImgClass).appendTo(me.formDiv2El);
            }
        },
        /**
         * @private
         * @description 删除图片的单击事件
         * @param {Object} event 按钮单击对象
         */
        _clickDeleteImg: function(event) {
            var me = event.data.me,
                val = me._getValue();
            me._triggerHandler(event, "close", val);
            me._trigger("close", event, val);
            me.destroy();
        },
        /**
         * @description 给组件设置值
         * @private
         * @param {Object} obj 设置值，格式为{value: 值, text: 文本, data: Object}
         */
        _setValue: function(obj) {
            if ($.isNull(obj)) {
                return;
            }
            var me = this,
                options = me.options,
                text = $.isNull(obj.text) ? "" : obj.text;
            me.formElement.html(text).val(text).attr("title", options.tip ? text : "");
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            var me = this;
            me.afterImageEl.unbind("click");
            //销毁tip提示
            me.formElement.trigger("mouseout");
        }
    });

    /**
     * LabelItem
     * @name Sweet.form.LabelItem
     * @class 
     * @extends Sweet.form
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     * sweetLabelItem = new Sweet.form.LabelItem({
     *      width : 130,
     *      imageType: "index",
     *      closable : true,
     *      tip: true,
     *      value : {value: 2, text: "指标1234567897894561230"},
     *      renderTo : "sweet-LabelItem"
     * });
     * </pre>
     */
    Sweet.form.LabelItem = $.sweet.widgetFormLabelItem;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * LabelImage组件
 * 2013/4/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    // label标签默认样式
    var defaultWidgetClass = "sweet-form-label",
        imageClass = "sweet-form-label-pic",
        imgObj = {},
        disableObj = {},
        titleObj = {},
        alignObj = {},
        alarmObj = {},
        operType = Sweet.constants.operType,
        alignType = Sweet.constants.align,
        textSpanClass = "sweet-form-label-textSpan";

    disableObj[operType.PLUS] = "sweet-form-label-plus-gray";
    disableObj[operType.MINUS] = "sweet-form-label-minus-gray";
    disableObj[operType.SETTING] = "sweet-form-label-setting-gray";
    disableObj[operType.DELETE] = "sweet-form-label-delete-gray";
    imgObj[operType.SETTING_STYLE1] = "sweet-form-label-setting-style1";
    imgObj[operType.PLUS] = "sweet-form-label-pic-plus";
    imgObj[operType.MINUS] = "sweet-form-label-pic-minus";
    imgObj[operType.SETTING] = "sweet-form-label-pic-setting";
    imgObj[operType.DELETE] = "sweet-form-label-pic-delete";
    imgObj[operType.IMPORT] = "sweet-form-label-pic-import";
    imgObj[operType.SAVEAS] = "sweet-form-label-pic-save";
    imgObj[operType.CRITICAL] = "sweet-form-label-pic-critical";
    imgObj[operType.MAJOR] = "sweet-form-label-pic-major";
    imgObj[operType.MINOR] = "sweet-form-label-pic-minor";
    imgObj[operType.WARNING] = "sweet-form-label-pic-warning";
    imgObj[operType.WARNING_R] = "sweet-form-label-pic-warning-r";
    imgObj[operType.CRITICAL_R] = "sweet-form-label-pic-critical-r";
    imgObj[operType.CUSTOM_1] = "sweet-form-label-pic-custom_1";
    imgObj[operType.CUSTOM_2] = "sweet-form-label-pic-custom_2";
    imgObj[operType.CUSTOM_3] = "sweet-form-label-pic-custom_3";
    imgObj[operType.CUSTOM_4] = "sweet-form-label-pic-custom_4";
    imgObj[operType.CUSTOM_5] = "sweet-form-label-pic-custom_5";
    imgObj[operType.CUSTOM_6] = "sweet-form-label-pic-custom_6";
    imgObj[operType.CUSTOM_7] = "sweet-form-label-pic-custom_7";
    imgObj[operType.FOLDER] = "sweet-form-label-pic-folder";
    imgObj[operType.CATEGORY] = "sweet-form-label-pic-category";
    imgObj[operType.VIEW] = "sweet-form-label-pic-view";
    imgObj[operType.FAVORITE_ADD] = "sweet-form-label-pic-favorite-add";
    imgObj[operType.FAVORITE_REMOVE] = "sweet-form-label-pic-favorite-remove";
    imgObj[operType.LAYOUT] = "sweet-form-label-pic-layout";
    imgObj[operType.DASHBOARD] = "sweet-form-label-pic-dashboard";
    imgObj[operType.DASHBOARD_SETTING] = "sweet-form-label-pic-dashboard-setting";
    imgObj[operType.EDIT] = "sweet-form-label-pic-edit";
    imgObj[operType.ENTER_FULLSCREEN] = "sweet-form-label-pic-enter-fullscreen";
    imgObj[operType.EXIT_FULLSCREEN] = "sweet-form-label-pic-exit-fullscreen";
    imgObj[operType.LOCK] = "sweet-form-label-pic-lock";
    imgObj[operType.UNLOCK] = "sweet-form-label-pic-unlock";
    imgObj[operType.EXPORT] = "sweet-form-label-pic-export";
    imgObj[operType.PRINT] = "sweet-form-label-pic-print";
    imgObj[operType.ADD] = "sweet-form-label-pic-add";
    imgObj[operType.RESET] = "sweet-form-label-pic-reset";
    imgObj[operType.ADDNODE] = "sweet-form-label-pic-addnode";
    imgObj[operType.ADDCHILDREN] = "sweet-form-label-pic-addchildren";
    titleObj[operType.PLUS] = Sweet.core.i18n.labelImage.plus;
    titleObj[operType.ADD] = Sweet.core.i18n.labelImage.add;
    titleObj[operType.RESET] = Sweet.core.i18n.labelImage.reset;
    titleObj[operType.MINUS] = Sweet.core.i18n.labelImage.minus;
    titleObj[operType.SETTING] = Sweet.core.i18n.labelImage.setting;
    titleObj[operType.DELETE] = Sweet.core.i18n.labelImage.delete;
    titleObj[operType.IMPORT] = Sweet.core.i18n.labelImage.import;
    titleObj[operType.SAVEAS] = Sweet.core.i18n.labelImage.save;
    titleObj[operType.LOCK] = Sweet.core.i18n.labelImage.lock;
    titleObj[operType.UNLOCK] = Sweet.core.i18n.labelImage.unlock;
    titleObj[operType.EXPORT] = Sweet.core.i18n.labelImage.export;
    titleObj[operType.PRINT] = Sweet.core.i18n.labelImage.print;


    alignObj[alignType.RIGHT] = "sweet-form-label-right";
    alignObj[alignType.CENTER] = "sweet-form-label-center";

    alarmObj[operType.CRITICAL] = true;
    alarmObj[operType.MAJOR] = true;
    alarmObj[operType.MINOR] = true;
    alarmObj[operType.WARNING] = true;
    alarmObj[operType.WARNING_R] = true;
    alarmObj[operType.CRITICAL_R] = true;
    alarmObj[operType.CUSTOM_1] = true;
    alarmObj[operType.CUSTOM_2] = true;
    alarmObj[operType.CUSTOM_3] = true;
    alarmObj[operType.CUSTOM_4] = true;
    alarmObj[operType.CUSTOM_5] = true;
    alarmObj[operType.CUSTOM_6] = true;
    alarmObj[operType.CUSTOM_7] = true;
    alarmObj[operType.FOLDER] = true;
    alarmObj[operType.CATEGORY] = true;
    alarmObj[operType.VIEW] = true;
    alarmObj[operType.FAVORITE_ADD] = true;
    alarmObj[operType.FAVORITE_REMOVE] = true;
    alarmObj[operType.LAYOUT] = true;
    alarmObj[operType.DASHBOARD] = true;
    alarmObj[operType.DASHBOARD_SETTING] = true;
    alarmObj[operType.EDIT] = true;
    alarmObj[operType.ENTER_FULLSCREEN] = true;
    alarmObj[operType.EXIT_FULLSCREEN] = true;

    $.widget("sweet.widgetFormLabelImage", $.sweet.widgetForm, /** @lends Sweet.form.LabelImage.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-label-image]",
        defaultElement: "<label>",
        eventNames: /** @lends Sweet.form.LabelItem.prototype*/
        {
            /**
             * @event
             * @description 删除事件,参数为两个(event, data)
             */
            click: "单击事件"
        },
        // form组件公共配置参数
        options: /** @lends Sweet.form.LabelImage.prototype*/
        {
            /**
             * @description 组件宽度
             * @type {String/Number}
             * @default 19px
             */
            width: 19,
            /**
             * @description 组件高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 组件内容对齐方式,三种值：Sweet.constants.align.LEFT,Sweet.constants.align.RIGHT,Sweet.constants.align.CENTER
             * @type {String}
             * @default 左对齐
             */
            align: Sweet.constants.align.LEFT,
            /**
             * @description 图片类型,目前共有35种："delete","save","plus","minus","setting","import","export","print"
             * "critical","major","minor","warning","warning_r","critical_r","custom_1","custom_2","custom_3","custom_4",
             * "custom_5","custom_6","custom_7","folder","category","view","favorite_add","favorite_remove","layout",
             * "dashboard","dashboard_setting","edit","enter_fullscreen","exit_fullscreen","lock","unlock","add","reset","setting_style_1"
             * @type {String}
             * @default null
             */
            imageType: null,
            /**
             * @description 图片信息提示
             * @type {String}
             * @default null
             */
            imageTip: null,
            /**
             * @description 组件值，只适用于29种图标类型，适用的imageType如下：
             * "critical","major","minor","warning","warning_r","critical_r","custom_1","custom_2","custom_3","custom_4",
             * "custom_5","custom_6","custom_7","folder","category","view","favorite_add","favorite_remove","layout",
             * "dashboard","dashboard_setting","edit","enter_fullscreen","exit_fullscreen","lock","unlock","export",
             * "add","reset"
             * @type {String/Number}
             * @default {text:"", value:"",data: null}
             */
            value: {
                text: "",
                value: "",
                data: null
            },
            /**
             * @description 设置支持显示文本的labelImage的背景颜色值
             * @type {Object} 
             * @default null
             */
            imageBgColor: {
                bgColor: ""
            }

        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} obj 组件值
         */
        _setValue: function(obj) {
            var me = this,
                options = me.options,
                imageType = options.imageType,
                isAlarm = alarmObj[imageType];

            me.formElement.data("data", obj);
            // 告警
            if (isAlarm) {
                me.textSpanEl.html(obj.text);
            }
        },
        /**
         * @private
         * @description 获取组件值
         * @return {Object} 返回值
         */
        _getValue: function() {
            return this.formElement.data("data");
        },
        /**
         * @private
         * @description 设置组件
         * @param {Object} obj 组件值
         */
        setBgColor: function(data) {
            var me = this,
                options = me.options,
                imageType = options.imageType;
            var supLabelType = ["critical", "major", "minor", "warning", "custom_1", "custom_2", "custom_3", "custom_4",
                "custom_5", "custom_6", "custom_7"];
            for (var i = 0; i < supLabelType.length; i++) {
                var className = "." + "sweet-form-label-pic-" + imageType;
                if (imageType === supLabelType[i]) {
                    var bgColor = "none repeat scroll 0 0 " + data.bgColor;
                    $(className).css('background', bgColor);
                } else {
                    continue;
                }
            }
        },
        /**
         * @private
         * @description 实现form组件接口
         */
        _createFormWidget: function() {
            var me = this,
                options = me.options,
                imageType = options.imageType,
                img = imgObj[imageType] || "",
                title = titleObj[imageType] || "",
                imageTip = options.imageTip || title,
                align = options.align,
                alignClass = alignObj[align],
                isAlarm = alarmObj[imageType],
                value = options.value || {},
                text = value.text,
                formParentEl = me.formParentEl = $("<div>").addClass(defaultWidgetClass + " " + alignClass)
                    .appendTo(me.formEl);
            me.formElement = $("<span>").addClass(imageClass + " " + img)
                .attr("title", imageTip)
                .data("data", value)
                .bind("click", {
                "me": me
            }, me._onClick)
                .appendTo(formParentEl);

            if ($.isNotNull(options.vID)) {
                me.formElement.attr("id", options.vID);
            }
            if (isAlarm) {
                me.textSpanEl = $("<span>").addClass(textSpanClass)
                    .html(text)
                    .appendTo(formParentEl);
            }
        },
        /**
         * @private
         * @param {Object} event
         * @description 元素单击事件
         */
        _onClick: function(event) {
            var me = event.data.me;
            if (me.options.disabled) {
                return;
            }
            var val = me._getValue();
            me._trigger("click", event, val);
            me._triggerHandler(event, "click", val);
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled true禁用 false可用
         */
        _setDisabled: function(disabled) {
            var me = this;
            if ("boolean" !== $.type(disabled)) {
                me._error("_setDisabled() Unsupport parameter disabled. Not true or false. disabled=" + disabled);
                return;
            }
            var formerImageEl = me.formElement,
                imageType = me.options.imageType,
                img = imgObj[imageType] || "",
                disabledImg = disableObj[imageType] || "",
                isAlarm = alarmObj[imageType];
            if (!isAlarm) {
                if (disabled) {
                    formerImageEl.removeClass(img)
                        .addClass(disabledImg);
                    me.options.disabled = true;
                } else {
                    formerImageEl.removeClass(disabledImg)
                        .addClass(img);
                    me.options.disabled = false;
                }
            }
        },
        /**
         * @private
         * @description 销毁form组件
         */
        _destroyWidget: function() {
            var me = this;
            me.formElement.unbind("click");
            //销毁tip提示
            me.formElement.trigger("mouseout");
        }
    });
    /**
     * LabelImage组件
     * @name Sweet.form.LabelImage
     * @class 
     * @extends Sweet.form
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * </pre>
     * @example 
     * <pre>
     * sweetLabelImage = new Sweet.form.LabelImage({
     *           imageType: "plus",
     *           imageTip : "增加",
     *           width: 100,
     *           renderTo: "sweet-labelImage"
     *       });
     * sweetLabelImage2.addListener("click", function() {
     *  alert("click happend!!!");
     * });
     * </pre>
     */
    Sweet.form.LabelImage = $.sweet.widgetFormLabelImage;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--上传组件
 * 2013/8/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    var browseButtonClass = "sweet-form-button",
        fileUploadDivClass = "sweet-form-fileupload-div",
        fileUploadButtonClass = "sweet-form-fileupload-button",
        fileUploadInputWidthClass = "sweet-form-fileupload-input-width",
        fileUploadInputClass = "sweet-form-fileupload-input",
        iframeClass = "sweet-form-fileupload-iframe",
        iframeNameSuffix = "-fileUpload",
        formDivSuffix = "-sweetFileloadFormDiv",
        eventBeforeUpload = "beforeUpload",
        eventAfterUpload = "afterUpload";

    $.widget("sweet.widgetFormFileUploadfield", $.sweet.widgetFormTextfield, /** @lends Sweet.form.FileUpLoadField.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-fileuploadfield]",
        type: 'text',
        eventNames: /** @lends Sweet.form.FileUpLoadField.prototype*/
        {
            /**
             * @event
             * @description 上传前触发,参数为一个(me)
             */
            beforeUpload: "上传前事件",
            /**
             * @event
             * @description 上传后触发,参数为两个(event, data)
             */
            afterUpload: "上传后触发"
        },
        /** 
         * @private
         * @description form组件公共配置参数
         * @type object  
         */
        options: /** @lends Sweet.form.FileUpLoadField.prototype*/
        {
            /**
             * @description 提交地址
             * @type {String}
             * @default ""
             */
            url: ""
        },
        /**
         * @description 提交
         */
        submit: function() {
            var me = this,
                flag;
            flag = me._triggerHandler(me, eventBeforeUpload);
            if (false === flag || "false" === flag) {
                return;
            }
            if (me.validate()) {
                me.submitEl.click();
                // 启动定时器
                Sweet.Task.Timeout.start({
                    id: me._uploadTaskId,
                    run: function() {
                        var content = me._getIframeContentEl().html();
                        if ($.isNotNull(content)) {
                            //这里作了一个延迟，但延迟后如果还没有取完数据时还有问题，另外延迟的id如果相同会将原来的覆盖，不会执行，所以先停止定时器
                            Sweet.Task.Timeout.stop(me._uploadTaskId);
                            Sweet.Task.Delay.start({
                                id: "submitgetdata",
                                run: function() {
                                    content = me._getIframeContentEl().html();
                                    me._triggerHandler(null, eventAfterUpload, content);
                                },
                                delay: 200
                            });
                        }
                    },
                    interval: 100
                });
            }
        },
        /**
         * @description 清空文件选择
         */
        clear: function() {
            var me = this;
            me.uploadEl.val("");
            me.formElement.val("");
            me.closeTip();
        },
        /**
         * @public
         * @param {url} url:上传文件的url地址
         * @description 设置URL
         */
        setUrl: function(url) {
            var me = this,
                formDivID = me.options.id + formDivSuffix;

            if ($.isNotNull(url) && url !== me.options.url) {
                me.options.url = url;
                $("#" + formDivID).attr("action", me.options.url);
            }
        },
        /**
         * @private
         * @description 重新计算并绘制页面
         */
        _doLayout: function() {
            this._super();
        },
        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 设置数值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            var me = this;
            if (value && value.value) {
                me.formElement.val(value.value);
            }
        },
        /**
         * @private
         * @description 获取组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                value = me.formElement.val();
            return {
                "value": value,
                "text": value
            };
        },
        /**
         * @private
         * @description 获取iframe内容区对象
         */
        _getIframeContentEl: function() {
            return $(this.iframeEl[0].contentWindow.document.body);
        },
        /**
         * @private
         * @description 创建上传组件
         */
        _afterCreateFormWidget: function() {
            // 上传组件标签必须有name，否则无法正确提交
            var me = this,
                options = me.options,
                iframeId = options.id + iframeNameSuffix,
                uploadEl = $("<input type='file' name='" + options.id + "-file' size='1'>"),
                uploadButton = $("<input type='button'>"),
                formDivID = options.id + formDivSuffix;
            me._uploadTaskId = options.id + "-upload-task";
            me.uploadEl = uploadEl.bind("change", function() {
                var value = $(this).val();
                if ($.isNull(value)) {
                    return;
                }
                //获取文件名
                var fileName = value.lastIndexOf("\\");
                if (-1 !== fileName) {
                    value = value.slice(fileName + 1);
                }
                me.formElement.val(value);
                // 重新选择时，清空iframe中的内容
                me._getIframeContentEl().text("");
                me.validate();
            });

            me.formEl.addClass(fileUploadDivClass);
            me.formSubmitEl = $("<form id='" + formDivID + "' method='post' enctype='multipart/form-data' action='" + options.url + "'" +
                "target='" + iframeId + "'>");
            me.formDiv2El.wrap(me.formSubmitEl)
                .addClass(fileUploadInputWidthClass);
            uploadEl.insertAfter(me.formDiv2El)
                .addClass(fileUploadInputClass);
            uploadButton.attr("value", Sweet.core.i18n.fileUpload.browse + '...')
                .insertAfter(uploadEl)
                .addClass(browseButtonClass + " " + fileUploadButtonClass);
            me.submitEl = $("<input type='submit'>").insertAfter(uploadEl);
            // 生成隐藏iframe，用于上传提交
            me.iframeEl = $("<iframe id=\"" + iframeId + "\" name=\"" + iframeId + "\" class=\"" + iframeClass + "\">").insertAfter(uploadEl);
        },
        /**
         * @private
         * @description 获取文件字节大小
         */
        getFileSize: function() {
            var me = this,
                tImgEl,
                filesize = 0;
            if (!me.uploadEl || !me.formSubmitEl) {
                return filesize;
            }
            try {
                if ($.isFirefox() || $.isChrome()) {
                    filesize = me.uploadEl.get(0).files[0].size;
                } else if ($.isIE()) {
                    // 通过临时的img对象获取文件大小,---IE下有问题
                    tImgEl = $("<img dynsrc='' src=''>").css("display", "none").appendTo(me.formSubmitEl);
                    tImgEl.get(0).dynsrc = me.uploadEl.val();
                    filesize = tImgEl.get(0).fileSize;
                    tImgEl.remove();
                }
            } catch (e) {
                if (tImgEl) {
                    tImgEl.remove();
                }
            }
            return filesize;
        }
    });

    /**
     * 上传组件
     * @name Sweet.form.FileUpLoadField
     * @class 
     * @extends Sweet.form.TextField
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.textfield.js
     * </pre>
     * @example 
     * var fileUploadField = new Sweet.form.FileUpLoadField({
     *            url: "/somefile/test",
     *            label : true,
     *            width : 400,
     *            labelText : '文件名',
     *            renderTo : "sweet-upload"
     *        });
     */
    Sweet.form.FileUpLoadField = $.sweet.widgetFormFileUploadfield;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 组件--颜色选择器
 * 2013.9.16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var textButtonClass = "sweet-form-colorpicker-textButtonDiv",
        inputParentClass = "sweet-form-colorpicker-inputParent",
        normalClass = "sweet-form-colorpicker-normal",
        grayClass = "sweet-form-colorpicker-gray",
        imageButtonClass = "sweet-form-colorpicker-imageButton",
        inputElClass = "sweet-form-colorpicker-input",
        textGrayClass = "sweet-form-timeschedule-textGray",
        divPanelClass = "sweet-form-colorpicker-panel",
        divPanelULClass = "sweet-form-colorpicker-ul",
        divPanelLiClass = "sweet-form-colorpicker-li",
        cellClass = "sweet-form-colorpicker-cell";

    $.widget("sweet.widgetColorPicker", $.sweet.widgetFormInput, /** @lends Sweet.form.ColorPicker.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-colorpicker]",
        type: "colorpicker",
        defaultElement: "<div>",
        eventNames: /** @lends Sweet.form.ColorPicker.prototype*/
        {
            /**
             * @event
             * @description 改变值事件
             */
            change: "改变值事件"
        },
        // form组件公共配置参数
        options: /** @lends Sweet.form.ColorPicker.prototype*/
        {
            /**
             * @description colorPicker宽度
             * @type {String/Number}
             * @default 80px
             */
            width: 80,
            /**
             * @description colorPicker高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 是否可编辑
             * @type {Boolean}
             * @default false
             */
            editable: false,
            /**
             * @description 颜色值 {value: "#00c90d", text: "", data: ""}
             * @param {Object}
             * @default null
             */
            value: null,
            /**
             * @description 颜色值 {value: "#00c90d", text: "", data: ""}
             * @param {Object}
             * @default null
             */
            colorSource: [
                ["#00c90d", "#369cd8", "#1099a2", "#cf7a37", "#7c3ac1"],
                ["#90cc19", "#60b2df", "#38abb3", "#f2a14e", "#be53be"],
                ["#b7e042", "#7ec8eb", "#51c4cc", "#ebb36e", "#c870c8"],
                ["#c7ea69", "#9ebecd", "#6bd6dd", "#debb91", "#ce89ce"]
            ],
            /**
             * @description 输入框为空时显示的字符
             * @type {Object/String/Number}
             * @default "请选择..."
             */
            emptyText: Sweet.core.i18n.combobox.pleaseCheck
        },

        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled :true:禁用, false:不禁用
         */
        _setDisabled: function(disabled) {
            var me = this;

            if (disabled) {
                if (me.formElement) {
                    me.formElement.addClass(textGrayClass);
                    me.formDiv2El.removeClass(normalClass).addClass(grayClass);
                    me.imageButton.removeClass(normalClass).addClass(grayClass).addClass(textGrayClass);
                    if ($.isNotNull(me.options.value)) {
                        me._setEmptyText(true);
                    } else {
                        me._setEmptyText();
                    }
                }
            } else {
                if (me.formElement) {
                    me.formElement.removeClass(textGrayClass);
                    me.formDiv2El.removeClass(grayClass).addClass(normalClass);
                    me.imageButton.removeClass(textGrayClass).removeClass(grayClass).addClass(normalClass);
                    if ($.isNotNull(me.options.value)) {
                        me._setEmptyText(true);
                    } else {
                        me._setEmptyText();
                    }
                }
            }
        },
        /**
         * @private
         * @description 设置颜色值
         * @param {Object} data :{value: "", text: "", data:""}
         */
        _setValue: function(data) {
            if (!this.formElement) {
                return;
            }

            var me = this,
                oldRgb, newVal;
            oldRgb = me.formElement.css("background-color");

            me.oldValue = me._getHexColorValue(oldRgb);

            if ($.isNotNull(data) && $.isNotNull(data.value)) {
                if (me.oldValue !== data.value) {
                    newVal = data.value;
                    me.formElement.css({
                        "background-color": newVal
                    });
                    me.options.value = data;
                    // 触发change事件
                    me._triggerHandler(null, "change", me._getValue());
                    me.oldValue = newVal;
                }
                me._setEmptyText(true);
            } else {
                me.formElement.css("background-color", "");
                me._setEmptyText();
            }
        },

        /**
         * @private
         * @description 设置自定义的颜色值
         * @param [Object] rangeColor :  [
            ["","","","",""],
            ["","","","",""],
            ["","","","",""],
            ["","","","",""]
           ];
         * @param {Object} val : {"valueRangeColor":rangeColor}
         */
        setColorRange: function(data) {
            if (!this.formElement) {
                return;
            }

            var me = this;
            var line = {
                rows: 4,
                columns: 5
            };

            // 更改已经创建Cells的颜色值
            for (var row = 0; row < line.rows; row++) {
                // 寻找此行的列,为其更换颜色
                for (var col = 0; col < line.columns; col++) {
                    var idCellName = "#" + me.options.id + row + col;
                    $(idCellName).css({
                        background: data.valueRangeColor[row][col]
                    });
                }
            }
        },

        /**
         * @private
         * @description 获取颜色值
         * @return {Object}{value: "", text: "", data:""}
         */
        _getValue: function() {
            return this.options.value;
        },

        /**
         * @private
         * @description 关闭浮动面板
         */
        _closeFloatPanel: function() {
            var me = this;
            if (!me.openPanelElFlag && $.isVisiable(me.divPanelEl)) {
                me.divPanelEl.hide();
            }
            me.openPanelElFlag = false;
        },

        /**
         * @private
         * @description 创建form组件总入口
         */
        _createInputField: function() {
            var me = this;

            //创建颜色选择浮动面板
            me._createColorPickerPanel();

            //创建显示颜色文本框和选择颜色按钮
            me._createTextField();
        },

        /**
         * @private
         * @description 创建文本框和按钮
         */
        _createTextField: function() {
            var me = this,
                textButtonDiv = me.textButtonDiv = $("<div>").addClass(textButtonClass).appendTo(me.formDiv1El),
                formDiv2El = me.formDiv2El = $("<div>").addClass(inputParentClass).appendTo(textButtonDiv);

            me.formElement = $("<input>").addClass(inputElClass).appendTo(formDiv2El);
            if ($.isNotNull(me.options.vID)) {
                me.formElement.attr("id", me.options.vID);
            }
            me.imageButton = $("<span>").text("···").addClass(imageButtonClass).appendTo(textButtonDiv);
        },

        /**
         * @private
         * @description 创建颜色选择浮动面板
         */
        _createColorPickerPanel: function() {
            var me = this,
                ulEl, liEl, cellEl,
                line = {
                    rows: 4,
                    columns: 5
                },
                divPanelEl = me.divPanelEl = $("<div>").addClass(divPanelClass + " " + me.floatBgClass).hide()
                    .appendTo("body");

            // 创建Cells
            for (var row = 0; row < line.rows; row++) {
                // 添加一行
                ulEl = $("<ul></ul>").addClass(divPanelULClass).appendTo(divPanelEl);
                // 添加此行的列
                for (var col = 0; col < line.columns; col++) {
                    var idCellName = me.options.id + row + col;
                    liEl = $("<li>").addClass(divPanelLiClass).appendTo(ulEl);
                    cellEl = $("<div>").addClass(cellClass).attr('id', idCellName).appendTo(liEl);
                    cellEl.css({
                        background: me.options.colorSource[row][col]
                    });
                }
            }

            // 绑定事件
            me.divPanelEl.bind("click", function(event) {
                if ($.isVisiable(me.divPanelEl)) {
                    event.stopImmediatePropagation();
                }
                if ($(event.target).hasClass(cellClass)) {
                    me._onCellClick(event);
                }
            });
        },

        /**
         * @private
         * @description 鼠标在单元格上点击时，更新颜色选择
         * @param event
         */
        _onCellClick: function(event) {
            var me = this,
                val = me.options.value,
                item, itemRgbVal, itemVal;

            item = $(event.target)[0];
            itemRgbVal = item.style.backgroundColor;
            itemVal = me._getHexColorValue(itemRgbVal);

            // 更新value
            if ($.isNotNull(val)) {
                if ($.isNotNull(val.data)) {
                    me.options.value = {
                        "value": itemVal,
                        "text": val.text,
                        "data": val.data
                    };
                } else {
                    me.options.value = {
                        "value": itemVal,
                        "text": val.text
                    };
                }
            } else {
                me.options.value = {
                    "value": itemVal,
                    "text": ""
                };
            }

            me._setValue(me.options.value);
            me._setEmptyText(true);
            me._closeFloatPanel();
        },

        /**
         * @private
         * @description 鼠标在单元格上点击时，更新选择信息
         * @param {String} data : 形如："rgb(158, 190, 205)"
         * @returns {String}16进制颜色表示
         */
        _getHexColorValue: function(data) {
            var me = this,
                str = data.split(","),
                redStr = str[0].split("("),
                redHex = redStr[1],
                greenHex = str[1],
                blueHex = str[2],
                result = "";

            result = "#" + $.number.toHex(redHex) + $.number.toHex(greenHex) + $.number.toHex(blueHex);
            return result;
        },

        /**
         * @private
         * @description 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                left, top,
                options = me.options;

            me.setEditable(options.editable);
            me.setDisabled(options.disabled);
            if (me.imageButton) {
                me.imageButton.bind("click", function(event) {
                    if (me.imageButton.hasClass(grayClass)) {
                        return;
                    }

                    if (me.divPanelEl && $.isVisiable(me.divPanelEl)) {
                        return;
                    }
                    me.openPanelElFlag = true;

                    // 计算位置
                    left = $.getFloatOffset(me.formDiv1El, me.divPanelEl, true).left;
                    top = $.getFloatOffset(me.formDiv2El, me.divPanelEl).top;
                    me.divPanelEl.css({
                        "left": left,
                        "display": "block"
                    }).css("top", top - 1);
                });
            }
        },

        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this;

            me._super();

            me.divPanelEl ? me.divPanelEl.remove() : "";
            me.divPanelEl ? me.divPanelEl.unbind() : "";
            me.imageButton ? me.imageButton.unbind() : "";
        }
    });

    /**
     * 颜色选择器
     * @name Sweet.form.ColorPicker
     * @class
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * var sweetColorPicker = Sweet.form.ColorPicker({
     *     width: 120
     * });
     * sweetcolorPicker.addListener("change", function(event, val){
     *     $.log("color changed!!!");
     * });
     */
    Sweet.form.ColorPicker = $.sweet.widgetColorPicker;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 表格组件
 * 2013/1/31
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var checkboxUncheckdClass = "sweet-form-checkbox-unchecked",
        checkboxCheckdClass = "sweet-form-checkbox-checked",
        selectNoneClass = "sweet-select-none",
        actionBarSelectColumnClass = "select-column",
        actionBarMultiSortClass = "multi-sort",
        actionBarSecondStatClass = "second-stat",
        actionBarClearFilterClass = "clear-filter",
        actionBarExportClass = "export",
        actionBarExportCsvClass = "csv",
        actionBarExportXlsClass = "xls",
        actionBarExportPdfClass = "pdf",
        actionBarExportCClass = "exportC",
        actionBarExportLiCsvClass = "li-csv",
        actionBarExportLiXlsClass = "li-xls",
        actionBarExportLiPdfClass = "li-pdf",
        actionBarExportLiCClass = "li-exportC",
        gridCheckboxClass = "sweet-grid-checkbox",
        gridHeaderTdClass = "sweet-grid-header-table-td",
        gridHeaderTdCommonClass = "sweet-grid-header-table-td-common",
        gridHeaderTdHoverClass = "sweet-grid-header-table-td-common-hover",
        gridHeaderSortAscClass = "sweet-grid-header-sort-asc",
        gridHeaderSortDescClass = "sweet-grid-header-sort-desc",
        gridHeaderDragClass = "sweet-grid-resize-drag",
        gridHeaderDownClass = "sweet-grid-resize-down",
        gridHeaderTextClass = "text",
        gridHeaderTextHoverClass = "text-hover",
        gridHeaderFilterClass = "sweet-grid-header-filter",
        gridHeaderFilterPicClass = "sweet-grid-header-filter-pic",
        gridHeaderFilterBgClass = "sweet-list-list-con",
        gridHeaderFilterPadClass = "sweet-grid-header-filter-pad",
        gridHeaderFilterOneClass = "filter-one",
        gridHeaderFilterTwoClass = "filter-two",
        gridHeaderFilterSuffix = "-grid-filter",
        gridHeaderFilterBtnSuffix = "-grid-filter-btn",
        gridSNClass = "sweet-grid-sn",
        gridSpecColumnClass = "sweet-grid-spec-column",
        gridContentMenuClass = "sweet-grid-content-menu",
        gridContentTableClass = "sweet-grid-content-table",
        gridContentTrClass = "sweet-grid-content-tr",
        gridContentTdClass = "sweet-grid-content-td",
        gridContentDataLeftClass = "sweet-grid-content-data-left",
        gridContentDataRightClass = "sweet-grid-content-data-right",
        gridContentDataCenterClass = "sweet-grid-content-data-center",
        gridContentRowSelectedClass = "sweet-grid-content-row-selected",
        gridContentTreeDivClass = "sweet-grid-content-td-tree",
        gridContentTreeClass = "sweet-grid-content-td-tree-a",
        gridContentTreePlusClass = "sweet-grid-content-td-plus",
        gridContentTreeMinusClass = "sweet-grid-content-td-minus",
        gridContentTreeBlankClass = "sweet-grid-content-td-blank",
        gridContentTreeSpaceClass = "sweet-grid-content-td-space",
        gridContentTdDataSuffix = "-grid-content-data-id",
        gridContentEditClass = "sweet-common-opercolumn-edit",
        gridContentModifyClass = "sweet-common-opercolumn-modify",
        gridContentDeleteClass = "sweet-common-opercolumn-delete",
        gridContentCloseClass = "sweet-common-opercolumn-close",
        gridContentPauseClass = "sweet-common-opercolumn-pause",
        gridContentStartClass = "sweet-common-opercolumn-start",
        gridContentResetClass = "sweet-common-opercolumn-reset",
        gridContentDetailClass = "sweet-common-opercolumn-detail",
        gridContentConfirmClass = "sweet-common-opercolumn-confirm",
        gridColumnPrefix = "sweet-grid-column-",
        gridPagingClass = "sweet-grid-paging",
        gridPagingInnerClass = "sweet-grid-paging-inner",
        gridPagingDropDownElClass = "sweet-grid-paging-dropDown",
        gridPagingPrevClass = "sweet-grid-paging-prev",
        gridPagingANumClass = "sweet-grid-paging-num",
        gridPagingNextClass = "sweet-grid-paging-next",
        gridPagingGoClass = "sweet-grid-paging-go",
        gridPagingCurrentElClass = "current",
        pageRowChoosedClass = "choosed",
        gridSelectColumnWinBodyClass = "sweet-grid-select-column-win",
        gridSelectColumnWinPanelClass = "sweet-grid-select-column-win-panel",
        gridSelectColumnWinRowClass = "sweet-grid-select-column-win-row",
        gridSelectColumnWinAllRowClass = "sweet-grid-select-column-win-allRow",
        gridSelectColumnCheckWrapClass = "sweet-grid-select-column-win-check-wrap",
        gridSelectColumnCheckWrapEndClass = "sweet-grid-select-column-win-check-wrap-end",
        gridSelectColumnUnCheckedClass = "sweet-form-checkbox-unchecked",
        gridSelectColumnCheckedClass = "sweet-form-checkbox-checked",
        gridPagingComboboxType = ["row", "page"],
        gridPagingTextPos = ["left", "right"],
        gridPagingDefaultNum = 5, // 中间预留数字按钮个数
        defaultColumnHeight = 30, // 默认表格高度
        i18n = Sweet.core.i18n.grid,
        exportTypeText = Sweet.core.i18n.exportType,
        dataType = Sweet.constants.dataType,
        symbol = Sweet.constants.symbol,
        exportTypeConf = Sweet.constants.exportType,
        eventNamePageClick = "pageClick",
        eventNameCellClick = "cellClick",
        eventNameRowClick = "rowClick",
        eventNameRowDBClick = "rowDblClick",
        eventNameCheckBoxClick = "checkBoxClick",
        eventNameMenuClick = "menuClick",
        eventNameTreeExpand = "treeExpand",
        eventNameExpanded = "expanded",
        eventNameTreeCollapse = "treeCollapse",
        eventNameBeforeSetData = "beforeSetData",
        eventNameAfterSetData = "afterSetData",
        eventNameExport = "export",
        timerSuffix = "sweet-grid-content-timer", // 内容区定时器名称
        trColor = {
            "red": "red",
            "orange": "orange",
            "yellow": "yellow",
            "green": "green",
            "blue": "blue",
            "indigo": "indigo",
            "purple": "purple"
        },
        tableTdPadding = 10, // 表格内部单元格间间隔
        snWidth = 80,
        checkboxWidth = 23,
        foldWidth = 35,
        scrollWidth = 18,
        treeBlankWidth = 19,
        minTdWidth = 40,
        maxColumnLength = 200,
        minColumnWidth = 120,
        ncWidth = -1, //用户没有配置列宽度时，内部标志的列
        tdBorder = 1;

    $.widget("sweet.widgetGrid", $.sweet.widget, /** @lends Sweet.grid.Grid.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-grid]",
        defaultElement: "<div>",
        type: "grid",
        eventNames: /** @lends Sweet.grid.Grid.prototype*/
        {
            /**
             * @event
             * @description 每一行前面的箭头的点击事件
             * @param {Object} data 数据信息
             */
            foldclick: "每一行前面的箭头的点击事件",
            /**
             * @event
             * @description 翻页事件
             * @param {Object} data 翻页数据信息
             */
            pageClick: "翻页事件",
            /**
             * @event
             * @description 单元格点击事件
             * @param {Object} data 单元格数据信息
             */
            cellClick: "单元格点击事件",
            /**
             * @event
             * @description 行点击事件
             * @param {Object} data 行数据信息
             */
            rowClick: "行点击事件",
            /**
             * @event
             * @description 行双击事件
             * @param {Object} data 行数据信息
             */
            rowDblClick: "行双击事件",
            /**
             * @event
             * @description 树节点展开事件
             * @param {Object} data 树节点数据信息
             */
            treeExpand: "树节点展开事件",
            /**
             * @event
             * @description 树节点展开事件,第一次展开后的事件
             * @param {Object} data 树节点数据信息
             */
            expanded: "树节点展开事件,第一次展开后的事件",
            /**
             * @event
             * @description 树节点折叠事件
             * @param {Object} data 树节点数据信息
             */
            treeCollapse: "树节点折叠事件",
            /**
             * @event
             * @description 复选框点击事件
             * @param {Object} data 复选框数据信息
             */
            checkBoxClick: "复选框点击事件",
            /**
             * @event
             * @description 菜单点击事件
             * @param {Object} data 菜单数据信息
             */
            menuClick: "菜单点击事件",
            /**
             * @event
             * @description setData前触发事件
             * @param {Object} data setData前触发数据信息
             */
            beforeSetData: "setData前触发事件",
            /**
             * @event
             * @description setData后触发事件
             * @param {Object} data setData后触发数据信息
             */
            afterSetData: "setData后触发事件",
            /**
             * @event
             * @description 导出事件
             * @param {Object} data 导出数据信息
             */
            export: "导出事件",
            /**
             * @event
             * @description 排序点击事件
             * @param {Object} data 排序数据信息
             */
            sort: "排序事件",
            /**
             * @event
             * @description 过滤点击事件
             * @param {Object} data 过滤数据信息
             */
            filter: "过滤事件",
            /**
             * @event
             * @description 多列排序事件
             * @param {Object} data 过滤数据信息
             */
            multiOrders: "多列排序事件",
            /**
             * @event
             * @description 清除所有过滤的事件
             * @param {Object} data 过滤数据信息
             */
            clearAllFilters: "清除所有过滤的事件",
            /**
             * @event
             * @description 清除所有排序的事件
             * @param {Object} data 过滤数据信息
             */
            clearAllOrders: "清除所有排序的事件"
        },
        // grid组件公共配置参数
        options: /** @lends Sweet.grid.Grid.prototype*/
        {
            /**
             * @description 表格宽度
             * @type {String/Number}
             * @default 600px
             */
            width: 600,
            /**
             * @description 表格高度
             * @type {String/Number}
             * @default 200px
             */
            height: 200,
            /**
             * @description 获取及存储数据对象
             * @type {Object}
             * @default null
             */
            store: null,
            /**
             * @description 
             * <pre>
             * 表格数据，数据格式为：
             * {
             *     columns:[
             *         {                                    //列信息的配置
             *             header:"Name1",                  //列名
             *             name: "name1",                   //列名称，或行数据时使用
             *             width: 100,                      //宽度
             *             height: 23,                      //高度
             *             sortable: true/false,            //是否支持排序，默认都不支持
             *             dataType:"string",               //数据类型.string:字符串;date:日期;number:数值型;bool:布尔型
             *                                              //  number类型右对齐，其余左对齐，align属性优先
             *             align: "left",                   //表格内容对齐方式. left:左对齐;right:右对齐;center:居中对齐
             *             filter:true/false,               //是否过滤,除去日期，默认都不过滤
             *             filterType:'string',             //过滤类型.string:字符串;date:日期;list:复选框;number:关系表达式;
             *                                              //  bool:true/false
             *             useDSTutcOrder : string,         //专门为夏令时在前台排序时所使用的隐藏utc字段的name
             *             filterList:[],                   //如果filtertype为list时的值
             *             hidden：true/false,              //隐藏列时所用
             *             enableHdMenu: true/false,        //列是否可隐藏，默认true----注:此属性已删除
             *             hiddenForever : true/false,      //列是否永久隐藏(这种列不出现在列选择和多列排序中)，默认false
             *             renderer: function,              //用于加工单元格的原始数据，返回给表格呈现
             *             rendererArr: Object,             //加工单元格调用的函数，目前只用户给生成的编辑、删除、修改图标加事件 
             *                                              //  {eidt: Function, delete: Function, ...}
             *             unit: 'percent',                 //单位
             *             tip: true/false,                 //单元格是否有提示，默认没有，如果使用renderer属性，该配置不生效
             *             tooltip: "",                     //表格列头提示信息
             *             menus:[
             *                 {                            //点出右键菜单时的配置，即钻取时用到
             *                     text: 'item1',           //此菜单项显示的文本
             *                     value: 'value1',         //此菜单项的value
             *                     children: [...]          //此菜单项的子菜单
             *                 },
             *                     ...
             *             ],
             *             beforeShowMenu : Function,       //在显示菜单前的回调函数，例如同一列中，有的数据需要钻取，有的不需要(成功率100%，失败率为0)
             *             itemClick: Function,             //菜单点击事件
             *			   itemWidth : 150,                 // 菜单的宽度，默认150
             *             children: [
             *                 {                            //表头分层时使用，具体的分层的列信息
             *                     header:"Name1",          //列名
             *                     sortable:true/false,     //是否支持排序，默认都不支持
             *                     dataType:"string",       //数据类型
             *                     ...
             *                     与上面的列信息一样，表示的是子列的信息，也可能再分层，可以再设置colspan和children
             *                 },
             *                 ...
             *             ]
             *         },
             *         ...
             *     ],					
             *     data:[                               //呈现的数据
             *         [value1, value2, ...],
             *         [value1, value2, ...],
             *         ...
             *     ],						
             *     page:{                               //分页配置信息
             *         simple:false,                    //是否使用简单分页栏，默认false 
             *         currentPage: 2,                  //设定当前页，重新给表格设置第一页值时使用
             *         size:20,                         //页大小
             *         total:100,                       //总条数
             *         select:[20,50,100]               //可选择页大小的值
             *     },
             *     resizable: true/false,               //列宽是否可调整，默认可调整
             *     checkbox:true/false,                 //是否显示复选框
             *     singleSelect: true/false,            //是否行单选，优先级高于checkbox
             *     sn:true/false,                       //是否显示序号
             *     selectColumn,                        //是否显示列选择,可配置win,以弹出框形式选择列
             *     selectColumnResizAble,               //列选择框是否可以缩放,如果selectColumn为win则不支持缩放
             *     multiColumnSort,                     //是否显示多列排序
             *     multiSortColumnsArr,                 //如果用户想自己定义多列排序的列，此值可设置，数组，和columns相同，但不能有隐藏的配置信息
             *     secondaryStat,                       //是否显示二次统计
             *     statParams,                          //二次统计的配置属性，主要三个：dims(维度)， indicators(指标)， statFun(点击统计时的回调函数)
             *     clearFilters,                        //是否显示清除所有过滤
             *     export,                              //导出
             *     exportType: ["csv", "xls", "pdf"],    //导出类型，export为true时才生效
             *     exportCType: [{value:"csv", text:"csv",icon:"csv"},...]    //自定义导出类型，export为true时才生效,优先于exportType
             * }
             * </pre>
             * @type {Object}
             */
            data: {},
            /**
             * 列头的宽度是否自适应，默认设置为true,表示宽度自适应，如果同时在columns中设置了width，width值优先，计算列宽度时
             * 的原则：(总宽度-用户列中设置的width总和)/没有设置width的列个数 < 120px ? 120px : (总宽度-用户列中设置的width总和)/没有设置width的列个数
             * 如果设置为false，表示需要使用人员自己设置每一个表头的宽度，如果不设置，则默认为120px
             * @type boolean
             * @default true
             */
            autoColumnWidth: true,
            /**
             * 在表格的内容与分页条之间显示的内容，用于显示表格的描述说明等
             * @type function
             * @default null
             */
            contentDescriptionFunc: null,
            scrollCallBack: $.noop,
            /**
             * setData中数据处理之前的回调函数（对设置的数据进行处理加工用），需要返回相应的数据
             * @type function
             * @default null
             */
            beforeSetData: null,
            /**
             * 方便用户在点击过滤的确定按钮后，提交参数前的回调，修改参数数据
             * @type function
             * @default null
             */
            beforeOKFilter: null,
            /**
             * 列的过滤面板显示后的回调
             * @type function
             * @default null
             */
            afterShowFilter: null
        },
        /**
         * @description 配置二次统计参数：{dims:[],indicators:[], statFun: function(点击统计时的回调函数)}
         * @param {Object} cfg 配置二次统计组件时传的参数，主要包含三个必选：dims(维度)， indicators(指标)， statFun(点击统计时的回调函数)
         */
        setSecondaryStatConfig: function(cfg) {
            var me = this;
            if (me.options.data && me.options.data.secondaryStat) {
                me.options.data.statParams = cfg;
            }
        },
        /**
         * @description 给表格重新设置值，表格进行重绘
         * @param {Object} data 设置值，包括表格列描述和表格数据
         * @param {Object} otherParama 相关参数
         * @param {Boolean} add 如果是追加则不刷新表格,如果有分页条只刷新分页信息
         */
        setData: function(data, otherParama, add) {
            if ($.isNull(data)) {
                return;
            }

            var me = this,
                options = me.options;

            //记录设置数据前的滚动条的位置信息
            if (me.contentEl) {
                me.gridScrollLeft = me.contentEl.scrollLeft();
                me.gridScrollTop = me.contentEl.scrollTop();
            }

            me._triggerHandler(null, eventNameBeforeSetData, data);
            if (options.beforeSetData && $.isFunction(options.beforeSetData)) {
                data = options.beforeSetData(data);
                me.onlyUpdateHeader = data.onlyUpdateHeader;
            }
            var curPage = 1;
            if (add && me.page) {
                curPage = me.page.currentPage;
            }
            //此次设置的数据的条数
            var curDataLen = 0;
            var preDataLen = options.data.data ? options.data.data.length : 0;
            if ($.isArray(data)) {
                options.data = $.extend({}, options.data, {
                    "data": data
                });
                curDataLen = data.length;
            } else {
                options.data.data = []; // 每次设置数据时，data不需要保留
                if (data.columns) {
                    options.data.columns = [];
                }
                options.data = $.extend(true, {}, options.data, data);
                me.page = $.extend(true, me.page, data.page);
                curDataLen = data.data ? data.data.length : 0;
            }

            //追加数据时，且有分页信息时，不刷新当前页面
            if (add) {
                if (me.options.data.page && me.page) {
                    //但是当数据的条数还是小于当前页的条数时，还是需要刷新页面
                    if (curDataLen != 0 && preDataLen <= parseInt(me.page.size, 10)) {

                    } else {
                        me.options.data.page.currentPage = curPage;
                        me.page.currentPage = curPage;
                        // 创建表格分页栏
                        me._createGridPagingBar(true);
                        // 分页栏
                        if (me.pagingEl) {
                            me.pagingEl.width(me.gridEl.width());
                        }
                        me._triggerHandler(null, eventNameAfterSetData);
                        return;
                    }

                }
            }
            me._createGridWidget();
            me._render(options.renderTo);
            me._doLayout();
        },
        /**
         * @description 设置表格树，展开后树节点数据
         * @param {Object} data 数据
         */
        setTreeData: function(data) {
            var me = this;
            var tempData = data;
            if (!$.isArray(data)) {
                tempData = data.data;
            }
            me.tempTreeData = me._toJson(tempData).reverse();
            me.tempTreeDataIndex = 0;
            // 将数据放入this.treeData中
            me.treeData = me.treeData.concat(me.tempTreeData);
            // 添加rowId
            me._addRowId(me.treeData);
            me.timerGridTreeContent = me.options.id + "-tree-" + timerSuffix;
            // 启动定时器，加载表格树节点数据
            Sweet.Task.Timeout.start({
                id: me.timerGridTreeContent,
                run: me._buildGridTreeContent,
                scope: me,
                interval: 10
            });
        },
        /**
         * @description 获取行数据。如果row为空，返回所有行数据，不为空，返回指定行数据
         * @param {Number} row 行数，从0开始
         * @return {Array} 返回行数据
         */
        getRowValue: function(row) {
            if ("number" !== $.type(row)) {
                this._error("getRowValue() The input parameter is not a number.");
                return;
            }

            var me = this;
            var data = me.data;

            if ($.isNull(row)) {
                return $.objClone(data);
            }

            if (0 > row || (data && data.length < row)) {
                return;
            }
            return $.objClone(data[row]);
        },
        /**
         * @description 获取选中行数据
         * @return {Array} 返回选中行数据
         */
        getSelectedValue: function() {
            /**
             * @private
             * @description 对象转换数组
             * @param {Object} obj 对象
             * @return {Array} 返回数组
             */
            function objToArray(obj) {
                if ($.isNull(obj)) {
                    return [];
                }
                var tempArr = [];
                $.each(obj, function(id, val) {
                    tempArr.push(val);
                });

                return tempArr;
            }

            var me = this,
                data = objToArray(me.selectedData),
                treeData = objToArray(me.selectedTreeData);

            return $.objClone(data.concat(treeData));
        },
        /**
         * @description 插入一行或多行数据，该函数不能同store一起使用
         * @param {Object/Array} data 数据
         * @param {Boolean} before 是否向前追加，默认向前
         */
        insertRows: function(data, before) {
            if ($.isNull(data)) {
                this._error("insertRows() The input data is null.");
                return;
            }
            var me = this,
                tempData = $.objClone(data);
            before = before || true;

            if (!$.isArray(tempData)) {
                tempData = [tempData];
            }

            me._buildInsertGridContent(tempData, before);
        },
        /**
         * @description 更新表格指定行数据
         * @param {Object/Array} data 待更新数据，格式[
         *      {
         *          "row": ,        // 行号
         *          "data": {},     // 数据，由column.name: value构成
         *      }
         *      ...
         * ]
         */
        updateRows: function(data) {
            var me = this,
                i, length, temp, tempData = data;
            if ($.isNull(data)) {
                me._error("updateRows() The input data is null.");
                return;
            }

            if (!$.isArray(data)) {
                tempData = [data];
            }

            length = tempData.length;
            for (i = 0; i < length; i++) {
                temp = tempData[i];
                me._updateRows(temp.row, temp.data);
            }
        },
        /**
         * @description 设置行选中
         * @param {Number/Array} rows 行或行数组
         */
        selectRows: function(rows) {
            if ($.isNull(rows)) {
                this._error("selectRows() The input param is null.");
                return;
            }
            var me = this,
                tempRows;
            if ($.isArray(rows)) {
                tempRows = rows;
            } else {
                tempRows = [rows];
            }

            me._allRowUnSelect();
            $(rows).each(function(index, row) {
                var params = me.__findTargetTr(row),
                    trEl = params.trEl,
                    checkboxEl,
                    el;
                if (!trEl) {
                    return;
                }
                trEl.addClass(gridContentRowSelectedClass);
                // 如果是复选，复选框需要选中
                checkboxEl = trEl.find("." + gridCheckboxClass);
                if (checkboxEl && 0 < checkboxEl.length) {
                    el = $(checkboxEl.find("a")).removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                    me._oneRowSelect(el.attr("row"), el.attr("tree"));
                }
                me._onTrClick({
                    "data": {
                        "me": me,
                        "tr": trEl,
                        "eventName": eventNameRowClick
                    }
                });
            });
        },
        /**
         * @description 返回当前选中行下一行数据
         * @returns {Object} 返回行数据
         */
        selectPrev: function() {
            var me = this,
                last,
                row;
            if (me.hasPrev()) {
                last = me._getSelectedFirstRow();
                if (0 < last.length) {
                    row = $.string.toNumber($(last).attr("row")) - 1;
                } else {
                    row = me.contentTableEl.find("tr").length;
                }
                me.selectRows(row);
            }

            return me.getSelectedValue();
        },
        /**
         * @description 是否有上一行，相对于选中的第一行
         * @returns {Boolean} true 有， false 没有
         */
        hasPrev: function() {
            var me = this,
                rows = me.contentTableEl.find("tr").length,
                first;
            if (rows === 0) {
                return false;
            }
            first = me._getSelectedFirstRow();
            if (0 < first.length) {
                return $.string.toNumber($(first).attr("row")) > 1;
            }
            return true;
        },
        /**
         * @description 返回当前选中行下一行数据
         * @returns {Object} 返回行数据
         */
        selectNext: function() {
            var me = this,
                last,
                row;
            if (me.hasNext()) {
                last = me._getSelectedLastRow();
                if (0 < last.length) {
                    row = $.string.toNumber($(last).attr("row")) + 1;
                } else {
                    row = 1;
                }
                me.selectRows(row);
            }

            return me.getSelectedValue();
        },
        /**
         * @description 是否有下一行，相对于选中的最后一行
         * @returns {Boolean} true 有， false 没有
         */
        hasNext: function() {
            var me = this,
                rows = me.contentTableEl.find("tr").length,
                last;
            if (rows === 0) {
                return false;
            }
            last = me._getSelectedLastRow();
            if (0 < last.length) {
                return $.string.toNumber($(last).attr("row")) < rows;
            }
            return true;
        },
        /**
         * @description 清空所有过滤条件
         * @param {Boolean} reload 是否重新加载数据
         */
        clearAllFilters: function(reload) {
            var me = this;
            // 清空过滤条件
            me.filters = {};
            $.each(me.filterObjs, function(index, obj) {
                if (obj && obj.filter) {
                    obj.filter.reset();
                }
                if (obj && obj.tdEl) {
                    var filterPic = obj.tdEl.find("." + gridHeaderFilterPicClass);
                    if (filterPic) {
                        filterPic.remove();
                    }
                }
            });
            if (me.page) {
                me.page.currentPage = 1;
            }
            if (me.options.store) {
                if (me.options.store.clearFilters) {
                    me.options.store.clearFilters();
                }

                if (reload) {
                    if (me.options.store.setDataPage) {
                        me.options.store.setDataPage(me.getPageInfo());
                    }
                    me.options.store.load(me.getAllConditions());
                }
            }
            me._triggerHandler(null, "clearAllFilters", me.getAllConditions());
        },
        /**
         * @description 清空所有排序条件
         * @param {Boolean} reload 是否重新加载数据
         */
        clearAllOrders: function(reload) {
            var me = this;
            // 清空排序条件
            me.orders = [];
            $.each(me.headerTdEls, function(index, obj) {
                if (obj) {
                    obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                        .addClass(gridHeaderTdCommonClass);
                    obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                }
            });
            if (me.page) {
                me.page.currentPage = 1;
            }
            if (me.options.store) {
                if (me.options.store.clearOrders) {
                    me.options.store.clearOrders();
                }

                if (reload) {
                    if (me.options.store.setDataPage) {
                        me.options.store.setDataPage(me.getPageInfo());
                    }
                    me.options.store.load(me.getAllConditions());
                }
            } else {
                me._triggerHandler(null, "clearAllOrders", me.getAllConditions());
            }
            //清空所有排序条件已选值
            me._clearMultiSort();
        },
        _clearMultiSort: function() {
            var me = this;
            //清空所有排序条件已选值
            if ($.isNotNull(me.firstCol) && $.isNotNull(me.secondCol) && $.isNotNull(me.thirdCol)) {
                var emptyObj = {
                    "value": "",
                    "text": ""
                };
                me.firstCol.radioGroup.setValue(emptyObj);
                me.secondCol.radioGroup.setValue(emptyObj);
                me.thirdCol.radioGroup.setValue(emptyObj);
                me.firstCol.combobox.setValue(emptyObj);
                me.secondCol.combobox.setValue(emptyObj);
                me.thirdCol.combobox.setValue(emptyObj);
            }
        },
        /**
         * @private
         * @description 返回选中的第一行
         */
        _getSelectedFirstRow: function() {
            var me = this;
            return me.contentTableEl.find("." + gridContentRowSelectedClass + ":first");
        },
        /**
         * @private
         * @description 返回选中的最后一行
         */
        _getSelectedLastRow: function() {
            var me = this;
            return me.contentTableEl.find("." + gridContentRowSelectedClass + ":last");
        },
        /**
         * @description 更新指定行数据
         * @param {Number} row 行号
         * @param {Object} data 待更改数据
         */
        _updateRows: function(row, data) {
            var me = this;
            if ($.isNull(data)) {
                me._error("_updateRows() The input data is null.");
                return;
            }

            var trEl,
            tdEl,
            tempData = $.objClone(data),
                rowData,
                tree,
                realColumn,
                realRow,
                divEl,
                params;
            // 查找目标行
            params = me.__findTargetTr(row);
            trEl = params.trEl;
            tree = params.tree;
            realRow = params.realRow;

            if (!trEl) {
                me._error("_updateRows() The target row does not exist.");
                return;
            }

            $.each(tempData, function(key, value) {
                realColumn = me.columnRelation[key];
                if ($.isUndefined(realColumn)) {
                    return;
                }
                // 树形结构数据
                if (tree) {
                    tdEl = me.contentTreeTdEls[realRow][realColumn].empty();
                    rowData = me.treeData[realRow];
                } else {
                    tdEl = me.contentTdEls[realRow][realColumn].empty();
                    rowData = me.data[realRow];
                }

                divEl = $("<div>");
                rowData[key] = value;
                var tempParams = {
                    "row": realRow,
                    "column": realColumn,
                    "rowData": rowData,
                    "columnObj": me.headerColumns[realColumn],
                    "divEl": divEl,
                    "depth": 0,
                    "isTree": false,
                    "tdEl": tdEl
                };

                // 处理表格内部数据对其方式
                me.__getContentTdAlign(tempParams);
                // 是否用户有对列的处理
                me.__getContentTdRender(tempParams);
                // 绑定TD单击事件
                tdEl.unbind("click");
                me.__bindContentTdClick(tempParams);

                divEl.appendTo(tdEl);
            });
        },
        /**
         * @description 删除指定行数据
         * @param {Number/Array} row 行号或行号数组
         */
        deleteRows: function(row) {
            var me = this,
                i, length, temp = row;
            if ($.isNull(row)) {
                me._error("deleteRows() The input data is null.");
                return;
            }

            if (!$.isArray(row)) {
                temp = [row];
            }

            length = temp.length;
            for (i = 0; i < length; i++) {
                me._deleteRows(temp[i]);
            }

            me._refreshContentSN();
        },
        /**
         * @description 删除指定行数据
         * @param {Number} row 行号
         */
        _deleteRows: function(row) {
            var me = this,
                trEl,
                tree,
                realRow,
                params;
            // 查找目标行
            params = me.__findTargetTr(row);
            trEl = params.trEl;
            tree = params.tree;
            realRow = params.realRow;

            if (!trEl) {
                me._error("deleteRows() The target row does not exist.");
                return;
            }

            // 移除行
            trEl.remove();
            if (tree) {
                me.contentTreeTdEls[realRow] = null;
                me.contentTreeTrEls[realRow] = null;
                me.checkboxTreeTdEls[realRow] = null;
                me.treeData[realRow] = null;
            } else {
                me.contentTdEls[realRow] = null;
                me.contentTrEls[realRow] = null;
                me.checkboxTdEls[realRow] = null;
                me.data[realRow] = null;
            }
        },
        /**
         * @private
         * @description 查找目标行
         * @param {Number} row 行号
         */
        __findTargetTr: function(row) {
            var me = this,
                trEls,
                trEl,
                tempTrEl,
                length,
                tree,
                realRow,
                i;
            // 查找目标行
            trEls = me.__getContentTrEls();
            length = trEls.length;
            for (i = 0; i < length; i++) {
                tempTrEl = $(trEls[i]);
                if ($.string.toNumber(tempTrEl.attr("row")) === row) {
                    trEl = tempTrEl;
                    tree = tempTrEl.attr("tree");
                    realRow = me.rowRelations[row];
                    break;
                }
            }

            return {
                "trEl": trEl,
                "tree": tree,
                "realRow": realRow
            };
        },
        /**
         * @private
         * @description 添加rowId
         * @param {Array} arr 待添加rowId数组
         * @param {Number} begin 索引起始值
         */
        _addRowId: function(arr, begin) {
            if ($.isArray(arr)) {
                begin = begin || 0;
                for (var i = 0; i < arr.length; i++) {
                    arr[i].rowId = begin + i;
                }
            }
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        _getWidth: function() {
            return this.gridEl.externalWidth();
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        _getHeight: function() {
            return this.gridEl.externalHeight();
        },
        _setHeight: function(h) {
            this.gridEl.externalHeight(h);
        },
        _setWidth: function(w) {
            this.gridEl.externalWidth(w);
        },
        _setWH: function(w, h) {
            this.gridEl.externalWidth(w);
            this.gridEl.externalHeight(h);
        },
        /**
         * @description 重新计算组件宽度、高度
         * @private
         * @param {Boolean} b 是否处理自适应列，true不处理，false处理
         */
        _doLayout: function(b) {
            var me = this,
                gridElWidth = me.gridEl.width(),
                gridElHeight = me.gridEl.height(),
                actionBarElHeight = 0,
                headerElHeight = 0,
                pagingElHeight = 0,
                contentElHeight = 0,
                headerTableElWidth = 0,
                opt = me.options;
            if (!me.rendered) {
                return;
            }
            //刷新布局时，删除弹出菜单
            if (me._gridMenu) {
                me._gridMenu.destroy();
            }
            // 表头
            if (me.headerEl) {
                //自适应列表表头宽度
                if (opt.autoColumnWidth) {
                    me._modifyColumnWidth();
                }
                // 设置表头列宽度
                for (var i = 0; i < me.headerTdEls.length; i++) {
                    me.__resetHeaderTdEl(i);
                }
                headerElHeight = me.headerEl.height();
                me.headerEl.width(gridElWidth);
                // 计算表头宽度
                me.headerTableElWidth = headerTableElWidth = me.__calHeaderWidth();
                if (me.headerReRender) {
                    if (!b && !opt.autoColumnWidth) {
                        // 如果表格宽度相加结果比外层容器跨度还小，剩余宽度全部赋给最后一列
                        if (headerTableElWidth < gridElWidth) {
                            var tempSub = gridElWidth - headerTableElWidth - scrollWidth;
                            headerTableElWidth = gridElWidth;
                            me.widths[me.headerTdEls.length - 1] += tempSub;
                        } else {
                            me.widths[me.headerTdEls.length - 1] -= scrollWidth;
                        }
                    }
                    //非自适应列表表头宽度
                    if (!opt.autoColumnWidth) {
                        me.__resetHeaderTdEl(me.headerTdEls.length - 1);
                    }
                    me.__resetHeaderWidth(headerTableElWidth);
                    me.headerReRender = false;
                }
            }

            // 表格操作栏
            if (me.actionBarEl) {
                actionBarElHeight = me.actionBarEl.height();
                me.actionBarEl.width(gridElWidth);
            }

            // 分页栏
            if (me.pagingEl) {
                pagingElHeight = me.pagingEl.height();
                me.pagingEl.width(gridElWidth);
            }
            //表格的描述信息框
            var cDespHeight = 0;
            if (me.contentDespEl) {
                cDespHeight = me.contentDespEl.height() + 2;
                me.contentDespEl.width(gridElWidth - 2);
            }
            // 表格内容
            if (me.contentEl) {
                contentElHeight = gridElHeight - headerElHeight - pagingElHeight - actionBarElHeight - cDespHeight;
                me.contentEl.width(gridElWidth).height(contentElHeight);
                me.__resetContentWidth();
                me._resetContentTdELWidth();
                // 给定外层div固定高度，以出现横向滚动条
                me.contentDivEl.height(10);
                if (!me.contentTableEl.hasClass(gridContentTableClass)) {
                    me.contentTableEl.addClass(gridContentTableClass);
                }
            }

            // 设置列动态改变div的相对位置
            me._doResizeElLayout();
        },
        /**
         * @private
         * @description 重新设置表头宽度
         * @param {Number} i 下标索引
         */
        __resetHeaderTdEl: function(i) {
            var me = this,
                temp = me.headerTdEls[i];
            if (temp) {
                temp.find("div:first").externalWidth(me.widths[i]);
            }
        },
        /**
         * @private
         * @description 设置表头宽度
         * @param {Number} width 表头宽度
         */
        __resetHeaderWidth: function(width) {
            var me = this;
            me.headerDivEl.externalWidth(width);
            me.headerTableElWidth = width;
        },
        /**
         * @private
         * @description 修正表格列头的宽度，如果平均宽度小于minColumnWidth,则每一列都设置为minColumnWidth;
         * 如果平均宽度大于minColumnWidth，则以实际宽度为准
         */
        _modifyColumnWidth: function() {
            var me = this,
                columns = me.headerColumns,
                len = columns.length,
                notHiddenLen = len, //不是隐藏列的个数
                noCfgWidthNum = 0,
                total = 0,
                count = me.count,
                i = 0,
                gridElWidth = me.gridEl.width(),
                avgW = 0,
                cw = minColumnWidth;
            //如果这时取到的表格宽度小于列的最小宽度，返回不作处理
            if (gridElWidth < minColumnWidth) {
                return;
            }
            //先计算非隐藏的列
            for (i = 0; i < len; i++) {
                if (columns[i].hidden) {
                    notHiddenLen--;
                } else {
                    if (!columns[i].width) {
                        noCfgWidthNum++;
                    } else {
                        total += Number(columns[i].width);
                    }
                }
            }
            //先减去sn和checkbox的宽度
            for (i = 0; i < count; i++) {
                gridElWidth -= me.widths[i];
            }
            //再减去最右边的scrollWidth
            gridElWidth -= scrollWidth;
            //最后减去每两列之间的间隙len-1px
            gridElWidth -= (notHiddenLen - 1 + count + 1);
            //最后除去所有用户指定的列宽度
            gridElWidth -= total;
            //求得没有指定列宽度的所有列的平均宽度
            avgW = Math.floor(gridElWidth / (noCfgWidthNum <= 0 ? 1 : noCfgWidthNum));
            if (avgW > minColumnWidth) {
                cw = avgW;
            }
            for (i = count; i < me.originalWidths.length; i++) {
                if (ncWidth === me.originalWidths[i]) {
                    me.widths[i] = cw;
                }
            }
        },
        /**
         * @private
         * @description 计算表头宽度
         * @returns {Number} 返回宽度
         */
        __calHeaderWidth: function() {
            var me = this,
                columns = me.headerColumns,
                count = me.count,
                i = 0,
                tempColumn,
                gridElWidth = me.gridEl.width(),
                width = scrollWidth;
            $.each(me.widths, function(index, value) {
                tempColumn = columns[index - count];
                if (!tempColumn || (tempColumn && tempColumn.hidden)) {
                    return;
                }
                width += value + 1;
            });
            //减去1，因为上面each中的value多加了一个像素
            width--;
            //加上sn或者checkbox的宽度
            for (i = 0; i < count; i++) {
                width += me.widths[i];
            }
            return gridElWidth > width ? gridElWidth : width;
        },
        /**
         * @private
         * @description 处理表格内容区宽度
         */
        __resetContentWidth: function() {
            var me = this;
            me.contentDivEl.width(me.headerTableElWidth - scrollWidth);
            // 计算表格内容宽度
            me.contentTableEl.width(me.headerTableElWidth - scrollWidth); // 预留滚动条宽度
        },
        /**
         * @private
         * @description 调整列动态改变div位置
         */
        _doResizeElLayout: function() {
            if (this.options.data && !this.options.data.resizable) {
                return;
            }
            var me = this,
                gridElHeight = me.gridEl.height(),
                actionBarElHegiht = me.actionBarEl.height(),
                pagingElHeight = 0,
                count = me.count;
            if (me.pagingEl) {
                pagingElHeight = me.pagingEl.height();
            }
            if (me.headerTdEls) {
                var p,
                num = 0,
                    width = 0,
                    height = 0,
                    calHeight,
                    rowspan,
                    depth,
                    visiable,
                    tempResizeEl,
                    obj;
                for (var i = 0; i < me.headerTdEls.length; i++) {
                    obj = me.headerTdEls[i];
                    if (i > count - 1) {
                        p = obj.position();
                        num = 0;
                        visiable = $.isVisiable(obj);
                        if (!visiable) {
                            width = 0;
                            height = 0;
                        } else {
                            width = obj.width();
                            height = obj.height();
                        }
                        calHeight = actionBarElHegiht;
                        rowspan = $.string.toNumber(obj.attr("rowspan"));
                        depth = $.string.toNumber(obj.attr("depth"));

                        if (rowspan !== depth) {
                            num = depth - 1;
                            calHeight += height * num;
                        }
                        tempResizeEl = me.resizeEls[i - count].css({
                            "left": p.left + width,
                            "top": calHeight
                        })
                            .attr("visiable", (visiable ? "true" : "false"))
                            .height(gridElHeight - pagingElHeight - calHeight);
                        if (visiable) {
                            if (!tempResizeEl.hasClass(gridHeaderDragClass)) {
                                tempResizeEl.addClass(gridHeaderDragClass);
                            }
                            tempResizeEl.show();
                        } else {
                            tempResizeEl.removeClass(gridHeaderDragClass);
                        }
                    }
                }
            }
        },
        /**
         * @description 关闭浮动窗口
         * @private
         */
        _closeFloatPanel: function() {
            var me = this;
            me.__closeFloatPanel(me.pagingRowDropDownEl, "rowFlag");
            me.__closeFloatPanel(me.pagingPageDropDownEl, "pageFlag");
            me.__closeFloatPanel(me.exportEl, "exportFlag");
            me.__closeFloatPanel(me.selectColEl, "selectColFlag");
            // 关闭过滤窗口
            me.__closeFloatFilterPanel(me.oldActiveFilterTdEl);
            me.__closeFloatFilterPanel(me.activeFilterTdEl);
        },
        /**
         * @private
         * @description 关闭浮动窗口
         * @param {Object} obj 浮动窗口对象
         * @param {String} key 键值
         */
        __closeFloatPanel: function(obj, key) {
            var flag;
            if (obj) {
                flag = obj.data(key);
                if (!flag && $.isVisiable(obj)) {
                    obj.hide();
                }
                obj.data(key, false);
            }
            if ("selectColFlag" == key && this.selectColList) {
                this.selectColList.destroyMoveEl();
            }
        },
        /**
         * @private
         * @description 关闭浮动窗口对象
         * @param {Object} obj 浮动窗口对象
         */
        __closeFloatFilterPanel: function(obj) {
            var me = this;
            if (obj) {
                if (!obj.data("created")) {
                    obj.data("filterPanel").hide();
                    me.__onHeaderTdMouseLeave(null, obj);
                }
                obj.data("created", false);
            }
        },
        /**
         * @private
         * @description 创建Grid组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                gridClass = "sweet-grid",
                gridEl = me.gridEl = $("<div>"),
                options = me.options;
            me.initial = true;
            gridEl.addClass(gridClass).attr("id", options.id)
                .width(options.width)
                .height(options.height);

            me._createGridWidget();
        },
        /**
         * @private
         * @description 创建表格组件
         */
        _createGridWidget: function() {
            var me = this;
            if (!me.options.data) {
                return;
            }
            // 创建表头
            var headerIsChanged = me._createGridHeader();
            // 生成表格操作栏,只有表头发生变化或新建表头时才重新创建操作栏
            if (headerIsChanged) {
                me._createGridActionBar();
            }
            //只有表头发生改变和第一次进入时，滚动条在最左边,竖直滚动条在最上面
            if (me.gridScrollLeftFlag === 0) {
                me.gridScrollLeft = 0;
                me.gridScrollTop = 0;
                me.gridScrollLeftFlag++;
            }
            // 创建表格内容
            me._createGridContent();
            // 创建表格分页栏
            me._createGridPagingBar();
            if ($.isFunction(me.options.contentDescriptionFunc)) {
                var result = me.options.contentDescriptionFunc(me.options.data);
                if (me.contentDespEl) {
                    me.contentDespEl.remove();
                    me.contentDespEl = null;
                }
                me.contentDespEl = $("<div>").width("100%").css({
                    "float": "left",
                    "border": "1px solid #CCCCCC"
                }).appendTo(me.gridEl);
                me.contentDespEl.html(result);
            }
            // 注册监听
            me._addListener();
            // 如果注册store，注册store设置数据监听
            if (me.options.store) {
                // 注册翻页事件
                //me.addListener(eventNamePageClick, $.noop);
                // 设置表格数据监听
                me.options.store.addListener({
                    "setData": me.setData,
                    "scope": this
                });
                // 设置表格树数据监听
                me.options.store.addListener({
                    "setTreeData": me.setTreeData,
                    "scope": this
                });
            }
        },
        /**
         * @private
         * @description 生成表格操作栏
         */
        _createGridActionBar: function() {
            this.__destroyTableActionBar();
            var me = this,
                data = me.options.data,
                flag = false,
                actionBarEl = me.actionBarEl = $("<div>").addClass("sweet-grid-action-bar"),
                picBarEl = $("<div>").addClass("sweet-grid-action-bar-pic");
            // 列选择
            if (data.selectColumn) {
                flag = true;
                $("<span>").attr("title", i18n.selectCol).addClass(actionBarSelectColumnClass).appendTo(picBarEl);
            }
            // 多列排序
            if (data.multiColumnSort) {
                flag = true;
                $("<span>").attr("title", i18n.multiSort).addClass(actionBarMultiSortClass).appendTo(picBarEl);
            }
            // 二次统计
            if (data.secondaryStat) {
                flag = true;
                $("<span>").attr("title", i18n.secondStat).addClass(actionBarSecondStatClass).appendTo(picBarEl);
            }
            // 清空过滤条件
            if (data.clearFilters) {
                flag = true;
                $("<span>").attr("title", i18n.clearFilter).addClass(actionBarClearFilterClass).appendTo(picBarEl);
            }
            // 导出
            if (data.export) {
                flag = true;
                $("<span>").attr("title", i18n.export).addClass(actionBarExportClass).appendTo(picBarEl);
            }
            picBarEl.bind("click", function(e) {
                me.__onPicBarClick(e);
            }).appendTo(actionBarEl);

            if (flag) {
                actionBarEl.insertBefore(me.headerEl);
            } else {
                actionBarEl.height(0);
            }
        },
        /**
         * @private
         * @description 表格操作栏点击事件
         * @param {Object} e 事件对象
         */
        __onPicBarClick: function(e) {
            var me = this,
                self = $(e.target);
            // 列选择
            if (self.hasClass(actionBarSelectColumnClass)) {
                me.__createSelectColumnPanel(self);
            }
            // 多列排序
            else if (self.hasClass(actionBarMultiSortClass)) {
                me.__createMultiSort();
            }
            // 清空过滤条件
            else if (self.hasClass(actionBarClearFilterClass)) {
                Sweet.Msg.confirm(i18n.qClearFilter, null, null,

                function() {
                    me.clearAllFilters(true);
                });
            }
            // 导出
            else if (self.hasClass(actionBarExportClass)) {
                me.__createExportPanel(self);
            }
            //二次统计
            else if (self.hasClass(actionBarSecondStatClass)) {
                me.__createSecondaryStatPanel(self);
            }
        },
        /**
         * @private
         * @description 创建二次统计面板
         */
        __createSecondaryStatPanel: function(self) {
            var me = this,
                temp,
                data = me.options.data;
            if (data.statParams) {
                if (me.secondaryPanel) {
                    me.secondaryPanel.destroy();
                    me.secondaryPanel = null;
                }
                temp = data.statParams;
                me.secondaryPanel = new Sweet.cmp.SecondaryStat({
                    dims: temp.dims,
                    indicators: temp.indicators,
                    statFun: temp.statFun
                });
            }
        },
        /**
         * @private
         * @description 创建多列排序
         */
        __createMultiSort: function() {
            var me = this,
                tempCol = [],
                userMulCol = me.options.data ? me.options.data.multiSortColumnsArr : [],
                sortColumns = [];
            // 创建一次就可以
            if (me._multiSortWin) {
                me._multiSortWin.show();
                return;
            }
            //支持用户自己定义多列排序的列,并且优先使用用户自己定义的列
            if ($.isArray(userMulCol) && userMulCol.length > 0) {
                tempCol = userMulCol;
            } else {
                tempCol = me.headerColumns;
            }
            $.each(tempCol, function(i, obj) {
                //永远隐藏的列不放进多列排序中,而暂时隐藏的列需要放在里面
                if (!obj.hiddenForever && $.isNotNull(obj.header) && obj.sortable) {
                    sortColumns.push({
                        "text": obj.header,
                        "value": obj.name,
                        "data": obj
                    });
                }
            });

            function sortCol(comboboxLabelText, data) {
                var items = [];
                var combobox = new Sweet.form.ComboBox({
                    label: true,
                    pleaseSelect: true,
                    labelWidth: i18n.multiSortWin.comboLabelWidth,
                    width: i18n.multiSortWin.comboWidth,
                    data: data,
                    labelText: comboboxLabelText,
                    tip: true
                });
                items.push(combobox);
                var radioGroup = new Sweet.form.RadioGroup({
                    width: i18n.multiSortWin.radioWidth,
                    columns: "auto",
                    data: [{
                        text: i18n.multiSortWin.asc,
                        value: "ASC"
                    }, {
                        text: i18n.multiSortWin.desc,
                        value: "DESC"
                    }],
                    tip: true
                });
                items.push(radioGroup);
                var panel = new Sweet.panel.FlowPanel({
                    width: "100%",
                    height: 25,
                    items: items,
                    itemExtend: true
                });

                return {
                    "combobox": combobox,
                    "radioGroup": radioGroup,
                    "panel": panel
                };
            }

            function judge(data, obj) {
                if (data && Sweet.core.i18n.combobox.pleaseSelect === data.value) {
                    return;
                }
                if ($.equals(data, obj.combobox.getValue())) {
                    obj.combobox.setValue({
                        "value": Sweet.core.i18n.combobox.pleaseSelect,
                        "text": Sweet.core.i18n.combobox.pleaseSelect
                    });
                    obj.radioGroup.setValue({});
                }
            }

            function isAllNull(combobox, radioGroup) {
                var combVal = combobox.getValue(),
                    radioVal = radioGroup.getValue();
                if ((!combVal || !combVal.value || Sweet.core.i18n.combobox.pleaseSelect === combVal.value) && (!radioVal || !radioVal.value)) {
                    return true;
                }
                return false;
            }

            function isOneNull(combobox, radioGroup) {
                var combVal = combobox.getValue(),
                    isCombValNull = false,
                    radioVal = radioGroup.getValue(),
                    isRadioValNull = false;
                if (!combVal || !combVal.value || Sweet.core.i18n.combobox.pleaseSelect === combVal.value) {
                    isCombValNull = true;
                }

                if (!radioVal || !radioVal.value) {
                    isRadioValNull = true;
                }

                if ((isCombValNull && !isRadioValNull) || (isRadioValNull && !isCombValNull)) {
                    return true;
                }

                return false;
            }

            function getOrders(combobox, radioGroup) {
                var comboboxVal = combobox.getValue(),
                    radioVal = radioGroup.getValue();
                if (radioVal && radioVal.text) {
                    return me.__getOrderFormat(comboboxVal.data.name, radioVal.value, comboboxVal.data.dataType);
                }

                return null;
            }

            var firstCol = me.firstCol = sortCol(i18n.multiSortWin.firstSort, sortColumns),
                secondCol = me.secondCol = sortCol(i18n.multiSortWin.secondSort, sortColumns),
                thirdCol = me.thirdCol = sortCol(i18n.multiSortWin.thirdSort, sortColumns),
                vPanel,
                win;
            firstCol.combobox.addListener("change", function(e, data) {
                judge(data, secondCol);
                judge(data, thirdCol);
            });
            secondCol.combobox.addListener("change", function(e, data) {
                judge(data, firstCol);
                judge(data, thirdCol);
            });
            thirdCol.combobox.addListener("change", function(e, data) {
                judge(data, firstCol);
                judge(data, secondCol);
            });
            //在选择"请选择"后，需要清除radio的选择项，清空--DTS2014082509942
            function resetRadio(data, radioGroup) {
                if (data.value && data.value.value === Sweet.core.i18n.combobox.pleaseSelect) {
                    radioGroup.setValue({});
                }
            }
            firstCol.combobox.addListener("afterCloseFloatWin", function(e, data) {
                resetRadio(data, firstCol.radioGroup);
            });
            secondCol.combobox.addListener("afterCloseFloatWin", function(e, data) {
                resetRadio(data, secondCol.radioGroup);
            });
            thirdCol.combobox.addListener("afterCloseFloatWin", function(e, data) {
                resetRadio(data, thirdCol.radioGroup);
            });
            //在选择"请选择"后，需要清除radio的选择项，清空---DTS2014082509942

            vPanel = new Sweet.panel.VPanel({
                items: [firstCol.panel, secondCol.panel, thirdCol.panel]
            });
            me._multiSortWin = win = new Sweet.Window({
                width: i18n.multiSortWin.winWidth,
                height: 190,
                title: i18n.multiSortWin.title,
                //去掉动画效果
                content: vPanel,
                listeners: {
                    ok: function() {
                        // 判断是否有选择
                        if (isAllNull(firstCol.combobox, firstCol.radioGroup) && isAllNull(secondCol.combobox, secondCol.radioGroup) && isAllNull(thirdCol.combobox, thirdCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.firstNoSelectTip);
                            return false;
                        }

                        // 第一列是否选择
                        if (isOneNull(firstCol.combobox, firstCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.firstNoSelectTip);
                            return false;
                        }

                        // 第二列是否选择
                        if (isOneNull(secondCol.combobox, secondCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.secondNoSelectTip);
                            return false;
                        }

                        // 第三列是否选择
                        if (isOneNull(thirdCol.combobox, thirdCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.thirdNoSelectTip);
                            return false;
                        }

                        // 重新加载数据
                        me.orders = [];
                        var firstVal = getOrders(firstCol.combobox, firstCol.radioGroup),
                            secondVal = getOrders(secondCol.combobox, secondCol.radioGroup),
                            thirdVal = getOrders(thirdCol.combobox, thirdCol.radioGroup);
                        if (firstVal) {
                            me.orders.push(firstVal);
                        }
                        if (secondVal) {
                            me.orders.push(secondVal);
                        }
                        if (thirdVal) {
                            me.orders.push(thirdVal);
                        }
                        // 当前页记为1
                        if (me.page) {
                            me.page.currentPage = 1;
                        }
                        if (me.options.store) {
                            me.options.store._setDataPage(me.getPageInfo());
                            me.options.store.load(me.getAllConditions());
                        } else {
                            me._triggerHandler(null, "multiOrders", me.getAllConditions());
                        }
                        //清空所有列上的排序标志
                        $.each(me.headerTdEls, function(index, obj) {
                            if (obj) {
                                obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                                    .addClass(gridHeaderTdCommonClass);
                                obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                                //给所有的多列排序列加上排序标志
                                var colName = obj.attr("columnName");
                                for (var m = 0; m < me.orders.length; m++) {
                                    if (colName === me.orders[m].name) {
                                        var cls = gridHeaderSortAscClass;
                                        if (me.orders[m].order === Sweet.constants.sortType.DESC) {
                                            cls = gridHeaderSortDescClass;
                                        }
                                        obj.addClass(cls);
                                        obj.removeClass(gridHeaderTdCommonClass);
                                        obj.find("div:first").addClass(gridHeaderTextClass);
                                    }
                                }
                            }
                        });
                    }
                }
            });
            win.show();
        },
        /**
         * @private
         * @description 获取选择面板弹出位置
         * @param {Object} targetEl 目的dom对象
         * @param {Object} renderEl dom对象
         */
        __getReszieFloatOffset: function(targetEl, renderEl) {
            var _left,
            _top,
            _minLeft = 1;
            var win = $(window),
                doc = $(document),
                maxShown = win.height() + doc.scrollTop(),
                maxVShown = win.width() + doc.scrollLeft(),
                targetElOffset = targetEl.offset(),
                targetElHeight = targetEl.outerHeight(true),
                targetElWidth = targetEl.outerWidth(true),
                floatElWidth = renderEl.outerWidth(true),
                floatElHeight = renderEl.outerHeight(true);
            _top = targetElOffset.top + targetElHeight;
            _left = targetElOffset.left;
            if (maxVShown - (floatElWidth + _left) <= 0) {
                if (_left + targetElWidth > floatElWidth) {
                    _left = _left - floatElWidth + targetElWidth;
                } else {
                    _left = _minLeft;
                }
            }
            // 下面显示不下浮动框，且上面可以显示下浮动框，才选择在上面显示
            if (maxShown - targetElOffset.top - targetElHeight <= floatElHeight) {
                if (targetElOffset.top >= floatElHeight) {
                    _top = targetElOffset.top - floatElHeight;
                }
            }
            return {
                "left": _left,
                "top": _top
            };
        },
        /**
         * @private
         * @description 获取选择面板弹出位置
         * @param {Object} rInfo 缩放框信息
         * @param {Object} tList 列表对象
         * @param {Object} me grid对象
         */
        __doResizeElMove: function(rInfo, tList, me) {
            var e = rInfo.event,
                type = rInfo.resizeType,
                bW = 5,
                initLeft = 0,
                initTop,
                tempOffset = rInfo.offset,
                tempWidth,
                tempHeight,
                pgX,
                pgY,
                tw,
                th,
                _twh5 = 5,
                _tww = 20;
            initLeft = tempOffset.left;
            initTop = tempOffset.top;
            pgX = e.pageX;
            pgY = e.pageY;
            tw = $(document).innerWidth() - bW;
            th = $(document).innerHeight() - bW;
            if (pgX > tw) {
                pgX = tw;
            }
            if (pgY > th) {
                pgY = th;
            }
            if (pgY <= _twh5) {
                pgY = _twh5;
            }
            if (pgX <= _twh5) {
                pgX = _twh5;
            }
            //刷新宽度
            if ("xy" == type || "xr" == type || "xl" == type) {
                //计算宽度
                if ("xl" == type) {
                    tempWidth = rInfo.resizeInfo.width + initLeft - pgX;
                } else {
                    tempWidth = pgX - initLeft;
                }
                //如果小于最小宽度值,则设置成最小宽度值
                if (tempWidth < rInfo.resizeInfo.initWidth) {
                    rInfo.resizeInfo._$moveEl.width(rInfo.resizeInfo.initWidth - bW);
                } else {
                    if (tempWidth > (me.gridEl.width() - _tww)) {
                        tempWidth = me.gridEl.width() - _tww;
                    }
                    rInfo.resizeInfo._$moveEl.width(tempWidth);
                }
            }
            //刷新高度
            if ("xy" == type || "yt" == type || "yb" == type) {
                //计算宽度
                if ("yt" == type) {
                    tempHeight = rInfo.resizeInfo.height + initTop - pgY;
                } else {
                    tempHeight = pgY - initTop;
                }
                //如果小于最小高度值,则设置成最小高度值
                if (tempHeight < rInfo.resizeInfo.initHeight) {
                    rInfo.resizeInfo._$moveEl.height(rInfo.resizeInfo.initHeight - bW);
                } else {
                    rInfo.resizeInfo._$moveEl.height(tempHeight);
                }
            }
            return false;
        },
        /**
         * @private
         * @description 创建win列选择dom
         * @param {Object} winEl 列选择对象winEl
         * @param {Object} columnData 列数据
         * @param {Object} okBtn win里的OK按钮
         * @param {Object} cancelBtn win里的CANCEL按钮
         */
        __createSelectColumnWinEl: function(winEl, columnData, okBtn, cancelBtn) {
            if (okBtn) {
                okBtn.setDisabled(true);
            }
            if (!winEl || winEl.length <= 0 || !columnData) {
                return;
            }
            var me = this,
                cData = columnData["data"],
                cValue = columnData["value"],
                cDataLength,
                itemData,
                rowPanel,
                rows,
                rAEls = [],
                rowEl,
                rowAEl,
                rowItemEl,
                rowAllEl,
                rowAllAEl,
                rowItemAllEl,
                column = 3,
                index;
            if (!cData || cData.length <= 0) {
                return;
            }
            //全选DOM
            rowAllEl = $("<div>").addClass(gridSelectColumnWinRowClass + " " + gridSelectColumnWinAllRowClass).appendTo(winEl);
            rowItemAllEl = $("<div>").addClass(gridSelectColumnCheckWrapClass).appendTo(rowAllEl);
            rowAllAEl = $("<a>").addClass(gridSelectColumnUnCheckedClass).appendTo(rowItemAllEl);
            $("<span>").text(Sweet.core.i18n.combobox.checkAll).appendTo(rowItemAllEl);
            //记录全选EL和各列的EL
            me.__selectColumnWinAEl = {};
            me.__selectColumnWinAEl["allAEl"] = rowAllAEl;
            me.__selectColumnWinAEl["rAEls"] = {};
            me.__selectColumnWinAEl["okBtn"] = okBtn;
            me.__selectColumnWinAEl["cancelBtn"] = cancelBtn;
            okBtn.setDisabled(true);
            rowPanel = $("<div>").addClass(gridSelectColumnWinPanelClass).appendTo(winEl);
            cDataLength = cData.length;
            rows = Math.ceil(cDataLength / column);
            for (var i = 0; i < rows; i++) {
                rowEl = $("<div>").addClass(gridSelectColumnWinRowClass);
                for (var j = 0; j < column; j++) {
                    index = i * column + j;
                    if (index >= cDataLength) {
                        break;
                    }
                    itemData = cData[index];
                    rowItemEl = $("<div>").addClass(gridSelectColumnCheckWrapClass).appendTo(rowEl);
                    if ((index + 1) % column == 0) {
                        rowItemEl.addClass(gridSelectColumnCheckWrapEndClass);
                    }
                    rowAEl = $("<a>").data(itemData).addClass(gridSelectColumnUnCheckedClass).appendTo(rowItemEl);
                    me.__selectColumnWinAEl["rAEls"][itemData["value"]] = rowAEl;
                    $("<span>").text(itemData["text"]).appendTo(rowItemEl);
                    rowItemEl.bind("click", {
                        "me": me,
                        isAll: false,
                        aEl: rowAEl
                    }, me._doColumnCheckChange);
                }
                rowEl.appendTo(rowPanel);
            }
            rowItemAllEl.bind("click", {
                "me": me,
                isAll: true,
                aEl: rowAllAEl
            }, me._doColumnCheckChange);
            me._doCheckedSelectColumnWin(cValue);
        },
        /**
         * @private
         * @description win列选择单击列选中处理
         * @param {Object} e 事件对象
         */
        _doColumnCheckChange: function(e) {
            var me = e.data.me,
                aEl = e.data["aEl"],
                rAEls,
                allAEl,
                okBtn,
                cCount = 0,
                isAll = e.data["isAll"],
                isChecked = false,
                _removeClass,
                _addClass;
            if (!me.__selectColumnWinAEl) {
                return;
            }
            allAEl = me.__selectColumnWinAEl["allAEl"];
            rAEls = me.__selectColumnWinAEl["rAEls"];
            okBtn = me.__selectColumnWinAEl["okBtn"];
            if (aEl.hasClass(gridSelectColumnUnCheckedClass)) {
                isChecked = true;
                aEl.removeClass(gridSelectColumnUnCheckedClass).addClass(gridSelectColumnCheckedClass);
            } else {
                isChecked = false;
                aEl.removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
            }
            if (isAll) {
                if (isChecked) {
                    _removeClass = gridSelectColumnUnCheckedClass;
                    _addClass = gridSelectColumnCheckedClass;
                } else {
                    _removeClass = gridSelectColumnCheckedClass;
                    _addClass = gridSelectColumnUnCheckedClass;
                }
                for (var key in rAEls) {
                    rAEls[key].removeClass(_removeClass).addClass(_addClass);
                }
            } else {
                if (allAEl) {
                    if (isChecked) {
                        for (var key in rAEls) {
                            if (rAEls[key].hasClass(gridSelectColumnUnCheckedClass)) {
                                isChecked = false;
                                break;
                            }
                        }
                    }
                    if (isChecked) {
                        allAEl.removeClass(gridSelectColumnUnCheckedClass).addClass(gridSelectColumnCheckedClass);
                    } else {
                        allAEl.removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
                    }
                }
            }
            for (var key in rAEls) {
                if (rAEls[key].hasClass(gridSelectColumnCheckedClass)) {
                    cCount++;
                    break;
                }
            }
            if (okBtn) {
                if (cCount > 0) {
                    okBtn.setDisabled(false);
                } else {
                    okBtn.setDisabled(true);
                }
            }
        },
        /**
         * @private
         * @description win列选择设置列选中处理
         * @param {Array} value 待选中的列
         */
        _doCheckedSelectColumnWin: function(value) {
            var me = this,
                rAEls,
                allAEl,
                tObj,
                okBtn,
                cCount = 0,
                isAll = true;
            if (!me.__selectColumnWinAEl) {
                return;
            }
            allAEl = me.__selectColumnWinAEl["allAEl"];
            rAEls = me.__selectColumnWinAEl["rAEls"];
            okBtn = me.__selectColumnWinAEl["okBtn"];
            if (!rAEls || !allAEl) {
                return;
            }
            if (okBtn) {
                okBtn.setDisabled(true);
            }
            if (!value || value.length <= 0) {
                for (var key in rAEls) {
                    rAEls[key].removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
                }
                allAEl.removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
                return;
            }
            tObj = {};
            for (var i = 0; i < value.length; i++) {
                tObj[value[i]["value"]] = true;
            }
            for (var key in rAEls) {
                if (tObj[rAEls[key].data()["value"]]) {
                    rAEls[key].removeClass(gridSelectColumnUnCheckedClass).addClass(gridSelectColumnCheckedClass);
                    cCount++;
                } else {
                    rAEls[key].removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
                    isAll = false;
                }
            }
            if (isAll) {
                allAEl.removeClass(gridSelectColumnUnCheckedClass).addClass(gridSelectColumnCheckedClass);
            } else {
                allAEl.removeClass(gridSelectColumnCheckedClass).addClass(gridSelectColumnUnCheckedClass);
            }
            tObj = null;
            if (okBtn && cCount > 0) {
                okBtn.setDisabled(false);
            }
        },
        /**
         * @private
         * @description win列选择设获取列选中处理
         * @return {Array} value 选中的列
         */
        _getCheckedSelectColumnWin: function() {
            var me = this,
                rAEls,
                value = [];
            if (!me.__selectColumnWinAEl) {
                return value;
            }
            rAEls = me.__selectColumnWinAEl["rAEls"];
            if (!rAEls) {
                return value;
            }
            for (var key in rAEls) {
                if (rAEls[key].hasClass(gridSelectColumnCheckedClass)) {
                    value.push(rAEls[key].data());
                }
            }
            return value;
        },
        /**
         * @private
         * @description win列选择点击OK处理
         */
        _doOkSelectColumnWin: function() {
            var me = this,
                columnValue;
            columnValue = me._getCheckedSelectColumnWin();
            if (columnValue && columnValue.length > 0) {
                for (var i = 0; i < me.headerColumns.length; i++) {
                    for (var j = 0; j < columnValue.length; j++) {
                        if (columnValue[j]["value"] == me.headerColumns[i]["name"]) {
                            me.headerColumns[i]["hidden"] = false;
                            break;
                        } else {
                            me.headerColumns[i]["hidden"] = true;
                        }
                    }
                }
            } else {
                for (var i = 0; i < me.headerColumns.length; i++) {
                    me.headerColumns[i]["hidden"] = true;
                }
            }
            me._headerChanged(me.headerColumns, true);
        },
        /**
         * @private
         * @description 创建列选择面板
         * @param {Object} obj 列选择对象
         */
        __createSelectColumnPanel: function(obj) {
            var me = this,
                offset,
                maxzindex,
                _selectColumn = me.options.data.selectColumn,
                _sResziAble = me.options.data.selectColumnResizAble;
            //如果是以弹出框形式选择
            if ("win" == _selectColumn) {
                var scWinBodyId,
                _html,
                okBtn,
                cancelBtn;
                if (me.selectColWin) {
                    me.selectColWin.show();
                    return;
                }
                scWinBodyId = me.options.id + "-select-column-win";
                _html = "<div id='" + scWinBodyId + "' class='" + gridSelectColumnWinBodyClass + "'></div>";
                okBtn = new Sweet.form.Button({
                    width: 80,
                    value: {
                        value: scWinBodyId + "-okbtn",
                        text: i18n.confirm
                    },
                    click: function() {
                        me.selectColWin.close();
                        me._doOkSelectColumnWin();
                    }
                });
                cancelBtn = new Sweet.form.Button({
                    width: 80,
                    value: {
                        value: scWinBodyId + "-cancelbtn",
                        text: Sweet.core.i18n.dialog.cancel
                    },
                    click: function() {
                        me.selectColWin.close();
                        me._doCheckedSelectColumnWin(me.__getSelectColumnData1()["value"]);
                    }
                });
                me.selectColWin = Sweet.Window({
                    width: 833,
                    height: 400,
                    padding: [10, 10, 10, 10],
                    title: i18n.selectCol,
                    buttons: [okBtn, cancelBtn],
                    content: {
                        html: _html
                    },
                    listeners: {
                        "cancel": function() {
                            me._doCheckedSelectColumnWin(me.__getSelectColumnData1()["value"]);
                        }
                    }
                });
                me.__createSelectColumnWinEl($("#" + scWinBodyId), me.__getSelectColumnData1(), okBtn, cancelBtn);
                me.selectColWin.show();
                return;
            }
            if (!(true == _sResziAble || "true" == _sResziAble || "xy" == _sResziAble || "x" == _sResziAble || "y" == _sResziAble)) {
                _sResziAble = false;
            }
            if (me.selectColEl) {
                maxzindex = $.getMaxZIndex(me.selectColEl.css("z-index"));
                if (_sResziAble) {
                    offset = me.__getReszieFloatOffset(obj, me.selectColEl);
                } else {
                    offset = $.getFloatOffset(obj, me.selectColEl, true);
                }
                me.selectColEl.css(offset).css({
                    "z-index": maxzindex
                }).show().data("selectColFlag", true);
                return;
            }

            var id = me.options.id + "-select-column",
                selectColEl = $("<div>").attr("id", id)
                    .addClass(me.winBgClass + " sweet-grid-select-column")
                    .bind("click", function() {
                    selectColEl.data("selectColFlag", true);
                }).appendTo($(document.body)),
                list,
                columnData,
                data = [],
                value = [];
            columnData = me.__getSelectColumnData();
            data = columnData.data;
            value = columnData.value;
            var maxh = me.gridEl.height() - 70;

            var hl = data.length * 22 + 10;
            var _height = maxh;
            if (hl <= maxh) {
                _height = "100%";
            }
            list = new Sweet.list.OptimizeList({
                width: 200,
                height: _height,
                multi: true,
                data: data,
                isBorder: true,
                resizAble: _sResziAble,
                value: value,
                minRemains: 1,
                tip: true,
                renderTo: id
            });
            // 注册复选框点击事件
            list.addListener("checkboxClick", function(e, data) {
                me.__onSingleColumnHiddenClick(e, data.data.index, data.checked);
            });
            if (_sResziAble) {
                list.addListener("resizeLayout", function(renderEl, tList) {
                    me.selectColEl.css(me.__getReszieFloatOffset(obj, renderEl));
                });
                list.addListener("resizeElMove", function(rInfo, tList) {
                    me.__doResizeElMove(rInfo, tList, me);
                });
            }
            offset = $.getFloatOffset(obj, selectColEl, true);
            maxzindex = $.getMaxZIndex(selectColEl.css("z-index"));
            selectColEl.css(offset).css({
                "z-index": maxzindex
            }).show().data("selectColFlag", true);
            me.selectColEl = selectColEl;
            me.selectColList = list;
        },
        /**
         * @private
         * @description 获取列信息，用于设置列选择使用
         */
        __getSelectColumnData: function() {
            var me = this,
                headerColumns = me.headerColumns,
                hiddenForever,
                i,
                length = headerColumns.length,
                temp,
                tempVal,
                data = [],
                value = [];
            for (i = 0; i < length; i++) {
                temp = headerColumns[i];
                hiddenForever = temp.hiddenForever || false;
                tempVal = {
                    "text": temp.header,
                    "value": temp.name,
                    "data": {
                        "index": i
                    }
                };
                if (!hiddenForever) {
                    data.push(tempVal);
                    if (!temp.hidden) {
                        value.push(tempVal);
                    }
                }
            }
            return {
                "data": data,
                "value": value
            };
        },
        /**
         * @private
         * @description 获取列信息，除了永久隐藏列外都获取,用于设置列选择使用
         */
        __getSelectColumnData1: function() {
            var me = this,
                headerColumns = me.headerColumns,
                hiddenForever,
                i,
                length = headerColumns.length,
                temp,
                tempVal,
                data = [],
                value = [];
            for (i = 0; i < length; i++) {
                temp = headerColumns[i];
                hiddenForever = temp.hiddenForever || false;
                tempVal = {
                    "text": temp.header,
                    "value": temp.name,
                    "data": {
                        "index": i
                    }
                };
                if (!hiddenForever) {
                    data.push(tempVal);
                    if (!temp.hidden) {
                        value.push(tempVal);
                    }
                } else {
                    temp.hidden = true;
                }
            }
            return {
                "data": data,
                "value": value
            };
        },
        /**
         * @private
         * @description 创建导出面板
         * @param {Object} obj 弹出框浮着的目标对象
         */
        __createExportPanel: function(obj) {
            var me = this,
                offset,
                exportW = 80;
            if (me.exportEl) {
                offset = $.getFloatOffset(obj, me.exportEl, true);
                me.exportEl.css(offset).show().data("exportFlag", true);
                return;
            }
            //自定义导出
            var exportCType = me.options.data.exportCType;
            if (exportCType && exportCType.length > 0) {
                me.exportEl = me._createExportEl(exportCType);
                maxzindex = $.getMaxZIndex(undefined, "sweet-grid-action-bar-pic");
                me.exportEl.data("exportFlag", true)
                    .bind("click", {
                    "me": me
                }, me._onExportCClick)
                    .appendTo($(document.body)).css({
                    left: -10000,
                    top: -10000,
                    "z-index": maxzindex
                });
                offset = $.getFloatOffset(obj, me.exportEl, true);
                me.exportEl.css(offset);
                return;
            }
            var exportType = me.options.data.exportType || [],
                length = exportType.length,
                exportEl = $("<div>").width(exportW).addClass(me.winBgClass + " sweet-grid-export"),
                ulEl = $("<ul>"),
                liEl,
                i,
                temp;
            for (i = 0; i < length; i++) {
                temp = exportType[i];
                if (exportTypeConf.CSV === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiCsvClass).text(exportTypeText.csv).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportCsvClass).prependTo(liEl);
                } else if (exportTypeConf.XLS === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiXlsClass).text(exportTypeText.xls).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportXlsClass).prependTo(liEl);
                } else if (exportTypeConf.PDF === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiPdfClass).text(exportTypeText.pdf).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportPdfClass).prependTo(liEl);
                }
            }
            ulEl.appendTo(exportEl);
            offset = $.getFloatOffset(obj, exportEl, true);
            var maxzindex = $.getMaxZIndex(undefined, "sweet-grid-action-bar-pic");
            exportEl.data("exportFlag", true)
                .bind("click", {
                "me": me
            }, me._onExportClick)
                .appendTo($(document.body)).css(offset).css("z-index", maxzindex);
            me.exportEl = exportEl;
        },
        /**
         * @private
         * @description 自定义导出点击事件
         * @param {Array} exportCType 导出类型数据
         */
        _createExportEl: function(exportCType) {
            var me = this,
                exportCEl = $("<div>").addClass(me.winBgClass + " sweet-grid-export sweet-grid-exportC"),
                ulEl = $("<ul>"),
                liEl,
                spanEl,
                tempData;
            for (var i = 0; i < exportCType.length; i++) {
                tempData = exportCType[i];
                if (exportTypeConf.CSV === tempData["icon"]) {
                    liEl = $("<li>").addClass(actionBarExportLiCsvClass).text(tempData["text"]).appendTo(ulEl);
                    spanEl = $("<span>").addClass(actionBarExportCsvClass).prependTo(liEl);
                } else if (exportTypeConf.XLS === tempData["icon"]) {
                    liEl = $("<li>").addClass(actionBarExportLiXlsClass).text(tempData["text"]).appendTo(ulEl);
                    spanEl = $("<span>").addClass(actionBarExportXlsClass).prependTo(liEl);
                } else if (exportTypeConf.PDF === tempData["icon"]) {
                    liEl = $("<li>").addClass(actionBarExportLiPdfClass).text(tempData["text"]).appendTo(ulEl);
                    spanEl = $("<span>").addClass(actionBarExportPdfClass).prependTo(liEl);
                } else {
                    liEl = $("<li>").addClass(actionBarExportLiCClass).text(tempData["text"]).appendTo(ulEl);
                    spanEl = $("<span>").addClass(actionBarExportCClass).prependTo(liEl);
                    if (tempData["icon"]) {
                        spanEl.css({
                            "background": 'url(' + tempData["icon"] + ')'
                        });
                    }
                }
                spanEl.addClass(tempData["value"]);
                liEl.data("data", tempData);
            }
            ulEl.appendTo(exportCEl);
            return exportCEl;
        },
        /**
         * @private
         * @description 自定义导出点击事件
         * @param {Object} e 事件对象
         */
        _onExportCClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                exportCfg,
                headerColumns = me.headerColumns,
                columns = [],
                column = {},
                data = {},
                temp,
                i;
            // 获取列信息
            for (i = 0; i < headerColumns.length; i++) {
                temp = headerColumns[i];
                column = {};
                column.header = temp.header;
                column.name = temp.name;
                column.dataType = temp.dataType;
                column.hidden = temp.hidden;
                columns.push(column);
            }
            exportCfg = $(self).data("data");
            data = {
                "type": exportCfg["value"],
                "columns": columns
            };
            me._triggerHandler(e, eventNameExport, data);
        },
        /**
         * @private
         * @description 导出点击事件
         * @param {Object} e 事件对象
         */
        _onExportClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                headerColumns = me.headerColumns,
                columns = [],
                column = {},
                data = {},
                temp,
                i;
            // 获取列信息
            for (i = 0; i < headerColumns.length; i++) {
                temp = headerColumns[i];
                column = {};
                column.header = temp.header;
                column.name = temp.name;
                column.dataType = temp.dataType;
                column.hidden = temp.hidden;
                columns.push(column);
            }
            // csv
            if (self.hasClass(actionBarExportLiCsvClass)) {
                data = {
                    "type": exportTypeText.csv,
                    "columns": columns
                };
            }
            // xls
            else if (self.hasClass(actionBarExportLiXlsClass)) {
                data = {
                    "type": exportTypeText.xls,
                    "columns": columns
                };
            }
            // pdf
            else if (self.hasClass(actionBarExportLiPdfClass)) {
                data = {
                    "type": exportTypeText.pdf,
                    "columns": columns
                };
            } else {
                me._error("Unknown export type.");
                return;
            }

            me._triggerHandler(e, eventNameExport, data);
        },
        /**
         * @private
         * @description 创建表头
         */
        _createGridHeader: function() {
            var me = this;
            if (!me.options.data.columns) {
                return true;
            }
            // 恢复横向滚动
            if (me.headerDivEl) {
                me.headerDivEl.css({
                    "left": 0
                });
            }
            if (me.resizeEl) {
                me.resizeEl.css({
                    "left": 0
                });
            }
            // 移除全选状态
            if (me.allCheckboxEl) {
                me.allCheckboxEl.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);
            }
            //比较值是否一样，不一样才创建表头
            if ($.equals(me.historyColumns, me.options.data.columns)) {
                return false;
            } else {
                me.gridScrollLeftFlag = 0;
            }

            // 记录历史columns配置
            me.historyColumns = $.objClone(me.options.data.columns);
            if (me.onlyUpdateHeader) {
                for (var i = 0; i < me.options.data.columns.length; i++) {
                    var temp1 = me.options.data.columns[i];
                    if (me.headerTextDivs[temp1.name]) {
                        var tt = me.headerTextDivs[temp1.name];
                        //首先看是否有提示信息，如果有，更新提示信息
                        if (temp1.tooltip) {
                            tt.attr("title", temp1.tooltip)
                        }

                        //看是否有过滤标记，有的话需要重新添加上
                        var filterSpan = tt.find("." + gridHeaderFilterPicClass);
                        var hasFilterSpan = false;
                        if (filterSpan && filterSpan.length > 0) {
                            hasFilterSpan = true;
                        }
                        //更新文字信息
                        tt.text(temp1.header);
                        //如果有过滤，添加过滤标记
                        if (hasFilterSpan) {
                            $("<span>").addClass(gridHeaderFilterPicClass).appendTo(tt);
                        }
                    }
                }
                return false;
            }
            // 先销毁之前的元素，再创建
            me.__destroyTableHeader();
            var options = me.options,
                columns = $.objClone(options.data.columns),
                checkbox = options.data.checkbox,
                singleSelect = options.data.singleSelect,
                sn = options.data.sn,
                fold = options.data.fold,
                gridHeaderClass = "sweet-grid-header",
                headerEl = me.headerEl = $("<div>").addClass(gridHeaderClass).appendTo(me.gridEl),
                headerDivEl = me.headerDivEl = $("<div>").appendTo(headerEl),
                headerTableEl = me.headerTableEl = $("<table>")
                    .attr({
                    "cellspacing": 0,
                    "cellpadding": 0,
                    "border": 0
                })
                    .appendTo(headerDivEl),
                headerTrEl = $("<tr>").appendTo(headerTableEl),
                headerTdEl,
                headerTdEls = [],
                headerTdDivEl,
                index = 0,
                widths = [],
                rows = [],
                tdArr = [],
                tdTempArr = [];
            // 保存过滤组件对象，格式为{"name": , "dataType": , "value": {}}
            me.filterObjs = [];
            // 保存过滤条件
            me.filters = {};
            //保存过滤面板对象
            me.filterPanels = [];
            // 保存排序条件
            me.orders = [];
            // 记录已隐藏列数
            me.hiddenColumn = 0;
            // 列名和列号对应关系
            me.columnRelation = {};
            me.count = 0;
            me.headerTextDivs = {};
            // 修正列数据
            me._amendColumns(columns);
            // 表头数据预处理，将树转换成数组
            me._parseHeader(columns, 0, rows);
            // @TODO 重新计算colspan，支持无限级表格列头合并，暂只支持两级
            // 列和列号对应关系
            me.__ColumnNumRelation(columns);

            // 是否有序号列
            if (fold) {
                var gridFoldBorderCls = "sweet-grid-fold-no-right-border";
                var foldI = index++;
                headerTdEl = $("<td>").attr("rowspan", rows.length)
                    .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                    .appendTo(headerTrEl);
                if ((checkbox && !singleSelect) || sn) {
                    headerTdEl.addClass(gridFoldBorderCls)
                }
                headerTdDivEl = $("<div>").appendTo(headerTdEl);
                headerTdEls[foldI] = headerTdEl;
                widths[foldI] = foldWidth;
                me.count++;
            }

            // 是否有复选框
            if (checkbox && !singleSelect) {
                var checkboxI = index++;
                headerTdEl = $("<td>").attr("rowspan", rows.length)
                    .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                    .mouseenter({
                    "me": me
                }, me.__onHeaderTdMouseEnter)
                    .mouseleave({
                    "me": me
                }, me.__onHeaderTdMouseLeave)
                    .appendTo(headerTrEl);
                headerTdDivEl = $("<div>").addClass(gridCheckboxClass).appendTo(headerTdEl);
                me.allCheckboxEl = $("<a>").addClass(checkboxUncheckdClass)
                    .bind("click", {
                    "me": me
                }, me._onAllRowClick)
                    .appendTo(headerTdDivEl);
                headerTdEls[checkboxI] = headerTdEl;
                widths[checkboxI] = checkboxWidth;
                me.count++;
            }

            // 是否有序号列
            if (sn) {
                var snI = index++;
                headerTdEl = $("<td>").attr("rowspan", rows.length)
                    .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                    .mouseenter({
                    "me": me
                }, me.__onHeaderTdMouseEnter)
                    .mouseleave({
                    "me": me
                }, me.__onHeaderTdMouseLeave)
                    .appendTo(headerTrEl);
                headerTdDivEl = $("<div>").text(i18n.SN).addClass(gridHeaderTextClass).appendTo(headerTdEl);
                headerTdEls[snI] = headerTdEl;
                widths[snI] = fold ? 50 : snWidth;
                me.count++;
            }

            // 处理表头，包括表头合并
            tdTempArr = me._generateHeader(rows, headerTrEl, headerTableEl);
            // 修正列数据
            tdArr = me._amendHeader(tdTempArr);

            me.headerTdEls = headerTdEls;
            // 所有列宽度
            me.widths = widths;
            //存放原始的列宽信息，即用户配置的宽度或没配置时为ncWidth
            me.originalWidths = JSON.parse(JSON.stringify(widths));
            // 保存表头
            me.headerColumns = [];
            for (var k = 0; k < tdArr.length; k++) {
                var t = tdArr[k].tdEl.attr("column", k);
                if ($.isNotNull(tdArr[k].column)) {
                    t.attr("columnName", tdArr[k].column.name);
                }
                me.headerTdEls.push(t);
                me.widths.push(!$.isNull(tdArr[k].width) ? tdArr[k].width : minColumnWidth);
                me.originalWidths.push(!$.isNull(tdArr[k].width) ? tdArr[k].width : ncWidth);
                me.headerColumns.push(tdArr[k].column);
            }

            // 实现列宽动态改变
            me._columnResizable();
            me.headerReRender = true;
            return true;
        },
        /**
         * @public
         * @description 内部调用,表头元素中的属性发生改变，例如某列的hidden发生变化，可调用 些方法进行隐藏或显示
         * @param {Array} headers  列头数组，与创建表格的columns中相同
         * @param {Boolean} isWin  是否为列选择调用
         */
        _headerChanged: function(headers, isWin) {
            if ($.isNull(headers) || !$.isArray(headers) || headers.length <= 0) {
                return;
            }
            var me = this,
                i = 0,
                index,
                hc = [],
                len = headers.length,
                columns = me.headerColumns,
                temp,
                hCount = 0;
            if (len > me.headerColumns.length) {
                return;
            }
            for (i = 0; i < len; i++) {
                temp = headers[i];
                if (!$.isPlainObject(temp)) {
                    continue;
                }
                index = me._findIndex(temp.name);
                if (-1 !== index) {
                    //如果此列为永久隐藏,则设置hidden为true
                    if (temp.hiddenForever || columns[index].hiddenForever) {
                        temp.hidden = true;
                    }
                    hc.push({
                        index: index,
                        show: !temp.hidden
                    });
                    columns[index] = $.extend(columns[index], temp);
                }
            }
            for (i = 0; i < columns.length; i++) {
                if (columns[i].hidden) {
                    hCount++;
                }
            }
            me.hiddenColumn = hCount;
            if (hc.length > 0) {
                me.__ColumnsHidden(hc, true);
                me.headerReRender = true;
                me._doLayout(true);
                // 设置列选中列表
                if ("win" == me.options.data.selectColumn && me.selectColWin) {
                    //如果为外部调用则销毁win,点击时重新创建
                    if (isWin) {
                        me._doCheckedSelectColumnWin(me.__getSelectColumnData1().value);
                    } else {
                        if ($.isFunction(me.selectColWin.destroy)) {
                            me.selectColWin.destroy();
                        }
                        me.selectColWin = null;
                        me.__selectColumnWinAEl = null;
                    }
                } else {
                    if (me.selectColList) {
                        me.selectColList.setValue(me.__getSelectColumnData().value);
                    }
                }
            }
        },
        /**
         * @public
         * @description 表头元素中的属性发生改变，例如某列的hidden发生变化，可调用 些方法进行隐藏或显示
         * @param {Array} headers  列头数组，与创建表格的columns中相同
         */
        headerChanged: function(headers) {
            var me = this;
            me._headerChanged(headers);
        },
        /**
         * @private
         * @description 在已经有的列头中找相应的列的索引
         * @param {string} key 寻找的列的key,即name 
         * @returns {Number} 返回相应列在已经有的列中的索引，如果没有，返回-1
         */
        _findIndex: function(key) {
            var me = this,
                i = 0,
                columns = me.headerColumns;

            for (i = 0; i < columns.length; i++) {
                if (key === columns[i].name) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * @private
         * @description 列和列号对应关系
         * @param {Array} columns 表格列
         * @param {Number} column 列数
         */
        __ColumnNumRelation: function(columns, column) {
            var me = this;
            column = column || 0;
            $.each(columns, function(index, obj) {
                if (obj.children && 0 < obj.children.length) {
                    column = me.__ColumnNumRelation(obj.children, column);
                } else {
                    me.columnRelation[obj.name] = column++;
                }
            });

            return column;
        },
        /**
         * @private
         * @description 修正列数据，如果父节点hidden为true，子节点也为true
         * @param {Array} columns 列数组
         * @param {Boolean} b hidden属性值
         */
        _amendColumns: function(columns, b) {
            var me = this,
                temp;
            for (var i = 0; i < columns.length; i++) {
                temp = columns[i];
                if (temp.children && temp.hidden) {
                    me._amendColumns(temp.children, temp.hidden);
                } else {
                    if ($.isNotNull(b)) {
                        temp.hidden = b;
                    }
                }
            }
        },
        /**
         * @private
         * @description 实现列宽动态改变功能
         */
        _columnResizable: function() {
            var me = this,
                options = me.options,
                resizeElClass = "sweet-grid-resize",
                el;
            // 列大小是否可拖动
            if (options.data.resizable) {
                var resizeEl = me.resizeEl = $("<div>").addClass(resizeElClass).appendTo(me.gridEl),
                    columns = me.headerColumns;
                me.resizeEls = [];
                for (var i = 0; i < columns.length; i++) {
                    el = me.resizeEls[i] = $("<div>").attr("num", i)
                        .mousedown({
                        "me": me
                    }, me._onResizeElDown)
                        .addClass(gridHeaderDragClass)
                        .appendTo(resizeEl);
                    if (columns[i].hidden) {
                        el.hide();
                    }
                }
            }
        },
        /**
         * @private
         * @description 列动态改变div鼠标按下事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElDown: function(e) {
            var me = e.data.me,
                self = $(e.target),
                num = $.string.toNumber(self.attr("num")),
                index = num + me.count,
                tdEl = me.headerTdEls[index];
            // 处于隐藏状态的拖动条，不能拖动
            if ("true" !== self.attr("visiable")) {
                return;
            }
            me._helperEl = self;
            me._prevHelperEl = null;
            me._helperElWidth = self.width();
            me._startX = e.pageX;
            me._startLeft = self.position().left;
            me._startTdLeft = tdEl.position().left;
            me._startTdWidth = tdEl.externalWidth();
            // 在document上绑定mouseup、mousemove事件
            $(document).bind("mousemove", {
                "me": me
            }, me._onResizeElMove);
            $(document).bind("mouseup", {
                "me": me
            }, me._onResizeElUp);
            $(document.body).addClass(selectNoneClass);
            me.__dealResizeElClass(true, self, num);
        },
        /**
         * @private
         * @description 列动态改变div鼠标松开事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElUp: function(e) {
            var me = e.data.me,
                self = me._helperEl;
            if (!self) {
                return;
            }
            var x = self.position().left - me._startLeft,
                num = $.string.toNumber(self.attr("num")),
                index = num + me.count,
                headerWidth = 0,
                resizeEl;
            $(document).unbind("mousemove", me._onResizeElMove);
            $(document).unbind("mouseup", me._onResizeElUp);
            $(document.body).removeClass(selectNoneClass);
            me.__dealResizeElClass(false, self, num);

            // 修改表头列宽度
            me.widths[index] += x;
            me.__resetHeaderTdEl(index);
            headerWidth = me.__calHeaderWidth();
            me.__resetHeaderWidth(headerWidth);

            // 刷新内容区宽度
            me.__resetContentWidth();
            me._resetContentTdELWidthByCol(index);

            // 刷新其他拖动条位置
            for (var i = 0; i < me.resizeEls.length; i++) {
                if (num < i) {
                    resizeEl = me.resizeEls[i];
                    resizeEl.css("left", resizeEl.position().left + x);
                }
            }
        },
        /**
         * @private
         * @description 处理拖动线样式
         * @param {Boolean} down 是否鼠标按下
         * @param {Object} el 被拖动线
         * @param {Number} num 编号
         */
        __dealResizeElClass: function(down, el, num) {
            var me = this,
                prevEl,
                defaultZIndex;
            if (down) {
                el.addClass(gridHeaderDownClass).css("z-index", $.getMaxZIndex());
                if (0 !== num) {
                    prevEl = me.__findPrevResizeEl(num);
                    if (prevEl && $.isVisiable(prevEl)) {
                        me._prevHelperEl = prevEl;
                        prevEl.addClass(gridHeaderDownClass).width(1).css("z-index", $.getMaxZIndex());
                    }
                }
            } else {
                defaultZIndex = "auto";
                el.removeClass(gridHeaderDownClass).css("z-index", defaultZIndex);
                if (0 !== num) {
                    prevEl = me._prevHelperEl;
                    if (prevEl && $.isVisiable(prevEl)) {
                        prevEl.removeClass(gridHeaderDownClass).width(me._helperElWidth).css("z-index", defaultZIndex);
                    }
                }
            }
        },
        /**
         * @private
         * @description 找到当前拖动元素前一个
         * @param {Number} num 编号
         */
        __findPrevResizeEl: function(num) {
            var me = this,
                prevEl,
                visiable;
            if (0 < num) {
                prevEl = me.resizeEls[num - 1];
                visiable = prevEl.attr("visiable");
                if ($.isNull(visiable) || "true" === visiable) {
                    return prevEl;
                } else {
                    return me.__findPrevResizeEl(num - 1);
                }
            }
        },
        /**
         * @private
         * @description 列动态改变div拖动事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElMove: function(e) {
            var me = e.data.me,
                self = me._helperEl;
            if (!self) {
                return;
            }
            var x = e.pageX - me._startX;
            // 设定拖动缩小的最小值
            if (0 > x && me._startTdWidth + x < minTdWidth) {
                return;
            }
            self.css("left", me._startLeft + x);
        },
        /**
         * @private
         * @description 表格排序，表格上排序只支持单列排序
         * @param {Object} e 事件对象
         */
        _sort: function(e) {
            var me = e.data.me,
                tdEl = $(this),
                column = tdEl.attr("column"), // 列数
                sortType = Sweet.constants.sortType.ASC; // 默认升序
            if (!me.sortEl) {
                me.sortEl = tdEl;
            } else {
                // 是否同一列
                if (me.sortEl.attr("column") !== tdEl.attr("column")) {
                    me.sortEl.removeClass(gridHeaderSortAscClass + " " + gridHeaderSortDescClass + " " + gridHeaderTdHoverClass)
                        .addClass(gridHeaderTdCommonClass);
                    me.sortEl.find("div:first").removeClass(gridHeaderTextHoverClass);
                }
            }
            // 升序
            if (tdEl.hasClass(gridHeaderSortAscClass)) {
                tdEl.removeClass(gridHeaderSortAscClass)
                    .addClass(gridHeaderSortDescClass);
                sortType = Sweet.constants.sortType.DESC;
            }
            // 降序
            else if (tdEl.hasClass(gridHeaderSortDescClass)) {
                tdEl.removeClass(gridHeaderSortDescClass)
                    .addClass(gridHeaderSortAscClass);
                sortType = Sweet.constants.sortType.ASC;
            }
            // 未排序，按升序处理
            else {
                tdEl.addClass(gridHeaderSortAscClass);
                sortType = Sweet.constants.sortType.ASC;
            }

            me.sortEl = tdEl.removeClass(gridHeaderTdCommonClass);
            tdEl.find("div:first").addClass(gridHeaderTextClass);

            // 排序
            var columnObj = me.headerColumns[$.string.toNumber(column)];
            me.orders = [];
            me.orders.push(me.__getOrderFormat(columnObj.name, sortType, columnObj.dataType));
            // 当前页记为1
            if (me.page) {
                me.page.currentPage = 1;
            }
            if (me.options.store) {
                me.options.store._setDataPage(me.getPageInfo());
                me.options.store.load(me.getAllConditions());
            } else {
                me._triggerHandler(e, "sort", me.getAllConditions());
            }
            //清空所有多列排序条件已选值
            me._clearMultiSort();
            //清空除此列外所有列上的排序标志
            $.each(me.headerTdEls, function(index, obj) {
                if (obj) {
                    if (tdEl.attr("columnName") !== obj.attr("columnName")) {
                        obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                            .addClass(gridHeaderTdCommonClass);
                        obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                    }
                }
            });
        },
        /**
         * @private
         * @description 格式化排序
         * @param {String} name 列名
         * @param {String} type 排序类型
         * @param {String} dataType 数据类型
         */
        __getOrderFormat: function(name, type, dataType) {
            return {
                "name": name,
                "order": type,
                "dataType": dataType
            };
        },
        /**
         * @private
         * @description 生成表头对象
         * @param {Array} rows 表头数组
         * @param {Object} headerTrEl 行对象
         * @param {Object} headerTableEl table对象
         * @return {Object} tdTempArr 临时存放表头对象数组
         */
        _generateHeader: function(rows, headerTrEl, headerTableEl) {
            var me = this,
                column,
                columnHeight = 0,
                gridHeaderBottomClass = "sweet-grid-header-bottom",
                headerTdEl,
                headerTdDivEl,
                row,
                tdTempArr = [];
            for (var i = 0; i < rows.length; i++) {
                row = rows[i];
                tdTempArr[i] = [];
                if (0 !== i) {
                    headerTrEl = $("<tr>").appendTo(headerTableEl);
                }
                for (var j = 0; j < row.length; j++) {
                    column = row[j];
                    columnHeight = column.height || defaultColumnHeight;
                    headerTdEl = $("<td>").height(columnHeight)
                        .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                        .mouseenter({
                        "me": me
                    }, me.__onHeaderTdMouseEnter)
                        .mouseleave({
                        "me": me
                    }, me.__onHeaderTdMouseLeave)
                        .appendTo(headerTrEl);
                    headerTdDivEl = $("<div>").text(column.header)
                        .addClass(gridHeaderTextClass)
                        .appendTo(headerTdEl);
                    me.headerTextDivs[column.name] = headerTdDivEl;
                    // 是否隐藏
                    if (column.hidden) {
                        headerTdEl.hide();
                        // 只记最后一行的隐藏列
                        if (i === rows.length - 1) {
                            me.hiddenColumn++;
                        }
                    }
                    // 是否有tip提示
                    if (column.tooltip) {
                        headerTdDivEl.attr("title", column.tooltip);
                    }
                    // 处理子节点
                    if (column.children && (0 < column.children.length)) {
                        headerTdEl.attr({
                            "colspan": column.colspan
                        })
                            .addClass(gridHeaderBottomClass);
                        tdTempArr[i][j] = {
                            "width": column.width,
                            "column": column,
                            "tdEl": headerTdEl,
                            "children": column.children.length
                        };
                        continue;
                    }
                    // 是否可排序
                    if (column.sortable) {
                        headerTdEl.bind("click", {
                            "me": me
                        }, me._sort);
                    }
                    // 是否过滤
                    if (column.filter) {
                        $("<span>").addClass(gridHeaderFilterClass)
                            .click({
                            "oTd": headerTdEl,
                            "column": column,
                            "me": me
                        },
                        me._headerFilterPanel)
                            .hide()
                            .appendTo(headerTdEl);
                    }
                    headerTdEl.attr({
                        "rowspan": rows.length - i,
                        "depth": rows.length
                    });
                    tdTempArr[i][j] = {
                        "width": column.width,
                        "column": column,
                        "tdEl": headerTdEl
                    };
                }
            }

            return tdTempArr;
        },
        /**
         * @private
         * @description 生成表格过滤面板
         * @param {Object} e 事件对象
         */
        _headerFilterPanel: function(e) {
            // 阻止事件冒泡
            e.stopImmediatePropagation();
            var me = e.data.me,
                column = e.data.column,
                obj,
                oTd = e.data.oTd,
                oSpan = $(this),
                filterPanel = oTd.data("filterPanel");
            // 判断点击是否同一列
            if (me.activeFilterTdEl && me.activeFilterTdEl.attr("column") !== oTd.attr("column")) {
                me.oldActiveFilterTdEl = me.activeFilterTdEl;
            }
            me._triggerBodyClick();
            // 当前过滤激活列
            me.activeFilterTdEl = oTd;
            if (filterPanel) {
                me.__setFilterPanelPosition(oSpan, filterPanel);
                oTd.data("created", true);
                filterPanel.show();
                if ($.isFunction(me.options.afterShowFilter)) {
                    me.options.afterShowFilter({
                        "filter": me.getAllConditions(),
                        "obj": me._getFilterObj(column.name),
                        "type": column.filterType,
                        "name": column.name
                    });
                }
                return;
            }
            var addBtn,
            resetBtn,
            index = $.string.toNumber(oTd.attr("column")),
                id = me.options.id + "-" + index + gridHeaderFilterSuffix,
                btnId = me.options.id + "-" + index + gridHeaderFilterBtnSuffix,
                textEl = $("<div>").addClass("title").text(i18n.filter),
                panel = $("<div>").attr("id", id),
                btnPanel = $("<div>").attr("id", btnId);

            filterPanel = $("<div>").click(function(e) {
                oTd.data("created", true);
            })
                .addClass(me.floatBgClass + " sweet-grid-header-filter-panel")
                .appendTo($(document.body));
            $.isArray(me.filterPanels) ? me.filterPanels.push(filterPanel) : "";
            textEl.appendTo(filterPanel);
            panel.appendTo(filterPanel);
            btnPanel.appendTo(filterPanel);
            // 计算过滤面板相对位置
            me.__setFilterPanelPosition(oSpan, filterPanel);

            // 生成过滤面板
            switch (column.filterType) {
                // 列表
                case dataType.LIST:
                    obj = me.__headerFilterListPanel(panel, column);
                    break;
                    // 字符串
                case dataType.STRING:
                    obj = me.__headerFilterStringPanel(panel);
                    break;
                    // 数值
                case dataType.NUMBER:
                    obj = me.__headerFilterNumberPanel(panel);
                    break;
                    // 日期
                case dataType.DATE:
                    obj = me.__headerFilterDatePanel(panel);
                    break;
                default:
                    me._error("Unsupported filter type [" + column.filterType + "].");
            }

            // 添加操作按钮
            addBtn = new Sweet.form.Button({
                width: 70,
                value: {
                    value: 0,
                    text: i18n.okBtn
                }
            });
            addBtn.addListener("click", function() {
                me.__onFilterOKClick(oTd, column.name);
            });
            resetBtn = new Sweet.form.Button({
                width: 70,
                value: {
                    value: 1,
                    text: i18n.clearSingleFilter
                }
            });
            resetBtn.addListener("click", function() {
                me.__onFilterResetClick(oTd, obj, column.name);
                me._triggerBodyClick();
            });
            new Sweet.panel.FlowPanel({
                width: "100%",
                height: 25,
                align: Sweet.constants.align.RIGHT,
                items: [addBtn, resetBtn],
                renderTo: btnId
            });

            oTd.data("created", true);
            oTd.data("filterPanel", filterPanel);
            oTd.data("filter", obj);
            me.filterObjs.push({
                "name": column.name,
                "filterType": column.filterType,
                "filter": obj,
                "tdEl": oTd
            });
            if ($.isFunction(me.options.afterShowFilter)) {
                me.options.afterShowFilter({
                    "filter": me.getAllConditions(),
                    "obj": obj,
                    "type": column.filterType,
                    "name": column.name
                });
            }
        },
        _getFilterObj: function(name) {
            var me = this,
                temp = me.filterObjs;

            for (var i = 0; i < temp.length; i++) {
                if (name === temp[i].name) {
                    return temp[i].filter;
                }
            }
        },
        /**
         * @private
         * @description 设置过滤窗口面板位置
         * @param {Object} relativeObj 相对位置对象
         * @param {Object} filterPanel 过滤面板对象
         */
        __setFilterPanelPosition: function(relativeObj, filterPanel) {
            var offset,
            zIndex;
            // 计算offset
            offset = $.getFloatOffset(relativeObj, filterPanel, true);
            // 设置z-index
            zIndex = $.getMaxZIndex();
            filterPanel.css({
                "top": offset.top,
                "left": offset.left,
                "z-index": zIndex
            });
        },
        /**
         * @private
         * @description 单列隐藏
         * @param {Array} hc 待隐藏的列
         * @param {Boolean} flag 是否不需要处理hiddenColumn
         */
        __ColumnsHidden: function(hc, flag) {
            var me = this,
                show, i = 0,
                count = me.count,
                columns = me.headerColumns,
                column,
                tdEls = [];

            for (i = 0; i < hc.length; i++) {
                show = hc[i].show || false;
                tdEls = [];
                column = hc[i].index;
                if (0 < me.contentVTdEls.length) {
                    if (0 < me.contentTreeVTdEls.length) {
                        tdEls = me.contentVTdEls[column].concat(me.contentTreeVTdEls[column]);
                    } else {
                        tdEls = me.contentVTdEls[column];
                    }
                }
                if (show) {
                    if (!flag) {
                        me.hiddenColumn--;
                    }
                    // 显示表头
                    me.headerTdEls[column + count].show();
                    me.contentColEls[column + count].show();
                    // 显示表格内容
                    $.each(tdEls, function(i, o) {
                        o.show();
                    });
                } else {
                    // 只剩一列时，不允许隐藏
                    if (!flag) {
                        if (me.hiddenColumn === me.headerColumns.length - 1) {
                            return;
                        }
                        me.hiddenColumn++;
                    }
                    // 隐藏表头
                    me.headerTdEls[column + count].hide();
                    me.contentColEls[column + count].hide();
                    // 隐藏表格内容
                    $.each(tdEls, function(i, o) {
                        o.hide();
                    });
                }

                columns[column].hidden = !show;
            }
        },
        /**
         * @private
         * @description 单列隐藏
         * @param {Object} e 事件对象
         * @param {Number} index 列号
         * @param {Boolean} show 显示还是隐藏
         */
        __onSingleColumnHiddenClick: function(e, index, show) {
            var me = this;
            var show = show || false;
            me.__ColumnsHidden([{
                index: index,
                show: show
            }]);

            me.headerReRender = true;
            me._doLayout(true);
            // 设置列选中列表
            if ("win" == me.options.data.selectColumn && me.selectColWin) {
                me._doCheckedSelectColumnWin(me.__getSelectColumnData1().value);
            } else {
                if (me.selectColList) {
                    me.selectColList.setValue(me.__getSelectColumnData().value);
                }
            }
        },
        /**
         * @private
         * @description 过滤面板点确定处理
         * @param {Object} tdEl 列对象
         * @param {String} name 列名
         */
        __onFilterOKClick: function(tdEl, name) {
            var me = this,
                filters, filterVal;
            $.each(me.filterObjs, function(index, obj) {
                var temp = obj.filter,
                    type = obj.filterType;
                if (obj.name !== name) {
                    return;
                }
                switch (type) {
                    // 列表
                    case dataType.LIST:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue(),
                            "text": temp.getText()
                        };
                        break;
                        // 字符串
                    case dataType.STRING:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                        // 数值
                    case dataType.NUMBER:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                        // 日期
                    case dataType.DATE:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                    default:
                        me._error("Unsupported filter type [" + obj.dataType + "].");
                }
            });

            filters = me.filters[name];
            filterVal = filters.value;
            if (!filterVal) {
                // 返回布尔类型的，不向上冒泡处理
                if (!$.isBoolean(filterVal)) {
                    me._triggerBodyClick();
                }
                return;
            }
            if (filterVal && (dataType.LIST === filters.type || dataType.STRING === filters.type) && !filterVal.pass) {
                return;
            }
            me._triggerBodyClick();
            me.__setColumnFilterPic(tdEl, true);
            if (me.page) {
                me.page.currentPage = 1;
            }
            //方便用户在过滤前修改参数数据
            var condi = me.getAllConditions();
            if ($.isFunction(me.options.beforeOKFilter)) {
                condi.name = name;
                me.options.beforeOKFilter(condi);
            }

            if (me.options.store) {
                me.options.store._setPage(me.getPageInfo());
                me.options.store.load(condi);
            } else {
                me._triggerHandler(null, "filter", condi);
            }
        },
        /**
         * @private
         * @description 过滤面板重置按钮事件
         * @param {Object} tdEl 列对象
         * @param {Object} obj 过滤条件对象
         * @param {String} name 列名
         */
        __onFilterResetClick: function(tdEl, obj, name) {
            var me = this;
            // 只有进行过滤的列，才执行重置
            obj.reset();
            if (0 < tdEl.find("." + gridHeaderFilterPicClass).length) {
                me.__setColumnFilterPic(tdEl);
                delete me.filters[name];
                if (me.page) {
                    me.page.currentPage = 1;
                }
                if (me.options.store) {
                    me.options.store._setPage(me.getPageInfo());
                    me.options.store.load(me.getAllConditions());
                } else {
                    me._triggerHandler(null, "filter", me.getAllConditions());
                }
            }
        },
        /**
         * @private
         * @description 设置列过滤图片
         * @param {Object} tdEl 列对象
         * @param {Boolean} add 是否添加过滤图片，默认undefined
         */
        __setColumnFilterPic: function(tdEl, add) {
            if (add) {
                var textEl = tdEl.find("." + gridHeaderTextClass),
                    filterPic = $("<span>");
                filterPic.addClass(gridHeaderFilterPicClass).appendTo(textEl);
            } else {
                tdEl.find("." + gridHeaderFilterPicClass).remove();
            }
        },
        /**
         * @private
         * @description 生成列表面板
         * @param {String} o 待渲染目标对象
         * @param {Object} column 列描述
         * @return {Object} 返回列表对象
         */
        __headerFilterListPanel: function(o, column) {
            var grid = this;
            /**
             * @private
             * @description 列表面板对象
             * @param {String} o 待渲染目标对象
             * @param {Object} column 列描述
             * @return {Object} 返回列表面板对象
             */
            var ListPanel = function(o, column) {
                var id = o.attr("id");
                this.listPanel = new Sweet.list.List({
                    width: "100%",
                    height: "auto",
                    maxHeight: 150,
                    search: true,
                    multi: true,
                    tip: true,
                    widgetClass: gridHeaderFilterBgClass,
                    data: column.filterList,
                    renderTo: id
                });
            };

            /**
             * @private
             * @description 获取值，返回格式{"symbol": "IN", "value": }
             */
            ListPanel.prototype.getValue = function() {
                var me = this,
                    temp,
                    tempArr = [],
                    value = me.listPanel.getValue() || [];
                $.each(value, function(index, obj) {
                    tempArr.push(obj.value);
                });
                if (0 !== tempArr.length) {
                    temp = grid.__getFilterFormat("IN", tempArr, 0 < tempArr.length);
                }
                return temp;
            };

            /**
             * @private
             * @description 获取值显示的字符串，返回格式{"symbol": "IN", "text": }
             */
            ListPanel.prototype.getText = function() {
                var me = this,
                    temp,
                    tempArr = [],
                    value = me.listPanel.getValue() || [];
                $.each(value, function(index, obj) {
                    tempArr.push(obj.text);
                });
                if (0 !== tempArr.length) {
                    temp = grid.__getFilterFormat("IN", tempArr, 0 < tempArr.length);
                }
                return temp;
            };

            /**
             * @private
             * @description 清空值
             */
            ListPanel.prototype.reset = function() {
                var me = this;
                Sweet.Task.Delay.start({
                    id: grid.options.id + "-grid-list-delay",
                    run: function(args) {
                        me.listPanel.setValue({});
                    },
                    delay: 800
                });
            };

            o.addClass("filter-list");
            return new ListPanel(o, column);
        },
        /**
         * @private
         * @description 创建字符串过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterStringPanel: function(o) {
            var grid = this;

            /**
             * @private
             * @description 设置文本框状态
             * @param {Object} obj 文本框对象
             * @param {String} value 值
             */
            function setTextDisabled(obj, value) {
                if (symbol.EQNULL === value || symbol.NOTNULL === value) {
                    obj.setDisabled(true);
                } else {
                    obj.setDisabled(false);
                }
            }
            /**
             * @private
             * @description 字符串过滤面板
             * @param {String} o 目标对象
             */
            var StringPanel = function(o) {
                var id = o.attr("id"),
                    radioGroup,
                    textField;
                radioGroup = this.radioGroup = new Sweet.form.RadioGroup({
                    width: 150,
                    height: 100,
                    columns: 1,
                    data: [{
                        "text": i18n.exactMatch,
                        "value": symbol.EQUAL,
                        "checked": true
                    }, {
                        "text": i18n.fuzzyMatch,
                        "value": symbol.LIKE
                    }, {
                        "text": i18n.notEqual,
                        "value": symbol.NOTEQUAL
                    }, {
                        "text": i18n.eqNull,
                        "value": symbol.EQNULL
                    }, {
                        "text": i18n.notNull,
                        "value": symbol.NOTNULL
                    }]
                });
                // 注册click事件
                radioGroup.addListener("click", function(e, data) {
                    setTextDisabled(textField, data.value.value);
                });

                textField = this.textField = new Sweet.form.TextField({
                    width: "100%",
                    widgetClass: gridHeaderFilterPadClass,
                    editable: true
                });

                new Sweet.panel.VPanel({
                    width: "100%",
                    height: 135,
                    items: [radioGroup, textField],
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取组件值
             * @return {Object} 返回格式{"symbol": , "value": }，value表示文本框值，symbol约定如下
             *  =：精确匹配
             *  LIKE：模糊匹配
             *  <>：不等于
             *  NULL：为空
             *  NOTNULL：非空
             */
            StringPanel.prototype.getValue = function() {
                var radioVal = this.radioGroup.getValue().value,
                    textVal = this.textField.getValue().value;
                if (symbol.EQNULL === radioVal || symbol.NOTNULL === radioVal) {
                    return grid.__getFilterFormat(radioVal, "", true);
                }
                if ($.isNotNull(textVal)) {
                    return grid.__getFilterFormat(radioVal, textVal, $.isNotNull(textVal));
                }
                return;
            };

            /**
             * @private
             * @description 清空字符串面板
             */
            StringPanel.prototype.reset = function() {
                this.radioGroup.setValue({
                    "text": i18n.exactMatch,
                    "value": symbol.EQUAL,
                    "checked": true
                });
                this.textField.setValue({
                    "value": "",
                    "text": ""
                });
                setTextDisabled(this.textField, symbol.EQUAL);
            };

            o.addClass(gridHeaderFilterBgClass);
            return new StringPanel(o);
        },
        /**
         * @private
         * @description 创建日期过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterDatePanel: function(o) {
            var grid = this;
            /**
             * @private
             * @description 创建日期面板
             * @param {Object} o 待渲染目标对象
             */
            var DatePanel = function(o) {
                var id = o.attr("id"),
                    dateFrom,
                    dateTo;

                o.parent().addClass("sweet-grid-header-filter-date");
                dateFrom = this.dateFrom = new Sweet.form.Date({
                    blank: false,
                    label: true,
                    labelWidth: 35,
                    labelText: i18n.from,
                    width: "100%"
                });

                dateTo = this.dateTo = new Sweet.form.Date({
                    blank: false,
                    label: true,
                    labelWidth: 35,
                    labelText: i18n.to,
                    width: "100%"
                });

                new Sweet.panel.VPanel({
                    width: 205,
                    height: 55,
                    items: [dateFrom, dateTo],
                    widgetClass: gridHeaderFilterPadClass,
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取日期面板值
             * @return {Object} 返回值，格式为{"<": , ">": }
             */
            DatePanel.prototype.getValue = function() {
                var fromVal = this.dateFrom.getValue() || {},
                toVal = this.dateTo.getValue() || {},
                a,
                b,
                temp;
                if ($.isNull(fromVal.data) && $.isNull(toVal.data)) {
                    return;
                }
                // DTS2013073006399 添加日期校验
                if ($.isNull(fromVal.data)) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.beginDate,
                        "propagation": true
                    });
                    return false;
                }
                if ($.isNull(toVal.data)) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.endDate,
                        "propagation": true
                    });
                    return false;
                }
                // 比较日期大小
                if (-1 !== $.date.compare(fromVal.value, toVal.value, "-")) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.compare,
                        "propagation": true
                    });
                    return false;
                }
                a = $.extend(grid.__getFilterFormat(symbol.GT, fromVal.data), {
                    text: fromVal.value
                });
                b = $.extend(grid.__getFilterFormat(symbol.LT, toVal.data), {
                    text: toVal.value
                });
                temp = [a, b];
                return temp;
            };

            /**
             * @private
             * @description 清空日期面板
             */
            DatePanel.prototype.reset = function() {
                this.dateFrom.setValue({
                    "value": ""
                });
                this.dateTo.setValue({
                    "value": ""
                });
            };

            o.addClass(gridHeaderFilterBgClass);
            return new DatePanel(o);
        },
        /**
         * @private
         * @description 创建数值过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterNumberPanel: function(o) {
            var grid = this,
                nullValue = {
                    "value": ""
                };
            /**
             * @private
             * @description 创建数值面板
             * @param {Object} o 待渲染目标对象
             */
            var NumberPanel = function(o) {
                var id = o.attr("id"),
                    largeObj,
                    smallObj,
                    equalObj;
                largeObj = this.largeObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.GT,
                    symbol: false,
                    width: "100%",
                    decimalPrecision: 10
                });
                largeObj.addListener("focus", function() {
                    equalObj.setValue(nullValue);
                });
                smallObj = this.smallObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.LT,
                    symbol: false,
                    width: "100%",
                    decimalPrecision: 10
                });
                smallObj.addListener("focus", function() {
                    equalObj.setValue(nullValue);
                });
                equalObj = this.equalObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.EQUAL,
                    symbol: false,
                    width: "100%",
                    decimalPrecision: 10
                });
                equalObj.addListener("focus", function() {
                    largeObj.setValue(nullValue);
                    smallObj.setValue(nullValue);
                });
                new Sweet.panel.VPanel({
                    width: "100%",
                    height: 85,
                    items: [largeObj, smallObj, equalObj],
                    widgetClass: gridHeaderFilterPadClass,
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取数值组件值
             * @returns {Object} 返回数值组件值，格式为{symbol: value, ..}
             */
            NumberPanel.prototype.getValue = function() {
                var me = this,
                    temp = [],
                    large = me.largeObj.getValue(),
                    small = me.smallObj.getValue(),
                    equal = me.equalObj.getValue();
                if ($.isNotNull(equal.value)) {
                    temp.push(grid.__getFilterFormat(symbol.EQUAL, equal.value));
                } else {
                    if ($.isNotNull(large.value)) {
                        temp.push(grid.__getFilterFormat(symbol.GT, large.value));
                    }
                    if ($.isNotNull(small.value)) {
                        temp.push(grid.__getFilterFormat(symbol.LT, small.value));
                    }
                }

                return 0 === temp.length ? null : temp;
            };

            /**
             * @private
             * @description 重置数值面板
             */
            NumberPanel.prototype.reset = function() {
                var me = this;
                me.largeObj.setValue(nullValue);
                me.smallObj.setValue(nullValue);
                me.equalObj.setValue(nullValue);
            };

            o.addClass(gridHeaderFilterBgClass);
            return new NumberPanel(o);
        },
        /**
         * @private
         * @description 格式化过滤值
         * @param {String} symbol 符号
         * @param {Object/String/Array} value 值
         * @param {Boolean} pass 是否通过
         */
        __getFilterFormat: function(symbol, value, pass) {
            return {
                "symbol": symbol,
                "value": value,
                "pass": pass
            };
        },
        /**
         * @private
         * @description 处理表头TD标签，鼠标移入时动作
         * @param {Object} e 事件对象
         */
        __onHeaderTdMouseEnter: function(e) {
            var me = e.data.me,
                o = $(this),
                rowspan,
                spanEl = o.find("." + gridHeaderFilterClass),
                position = o.position();
            // 控制文字颜色
            me.__dealHeaderTdTextHover(o, spanEl, true);
            if (spanEl && 0 < spanEl.length) {
                rowspan = $.string.toNumber(o.attr("rowspan"));
                if (1 === rowspan) {
                    spanEl.addClass(gridHeaderFilterOneClass);
                } else if (2 === rowspan) {
                    spanEl.addClass(gridHeaderFilterTwoClass);
                } else {
                    me._error("Unsupported rowspan. rowspan = " + rowspan);
                    return;
                }
                spanEl.show();
                // 计算位置
                spanEl.css({
                    "left": position.left + o.width() - spanEl.width(),
                    "top": position.top
                });
            }
        },
        /**
         * @private
         * @description 处理表头TD标签，鼠标移出时动作
         * @param {Object} e 事件对象
         * @param {Object} obj 关闭对象
         */
        __onHeaderTdMouseLeave: function(e, obj) {
            var me,
            o = obj || $(this),
                filterPanel = o.data("filterPanel"),
                spanEl = o.find("." + gridHeaderFilterClass);
            if (filterPanel && $.isVisiable(filterPanel)) {
                return;
            }
            me = e ? (e.data ? e.data.me : this) : this;
            // 控制文字颜色
            me.__dealHeaderTdTextHover(o, spanEl);
            if (spanEl && !o.data("created")) {
                spanEl.hide();
            }
        },
        /**
         * @private
         * @description 处理文字颜色
         * @param {Object} oTd TD对象
         * @param {Object} oSpan span对象
         * @param {Boolean} b 增加还是删除样式
         */
        __dealHeaderTdTextHover: function(oTd, oSpan, b) {
            if (oTd.hasClass(gridHeaderSortAscClass) || oTd.hasClass(gridHeaderSortDescClass) || oTd.data("created")) {
                return;
            }
            if (b) {
                oTd.addClass(gridHeaderTdHoverClass);
                oTd.find("div:first").addClass(gridHeaderTextHoverClass);
            } else {
                oTd.removeClass(gridHeaderTdHoverClass);
                oTd.find("div:first").removeClass(gridHeaderTextHoverClass);
            }
        },
        /**
         * @private 
         * @description 修正列数据
         * @param {Array} arr 待修正数组
         * @TODO 支持表头无限级合并
         */
        _amendHeader: function(arr) {
            var temp, children, destArr = [],
                k = 0;
            // 处理非列合并情况
            if (1 === arr.length) {
                for (var m = 0; m < arr[0].length; m++) {
                    destArr[k] = arr[0][m];
                    k++;
                }

                return destArr;
            }
            for (var i = arr.length - 2; i >= 0; i--) {
                for (var j = 0; j < arr[i].length; j++) {
                    temp = arr[i][j];
                    children = temp.children;
                    if (children && 1 < children) {
                        destArr = destArr.concat(arr[i + 1].slice(0, children));
                        arr[i + 1].splice(0, children);
                        k += children;
                    } else {
                        destArr[k] = arr[i][j];
                        k++;
                    }
                }
            }
            return destArr;
        },
        /**
         * @private
         * @description 解析表头，将树形表头转换成数组
         * @param {Array} trees 树形结构数据
         * @param {Number} depth 深度
         * @param {Array} rows 行数组
         */
        _parseHeader: function(trees, depth, rows) {
            for (var i = 0; i < trees.length; i++) {
                trees[i].colspan = 1;
                if (trees[i].children && trees[i].children.length > 0) {
                    trees[i].colspan = trees[i].children.length;
                    this._parseHeader(trees[i].children, depth + 1, rows);
                }
                if (!rows[depth]) {
                    rows[depth] = [];
                }
                if (rows[depth][i]) {
                    rows[depth][rows[depth].length] = trees[i];
                } else {
                    rows[depth][i] = trees[i];
                }
            }
        },
        /**
         * @private
         * @description 创建表格内容
         */
        _createGridContent: function() {
            // 先销毁之前的元素，再创建
            this.__destroyTableContent();
            var me = this,
                options = me.options,
                data = options.data.data || [],
                page = options.data.page || {},
                contentElClass = "sweet-grid-content",
                contentEl = me.contentEl = $("<div>").addClass(contentElClass).appendTo(me.gridEl),
                contentDivEl = me.contentDivEl = $("<div>").appendTo(contentEl),
                contentTableEl = me.contentTableEl = $("<table>").appendTo(contentDivEl),
                columnLength = me.headerColumns ? me.headerColumns.length : maxColumnLength,
                remainder;

            me.rows = options.data ? (options.data.page ? (data.length < page.size ? data.length : page.size) : data.length) : 0;
            me.singleSelect = options.data.singleSelect || false;
            me.checkbox = options.data.checkbox && !me.singleSelect;
            me.sn = options.data.sn || false;
            me.fold = options.data.fold || false;

            // 对数据的预处理，如果是二维数组，需要转换成json格式数据
            me.data = me._toJson(data);
            // 添加rowId
            me._addRowId(me.data);
            // 选中的表格数据
            me.selectedData = {};
            // 选中的表格记录数
            me.selectedDataLength = 0;
            // 选中树形表格数据
            me.selectedTreeData = {};
            me.selectedTreeDataLength = 0;
            // 表格col元素对象数组
            me.contentColEls = [];
            // 记录行
            me.contentTrEls = [];
            // 记录内容区单元格对象的二位数组
            me.contentTdEls = [];
            // 记录内容区单元格对象的二位数组，按列排
            me.contentVTdEls = [];
            // 记录树节点行
            me.contentTreeTrEls = [];
            // 记录内容区树形单元格对象的二位数组
            me.contentTreeTdEls = [];
            // 记录内容区树形单元格对象的二位数组，按列排
            me.contentTreeVTdEls = [];
            // 记录checkbox
            me.checkboxTdEls = [];
            // 记录树节点checkbox
            me.checkboxTreeTdEls = [];
            // 记录SN对象
            me.SNTdEls = [];
            // 记录行索引
            me.dataIndex = 0;
            // 记录树节点数据行索引
            me.treeDataIndex = 0;
            // 树表数据
            me.treeData = [];
            // 单次树节点加载的长度
            me.treeRow = 0;
            // 记录实际行和逻辑行对应关系
            me.rowRelations = {};
            // 根据列个数，计算每次渲染的行数
            remainder = Math.floor(maxColumnLength / columnLength);
            if (1 >= remainder) {
                me.lazyLoadRows = 1;
            } else {
                me.lazyLoadRows = remainder;
            }

            // 创建表格col元素
            me._buildGridContentCol();

            // 表格内容区定时器名称
            me.timerGridContent = options.id + "-" + timerSuffix;
            // 启动定时器，绘制表格内容
            Sweet.Task.Timeout.start({
                id: me.timerGridContent,
                run: me._buildGridContent,
                scope: me,
                interval: 10
            });

            // 生成表格左键菜单区域
            me._gridMenuId = options.id + "-grid-menu";

            // 绑定表格内容区事件
            me._bindGridContentEvent();
        },
        /**
         * @private
         * @description 创建表格内容区col元素，对表格单元格的统一集中处理
         */
        _buildGridContentCol: function() {
            var me = this,
                headerColumns = me.headerColumns || [],
                length = headerColumns.length,
                count = me.count || 0,
                temp,
                tempColumn,
                i,
                j;
            for (i = 0; i < count; i++) {
                temp = $("<col>").appendTo(me.contentTableEl);
                me.contentColEls.push(temp);
            }
            for (j = 0; j <= length; j++) {
                tempColumn = headerColumns[j];
                temp = $("<col>").appendTo(me.contentTableEl);
                if (tempColumn && tempColumn.hidden) {
                    temp.hide();
                }
                me.contentColEls.push(temp);
            }
        },
        /**
         * @private
         * @description 数据转换，数组转换成JSON，如果是JSON，则复制一份返回
         * @param {Object} data 数据
         */
        _toJson: function(data) {
            var me = this;
            // 对数据的预处理，如果是二维数组，需要转换成json格式数据
            if (data && 0 < data.length && $.isArray(data[0])) {
                return me.__preTreatData() || [];
            } else {
                return $.objClone(data) || [];
            }
        },
        /**
         * @private
         * @description 绑定表格内容区事件，采用事件冒泡方式处理所有的事件
         */
        _bindGridContentEvent: function() {
            var me = this,
                data = me.data,
                columns = me.headerColumns,
                count = me.count;
            me.contentEl.scroll(function() { // 滚动条事件
                me._onScroll();
            }).click(function(e) { // 单击事件
                var obj = $(e.target),
                    row, column, tempData, tempFunc, tempOperType;

                // 处理编辑、删除、修改事件
                if (obj.hasClass(gridContentEditClass)) {
                    tempOperType = Sweet.constants.operType.EDIT;
                } else if (obj.hasClass(gridContentModifyClass)) {
                    tempOperType = Sweet.constants.operType.MODIFY;
                } else if (obj.hasClass(gridContentDeleteClass)) {
                    tempOperType = Sweet.constants.operType.DELETE;
                } else if (obj.hasClass(gridContentCloseClass)) {
                    tempOperType = Sweet.constants.operType.CLOSE;
                } else if (obj.hasClass(gridContentPauseClass)) {
                    tempOperType = Sweet.constants.operType.PAUSE;
                } else if (obj.hasClass(gridContentStartClass)) {
                    tempOperType = Sweet.constants.operType.START;
                } else if (obj.hasClass(gridContentResetClass)) {
                    tempOperType = Sweet.constants.operType.RESET;
                } else if (obj.hasClass(gridContentDetailClass)) {
                    tempOperType = Sweet.constants.operType.DETAIL;
                } else if (obj.hasClass(gridContentConfirmClass)) {
                    tempOperType = Sweet.constants.operType.CONFIRM;
                }
                // 回调注册函数
                if (tempOperType) {
                    row = $.string.toNumber(obj.attr("row"));
                    var realRow = row;
                    //一直找到行的编号，因为更新只更新了行的编号
                    if ($(obj).parent() && $(obj).parent().parent() && $(obj).parent().parent().parent() && $(obj).parent().parent().parent().parent()) {
                        realRow = $(obj).parent().parent().parent().parent().attr("row");
                    }
                    column = $.string.toNumber(obj.attr("column"));
                    tempData = {
                        "realRow": realRow,
                        "row": row,
                        "column": column,
                        "rowData": $.objClone(data[row])
                    };
                    tempFunc = columns[column - count].rendererArr[tempOperType];
                    tempFunc.call(this, e, tempData);
                    return;
                }

                // 处理未选中复选框事件
                if (obj.hasClass(checkboxUncheckdClass)) {
                    me._onRowClick(obj, true);
                    // 触发checkbox点击事件
                    me._triggerCheckBoxHandler(e, obj, true);
                    return;
                }
                // 处理选中复选框事件
                if (obj.hasClass(checkboxCheckdClass)) {
                    me._onRowClick(obj, false);
                    me._triggerCheckBoxHandler(e, obj, false);
                    return;
                }

                // 是否点击菜单
                var aEl = obj.parent().parent();
                if (0 === e.button && aEl.hasClass(gridContentMenuClass)) {
                    column = $.string.toNumber(aEl.attr("column"));
                    var columnObj = columns[column - count],
                        showMenu = true;

                    //默认配置了menu的都显示，但是有的单元格不需要显示时，用户自己判断(回调)
                    if (columnObj.beforeShowMenu && $.isFunction(columnObj.beforeShowMenu)) {
                        tempData = {
                            "column": column,
                            "name": columnObj.name,
                            "rowData": $.objClone(data[row])
                        };
                        showMenu = columnObj.beforeShowMenu.call(this, tempData);
                    }
                    //如果用户没有特别需要，默认显示menu
                    if (showMenu) {
                        if (me._gridMenu) {
                            me._gridMenu.destroy();
                        }
                        column = $.string.toNumber(aEl.attr("column"));
                        var x = e.pageX;
                        //修正表格最右边数字钻取时，menu超出边界的情况,150为菜单宽度
                        var mw = 150;
                        if (x + mw > me.gridEl.width() - scrollWidth - 2) {
                            x = x - scrollWidth - 2 - mw;
                        }
                        var mcfg = {
                            renderTo: me._gridMenuId,
                            X: x,
                            Y: e.pageY,
                            itemClick: columns[column - count].itemClick,
                            items: columns[column - count].menus
                        };
                        if (columns[column - count].itemWidth) {
                            mcfg.itemWidth = columns[column - count].itemWidth;
                        }
                        me._gridMenu = new Sweet.menu.Menu(mcfg);
                        e.stopPropagation();
                        return;
                    }
                }
            });
        },
        /**
         * @private
         * @description 触发checkbox点击事件
         * @param {Object} event 事件
         * @param {Object} obj checkbox对象
         * @param {Boolean} checked 是否选中
         */
        _triggerCheckBoxHandler: function(event, obj, checked) {
            var me = this,
                row,
                isTree,
                tempData;
            row = $.string.toNumber(obj.attr("row"));
            isTree = obj.attr("tree");
            if ("true" === isTree) {
                tempData = $.objClone(me.treeData[row]);
            } else {
                tempData = $.objClone(me.data[row]);
            }
            tempData.checked = checked;
            me._triggerHandler(event, eventNameCheckBoxClick, tempData);
        },
        /**
         * @private
         * @description 二维数组转换成json格式
         */
        __preTreatData: function() {
            var me = this,
                finalData = [],
                tempData = me.options.data.data,
                tempDataLength = tempData.length,
                columns = me.headerColumns,
                columnLength = me.headerColumns.length;

            for (var i = 0; i < tempDataLength; i++) {
                finalData[i] = {};
                for (var j = 0; j < columnLength; j++) {
                    finalData[i][columns[j].name] = tempData[i][j];
                }
            }

            return finalData;
        },
        /**
         * @private
         * @description 生成表格内容区
         */
        _buildGridContent: function() {
            this._info("_buildGridContent begin");
            var timeBegin = $.date.getMilliseconds(),
                timeEnd;
            var me = this,
                lazyLoadRows = me.lazyLoadRows;
            var pageSize = me.page ? me.page.size : 0;
            if ($.isNull(me.data)) {
                me.data = [];
            }
            // 防止越界查找，并关闭定时器
            if (0 === me.data.length || me.dataIndex >= me.data.length || (me.page && me.dataIndex >= pageSize)) {
                Sweet.Task.Timeout.stop(me.timerGridContent, function() {
                    me.afterSetData = true;
                    me._refreshRowRelations();
                    me._triggerHandler(null, eventNameAfterSetData);
                    me.contentEl.scrollTop(me.gridScrollTop);
                    me.contentEl.scrollLeft(me.gridScrollLeft);
                });
                // 矩阵转换
                me.contentVTdEls = $.matrix.reversal(me.contentTdEls);
                return;
            }

            var data = me.data;
            // 实际行数
            var rows = Math.floor((me.rows - me.dataIndex) / lazyLoadRows) > 0 ? lazyLoadRows : me.rows - me.dataIndex;
            // 或取待显示数据
            var tempData = data.slice(me.dataIndex, me.dataIndex + rows);

            me._buildGridTrContent(tempData);

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildGridContent end");
        },
        /**
         * @private
         * @description 插入表格数据，实现向前或向后追加功能，不能与store一起使用
         * @param {Array} data 待插入数据
         * @param {Boolean} before 是否向前追加
         */
        _buildInsertGridContent: function(data, before) {
            var me = this,
                timeBegin = $.date.getMilliseconds(),
                timeEnd;
            me._info("_buildInsertGridContent() begin");

            // 添加rowId
            me._addRowId(data, me.data.length);
            me.data = me.data.concat(data);
            me._buildGridTrContent(data, before);
            me._refreshContentSN();

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildInsertGridContent() end");
        },
        _isRowChecked: function(rowData) {
            return $.isNull(rowData) || $.isNull(rowData.isChecked) || rowData.isChecked === false || rowData.isChecked === "false" ? false : true;
        },
        /**
         * @private
         * @description 生成表格行数据
         * @param {Array} data 数据
         * @param {Boolean} before 是否向前追加，默认向后追加
         */
        _buildGridTrContent: function(data, before) {
            var me = this,
                rows = data.length,
                row, // 行号
                columns = me.headerColumns || [], // 列信息
                trEl,
                tdEl,
                foldEl,
                checkboxEl,
                SNEl,
                rowSn = 0, //当前页的起始sn的基数值
                rowSnIndex = 0, //当前页的sn的值
                depth = 0; // 深度，默认为0
            /* 如果用户配置了sn项，需要计算sn的序号*/
            if (me.sn) {
                var page = me.options.data.page,
                    currentPage = me.page ? (me.page.currentPage ? me.page.currentPage : 1) : 1,
                    pageSize = 20;

                if (me.page && me.page.size) {
                    pageSize = me.page.size;
                } else if (page && page.size) {
                    pageSize = page.size;
                }
                rowSn = pageSize * (currentPage - 1);
            }

            // 绘制表格
            for (var i = 0; i < rows; i++) {
                row = i + me.dataIndex;
                trEl = $("<tr>").addClass(gridContentTrClass);
                trEl.bind("click", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowClick
                }, me._onTrClick)
                    .bind("dblclick", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowDBClick
                }, me._onTrClick);
                // 行变色处理
                me._addRowColor(trEl, data[i].options);
                me.contentTdEls[row] = [];
                if (me.fold) {
                    foldEl = me._getFold(trEl, row, data[i]).appendTo(trEl);
                }
                if (me.checkbox) {
                    var isChecked = me._isRowChecked(data[i]);
                    checkboxEl = me._getCheckbox(row, false, isChecked).appendTo(trEl);
                    me.checkboxTdEls[row] = checkboxEl;
                }
                if (me.sn) {
                    rowSnIndex = rowSn + row + 1;
                    SNEl = me._getSN(rowSnIndex).appendTo(trEl);
                }

                if (before) {
                    trEl.prependTo(me.contentTableEl);
                } else {
                    trEl.appendTo(me.contentTableEl);
                }

                // 生成数据单元格
                for (var j = 0; j < columns.length; j++) {
                    tdEl = me._getContentTd({
                        "row": row,
                        "column": j + me.count,
                        "rowData": data[i],
                        "columnObj": columns[j],
                        "trEl": trEl,
                        "depth": depth
                    })
                        .appendTo(trEl);
                    me.contentTdEls[row][j] = tdEl;
                }
                // 添加列，用以填充表格剩余宽度 DTS2013090208329
                me.contentTdEls[row][columns.length] = $("<td>").appendTo(trEl);

                me.contentTrEls[row] = trEl;
            }

            // 索引位置增加
            me.dataIndex += rows;
        },
        /**
         * @private
         * @description 生成表格树节点数据
         */
        _buildGridTreeContent: function() {
            this._info("_buildGridTreeContent() begin");
            var timeBegin = $.date.getMilliseconds(),
                timeEnd;
            var me = this,
                lazyLoadRows = me.lazyLoadRows;

            // 防止越界查找，并关闭定时器
            if (0 === me.tempTreeData.length || me.treeDataIndex >= me.treeData.length) {
                Sweet.Task.Timeout.stop(me.timerGridTreeContent, function() {
                    me._refreshContentSN();
                });
                // 矩阵转换
                me.contentTreeVTdEls = $.matrix.reversal(me.contentTreeTdEls);
                return;
            }

            var data = me.treeData;
            var treeDataLength = data.length;
            // 实际行数
            var rows = Math.floor((treeDataLength - me.treeDataIndex) / lazyLoadRows) > 0 ? lazyLoadRows : treeDataLength - me.treeDataIndex;
            // 行号
            var row;
            // 临时行号
            var tempTreeRow = 0;
            // 或取待显示数据
            var tempData = data.slice(me.treeDataIndex, me.treeDataIndex + rows);
            // 列信息
            var columns = me.headerColumns || [];
            var trEl;
            var tdEl;
            var checkboxEl;
            var SNEl;
            var foldEl;
            // 取深度
            var depth = $.string.toNumber(me.rowTreeTdEl.attr("depth")) + 1;
            var treeTrEls = me.rowTreeTdEl.data("treeTrEls");

            // 绘制表格
            for (var i = 0; i < rows; i++) {
                row = i + me.treeDataIndex;
                tempTreeRow = i + me.tempTreeDataIndex;
                trEl = $("<tr>").addClass(gridContentTrClass).attr("tree", "true");
                trEl.bind("click", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowClick
                }, me._onTrClick)
                    .bind("dblclick", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowDBClick
                }, me._onTrClick);
                // 行变色处理
                me._addRowColor(trEl, tempData[i].options);
                me.contentTreeTdEls[row] = [];
                if (me.fold) {
                    foldEl = me._getFold(trEl, row, tempData[i]).appendTo(trEl);
                }
                if (me.checkbox) {
                    var isChecked = me._isRowChecked(tempData[i]);
                    checkboxEl = me._getCheckbox(row, true, isChecked).appendTo(trEl);
                    me.checkboxTreeTdEls[row] = checkboxEl;
                }
                if (me.sn) {
                    SNEl = me._getSN("").appendTo(trEl);
                }

                // 生成数据单元格
                for (var j = 0; j < columns.length; j++) {
                    tdEl = me._getContentTd({
                        "row": row,
                        "column": j + me.count,
                        "rowData": tempData[i],
                        "columnObj": columns[j],
                        "depth": depth,
                        "isTree": true
                    })
                        .appendTo(trEl);
                    me.contentTreeTdEls[row][j] = tdEl;
                }
                me.contentTreeTdEls[row][columns.length] = $("<td>").appendTo(trEl);
                trEl.insertAfter(me.rowTreeEl);

                me.contentTreeTrEls[row] = trEl;
                treeTrEls[tempTreeRow] = trEl;
            }

            // 索引位置增加
            me.treeDataIndex += rows;
            me.tempTreeDataIndex += rows;

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildGridTreeContent() end");
        },
        /**
         * @private
         * @description 添加行变色
         * @param {Object} trEl 行对象
         * @param {Object} opts 行配置参数
         */
        _addRowColor: function(trEl, opts) {
            if (!opts) {
                return;
            }
            var color = opts.color,
                cssColorName = trColor[color];
            if (cssColorName) {
                trEl.addClass(cssColorName);
            }
        },
        /**
         * @private
         * @description 行点击事件,配置checkbox时，只有点击checkbox，才记录到selectData中去
         * @param {Object} e 事件对象
         */
        _onTrClick: function(e) {
            var me = e.data.me,
                tr = e.data.tr,
                eName = e.data.eventName,
                row = $.string.toNumber(tr.attr("row")),
                targetObj,
                rowData = [],
                realRow,
                trEl;
            // 是否单选
            if (!me.singleSelect && eName !== eventNameRowDBClick) {
                return;
            }
            targetObj = me.__findTargetTr(row);
            realRow = targetObj.realRow;
            // 查找当前选中的行
            trEl = me._getSelectedFirstRow();
            if (me.options.data.checkbox) {
                if (targetObj.tree) {
                    rowData.push(me.treeData[realRow]);
                } else {
                    rowData.push(me.data[realRow]);
                }
            } else {
                if (trEl && 0 < trEl.length) {
                    trEl = $(trEl);
                    if (trEl.attr("tree")) {
                        delete me.selectedTreeData;
                        delete me.selectedTreeDataLength;
                        me.selectedTreeData = {};
                        me.selectedTreeDataLength = 0;
                    } else {
                        delete me.selectedData;
                        delete me.selectedDataLength;
                        me.selectedData = {};
                        me.selectedDataLength = 0;
                    }
                    trEl.removeClass(gridContentRowSelectedClass);
                }
                //处理选中效果
                tr.addClass(gridContentRowSelectedClass);
                if (targetObj.tree) {
                    me.selectedTreeData[me.treeData[realRow].rowId] = me.treeData[realRow];
                    me.selectedTreeDataLength = 1;
                } else {
                    me.selectedData[me.data[realRow].rowId] = me.data[realRow];
                    me.selectedDataLength = 1;
                }
                rowData = me.getSelectedValue();
            }

            // 触发行点击事件
            me._triggerHandler(e, eName, {
                "row": row,
                "rowData": rowData
            });
        },
        /**
         * @private
         * @description 重新设置表格内容区宽度
         */
        _resetContentTdELWidth: function() {
            var me = this;
            $.each(me.contentColEls, function(index, obj) {
                me._resetContentTdELWidthByCol(index);
            });
        },
        /**
         * @private
         * @description 按列设置表格内容区宽度
         * @param {Number} index 列索引
         */
        _resetContentTdELWidthByCol: function(index) {
            var me = this;
            if (me.widths) {
                me.contentColEls[index].width(me.widths[index] + tdBorder);
            }
        },
        /**
         * @private
         * @description 刷新序列号
         */
        _refreshContentSN: function() {
            var me = this,
                snEls,
                snElsLength,
                i;
            if (me.options.data.sn) {
                snEls = me.contentTableEl.find("." + gridSNClass);
                snElsLength = snEls.length;
                for (i = 0; i < snElsLength; i++) {
                    var sn = i + 1;
                    $(snEls[i]).attr("title", sn).text(sn);
                }
            }

            // 更新行和序列的对应关系
            me._refreshRowRelations();
        },
        /**
         * @private
         * @description 刷新逻辑行和实际行的对应关系
         */
        _refreshRowRelations: function() {
            var me = this,
                trEls,
                length,
                tempTrEl,
                i,
                j,
                k;
            trEls = me.__getContentTrEls();
            length = trEls.length;
            for (i = 0; i < length; i++) {
                $(trEls[i]).attr("row", i + 1);
            }

            length = me.contentTrEls.length;
            for (j = 0; j < length; j++) {
                tempTrEl = me.contentTrEls[j];
                if (tempTrEl) {
                    me.rowRelations[tempTrEl.attr("row")] = j;
                }
            }

            length = me.contentTreeTrEls.length;
            for (k = 0; k < length; k++) {
                tempTrEl = me.contentTreeTrEls[k];
                if (tempTrEl) {
                    me.rowRelations[tempTrEl.attr("row")] = k;
                }
            }
        },
        /**
         * @private
         * @description 返回行对象
         */
        __getContentTrEls: function() {
            return this.contentTableEl.find("." + gridContentTrClass);
        },
        /**
         * @private
         * @description 生成展开和收起的对象
         * @param {Number} row 行号
         */
        _getFold: function(trEl, row, rowData) {
            var tdEl = $("<td>"),
                me = this,
                gridFoldClass = "sweet-grid-fold",
                gridTrFoldCls = "sweet-grid-tr-fold",
                gridTrTdDivFoldCls = "sweet-grid-tr-td-div-fold",
                foldCls = "sweet-grid-row-fold",
                openCls = "sweet-grid-row-open";
            var divEl = $("<div>").addClass(gridFoldClass).appendTo(tdEl),
                actEl = $("<a>").appendTo(divEl);
            actEl.bind("click", function(e) {
                var a = $(this);
                if (a.hasClass(foldCls)) {
                    a.removeClass().addClass(openCls);
                    if (a.data("hasTr") && a.data("tr")) {
                        a.data("tr").show();
                    } else {
                        var id = me.options.id + "-fold-" + row;
                        var cbEl = $("<tr>").addClass(gridTrFoldCls);
                        var cbtd = $("<td>").attr("colspan", me.headerTdEls.length + "").appendTo(cbEl);
                        var cbDiv = $("<div>").addClass(gridTrTdDivFoldCls)
                            .attr("id", id).appendTo(cbtd);
                        a.data("hasTr", "true");
                        a.data("tr", cbEl);
                        a.data("trChildDiv", cbDiv);
                        cbEl.insertAfter(trEl);

                        //触发点击事件，并要求用户在监听此事件后，需要返回在此div下渲染的sweet组件对象或html
                        //，把用户返回的内容渲染在div里面
                        var cmpObj = me._triggerHandler(e, "foldclick", rowData);
                        if (cmpObj && $.isFunction(cmpObj.render)) {
                            cmpObj.render(id);
                        } else if (cmpObj) {
                            cbDiv.html(cmpObj);
                        }
                    }
                } else if (a.hasClass(openCls)) {
                    a.removeClass().addClass(foldCls);
                    if (a.data("hasTr") && a.data("tr")) {
                        a.data("tr").hide();
                    }
                }
            });

            //根据行数据 配置显示箭头的初始图片，但是暂时不支持打开的情况
            if (rowData.open) {
                actEl.addClass(openCls);
            } else {
                actEl.addClass(foldCls);
            }

            return tdEl;
        },
        /**
         * @private
         * @description 生成复选框对象
         * @param {Number} row 行号
         * @param {Boolean} isTree 是否树
         * @param {Boolean} isChecked 此行是否被选中，一般是反填数据时使用
         */
        _getCheckbox: function(row, isTree, isChecked) {
            var tdEl = $("<td>"),
                divEl = $("<div>").addClass(gridCheckboxClass).appendTo(tdEl),
                aEl = $("<a>").addClass(isChecked ? checkboxCheckdClass : checkboxUncheckdClass)
                    .attr({
                    "row": row
                })
                    .appendTo(divEl);
            if (isTree) {
                aEl.attr("tree", "true");
            }

            if (isChecked) {
                this._oneRowSelect(row, isTree);
            }

            return tdEl;
        },
        /**
         * @private
         * @description 生成列数
         * @param {Number} sn 序号
         */
        _getSN: function(sn) {
            var tdEl = $("<td>");
            $("<div>").addClass(gridSNClass).attr("title", sn).text(sn).appendTo(tdEl);

            return tdEl;
        },
        /**
         * @private
         * @description 生成数据单元格
         * @param {Object} params 参数，格式如下：
         *      {Number} row 行数
         *      {Number} column 列数
         *      {Object} rowData 行数据
         *      {Object} columnObj 列信息
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点
         */
        _getContentTd: function(params) {
            var me = this,
                row = params.row,
                column = params.column,
                rowData = params.rowData,
                columnObj = params.columnObj,
                depth = params.depth,
                isTree = params.isTree,
                trEl = params.trEl,
                tdEl = $("<td>"),
                divEl = $("<div>").appendTo(tdEl),
                tempParams;
            tempParams = {
                "row": row,
                "column": column,
                "rowData": rowData,
                "columnObj": columnObj,
                "divEl": divEl,
                "depth": depth,
                "isTree": isTree,
                "trEl": trEl,
                "tdEl": tdEl
            };

            // 处理表格内部数据对其方式
            me.__getContentTdAlign(tempParams);

            // 是否用户有对列的处理
            me.__getContentTdRender(tempParams);

            // 绑定TD单击事件
            me.__bindContentTdClick(tempParams);

            // 是否隐藏列
            if (columnObj.hidden) {
                tdEl.hide();
            }

            return tdEl;
        },
        /**
         * @private
         * @description 绑定表格内容区TD标签click事件
         * @param {Object} params 参数
         */
        __bindContentTdClick: function(params) {
            var me = this,
                tdEl = params.tdEl,
                row = params.row,
                column = params.column,
                columnObj = params.columnObj,
                rowData = params.rowData;
            tdEl.bind("click", {
                "me": me,
                "row": row,
                "column": column,
                "name": columnObj.name,
                "rowData": $.objClone(rowData)
            },

            function(e) {
                var me = e.data.me;
                var row = e.data.row;
                var column = e.data.column;
                var name = e.data.name;
                var rowData = e.data.rowData;
                var data = {
                    "row": row,
                    "column": column,
                    "name": name,
                    "rowData": rowData
                };
                me._triggerHandler(e, eventNameCellClick, data);
            });
        },
        /**
         * @private 
         * @description 表格内容区对隐藏列处理
         * @param {Object} params 参数
         */
        __getContentTdAlign: function(params) {
            var column = params.columnObj,
                divEl = params.divEl;
            if (column.align) {
                // 右对齐
                if (Sweet.constants.align.RIGHT === column.align) {
                    divEl.addClass(gridContentDataRightClass);
                }
                // 居中对齐
                else if (Sweet.constants.align.CENTER === column.align) {
                    divEl.addClass(gridContentDataCenterClass);
                }
                // 默认左对齐
                else {
                    divEl.addClass(gridContentDataLeftClass);
                }
            } else {
                // 组件内部根据数据类型处理数据对其方式
                if (Sweet.constants.dataType.NUMBER === column.dataType) {
                    divEl.addClass(gridContentDataRightClass);
                }
            }
        },
        /**
         * @private
         * @description 表格内容区数据处理
         * @param {Object} params 参数，格式如下：
         *      {Number} row 行
         *      {Number} column 列
         *      {Object} rowData 行数据
         *      {Object} columnObj 列描述
         *      {Object} divEl 内容区附着对象
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点数据
         */
        __getContentTdRender: function(params) {
            var me = this,
                row = params.row,
                column = params.column,
                rowData = params.rowData,
                columnObj = params.columnObj,
                divEl = params.divEl,
                depth = params.depth,
                isTree = params.isTree,
                trEl = params.trEl,
                tempDivContent,
                tempParams = {},
                data = rowData[columnObj.name],
                tempData,
                aMenu = "<a class='" + gridContentMenuClass + "' column='" + column + "'>";
            if (columnObj.renderer) {
                tempParams = {
                    "row": row,
                    "column": column,
                    "data": data,
                    "rowData": $.objClone(rowData),
                    "columnDesc": $.objClone(columnObj)
                };
                tempDivContent = columnObj.renderer.call(null, tempParams);
                if (columnObj.menus) {
                    $(aMenu).html(tempDivContent)
                        .appendTo(divEl);
                } else {
                    divEl.html(tempDivContent);
                }
            } else {
                // 处理表格型数据
                tempParams = {
                    "data": data,
                    "rowData": rowData,
                    "row": row,
                    "column": column,
                    "depth": depth,
                    "isTree": isTree,
                    "trEl": trEl,
                    "name": columnObj.name
                };
                tempData = me.__getContentTdTree(tempParams);
                if (columnObj.menus) {
                    $(aMenu).html(tempData)
                        .appendTo(divEl);
                } else {
                    divEl.html(tempData);
                }
            }
            // 是否开启tip提示功能
            if (columnObj.tip) {
                divEl.attr("title", $.isPlainObject(data) ? $.htmlEscape(data.text) : $.htmlEscape(data));
            }
        },
        /**
         * @private
         * @description 创建树形节点
         * @param {Object} params 参数，格式如下：
         *      {Object} data 表格单元格数据
         *      {Object} rowData 行数据
         *      {Number} row 行数
         *      {Number} column 列数
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点
         *      {String} name 列名称
         * @return {String} 返回树形数据或普通数据
         */
        __getContentTdTree: function(params) {
            var me = this,
                data = params.data,
                outputData,
                rowData = params.rowData,
                row = params.row,
                column = params.column,
                depth = params.depth,
                isTree = params.isTree,
                trEl = params.trEl,
                name = params.name,
                divEl = $("<div>").addClass(gridContentTreeDivClass),
                textEl;
            if ($.isPlainObject(data) && data.children && $.isNotNull(data.text)) {
                // 计算树节点偏移量
                if (isTree) {
                    divEl.css("padding-left", treeBlankWidth * depth);
                }
                var aEl = $("<a>").addClass(gridContentTreePlusClass + " " + gridContentTreeSpaceClass + " " + gridContentTreeClass)
                    .bind("click", function(event) {
                    event.stopImmediatePropagation();
                    var self = $(this);
                    var tempData;
                    // 表格树数据追加行节点
                    me.rowTreeEl = self.parent().parent().parent().parent();
                    // 表格树数据触发列节点
                    me.rowTreeTdEl = self;
                    tempData = {
                        "row": row,
                        "column": column,
                        "name": name,
                        "depth": depth,
                        "rowData": $.objClone(rowData) || {}
                    };
                    // 处理表格树展开问题
                    if (self.hasClass(gridContentTreePlusClass)) {
                        self.removeClass(gridContentTreePlusClass).addClass(gridContentTreeMinusClass);
                        if (self.data("expand")) {
                            // 回调展开事件
                            tempData = me._triggerHandler(event, eventNameExpanded, tempData);
                            me._gridContentTreeExpand(self.data("treeTrEls"), true);
                            return;
                        }
                        // 回调展开事件
                        tempData = me._triggerHandler(event, eventNameTreeExpand, tempData);
                        if (me.options.store) {
                            me.options.store.load(tempData, true, "setTreeData");
                        }
                        self.data("expand", true);
                        self.data("treeTrEls", []);
                    }
                    // 处理表格树折叠问题
                    else if (self.hasClass(gridContentTreeMinusClass)) {
                        self.removeClass(gridContentTreeMinusClass).addClass(gridContentTreePlusClass);
                        // 回调折叠事件
                        tempData = me._triggerHandler(event, eventNameTreeCollapse, tempData);
                        me._gridContentTreeExpand(self.data("treeTrEls"), false);
                    } else {
                        me._info("__getContentTdTree() Nothing to do.");
                    }
                })
                    .attr({
                    "row": row,
                    "column": column,
                    "depth": depth
                })
                    .appendTo(divEl);
                outputData = $.nullToString(data.text);
                textEl = $("<div>").html($.htmlEscape(outputData)).appendTo(divEl);
                if (data.childs && data.childs.length > 0 && data.expand && trEl) {
                    var tempChilds = data.childs;
                    aEl.removeClass(gridContentTreePlusClass).addClass(gridContentTreeMinusClass);
                    aEl.data("expand", true);
                    aEl.data("treeTrEls", []);
                    me._buildTreeChildContent(tempChilds, trEl, aEl);
                }
            } else {
                textEl = $("<div>").appendTo(divEl);
                divEl.css("padding-left", treeBlankWidth * depth);
                if (isTree && $.isPlainObject(data)) {
                    outputData = data.text;
                } else {
                    outputData = $.isPlainObject(data) ? data.text : data;
                }
                textEl.html($.htmlEscape($.nullToString(outputData)));
            }

            return divEl[0];
        },
        /**
         * @private
         * @description 生成表格树节点数据
         */
        _buildTreeChildContent: function(data, appendTrEl, aEl) {
            this._info("_buildGridTreeContent() begin");
            var timeBegin = $.date.getMilliseconds(),
                timeEnd;
            var me = this;
            me.tempTreeData = me._toJson(data).reverse();
            me.tempTreeDataIndex = 0;
            // 将数据放入this.treeData中
            me.treeData = me.treeData.concat(me.tempTreeData);
            // 添加rowId
            me._addRowId(me.treeData);
            // 实际行数
            var rows = data.length;
            // 行号
            var row;
            // 临时行号
            var tempTreeRow = 0;
            // 或取待显示数据
            var tempData = data.reverse();
            // 列信息
            var columns = me.headerColumns || [];
            var trEl;
            var tdEl;
            var checkboxEl;
            var SNEl;
            var foldEl;
            // 取深度
            var depth = $.string.toNumber(aEl.attr("depth")) + 1;
            var treeTrEls = aEl.data("treeTrEls");
            var _tdElsLength = me.contentTreeTdEls.length;
            // 绘制表格
            for (var i = 0; i < rows; i++) {
                row = i + _tdElsLength;
                trEl = $("<tr>").addClass(gridContentTrClass).attr("tree", "true");
                trEl.bind("click", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowClick
                }, me._onTrClick)
                    .bind("dblclick", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowDBClick
                }, me._onTrClick);
                // 行变色处理
                me._addRowColor(trEl, tempData[i].options);
                me.contentTreeTdEls[row] = [];
                if (me.fold) {
                    foldEl = me._getFold(trEl, row, tempData[i], "tree").appendTo(trEl);
                }
                if (me.checkbox) {
                    var isChecked = me._isRowChecked(tempData[i]);
                    checkboxEl = me._getCheckbox(row, true, isChecked).appendTo(trEl);
                    me.checkboxTreeTdEls[row] = checkboxEl;
                }
                if (me.sn) {
                    SNEl = me._getSN("").appendTo(trEl);
                }

                // 生成数据单元格
                for (var j = 0; j < columns.length; j++) {
                    tdEl = me._getContentTd({
                        "row": row,
                        "column": j + me.count,
                        "rowData": tempData[i],
                        "columnObj": columns[j],
                        "depth": depth,
                        "isTree": true
                    })
                        .appendTo(trEl);
                    me.contentTreeTdEls[row][j] = tdEl;
                }
                me.contentTreeTdEls[row][columns.length] = $("<td>").appendTo(trEl);
                trEl.insertAfter(appendTrEl);

                me.contentTreeTrEls[row] = trEl;
                treeTrEls[i] = trEl;
            }
            me._refreshContentSN();
            me.contentTreeVTdEls = $.matrix.reversal(me.contentTreeTdEls);

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildGridTreeContent() end");
        },
        /**
         * @private
         * @description 控制表格树展开、折叠
         * @param {Array} trEls 表格树节点数组
         * @param {Boolean} expand true展开，false折叠
         */
        _gridContentTreeExpand: function(trEls, expand) {
            var trEl;
            var trTreeEls;
            var trTreeEl;
            if (expand) {
                for (var m = 0; m < trEls.length; m++) {
                    trEls[m].show();
                }
            } else {
                for (var i = 0; i < trEls.length; i++) {
                    trEl = trEls[i].hide();
                    // 该行是否有树形节点
                    trTreeEls = trEl.find("." + gridContentTreeClass);
                    for (var j = 0; j < trTreeEls.length; j++) {
                        trTreeEl = $(trTreeEls[j]);
                        trTreeEl.removeClass(gridContentTreeMinusClass).addClass(gridContentTreePlusClass);
                        this._gridContentTreeExpand(trTreeEl.data("treeTrEls") || [], false);
                    }
                }
            }
        },
        /**
         * @description 处理滚动条事件，保持表头与表内容一致
         * @private
         */
        _onScroll: function() {
            var me = this,
                scrollLeft = me.contentEl.scrollLeft();
            if (me._gridMenu) {
                me._gridMenu.destroy();
            }
            me.headerDivEl.css({
                "left": -scrollLeft
            });
            if (me.resizeEl) {
                me.resizeEl.css({
                    "left": -scrollLeft
                });
            }
            if (me.options.scrollCallBack && $.isFunction(me.options.scrollCallBack)) {
                me.options.scrollCallBack({
                    left: scrollLeft,
                    top: me.contentEl.scrollTop(),
                    scrollWidth: me.contentEl.get(0).scrollWidth,
                    scrollHeight: me.contentEl.get(0).scrollHeight
                });
            }
        },
        /**
         * @description 行全选
         * @private
         * @param {Object} event 复选框按钮本身
         */
        _onAllRowClick: function(event) {
            var me = event.data.me,
                self = $(this),
                tempData = {};
            /**
             * @private
             * @description 数组转换对象
             * @param {Array} arr 数组
             * @return {Object} 对象
             */
            function arrToObject(arr) {
                var temp, obj = {};
                for (var i = 0; i < arr.length; i++) {
                    temp = arr[i];
                    if (temp) {
                        obj[temp.rowId] = temp;
                    }
                }
                return obj;
            }

            // 未选中
            if (self.hasClass(checkboxUncheckdClass)) {
                tempData.checked = true;
                self.removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                me.selectedData = arrToObject(me.data);
                me.selectedDataLength = me.data.length;
                me.selectedTreeData = arrToObject(me.treeData);
                me.selectedTreeDataLength = me.treeData.length;
                me._dealRowSelect(me.checkboxTdEls, me.contentTrEls, {
                    "current": checkboxCheckdClass,
                    "old": checkboxUncheckdClass
                }, {
                    "current": gridContentRowSelectedClass,
                    "old": ""
                });
                me._dealRowSelect(me.checkboxTreeTdEls, me.contentTreeTrEls, {
                    "current": checkboxCheckdClass,
                    "old": checkboxUncheckdClass
                }, {
                    "current": gridContentRowSelectedClass,
                    "old": ""
                });
            }
            // 选中
            else if (self.hasClass(checkboxCheckdClass)) {
                tempData.checked = false;
                self.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);
                me._allRowUnSelect();
            } else {
                me._info("Nothing we can do.");
                return;
            }
            me._triggerHandler(event, eventNameCheckBoxClick, tempData);
        },
        /**
         * @private
         * @description 所有行取消选中
         */
        _allRowUnSelect: function() {
            var me = this;
            me.selectedData = {};
            me.selectedDataLength = 0;
            me.selectedTreeData = {};
            me.selectedTreeDataLength = 0;
            me._dealRowSelect(me.checkboxTdEls, me.contentTrEls, {
                "current": checkboxUncheckdClass,
                "old": checkboxCheckdClass
            }, {
                "current": "",
                "old": gridContentRowSelectedClass
            });
            me._dealRowSelect(me.checkboxTreeTdEls, me.contentTreeTrEls, {
                "current": checkboxUncheckdClass,
                "old": checkboxCheckdClass
            }, {
                "current": "",
                "old": gridContentRowSelectedClass
            });
        },
        /**
         * @description 处理复选框选中
         * @private
         * @param {Array} checkboxs 复选框组
         * @param {Array} rows 行数组
         * @param {String} checkboxClass 样式
         * @param {String} rowClass 行样式
         */
        _dealRowSelect: function(checkboxs, rows, checkboxClass, rowClass) {
            for (var i = 0; i < rows.length; i++) {
                if (checkboxs[i]) {
                    checkboxs[i].find("a").removeClass(checkboxClass.old).addClass(checkboxClass.current);
                }
                rows[i].removeClass(rowClass.old).addClass(rowClass.current);
            }
        },
        /**
         * @description 行复选框点击事件
         * @private
         * @param {Object} obj 复选框对象本身
         * @param {Boolean} checked true选中，false未选中
         */
        _onRowClick: function(obj, checked) {
            var me = this,
                row = $.string.toNumber(obj.attr("row")),
                isTree = obj.attr("tree"),
                rowData;
            // 选中
            if (checked) {
                obj.removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                me._oneRowSelect(row, isTree);
                // 未选中
            } else {
                var tempData = me.data[row];
                obj.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);

                if ("true" === isTree) {
                    tempData = me.treeData[row];
                    // 取消行选中
                    me.contentTreeTrEls[row].removeClass(gridContentRowSelectedClass);
                    delete me.selectedTreeData[tempData.rowId];
                    me.selectedTreeDataLength--;
                } else {
                    tempData = me.data[row];
                    // 取消行选中
                    me.contentTrEls[row].removeClass(gridContentRowSelectedClass);
                    delete me.selectedData[tempData.rowId];
                    me.selectedDataLength--;
                }

                // 如果全部取消选中
                if (me.data.length + me.treeData.length !== me.selectedTreeDataLength + me.selectedDataLength) {
                    me.headerTdEls[0].find("a").removeClass().addClass(checkboxUncheckdClass);
                }
            }
        },
        /**
         * @private
         * @description 单号选择
         * @param {Number} row 行号
         * @param {String} isTree 是否是树
         */
        _oneRowSelect: function(row, isTree) {
            var me = this,
                rowData;
            if ("true" === isTree) {
                rowData = $.objClone(me.treeData[row]);
                // 添加行选中
                if (me.contentTreeTrEls[row]) {
                    me.contentTreeTrEls[row].addClass(gridContentRowSelectedClass);
                }
                me.selectedTreeData[me.treeData[row].rowId] = rowData;
                me.selectedTreeDataLength++;
            } else {
                rowData = $.objClone(me.data[row]);
                // 添加行选中
                if (me.contentTrEls[row]) {
                    me.contentTrEls[row].addClass(gridContentRowSelectedClass);
                }
                me.selectedData[me.data[row].rowId] = rowData;
                me.selectedDataLength++;
            }

            // 如果全部选中
            if (me.selectedDataLength + me.selectedTreeDataLength === me.data.length + me.treeData.length) {
                me.headerTdEls[0].find("a").removeClass().addClass(checkboxCheckdClass);
            }
        },
        /**
         * @private
         * @description 创建表格分页栏
         */
        _createGridPagingBar: function() {
            if (!this.options.data.page) {
                return;
            }
            // 先销毁之前的元素，再创建
            this.__destroyTablePagingBar();
            var me = this,
                options = me.options,
                page = options.data.page,
                simple = page.simple,
                pagingHegith = 30,
                totalPage = page.total && $.isNumeric(page.total) ? Math.ceil(page.total / page.size) : 0,
                currentPage = me.page ? (me.page.currentPage ? me.page.currentPage : 1) : 1,
                pageSize = me.page ? (me.page.size ? me.page.size : page.size) : page.size,
                objRow,
                objPage,
                prevText = simple ? "" : i18n.prev,
                nextText = simple ? "" : i18n.next,
                selectElClass = "sweet-gird-paging-select",
                aElClass = "sweet-gird-paging-select-rows",
                downElClass = "sweet-grid-paging-select-down-page",
                paingTextElClass = "sweet-grid-paging-text",
                pagingGoAElClass = "sweet-grid-paging-space",
                pagingGoAEl = $("<a>"),
                pagingEl = me.pagingEl = $("<div>"),
                pagingInnerEl = me.pagingInnerEl = $("<div>"),
                tempPagingSelectObj;
            // 如果设置currentPage，以此为准
            if (page.currentPage) {
                currentPage = page.currentPage;
                delete page.currentPage;
            }
            // 保存分页信息
            me.page = {
                totalPage: totalPage,
                currentPage: currentPage,
                size: pageSize
            };
            objRow = {
                selectElClass: selectElClass,
                aElClass: aElClass,
                downElClass: "",
                text: i18n.pageRow,
                size: pageSize,
                select: page.select,
                type: gridPagingComboboxType[0]
            };
            objPage = {
                selectElClass: selectElClass,
                aElClass: aElClass,
                downElClass: downElClass,
                text: "{0} / {1}",
                size: currentPage,
                select: [],
                type: gridPagingComboboxType[1]
            };
            // 每页显示记录数下拉框
            if (!simple) {
                tempPagingSelectObj = me._createPagingBarSelectPage(objRow);
                me.pagingRowEl = tempPagingSelectObj.selectEl.appendTo(pagingInnerEl);
                me.pagingRowDropDownEl = tempPagingSelectObj.dropDownEl;
                me.pagingRowDropDownEl.find("li").bind("click", {
                    "me": me
                }, me._onPagingRowClick);
            }
            // 创建分页栏显示文本
            me._createPagingBarTotalText();
            // 上一页按钮
            me._createPagingBarButton(gridPagingPrevClass, prevText, gridPagingTextPos[0]).bind("click", function() {
                me._onPagingButtonClick(true);
            })
                .appendTo(pagingInnerEl);
            if (simple) {
                // 翻页选择下拉框
                for (var i = 0; i < totalPage; i++) {
                    objPage.select[i] = (i + 1) + " / " + totalPage;
                }
                tempPagingSelectObj = me._createPagingBarSelectPage(objPage);
                me.pagingPageEl = tempPagingSelectObj.selectEl.appendTo(pagingInnerEl);
                me.pagingPageDropDownEl = tempPagingSelectObj.dropDownEl;
                // 绑定翻页事件
                me.pagingPageDropDownEl.bind("click", function(e) {
                    me._onPagingBarNumClick(e);
                });
            } else {
                // 创建数字翻页按钮
                me._createPagingBarNumItem();
            }
            // 下一页按钮
            me._createPagingBarButton(gridPagingNextClass, nextText, gridPagingTextPos[1]).bind("click", function() {
                me._onPagingButtonClick(false);
            })
                .appendTo(pagingInnerEl);
            pagingEl.addClass(gridPagingClass).height(pagingHegith).appendTo(me.gridEl);
            pagingInnerEl.addClass(gridPagingInnerClass).appendTo(pagingEl);

            //Go 按钮
            if (!simple) {
                // 创建跳转页文本框
                pagingGoAEl.addClass(pagingGoAElClass).appendTo(pagingInnerEl);
                me.pagingGoTextEl = $("<input>").addClass(paingTextElClass)
                    .blur(function() {
                    me._onGoBlur();
                })
                    .on("paste", function() {
                    return false;
                })
                    .keypress($.e.onlyNumber)
                    .val(me.page.currentPage)
                    .appendTo(pagingGoAEl);
                me.pagingGoEl = me._createPagingBarButton(gridPagingGoClass, "", gridPagingTextPos[0],
                i18n.go)
                    .bind("click", function(event) {
                    me._onPagingGoClick(event);
                })
                    .appendTo(pagingInnerEl);
            }
        },
        /**
         * @private
         * @description 跳转按钮blur事件处理
         */
        _onGoBlur: function() {
            var me = this;
            var value = $.string.toNumber(me.pagingGoTextEl.val());
            if (1 > value) {
                me.pagingGoTextEl.val(1);
            } else if (value > me.page.totalPage) {
                me.pagingGoTextEl.val(0 === me.page.totalPage ? 1 : me.page.totalPage);
            }
        },
        /**
         * @description 上、下翻页按钮单击事件
         * @private
         * @param {Boolean} bool true前翻 false后翻
         */
        _onPagingButtonClick: function(bool) {
            var me = this,
                findTarget = false,
                page = me.page,
                numEls = me.numEls,
                currentPage;
            // 页数必须在有效范围内
            if (page.totalPage < page.currentPage || 1 > page.currentPage) {
                return;
            }
            // 计算当期要显示的页数
            if (1 === page.currentPage) {
                if (bool || 1 === page.totalPage) {
                    return;
                } else {
                    currentPage = page.currentPage + 1;
                }
            } else if (page.totalPage === page.currentPage) {
                if (bool) {
                    currentPage = page.totalPage - 1;
                } else {
                    return;
                }
            } else {
                currentPage = bool ? --page.currentPage : ++page.currentPage;
            }

            me.page.currentPage = currentPage;

            // 简单翻页栏
            if (me.options.data.page.simple) {
                me.pagingPageDropDownEl.find("li:eq(" + --me.page.currentPage + ")").click();
                return;
            }

            // 找到需要点击的目标元素
            for (var i = 0; i < numEls.length; i++) {
                if (currentPage === $.string.toNumber(numEls[i].val())) {
                    numEls[i].click();
                    findTarget = true;
                }
            }

            // DTS2013090502641 没有找到目标元素，也要重新加载数据
            if (!findTarget) {
                // 上下翻页使用Go按钮计算开始值
                me.goClick = true;
                me._onPagingBarNumClick(null, true);
            }
        },
        /**
         * @description Go按钮点击事件
         * @private
         * @param {Object} event 事件
         */
        _onPagingGoClick: function(event) {
            var me = this,
                goTextValue = $.string.toNumber(me.pagingGoTextEl.val());
            // 如果当前页同跳转页相同，不进行跳转
            if (me.page.currentPage === goTextValue) {
                return;
            }
            me.page.currentPage = goTextValue;
            me.goClick = true;
            me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
        },
        /**
         * @description 每页记录数选择时触发
         * @private
         * @param {Object} event 每页记录数本身
         */
        _onPagingRowClick: function(event) {
            var me = event.data.me,
                self = $(this);
            me.options.data.page.size = me.page.size = $.string.toNumber(self.val());
            me.page.currentPage = 1;
            me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
        },
        /**
         * @description 创建显示记录数下拉框
         * @private
         * @param {Object} obj 配置参数
         * @return {Object} selectEl 下拉框对象
         */
        _createPagingBarSelectPage: function(obj) {
            var me = this,
                size = obj.size,
                select = obj.select,
                downElClass = "sweet-gird-paging-select-down",
                selectEl = $("<div>").addClass(obj.selectElClass),
                aEl = $("<a>"),
                emEl = $("<em>"),
                downEl = $("<div>"),
                pageRowDropDown,
                params = {};
            pageRowDropDown = me._createDropDown(select);
            emEl.appendTo(aEl);
            downEl.addClass(downElClass).appendTo(aEl);
            aEl.addClass(obj.aElClass)
                .bind("click", {
                "attachEl": selectEl,
                "dropDown": pageRowDropDown,
                "type": obj.type
            }, me._onSelectClick)
                .appendTo(selectEl);
            pageRowDropDown.addClass(obj.downElClass).appendTo(document.body);
            // 绑定单击事件
            params = {
                "me": me,
                "obj": obj,
                "emEl": emEl,
                "pageRowDropDown": pageRowDropDown
            };
            pageRowDropDown.find("li").bind("click", params,
            me._onPageListClick);
            // 设定每页显示记录默认值
            pageRowDropDown.find("li").each(function() {
                var value = $.string.toNumber($(this).val());
                if (size === value) {
                    me._onPageListClick({
                        "data": params
                    }, $(this));
                }
            });

            return {
                "selectEl": selectEl,
                "dropDownEl": pageRowDropDown
            };
        },
        /**
         * @private
         * @description 响应每页显示条数点击事件
         * @param {Object} e 事件对象或参数
         * @param {Object} self 点击对象本身，可选
         */
        _onPageListClick: function(e, self) {
            var me = e.data.me,
                obj = e.data.obj,
                emEl = e.data.emEl,
                pageRowDropDown = e.data.pageRowDropDown,
                value,
                tempHtml;
            self = self || $(this);
            value = $.string.toNumber(self.val());
            // 每页记录数下拉框
            if (gridPagingComboboxType[0] === obj.type) {
                if (me.pageRowsChoosedLiEl) {
                    me.pageRowsChoosedLiEl.removeClass(pageRowChoosedClass);
                }
                emEl.text(obj.text.replace("{0}", value));
                me.pageRowsChoosedLiEl = self;
            } else if (gridPagingComboboxType[1] === obj.type) {
                if (me.pageChoosedLiEl) {
                    me.pageChoosedLiEl.removeClass(pageRowChoosedClass);
                }
                tempHtml = self.html();
                emEl.text(obj.text.replace("{0}", value)
                    .replace("{1}", tempHtml.substr(tempHtml.indexOf("/") + 1, tempHtml.length)));
                me.pageChoosedLiEl = self;
            } else {
                me._error("Unsupported combobox type. Not in [" + gridPagingComboboxType[0] + ", " + gridPagingComboboxType[1] + "].");
                return;
            }
            self.addClass(pageRowChoosedClass);
            pageRowDropDown.hide();
            // 第一次初始化表格时，不触发
            if (!me.initial) {
                me._triggerHandler(e, eventNamePageClick, $.objClone(me.page));
                me.initial = false;
            }
        },
        /**
         * @description 处理每页记录数下拉框单击事件
         * @private
         * @param {Object} event 每页记录数下拉框事件
         */
        _onSelectClick: function(event) {
            if ($.isVisiable(event.data.dropDown)) {
                return;
            }
            var attachEl = event.data.attachEl,
                dropDown = event.data.dropDown,
                type = event.data.type,
                zIndex = $.getMaxZIndex($.string.toNumber(dropDown.css("z-index")));
            if (gridPagingComboboxType[0] === type) {
                dropDown.data("rowFlag", true);
            } else if (gridPagingComboboxType[1] === type) {
                dropDown.data("pageFlag", true);
            }
            // 计算z-index值，避免覆盖
            dropDown.css($.getFloatOffset(attachEl, dropDown, null)).css("z-index", zIndex).show();
        },
        /**
         * @description 创建下拉列表
         * @private
         * @param {Array} data 列表参数
         */
        _createDropDown: function(data) {
            var me = this,
                dropDownEl = $("<div>"),
                ulEl = $("<ul>");
            data = data || [20, 50, 100];
            for (var i = 0, temp, tempIndex; i < data.length; i++) {
                temp = data[i].toString();
                tempIndex = temp.indexOf("/");
                $("<li>").val(-1 === tempIndex ? temp : temp.substr(0, tempIndex)).text(temp).appendTo(ulEl);
            }
            ulEl.appendTo(dropDownEl);
            dropDownEl.addClass(gridPagingDropDownElClass + " " + me.floatBgClass);
            return dropDownEl;
        },
        /**
         * @description 创建分页栏显示文本
         * @private
         */
        _createPagingBarTotalText: function() {
            var me = this,
                options = me.options,
                totalTextElClass = "sweet-grid-paging-totaltext",
                totalTextEl = me.totalTextEl = $("<span>");
            totalTextEl.addClass(totalTextElClass)
                .text(i18n.text.replace("{0}", options.data.page.total)).appendTo(me.pagingInnerEl);
        },
        /**
         * @description 刷新分页栏显示文本总条数信息
         * @private
         * @param {Number/String} total 总记录数
         */
        _refreshPagingBarTotalText: function(total) {
            var me = this;
            me.totalTextEl.text(i18n.text.replace("{0}", total));
        },
        /**
         * @description 创建分页栏按钮
         * @private
         * @param {String} picClass 图片样式，用于控制按钮图片
         * @param {String} text 按钮显示文本
         * @param {String} textPos 文本位置，居左或居右显示
         * @param {String} title 提示
         * @return {Object} 返回按钮对象
         */
        _createPagingBarButton: function(picClass, text, textPos, title) {
            var buttonElClass = "sweet-gird-paging-button",
                buttonElTextClass = "sweet-grid-paging-button-text",
                buttonEl = $("<a>"),
                picEl = $("<div>"),
                emEl = $("<em>");
            picEl.addClass(picClass).appendTo(buttonEl);
            if ($.isNotNull(text)) {
                if (gridPagingTextPos[0] === textPos) {
                    emEl.html(text).insertAfter(picEl);
                    buttonEl.addClass(buttonElTextClass);
                } else if (gridPagingTextPos[1] === textPos) {
                    emEl.html(text).insertBefore(picEl);
                    buttonEl.addClass(buttonElTextClass);
                } else {
                    $.log("Nothing we can do. Not in [" + gridPagingTextPos[0] + ", " + gridPagingTextPos[1] +
                        "]. value=" + textPos);
                }
            }
            if ($.isNotNull(title)) {
                buttonEl.attr("title", title);
            }
            buttonEl.addClass(buttonElClass);
            return buttonEl;
        },
        /**
         * @description 创建翻页栏翻页条
         * @private
         */
        _createPagingBarNumItem: function() {
            var me = this,
                options = me.options,
                minNumBtn = gridPagingDefaultNum + 2,
                numPrevMoreEl = $("<span>").text("...").hide(),
                numNextMoreEl = $("<span>").text("..."),
                numItemEl = me.numItemEl = $("<div>"),
                numEl,
                numEls = [],
                numMoreEls = [],
                totalPage = me.page.totalPage,
                currentPage = me.page.currentPage,
                beginIndex = 1,
                tempI;
            // 如果总页数小于默认显示按钮个数，按钮全部呈现
            if (totalPage <= minNumBtn) {
                for (var m = 0; m < totalPage; m++) {
                    tempI = m + 1;
                    numEl = $("<a>")
                        .addClass(gridPagingANumClass)
                        .val(tempI)
                        .text(tempI)
                        .appendTo(numItemEl);
                    numEls[m] = numEl;
                }
            } else {
                // 计算按钮开始值
                if (1 === totalPage || totalPage === currentPage) {
                    beginIndex = (1 === currentPage ? currentPage + 1 : currentPage - gridPagingDefaultNum);
                } else if (currentPage - 1 < gridPagingDefaultNum) {
                    beginIndex = 2;
                } else if (totalPage - currentPage < gridPagingDefaultNum) {
                    beginIndex = totalPage - gridPagingDefaultNum;
                } else {
                    // 如果点击跳转按钮
                    if (me.goClick) {
                        beginIndex = currentPage;
                        me.goClick = false;
                    }
                    // 如果点击第一个浮动按钮
                    else if ($.string.toNumber(me.numEls[1].val()) === currentPage || $.string.toNumber(me.numEls[gridPagingDefaultNum].val()) === currentPage) {
                        beginIndex = currentPage - 2;
                    } else {
                        beginIndex = $.string.toNumber(me.numEls[1].val());
                    }
                }

                for (var i = 0; i < minNumBtn; i++) {
                    tempI = i + beginIndex - 1;
                    numEl = $("<a>").addClass(gridPagingANumClass)
                        .val(tempI)
                        .text(tempI)
                        .appendTo(numItemEl);
                    if (0 === i) {
                        numEl.val(1).text(1);
                        numPrevMoreEl.insertAfter(numEl);
                        numMoreEls[0] = numPrevMoreEl;
                    } else if (gridPagingDefaultNum + 1 === i) {
                        numEl.val(totalPage).text(totalPage);
                        numNextMoreEl.insertBefore(numEl);
                        numMoreEls[1] = numNextMoreEl;
                    }
                    numEls[i] = numEl;
                }
            }

            // 处理分页按钮默认选中
            for (var n = 0; n < numEls.length; n++) {
                if (me.page.currentPage === $.string.toNumber(numEls[n].val())) {
                    numEls[n].addClass(gridPagingCurrentElClass);
                    me.pageingcurrentNumEl = numEls[n];
                }
            }

            // 刷新省略号
            if (0 < numMoreEls.length) {
                // 第一个省略号
                if (1 === $.string.toNumber(numEls[1].val()) - 1) {
                    numMoreEls[0].hide();
                } else {
                    numMoreEls[0].show();
                }
                // 最后一个省略号
                if (totalPage === $.string.toNumber(numEls[gridPagingDefaultNum].val()) + 1) {
                    numMoreEls[1].hide();
                } else {
                    numMoreEls[1].show();
                }
            }

            numItemEl.bind("click", function(event) {
                me._onPagingBarNumClick(event);
            })
                .appendTo(me.pagingInnerEl);
            me.numEls = numEls;
            me.numMoreEls = numMoreEls;
        },
        /**
         * @description 分页栏数字按钮点击事件
         * @private
         * @param {Object} event 事件
         * @param {Boolean} force 是否强制加载，true表示强制加载
         */
        _onPagingBarNumClick: function(event, force) {
            var me = this,
                self;
            if (force) {
                me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
            } else {
                self = $(event.target);
                if (self.hasClass(gridPagingANumClass) || self.hasClass(pageRowChoosedClass)) {
                    me.page.currentPage = $.string.toNumber(self.val());
                    me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
                }
            }
        },
        /**
         * @private
         * @description 触发handler注册事件
         * @param {Object} event 
         * @param {eventName} eventName 事件名
         * @param {Object} data 数据
         */
        _triggerHandler: function(event, eventName, data) {
            var me = this;
            var returnData;
            // 如果是pageClick事件并且注册store，触发store
            if (eventNamePageClick === eventName && me.options.store) {
                me.options.store._setDataPage(me.getPageInfo());
                me.options.store.loadRecords(me.getAllConditions());
            }
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eventName === handlerName) {
                    me._info(eventName + " event occured!");
                    returnData = func.call(null, event, data);
                }
            });

            return returnData ? returnData : data;
        },
        /**
         * @description 获取所有条件
         * @return {Object} 返回所有条件
         */
        getAllConditions: function() {
            var me = this,
                temp = {},
                page = me.getPageInfo(),
                filters = me._getFilters(),
                orders = JSON.parse(JSON.stringify(me._getOrders())),
                i = 0,
                j = 0,
                orderTemp, o,
                columns = me.headerColumns,
                len = columns.length;
            if (page && undefined !== page.start && undefined !== page.limit) {
                temp.start = page.start;
                temp.limit = page.limit;
            }
            if (filters.filter) {
                temp.filter = filters.filter;
            }
            if (orders.order) {
                //关于夏令时的排序修改成utc排序
                for (i = 0; i < orders.order.length; i++) {
                    orderTemp = orders.order[i];
                    for (j = 0; j < len; j++) {
                        if (columns[j].name === orderTemp.name && orderTemp.dataType === "date" && !orderTemp.hidden && !orderTemp.hiddenForever && $.isNotNull(columns[j].useDSTutcOrder)) {
                            //取夏令时的UTC时间进行替换当前时间的列进行排序，并使用number进行排序
                            o = JSON.parse(JSON.stringify(orderTemp));
                            orderTemp.name = columns[j].useDSTutcOrder;
                            orderTemp.dataType = "number";
                            //将没有改变的信息也放在data中
                            orderTemp.data = o;
                            break;
                        }
                    }
                }
                temp.order = orders.order;
            }

            return temp;
        },
        /**
         * @description 获取分页信息
         * @return {Object} 返回{"start": , "limit": }
         */
        getPageInfo: function() {
            var me = this;
            if (!me.page) {
                return {};
            }
            return {
                "start": (me.page.currentPage - 1) * me.page.size,
                "limit": me.page.size,
                "currentPage": me.page.currentPage,
                "size": me.page.size
            };
        },
        /**
         * @private
         * @description 获取过滤条件
         */
        _getFilters: function() {
            var me = this,
                result = [];
            $.each(me.filters, function(key, obj) {
                result.push({
                    "name": key,
                    "type": obj.type,
                    "value": obj.value,
                    "text": obj.text
                });
            });
            return {
                "filter": result
            };
        },
        /**
         * @private
         * @description 获取排序
         */
        _getOrders: function() {
            var me = this;
            return {
                "order": me.orders
            };
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id) || !me.gridEl) {
                return false;
            }
            me.gridEl.appendTo(me.renderEl);
            me._gridMenuEl = $("<div id=\"" + me._gridMenuId + "\">").appendTo(document.body);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 销毁表格组件
         */
        _destroyWidget: function() {
            var me = this;
            if (me.timerGridTreeContent) {
                Sweet.Task.Timeout.stop(me.timerGridTreeContent);
            }
            if (me.timerGridContent) {
                Sweet.Task.Timeout.stop(me.timerGridContent);
            }
            me.__destroyTableActionBar();
            me.__destroyTableHeader();
            me.__destroyTableContent();
            me.__destroyTablePagingBar();
            if (me.gridEl) {
                me.gridEl.remove();
                me.gridEl = null;
            }
            if (me._gridMenuEl) {
                me._gridMenuEl.remove();
                me._gridMenuEl = null;
            }
        },
        /**
         * @private
         * @description 销毁表格操作栏
         */
        __destroyTableActionBar: function() {
            var me = this;
            //销毁列选择中的list对象和dom
            if (me.selectColEl) {
                me.selectColEl.remove();
                me.selectColEl = null;
            }
            if (me.selectColList && $.isFunction(me.selectColList.destroy)) {
                me.selectColList.destroy();
                me.selectColList = null;
            }
            if (me.selectColWin) {
                if ($.isFunction(me.selectColWin.destroy)) {
                    me.selectColWin.destroy();
                }
                me.selectColWin = null;
                me.__selectColumnWinAEl = null;
            }
            //销毁多列排序中的sweet对象
            if (me._multiSortWin && $.isFunction(me._multiSortWin.destroy)) {
                me._multiSortWin.destroy();
                me._multiSortWin = null;
                if (me.firstCol) {
                    me.firstCol = null;
                }
                if (me.secondCol) {
                    me.secondCol = null;
                }
                if (me.thirdCol) {
                    me.thirdCol = null;
                }
            }
            //销毁二次统计中的对象
            if (me.secondaryPanel && $.isFunction(me.secondaryPanel.destroy)) {
                me.secondaryPanel.destroy();
                me.secondaryPanel = null;
            }
            if (me.actionBarEl) {
                me.actionBarEl.remove();
                me.actionBarEl = null;
            }
            if (me.exportEl) {
                me.exportEl.remove();
                me.exportEl = null;
            }
        },
        /**
         * @private
         * @description 销毁表头
         */
        __destroyTableHeader: function() {
            var me = this,
                gps = me.filterPanels,
                len = gps ? gps.length : 0;
            if (me.headerEl) {
                me.headerEl.remove();
                me.headerEl = null;
            }
            if (me.resizeEl) {
                me.resizeEl.remove();
                me.resizeEl = null;
            }
            for (var i = 0; i < len; i++) {
                me.filterPanels[i].remove();
            }
            me.filterPanels = null;
            me.oldActiveFilterTdEl = null;
            me.activeFilterTdEl = null;
        },
        /**
         * @private
         * @description 销毁表格内容
         */
        __destroyTableContent: function() {
            var me = this;
            if (me.contentEl) {
                me.contentEl.remove();
                me.contentEl = null;
            }
        },
        /**
         * @private
         * @description 销毁分页栏
         */
        __destroyTablePagingBar: function() {
            var me = this;
            if (me.pagingRowDropDownEl) {
                me.pagingRowDropDownEl.find("li").unbind();
                me.pagingRowDropDownEl.remove();
                me.pagingRowDropDownEl = null;
            }
            if (me.pagingPageDropDownEl) {
                me.pagingPageDropDownEl.find("li").unbind();
                me.pagingPageDropDownEl.remove();
                me.pagingPageDropDownEl = null;
            }
            if (me.pagingEl) {
                me.pagingEl.remove();
                me.pagingEl = null;
            }
        }
    });

    /**
     * @description 表格
     * @name Sweet.grid.Grid
     * @class 
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建表格：
     * var sweetGrid = new Sweet.grid.Grid({
     * });
     */
    Sweet.grid.Grid = $.sweet.widgetGrid;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 表格组件
 * 2013/1/31
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var checkboxUncheckdClass = "sweet-form-checkbox-unchecked",
        checkboxCheckdClass = "sweet-form-checkbox-checked",
        gridHeaderClass = "sweet-grid-header",
        contentElClass = "sweet-grid-content",
        gridHeaderBottomClass = "sweet-grid-header-bottom",
        resizeElClass = "sweet-grid-resize",
        selectNoneClass = "sweet-select-none",
        actionBarSelectColumnClass = "select-column",
        actionBarMultiSortClass = "multi-sort",
        actionBarSecondStatClass = "second-stat",
        actionBarClearFilterClass = "clear-filter",
        actionBarExportClass = "export",
        actionBarExportCsvClass = "csv",
        actionBarExportXlsClass = "xls",
        actionBarExportPdfClass = "pdf",
        actionBarExportLiCsvClass = "li-csv",
        actionBarExportLiXlsClass = "li-xls",
        actionBarExportLiPdfClass = "li-pdf",
        gridCheckboxClass = "sweet-grid-checkbox",
        gridHeaderTdClass = "sweet-grid-header-table-td",
        gridHeaderTdCommonClass = "sweet-grid-header-table-td-common",
        gridHeaderTdHoverClass = "sweet-grid-header-table-td-common-hover",
        gridHeaderSortAscClass = "sweet-grid-header-sort-asc",
        gridHeaderSortDescClass = "sweet-grid-header-sort-desc",
        gridHeaderDragClass = "sweet-grid-resize-drag",
        gridHeaderDownClass = "sweet-grid-resize-down",
        gridHeaderTextClass = "text",
        gridHeaderTextHoverClass = "text-hover",
        gridHeaderFilterClass = "sweet-grid-header-filter",
        gridHeaderFilterPicClass = "sweet-grid-header-filter-pic",
        gridHeaderFilterBgClass = "sweet-list-list-con",
        gridHeaderFilterPadClass = "sweet-grid-header-filter-pad",
        gridHeaderFilterOneClass = "filter-one",
        gridHeaderFilterTwoClass = "filter-two",
        gridHeaderFilterSuffix = "-grid-filter",
        gridHeaderFilterBtnSuffix = "-grid-filter-btn",
        gridSNClass = "sweet-grid-sn",
        gridSpecColumnClass = "sweet-grid-spec-column",
        gridContentMenuClass = "sweet-grid-content-menu",
        gridContentTableClass = "sweet-grid-content-table",
        gridContentTrClass = "sweet-grid-content-tr",
        gridContentTdClass = "sweet-grid-content-td",
        gridContentDataLeftClass = "sweet-grid-content-data-left",
        gridContentDataRightClass = "sweet-grid-content-data-right",
        gridContentDataCenterClass = "sweet-grid-content-data-center",
        gridContentRowSelectedClass = "sweet-grid-content-row-selected",
        gridContentTreeDivClass = "sweet-grid-content-td-tree",
        gridContentTreeClass = "sweet-grid-content-td-tree-a",
        gridContentTreePlusClass = "sweet-grid-content-td-plus",
        gridContentTreeMinusClass = "sweet-grid-content-td-minus",
        gridContentTreeBlankClass = "sweet-grid-content-td-blank",
        gridContentTreeSpaceClass = "sweet-grid-content-td-space",
        gridContentTdDataSuffix = "-grid-content-data-id",
        gridContentEditClass = "sweet-common-opercolumn-edit",
        gridContentModifyClass = "sweet-common-opercolumn-modify",
        gridContentDeleteClass = "sweet-common-opercolumn-delete",
        gridContentCloseClass = "sweet-common-opercolumn-close",
        gridContentPauseClass = "sweet-common-opercolumn-pause",
        gridContentStartClass = "sweet-common-opercolumn-start",
        gridContentResetClass = "sweet-common-opercolumn-reset",
        gridContentDetailClass = "sweet-common-opercolumn-detail",
        gridContentConfirmClass = "sweet-common-opercolumn-confirm",
        gridColumnPrefix = "sweet-grid-column-",
        gridPagingClass = "sweet-grid-paging",
        gridPagingInnerClass = "sweet-grid-paging-inner",
        gridPagingDropDownElClass = "sweet-grid-paging-dropDown",
        gridPagingPrevClass = "sweet-grid-paging-prev",
        gridPagingANumClass = "sweet-grid-paging-num",
        gridPagingNextClass = "sweet-grid-paging-next",
        gridPagingGoClass = "sweet-grid-paging-go",
        gridPagingCurrentElClass = "current",
        pageRowChoosedClass = "choosed",
        gridPagingComboboxType = ["row", "page"],
        gridPagingTextPos = ["left", "right"],
        gridPagingDefaultNum = 5, // 中间预留数字按钮个数
        defaultColumnHeight = 30, // 默认表格高度
        i18n = Sweet.core.i18n.grid,
        exportTypeText = Sweet.core.i18n.exportType,
        dataType = Sweet.constants.dataType,
        symbol = Sweet.constants.symbol,
        exportTypeConf = Sweet.constants.exportType,
        eventNamePageClick = "pageClick",
        eventNameCellClick = "cellClick",
        eventNameRowClick = "rowClick",
        eventNameRowDBClick = "rowDblClick",
        eventNameCheckBoxClick = "checkBoxClick",
        eventNameMenuClick = "menuClick",
        eventNameTreeExpand = "treeExpand",
        eventNameBeforeSetData = "beforeSetData",
        eventNameAfterSetData = "afterSetData",
        eventNameExport = "export",
        timerSuffix = "sweet-grid-content-timer", // 内容区定时器名称
        trColor = {
            "red": "red",
            "orange": "orange",
            "yellow": "yellow",
            "green": "green",
            "blue": "blue",
            "indigo": "indigo",
            "purple": "purple"
        },
        tableTdPadding = 10, // 表格内部单元格间间隔
        snWidth = 80,
        checkboxWidth = 23,
        scrollWidth = 18,
        treeBlankWidth = 19,
        minTdWidth = 40,
        maxColumnLength = 200,
        minColumnWidth = 120,
        ncWidth = -1, //用户没有配置列宽度时，内部标志的列
        tdBorder = 1;

    $.widget("sweet.widgetBigGrid", $.sweet.widget, /** @lends Sweet.grid.BigGrid.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-BigGrid]",
        defaultElement: "<div>",
        type: "biggrid",
        eventNames: /** @lends Sweet.grid.BigGrid.prototype*/
        {
            /**
             * @event
             * @description 翻页事件
             * @param {Object} data 翻页数据信息
             */
            pageClick: "翻页事件",
            /**
             * @event
             * @description 单元格点击事件
             * @param {Object} data 单元格数据信息
             */
            cellClick: "单元格点击事件",
            /**
             * @event
             * @description 行点击事件
             * @param {Object} data 行数据信息
             */
            rowClick: "行点击事件",
            /**
             * @event
             * @description 行双击事件
             * @param {Object} data 行数据信息
             */
            rowDblClick: "行双击事件",
            /**
             * @event
             * @description 树节点展开事件
             * @param {Object} data 树节点数据信息
             */
            treeExpand: "树节点展开事件",
            /**
             * @event
             * @description 复选框点击事件
             * @param {Object} data 复选框数据信息
             */
            checkBoxClick: "复选框点击事件",
            /**
             * @event
             * @description 菜单点击事件
             * @param {Object} data 菜单数据信息
             */
            menuClick: "菜单点击事件",
            /**
             * @event
             * @description setData前触发事件
             * @param {Object} data setData前触发数据信息
             */
            beforeSetData: "setData前触发事件",
            /**
             * @event
             * @description setData后触发事件
             * @param {Object} data setData后触发数据信息
             */
            afterSetData: "setData后触发事件",
            /**
             * @event
             * @description 导出事件
             * @param {Object} data 导出数据信息
             */
            export: "导出事件",
            /**
             * @event
             * @description 排序点击事件
             * @param {Object} data 排序数据信息
             */
            sort: "排序事件",
            /**
             * @event
             * @description 过滤点击事件
             * @param {Object} data 过滤数据信息
             */
            filter: "过滤事件",
            /**
             * @event
             * @description 多列排序事件
             * @param {Object} data 过滤数据信息
             */
            multiOrders: "多列排序事件",
            /**
             * @event
             * @description 清除所有过滤的事件
             * @param {Object} data 过滤数据信息
             */
            clearAllFilters: "清除所有过滤的事件"
        },
        // grid组件公共配置参数
        options: /** @lends Sweet.grid.BigGrid.prototype*/
        {
            /**
             * @description 表格宽度
             * @type {String/Number}
             * @default "100%"
             */
            width: "100%",
            /**
             * @description 表格高度
             * @type {String/Number}
             * @default 300px
             */
            height: 300,
            /**
             * @description 
             * <pre>
             * 表格数据，数据格式为：
             * {
             *     columns:[
             *         {                                    //列信息的配置
             *             header:"Name1",                  //列名
             *             name: "name1",                   //列名称，或行数据时使用
             *             width: 100,                      //宽度
             *             height: 23,                      //高度
             *             sortable: true/false,            //是否支持排序，默认都不支持
             *             dataType:"string",               //数据类型.string:字符串;date:日期;number:数值型;bool:布尔型
             *                                              //  number类型右对齐，其余左对齐，align属性优先
             *             align: "left",                   //表格内容对齐方式. left:左对齐;right:右对齐;center:居中对齐
             *             filter:true/false,               //是否过滤,除去日期，默认都不过滤
             *             filterType:'string',             //过滤类型.string:字符串;date:日期;list:复选框;number:关系表达式;
             *                                              //  bool:true/false
             *             useDSTutcOrder : string,         //专门为夏令时在前台排序时所使用的隐藏utc字段的name
             *             filterList:[],                   //如果filtertype为list时的值
             *             hidden：true/false,              //隐藏列时所用
             *             enableHdMenu: true/false,        //列是否可隐藏，默认true
             *             hiddenForever : true/false,      //列是否永久隐藏(这种列不出现在列选择和多列排序中)，默认false
             *             renderer: function,              //用于加工单元格的原始数据，返回给表格呈现
             *             rendererArr: Object,             //加工单元格调用的函数，目前只用户给生成的编辑、删除、修改图标加事件 
             *                                              //  {eidt: Function, delete: Function, ...}
             *             unit: 'percent',                 //单位
             *             tip: true/false,                 //单元格是否有提示，默认没有，如果使用renderer属性，该配置不生效
             *             tooltip: "",                     //表格列头提示信息
             *             menus:[
             *                 {                            //点出右键菜单时的配置，即钻取时用到
             *                     text: 'item1',           //此菜单项显示的文本
             *                     value: 'value1',         //此菜单项的value
             *                     children: [...]          //此菜单项的子菜单
             *                 },
             *                     ...
             *             ],
             *             beforeShowMenu : Function,       //在显示菜单前的回调函数，例如同一列中，有的数据需要钻取，有的不需要(成功率100%，失败率为0)
             *             itemClick: Function,             //菜单点击事件
             *             children: [
             *                 {                            //表头分层时使用，具体的分层的列信息
             *                     header:"Name1",          //列名
             *                     sortable:true/false,     //是否支持排序，默认都不支持
             *                     dataType:"string",       //数据类型
             *                     ...
             *                     与上面的列信息一样，表示的是子列的信息，也可能再分层，可以再设置colspan和children
             *                 },
             *                 ...
             *             ]
             *         },
             *         ...
             *     ],					
             *     data:[                               //呈现的数据
             *         {value1:"23", value2:"56", ...},
             *         {value1:"567", value2:"122", ...},
             *         ...
             *     ],
             *     total : 500,                         //所有行数据的总和
             *     resizable: true/false,               //列宽是否可调整，默认可调整
             *     checkbox:true/false,                 //是否显示复选框
             *     selectEvent : "click/dbclick",       //选择行时的事件
             *     sn:true/false,                       //是否显示序号
             *     selectColumn,                        //是否显示列选择
             *     multiColumnSort,                     //是否显示多列排序
             *     multiSortColumnsArr,                 //如果用户想自己定义多列排序的列，此值可设置，数组，和columns相同，但不能有隐藏的配置信息
             *     secondaryStat,                       //是否显示二次统计
             *     statParams,                          //二次统计的配置属性，主要三个：dims(维度)， indicators(指标)， statFun(点击统计时的回调函数)
             *     clearFilters,                        //是否显示清除所有过滤
             *     export,                              //导出
             *     exportType: ["csv", "xls", "pdf"]    //导出类型，export为true时才生效
             * }
             * </pre>
             * @type {Object}
             */
            data: {},
            /**
             * 列头的宽度是否自适应，默认设置为true,表示宽度自适应，如果同时在columns中设置了width，width值优先，计算列宽度时
             * 的原则：(总宽度-用户列中设置的width总和)/没有设置width的列个数 < 120px ? 120px : (总宽度-用户列中设置的width总和)/没有设置width的列个数
             * 如果设置为false，表示需要使用人员自己设置每一个表头的宽度，如果不设置，则默认为120px
             * @type boolean
             * @default true
             */
            autoColumnWidth: true,
            /**
             * 拖动垂直滚动条去渲染表格内容前触发的回调函数
             * @type function
             * @default $.noop
             */
            beforeScroll: $.noop,
            /**
             * 拖动垂直滚动条去渲染表格内容之后触发的回调函数
             * @type function
             * @default $.noop
             */
            afterScroll: $.noop
        },
        /**
         * @description 配置二次统计参数：{dims:[],indicators:[], statFun: function(点击统计时的回调函数)}
         * @param {Object} cfg 配置二次统计组件时传的参数，主要包含三个必选：dims(维度)， indicators(指标)， statFun(点击统计时的回调函数)
         */
        setSecondaryStatConfig: function(cfg) {
            var me = this;
            if (me.options.data && me.options.data.secondaryStat) {
                me.options.data.statParams = cfg;
            }
        },
        /**
         * @description 给表格重新设置值，表格进行重绘
         * @param {Object} data 设置值，包括表格列描述和表格数据
         */
        setData: function(data) {
            if ($.isNull(data)) {
                return;
            }

            var me = this;

            me._triggerHandler(null, eventNameBeforeSetData);

            if ($.isArray(data)) {
                me.options.data = $.extend({}, me.options.data, {
                    "data": data
                });
            } else {
                me.options.data.data = []; // 每次设置数据时，data不需要保留
                if (data.columns) {
                    me.options.data.columns = [];
                }
                me.options.data = $.extend(true, {}, me.options.data, data);
            }
            me._createGridWidget();
            me._render(me.options.renderTo);
            me._doLayout();
            //只有表头发生改变和第一次进入时，滚动条在最左边
            if (me.gridScrollLeftFlag === 0) {
                me.gridScrollLeft = 0;
                me.gridScrollLeftFlag++;
                me.contentEl.scrollLeft(me.gridScrollLeft);
            } else {
                me.contentEl.scrollLeft(me.gridScrollLeft);
            }
        },
        /**
         * @description 设置表格树，展开后树节点数据
         * @param {Object} data 数据
         */
        setTreeData: function(data) {
            var me = this;
            var tempData = data;
            if (!$.isArray(data)) {
                tempData = data.data;
            }
            me.tempTreeData = me._toJson(tempData).reverse();
            me.tempTreeDataIndex = 0;
            // 将数据放入this.treeData中
            me.treeData = me.treeData.concat(me.tempTreeData);
            // 添加rowId
            me._addRowId(me.treeData);
            me.timerGridTreeContent = me.options.id + "-tree-" + timerSuffix;
            // 启动定时器，加载表格树节点数据
            Sweet.Task.Timeout.start({
                id: me.timerGridTreeContent,
                run: me._buildGridTreeContent,
                scope: me,
                interval: 10
            });
        },
        loadingMask: function() {
            var me = this;
            if (me.loadEl) {
                me.loadEl.show().sweetMask();
            }
        },
        loadingMaskVisible: function() {
            var me = this,
                visible = false;
            if (me.loadEl && me.loadEl.is(":visible")) {
                visible = true;
            }

            return visible;
        },
        unLoadingMask: function() {
            var me = this;
            if (me.loadEl) {
                me.loadEl.unSweetMask();
                me.loadEl.hide();
            }
        },
        /**
         * @description 获取行数据。如果row为空，返回所有行数据，不为空，返回指定行数据
         * @param {Number} row 行数，从0开始
         * @return {Array} 返回行数据
         */
        getRowValue: function(row) {
            if ("number" !== $.type(row)) {
                this._error("getRowValue() The input parameter is not a number.");
                return;
            }

            var me = this;
            var data = me.options.data.data;

            if ($.isNull(row)) {
                return $.objClone(data);
            }

            if (0 > row || (data && data.length < row)) {
                return;
            }
            return $.objClone(data[row]);
        },
        /**
         * @description 获取选中行数据
         * @return {Array} 返回选中行数据
         */
        getSelectedValue: function() {
            /**
             * @private
             * @description 对象转换数组
             * @param {Object} obj 对象
             * @return {Array} 返回数组
             */
            function objToArray(obj) {
                if ($.isNull(obj)) {
                    return [];
                }
                var tempArr = [];
                $.each(obj, function(id, val) {
                    tempArr.push(val);
                });

                return tempArr;
            }

            var me = this,
                data = objToArray(me.selectedData),
                treeData = objToArray(me.selectedTreeData);

            return $.objClone(data.concat(treeData));
        },
        /**
         * @description 插入一行或多行数据，该函数不能同store一起使用
         * @param {Object/Array} data 数据
         * @param {Boolean} before 是否向前追加，默认向前
         */
        insertRows: function(data, before) {
            if ($.isNull(data)) {
                this._error("insertRows() The input data is null.");
                return;
            }
            var me = this,
                tempData = $.objClone(data);
            before = before || true;

            if (!$.isArray(tempData)) {
                tempData = [tempData];
            }

            me._buildInsertGridContent(tempData, before);
        },
        /**
         * @description 更新表格指定行数据
         * @param {Object/Array} data 待更新数据，格式[
         *      {
         *          "row": ,        // 行号
         *          "data": {},     // 数据，由column.name: value构成
         *      }
         *      ...
         * ]
         */
        updateRows: function(data) {
            var me = this,
                i, length, temp, tempData = data;
            if ($.isNull(data)) {
                me._error("updateRows() The input data is null.");
                return;
            }

            if (!$.isArray(data)) {
                tempData = [data];
            }

            length = tempData.length;
            for (i = 0; i < length; i++) {
                temp = tempData[i];
                me._updateRows(temp.row, temp.data);
            }
        },
        /**
         * @description 设置行选中
         * @param {Number/Array} rows 行或行数组
         */
        selectRows: function(rows) {
            if ($.isNull(rows)) {
                this._error("selectRows() The input param is null.");
                return;
            }
            var me = this,
                tempRows;
            if ($.isArray(rows)) {
                tempRows = rows;
            } else {
                tempRows = [rows];
            }

            me._allRowUnSelect();
            $(rows).each(function(index, row) {
                var params = me.__findTargetTr(row),
                    trEl = params.trEl,
                    checkboxEl,
                    el;
                if (!trEl) {
                    return;
                }
                trEl.addClass(gridContentRowSelectedClass);
                // 如果是复选，复选框需要选中
                checkboxEl = trEl.find("." + gridCheckboxClass);
                if (checkboxEl && 0 < checkboxEl.length) {
                    el = $(checkboxEl.find("a")).removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                    me._oneRowSelect(el.attr("row"), el.attr("tree"));
                } // eventNameRowClick
                me._onTrClick({
                    "data": {
                        "me": me,
                        "tr": trEl,
                        "eventName": eventNameRowClick
                    }
                });
            });
        },
        /**
         * @description 返回当前选中行下一行数据
         * @returns {Object} 返回行数据
         */
        selectPrev: function() {
            var me = this,
                last,
                row;
            if (me.hasPrev()) {
                last = me._getSelectedFirstRow();
                if (0 < last.length) {
                    row = $.string.toNumber($(last).attr("row")) - 1;
                } else {
                    row = me.contentTableEl.find("tr").length;
                }
                me.selectRows(row);
            }

            return me.getSelectedValue();
        },
        /**
         * @description 是否有上一行，相对于选中的第一行
         * @returns {Boolean} true 有， false 没有
         */
        hasPrev: function() {
            var me = this,
                rows = me.contentTableEl.find("tr").length,
                first;
            if (rows === 0) {
                return false;
            }
            first = me._getSelectedFirstRow();
            if (0 < first.length) {
                return $.string.toNumber($(first).attr("row")) > 1;
            }
            return true;
        },
        /**
         * @description 返回当前选中行下一行数据
         * @returns {Object} 返回行数据
         */
        selectNext: function() {
            var me = this,
                last,
                row;
            if (me.hasNext()) {
                last = me._getSelectedLastRow();
                if (0 < last.length) {
                    row = $.string.toNumber($(last).attr("row")) + 1;
                } else {
                    row = 1;
                }
                me.selectRows(row);
            }

            return me.getSelectedValue();
        },
        /**
         * @description 是否有下一行，相对于选中的最后一行
         * @returns {Boolean} true 有， false 没有
         */
        hasNext: function() {
            var me = this,
                rows = me.contentTableEl.find("tr").length,
                last;
            if (rows === 0) {
                return false;
            }
            last = me._getSelectedLastRow();
            if (0 < last.length) {
                return $.string.toNumber($(last).attr("row")) < rows;
            }
            return true;
        },
        /**
         * @description 清空所有过滤条件
         * @param {Boolean} reload 是否重新加载数据
         */
        clearAllFilters: function(reload) {
            var me = this;
            // 清空过滤条件
            me.filters = {};
            $.each(me.filterObjs, function(index, obj) {
                if (obj && obj.filter) {
                    obj.filter.reset();
                }
                if (obj && obj.tdEl) {
                    var filterPic = obj.tdEl.find("." + gridHeaderFilterPicClass);
                    if (filterPic) {
                        filterPic.remove();
                    }
                }
            });
            me.page.currentPage = 1;
            if (me.options.store) {
                if (me.options.store.clearFilters) {
                    me.options.store.clearFilters();
                }

                if (reload) {
                    me.options.store._setPage(me.getPageInfo());
                    me.options.store.load(me.getAllConditions());
                }
            } else {
                me._triggerHandler(null, "clearAllFilters", me.getAllConditions());
            }
        },
        /**
         * @description 清空所有排序条件
         * @param {Boolean} reload 是否重新加载数据
         */
        clearAllOrders: function(reload) {
            var me = this;
            // 清空排序条件
            me.orders = [];
            $.each(me.headerTdEls, function(index, obj) {
                if (obj) {
                    obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                        .addClass(gridHeaderTdCommonClass);
                    obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                }
            });
            me.page.currentPage = 1;
            if (me.options.store) {
                if (me.options.store.clearOrders) {
                    me.options.store.clearOrders();
                }

                if (reload) {
                    me.options.store._setPage(me.getPageInfo());
                    me.options.store.load(me.getAllConditions());
                }
            } else {
                me._triggerHandler(null, "clearAllOrders", me.getAllConditions());
            }
            //清空所有排序条件已选值
            me._clearMultiSort();
        },
        _clearMultiSort: function() {
            var me = this;
            //清空所有排序条件已选值
            if ($.isNotNull(me.firstCol) && $.isNotNull(me.secondCol) && $.isNotNull(me.thirdCol)) {
                var emptyObj = {
                    "value": "",
                    "text": ""
                };
                me.firstCol.radioGroup.setValue(emptyObj);
                me.secondCol.radioGroup.setValue(emptyObj);
                me.thirdCol.radioGroup.setValue(emptyObj);
                me.firstCol.combobox.setValue(emptyObj);
                me.secondCol.combobox.setValue(emptyObj);
                me.thirdCol.combobox.setValue(emptyObj);
            }
        },
        /**
         * @private
         * @description 返回选中的第一行
         */
        _getSelectedFirstRow: function() {
            var me = this;
            return me.contentTableEl.find("." + gridContentRowSelectedClass + ":first");
        },
        /**
         * @private
         * @description 返回选中的最后一行
         */
        _getSelectedLastRow: function() {
            var me = this;
            return me.contentTableEl.find("." + gridContentRowSelectedClass + ":last");
        },
        /**
         * @description 更新指定行数据
         * @param {Number} row 行号
         * @param {Object} data 待更改数据
         */
        _updateRows: function(row, data) {
            var me = this;
            if ($.isNull(data)) {
                me._error("_updateRows() The input data is null.");
                return;
            }

            var trEl,
            tdEl,
            tempData = $.objClone(data),
                rowData,
                tree,
                realColumn,
                realRow,
                divEl,
                params;
            // 查找目标行
            params = me.__findTargetTr(row);
            trEl = params.trEl;
            tree = params.tree;
            realRow = params.realRow;

            if (!trEl) {
                me._error("_updateRows() The target row does not exist.");
                return;
            }

            $.each(tempData, function(key, value) {
                realColumn = me.columnRelation[key];
                if ($.isUndefined(realColumn)) {
                    return;
                }
                // 树形结构数据
                if (tree) {
                    tdEl = me.contentTreeTdEls[realRow][realColumn].empty();
                } else {
                    tdEl = me.contentTdEls[realRow][realColumn].empty();
                }

                divEl = $("<div>");
                me.options.data.data[realRow][key] = value;
                var tempParams = {
                    "row": realRow,
                    "column": realColumn,
                    "rowData": tree ? me.treeData[realRow] : me.options.data.data[realRow],
                    "columnObj": me.headerColumns[realColumn],
                    "divEl": divEl,
                    "depth": 0,
                    "isTree": false,
                    "tdEl": tdEl
                };

                // 处理表格内部数据对其方式
                me.__getContentTdAlign(tempParams);
                // 是否用户有对列的处理
                me.__getContentTdRender(tempParams);
                // 绑定TD单击事件
                tdEl.unbind("click");
                me.__bindContentTdClick(tempParams);

                divEl.appendTo(tdEl);
            });
        },
        /**
         * @description 删除指定行数据
         * @param {Number/Array} row 行号或行号数组
         */
        deleteRows: function(row) {
            var me = this,
                i, length, temp = row;
            if ($.isNull(row)) {
                me._error("deleteRows() The input data is null.");
                return;
            }

            if (!$.isArray(row)) {
                temp = [row];
            }

            length = temp.length;
            for (i = 0; i < length; i++) {
                me._deleteRows(temp[i]);
            }

            me._refreshContentSN();
        },
        /**
         * @description 删除指定行数据
         * @param {Number} row 行号
         */
        _deleteRows: function(row) {
            var me = this,
                trEl,
                tree,
                realRow,
                params;
            // 查找目标行
            params = me.__findTargetTr(row);
            trEl = params.trEl;
            tree = params.tree;
            realRow = params.realRow;

            if (!trEl) {
                me._error("deleteRows() The target row does not exist.");
                return;
            }

            // 移除行
            trEl.remove();
            if (tree) {
                me.contentTreeTdEls[realRow] = null;
                me.contentTreeTrEls[realRow] = null;
                me.checkboxTreeTdEls[realRow] = null;
                me.treeData[realRow] = null;
            } else {
                me.contentTdEls[realRow] = null;
                me.contentTrEls[realRow] = null;
                me.checkboxTdEls[realRow] = null;
                me.options.data.data[realRow] = null;
            }
        },
        /**
         * @private
         * @description 查找目标行
         * @param {Number} row 行号
         */
        __findTargetTr: function(row) {
            var me = this,
                trEls,
                trEl,
                tempTrEl,
                length,
                tree,
                realRow,
                i;
            // 查找目标行
            trEls = me.__getContentTrEls();
            length = trEls.length;
            for (i = 0; i < length; i++) {
                tempTrEl = $(trEls[i]);
                if ($.string.toNumber(tempTrEl.attr("row")) === row) {
                    trEl = tempTrEl;
                    tree = tempTrEl.attr("tree");
                    break;
                }
            }

            return {
                "trEl": trEl,
                "tree": tree,
                "realRow": row - 1
            };
        },
        /**
         * @private
         * @description 添加rowId
         * @param {Array} arr 待添加rowId数组
         * @param {Number} begin 索引起始值
         */
        _addRowId: function(arr, begin) {
            if ($.isArray(arr)) {
                begin = begin || 1;
                for (var i = 0; i < arr.length; i++) {
                    arr[i].rowId = begin + i;
                }
            }
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        _getWidth: function() {
            return this.gridEl.externalWidth();
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        _getHeight: function() {
            return this.gridEl.externalHeight();
        },
        /**
         * @description 重新计算组件宽度、高度
         * @private
         * @param {Boolean} b 是否处理自适应列，true不处理，false处理
         */
        _doLayout: function(b) {
            var me = this,
                gridElWidth = me.gridEl.width(),
                gridElHeight = me.gridEl.height(),
                actionBarElHeight = 0,
                headerElHeight = 0,
                contentElHeight = 0,
                headerTableElWidth = 0,
                opt = me.options;
            if (!me.rendered) {
                return;
            }
            //刷新布局时，删除弹出菜单
            if (me._gridMenu) {
                me._gridMenu.destroy();
            }
            // 表头
            if (me.headerEl) {
                //自适应列表表头宽度
                if (opt.autoColumnWidth) {
                    me._modifyColumnWidth();
                }
                // 设置表头列宽度
                for (var i = 0; i < me.headerTdEls.length; i++) {
                    var temp = me.headerTdEls[i];
                    if (temp) {
                        temp.find("div:first").externalWidth(me.widths[i] ? me.widths[i] : 0);
                    }
                }
                headerElHeight = me.headerEl.height();
                me.headerEl.width(gridElWidth);
                // 计算表头宽度
                me.headerTableElWidth = headerTableElWidth = me.__calHeaderWidth();
                if (me.headerReRender) {
                    if (!b && !opt.autoColumnWidth) {
                        // 如果表格宽度相加结果比外层容器跨度还小，剩余宽度全部赋给最后一列
                        if (headerTableElWidth < gridElWidth) {
                            var tempSub = gridElWidth - headerTableElWidth - scrollWidth;
                            headerTableElWidth = gridElWidth;
                            me.widths[me.headerTdEls.length - 1] += tempSub;
                        } else {
                            me.widths[me.headerTdEls.length - 1] -= scrollWidth;
                        }
                    }
                    //非自适应列表表头宽度
                    if (!opt.autoColumnWidth) {
                        me.__resetHeaderTdEl(me.headerTdEls.length - 1);
                    }
                    me.__resetHeaderWidth(headerTableElWidth);
                    me.headerReRender = false;
                }
            }

            // 表格操作栏
            if (me.actionBarEl) {
                actionBarElHeight = me.actionBarEl.height();
                me.actionBarEl.width(gridElWidth);
            }
            // 表格内容
            if (me.contentEl) {
                contentElHeight = gridElHeight - headerElHeight - actionBarElHeight;
                me.contentEl.width(gridElWidth).height(contentElHeight);
                me.__resetContentWidth();
                me._resetContentTdELWidth();
                // 给出“加载中...”的div设置宽度和top值
                me.loadEl.width(gridElWidth - scrollWidth).css("top", gridElHeight - 30);

                if (!me.contentTableEl.hasClass(gridContentTableClass)) {
                    me.contentTableEl.addClass(gridContentTableClass);
                }
            }

            // 设置列动态改变div的相对位置
            me._doResizeElLayout();
        },
        /**
         * @private
         * @description 重新设置表头宽度
         * @param {Number} i 下标索引
         */
        __resetHeaderTdEl: function(i) {
            var me = this,
                temp = me.headerTdEls[i];
            if (temp) {
                temp.find("div:first").externalWidth(me.widths[i]);
            }
        },
        /**
         * @private
         * @description 设置表头宽度
         * @param {Number} width 表头宽度
         */
        __resetHeaderWidth: function(width) {
            var me = this;
            me.headerDivEl.externalWidth(width);
            me.headerTableElWidth = width;
        },
        /**
         * @private
         * @description 修正表格列头的宽度，如果平均宽度小于minColumnWidth,则每一列都设置为minColumnWidth;
         * 如果平均宽度大于minColumnWidth，则以实际宽度为准
         */
        _modifyColumnWidth: function() {
            var me = this,
                columns = me.headerColumns,
                len = columns.length,
                notHiddenLen = len, //不是隐藏列的个数
                noCfgWidthNum = 0,
                total = 0,
                count = me.count,
                i = 0,
                gridElWidth = me.gridEl.width(),
                avgW = 0,
                cw = minColumnWidth;
            //如果这时取到的表格宽度小于列的最小宽度，返回不作处理
            if (gridElWidth < minColumnWidth) {
                return;
            }
            //先计算非隐藏的列
            for (i = 0; i < len; i++) {
                if (columns[i].hidden) {
                    notHiddenLen--;
                } else {
                    if (!columns[i].width) {
                        noCfgWidthNum++;
                    } else {
                        total += Number(columns[i].width);
                    }
                }
            }
            //先减去sn和checkbox的宽度
            for (i = 0; i < count; i++) {
                gridElWidth -= me.widths[i];
            }
            //再减去最右边的scrollWidth
            gridElWidth -= scrollWidth;
            //最后减去每两列之间的间隙len-1px
            gridElWidth -= (notHiddenLen - 1 + count + 1);
            //最后除去所有用户指定的列宽度
            gridElWidth -= total;
            //求得没有指定列宽度的所有列的平均宽度
            avgW = Math.floor(gridElWidth / (noCfgWidthNum <= 0 ? 1 : noCfgWidthNum));
            if (avgW > minColumnWidth) {
                cw = avgW;
            }
            for (i = count; i < me.originalWidths.length; i++) {
                if (ncWidth === me.originalWidths[i]) {
                    me.widths[i] = cw;
                }
            }
        },
        /**
         * @private
         * @description 计算表头宽度
         * @returns {Number} 返回宽度
         */
        __calHeaderWidth: function() {
            var me = this,
                columns = me.headerColumns,
                count = me.count,
                i = 0,
                tempColumn,
                gridElWidth = me.gridEl.width(),
                width = scrollWidth;
            $.each(me.widths, function(index, value) {
                tempColumn = columns[index - count];
                if (!tempColumn || (tempColumn && tempColumn.hidden)) {
                    return;
                }
                width += value + 1;
            });
            //减去1，因为上面each中的value多加了一个像素
            width--;
            //加上sn或者checkbox的宽度
            for (i = 0; i < count; i++) {
                width += me.widths[i];
            }
            return gridElWidth > width ? gridElWidth : width;
        },
        /**
         * @private
         * @description 处理表格内容区宽度
         */
        __resetContentWidth: function() {
            var me = this;
            me.contentDivEl.width(me.headerTableElWidth - scrollWidth);
            // 计算表格内容宽度
            me.contentTableEl.width(me.headerTableElWidth - scrollWidth); // 预留滚动条宽度
        },
        /**
         * @private
         * @description 调整列动态改变div位置
         */
        _doResizeElLayout: function() {
            if (this.options.data && !this.options.data.resizable) {
                return;
            }
            var me = this,
                gridElHeight = me.gridEl.height(),
                actionBarElHegiht = me.actionBarEl.height(),
                pagingElHeight = 0,
                count = me.count;
            if (me.pagingEl) {
                pagingElHeight = me.pagingEl.height();
            }
            if (me.headerTdEls) {
                $.each(me.headerTdEls, function(index, obj) {
                    if (index > count - 1) {
                        var p = obj.position(),
                            num = 0,
                            width = obj.width(),
                            height = obj.height(),
                            calHeight = actionBarElHegiht,
                            rowspan = $.string.toNumber(obj.attr("rowspan")),
                            depth = $.string.toNumber(obj.attr("depth")),
                            visiable = $.isVisiable(obj),
                            tempResizeEl;
                        if (rowspan !== depth) {
                            num = depth - 1;
                            calHeight += height * num;
                        }
                        tempResizeEl = me.resizeEls[index - count].css({
                            "left": p.left + width,
                            "top": calHeight
                        })
                            .attr("visiable", visiable ? "true" : "false")
                            .height(gridElHeight - pagingElHeight - calHeight);
                        if (visiable) {
                            if (!tempResizeEl.hasClass(gridHeaderDragClass)) {
                                tempResizeEl.addClass(gridHeaderDragClass);
                            }
                        } else {
                            tempResizeEl.removeClass(gridHeaderDragClass);
                        }
                    }
                });
            }
        },
        /**
         * @description 关闭浮动窗口
         * @private
         */
        _closeFloatPanel: function() {
            var me = this;
            me.__closeFloatPanel(me.pagingRowDropDownEl, "rowFlag");
            me.__closeFloatPanel(me.pagingPageDropDownEl, "pageFlag");
            me.__closeFloatPanel(me.exportEl, "exportFlag");
            me.__closeFloatPanel(me.selectColEl, "selectColFlag");
            // 关闭过滤窗口
            me.__closeFloatFilterPanel(me.oldActiveFilterTdEl);
            me.__closeFloatFilterPanel(me.activeFilterTdEl);
        },
        /**
         * @private
         * @description 关闭浮动窗口
         * @param {Object} obj 浮动窗口对象
         * @param {String} key 键值
         */
        __closeFloatPanel: function(obj, key) {
            var flag;
            if (obj) {
                flag = obj.data(key);
                if (!flag && $.isVisiable(obj)) {
                    obj.hide();
                }
                obj.data(key, false);
            }
        },
        /**
         * @private
         * @description 关闭浮动窗口对象
         * @param {Object} obj 浮动窗口对象
         */
        __closeFloatFilterPanel: function(obj) {
            var me = this;
            if (obj) {
                if (!obj.data("created")) {
                    obj.data("filterPanel").hide();
                    me.__onHeaderTdMouseLeave(null, obj);
                }
                obj.data("created", false);
            }
        },
        /**
         * @private
         * @description 创建Grid组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                gridClass = "sweet-grid",
                gridEl = me.gridEl = $("<div>");
            me.initial = true;
            me.locked = false;
            gridEl.addClass(gridClass).attr("id", me.options.id)
                .width(me.options.width)
                .height(me.options.height);
            me._createGridWidget();
        },
        /**
         * @private
         * @description 创建表格组件
         */
        _createGridWidget: function() {
            var me = this;
            if (!me.options.data) {
                return;
            }
            // 创建表头
            var headerIsChanged = me._createGridHeader();
            // 生成表格操作栏,只有表头发生变化或新建表头时才重新创建操作栏
            if (headerIsChanged) {
                me._createGridActionBar();
            }
            // 创建表格内容
            me._createGridContent();
            // 注册监听
            me._addListener();
            me._addLoading();
        },
        /**
         * @private
         * @description 生成表格操作栏
         */
        _createGridActionBar: function() {
            this.__destroyTableActionBar();
            var me = this,
                data = me.options.data,
                flag = false,
                actionBarEl = me.actionBarEl = $("<div>").addClass("sweet-grid-action-bar"),
                picBarEl = $("<div>").addClass("sweet-grid-action-bar-pic");
            // 列选择
            if (data.selectColumn) {
                flag = true;
                $("<span>").attr("title", i18n.selectCol).addClass(actionBarSelectColumnClass).appendTo(picBarEl);
            }
            // 多列排序
            if (data.multiColumnSort) {
                flag = true;
                $("<span>").attr("title", i18n.multiSort).addClass(actionBarMultiSortClass).appendTo(picBarEl);
            }
            // 二次统计
            if (data.secondaryStat) {
                flag = true;
                $("<span>").attr("title", i18n.secondStat).addClass(actionBarSecondStatClass).appendTo(picBarEl);
            }
            // 清空过滤条件
            if (data.clearFilters) {
                flag = true;
                $("<span>").attr("title", i18n.clearFilter).addClass(actionBarClearFilterClass).appendTo(picBarEl);
            }
            // 导出
            if (data.export) {
                flag = true;
                $("<span>").attr("title", i18n.export).addClass(actionBarExportClass).appendTo(picBarEl);
            }
            picBarEl.bind("click", function(e) {
                me.__onPicBarClick(e);
            }).appendTo(actionBarEl);

            if (flag) {
                actionBarEl.insertBefore(me.headerEl);
            } else {
                actionBarEl.height(0);
            }
        },
        /**
         * @private
         * @description 表格操作栏点击事件
         * @param {Object} e 事件对象
         */
        __onPicBarClick: function(e) {
            var me = this,
                self = $(e.target);
            // 列选择
            if (self.hasClass(actionBarSelectColumnClass)) {
                me.__createSelectColumnPanel(self);
            }
            // 多列排序
            else if (self.hasClass(actionBarMultiSortClass)) {
                me.__createMultiSort();
            }
            // 清空过滤条件
            else if (self.hasClass(actionBarClearFilterClass)) {
                Sweet.Msg.confirm(i18n.qClearFilter, null, null,

                function() {
                    me.clearAllFilters(true);
                });
            }
            // 导出
            else if (self.hasClass(actionBarExportClass)) {
                me.__createExportPanel(self);
            }
            //二次统计
            else if (self.hasClass(actionBarSecondStatClass)) {
                me.__createSecondaryStatPanel();
            }
        },
        /**
         * @private
         * @description 创建二次统计面板
         */
        __createSecondaryStatPanel: function() {
            var me = this,
                temp,
                data = me.options.data;

            if (data.statParams) {
                if (me.secondaryPanel) {
                    me.secondaryPanel.destroy();
                    me.secondaryPanel = null;
                }
                temp = data.statParams;
                me.secondaryPanel = new Sweet.cmp.SecondaryStat({
                    dims: temp.dims,
                    indicators: temp.indicators,
                    statFun: temp.statFun
                });
            }
        },
        /**
         * @private
         * @description 创建多列排序
         */
        __createMultiSort: function() {
            var me = this,
                tempCol = [],
                userMulCol = me.options.data ? me.options.data.multiSortColumnsArr : [],
                sortColumns = [];
            // 创建一次就可以
            if (me._multiSortWin) {
                me._multiSortWin.show();
                return;
            }
            //支持用户自己定义多列排序的列,并且优先使用用户自己定义的列
            if ($.isArray(userMulCol) && userMulCol.length > 0) {
                tempCol = userMulCol;
            } else {
                tempCol = me.headerColumns;
            }
            $.each(tempCol, function(i, obj) {
                //永远隐藏的列不放进多列排序中,而暂时隐藏的列需要放在里面
                if (!obj.hiddenForever && $.isNotNull(obj.header) && obj.sortable) {
                    sortColumns.push({
                        "text": obj.header,
                        "value": obj.name,
                        "data": obj
                    });
                }
            });

            function sortCol(comboboxLabelText, data) {
                var items = [];
                var combobox = new Sweet.form.ComboBox({
                    label: true,
                    pleaseSelect: true,
                    labelWidth: i18n.multiSortWin.comboLabelWidth,
                    width: i18n.multiSortWin.comboWidth,
                    data: data,
                    labelText: comboboxLabelText,
                    tip: true
                });
                items.push(combobox);
                var radioGroup = new Sweet.form.RadioGroup({
                    width: i18n.multiSortWin.radioWidth,
                    columns: "auto",
                    data: [{
                        text: i18n.multiSortWin.asc,
                        value: "ASC"
                    }, {
                        text: i18n.multiSortWin.desc,
                        value: "DESC"
                    }],
                    tip: true
                });
                items.push(radioGroup);
                var panel = new Sweet.panel.FlowPanel({
                    width: "100%",
                    height: 25,
                    items: items,
                    itemExtend: true
                });

                return {
                    "combobox": combobox,
                    "radioGroup": radioGroup,
                    "panel": panel
                };
            }

            function judge(data, obj) {
                if (data && Sweet.core.i18n.combobox.pleaseSelect === data.value) {
                    return;
                }
                if ($.equals(data, obj.combobox.getValue())) {
                    obj.combobox.setValue({
                        "value": Sweet.core.i18n.combobox.pleaseSelect,
                        "text": Sweet.core.i18n.combobox.pleaseSelect
                    });
                    obj.radioGroup.setValue({});
                }
            }

            function isAllNull(combobox, radioGroup) {
                var combVal = combobox.getValue(),
                    radioVal = radioGroup.getValue();
                if ((!combVal || !combVal.value || Sweet.core.i18n.combobox.pleaseSelect === combVal.value) && (!radioVal || !radioVal.value)) {
                    return true;
                }
                return false;
            }

            function isOneNull(combobox, radioGroup) {
                var combVal = combobox.getValue(),
                    isCombValNull = false,
                    radioVal = radioGroup.getValue(),
                    isRadioValNull = false;
                if (!combVal || !combVal.value || Sweet.core.i18n.combobox.pleaseSelect === combVal.value) {
                    isCombValNull = true;
                }

                if (!radioVal || !radioVal.value) {
                    isRadioValNull = true;
                }

                if ((isCombValNull && !isRadioValNull) || (isRadioValNull && !isCombValNull)) {
                    return true;
                }

                return false;
            }

            function getOrders(combobox, radioGroup) {
                var comboboxVal = combobox.getValue(),
                    radioVal = radioGroup.getValue();
                if (radioVal && radioVal.text) {
                    return me.__getOrderFormat(comboboxVal.data.name, radioVal.value, comboboxVal.data.dataType);
                }

                return null;
            }

            var firstCol = me.firstCol = sortCol(i18n.multiSortWin.firstSort, sortColumns),
                secondCol = me.secondCol = sortCol(i18n.multiSortWin.secondSort, sortColumns),
                thirdCol = me.thirdCol = sortCol(i18n.multiSortWin.thirdSort, sortColumns),
                vPanel,
                win;
            firstCol.combobox.addListener("change", function(e, data) {
                judge(data, secondCol);
                judge(data, thirdCol);
            });
            secondCol.combobox.addListener("change", function(e, data) {
                judge(data, firstCol);
                judge(data, thirdCol);
            });
            thirdCol.combobox.addListener("change", function(e, data) {
                judge(data, firstCol);
                judge(data, secondCol);
            });
            vPanel = new Sweet.panel.VPanel({
                items: [firstCol.panel, secondCol.panel, thirdCol.panel]
            });
            me._multiSortWin = win = new Sweet.Window({
                width: i18n.multiSortWin.winWidth,
                height: 190,
                title: i18n.multiSortWin.title,
                //去掉动画效果
                content: vPanel,
                listeners: {
                    ok: function() {
                        // 判断是否有选择
                        if (isAllNull(firstCol.combobox, firstCol.radioGroup) && isAllNull(secondCol.combobox, secondCol.radioGroup) && isAllNull(thirdCol.combobox, thirdCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.firstNoSelectTip);
                            return false;
                        }

                        // 第一列是否选择
                        if (isOneNull(firstCol.combobox, firstCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.firstNoSelectTip);
                            return false;
                        }

                        // 第二列是否选择
                        if (isOneNull(secondCol.combobox, secondCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.secondNoSelectTip);
                            return false;
                        }

                        // 第三列是否选择
                        if (isOneNull(thirdCol.combobox, thirdCol.radioGroup)) {
                            Sweet.Msg.warn(i18n.multiSortWin.thirdNoSelectTip);
                            return false;
                        }

                        // 重新加载数据
                        me.orders = [];
                        var firstVal = getOrders(firstCol.combobox, firstCol.radioGroup),
                            secondVal = getOrders(secondCol.combobox, secondCol.radioGroup),
                            thirdVal = getOrders(thirdCol.combobox, thirdCol.radioGroup);
                        if (firstVal) {
                            me.orders.push(firstVal);
                        }
                        if (secondVal) {
                            me.orders.push(secondVal);
                        }
                        if (thirdVal) {
                            me.orders.push(thirdVal);
                        }
                        // 当前页记为1
                        me.page.currentPage = 1;
                        if (me.options.store) {
                            me.options.store._setDataPage(me.getPageInfo());
                            me.options.store.load(me.getAllConditions());
                        } else {
                            me._triggerHandler(null, "multiOrders", me.getAllConditions());
                        }
                        //清空所有列上的排序标志
                        $.each(me.headerTdEls, function(index, obj) {
                            if (obj) {
                                obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                                    .addClass(gridHeaderTdCommonClass);
                                obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                                //给所有的多列排序列加上排序标志
                                var colName = obj.attr("columnName");
                                for (var m = 0; m < me.orders.length; m++) {
                                    if (colName === me.orders[m].name) {
                                        var cls = gridHeaderSortAscClass;
                                        if (me.orders[m].order === Sweet.constants.sortType.DESC) {
                                            cls = gridHeaderSortDescClass;
                                        }
                                        obj.addClass(cls);
                                        obj.removeClass(gridHeaderTdCommonClass);
                                        obj.find("div:first").addClass(gridHeaderTextClass);
                                    }
                                }
                            }
                        });
                    }
                }
            });
            win.show();
        },
        /**
         * @private
         * @description 创建列选择面板
         * @param {Object} obj 列选择对象
         */
        __createSelectColumnPanel: function(obj) {
            var me = this,
                offset;
            if (me.selectColEl) {
                offset = $.getFloatOffset(obj, me.selectColEl, true);
                me.selectColEl.css(offset).show().data("selectColFlag", true);
                return;
            }

            var id = me.options.id + "-select-column",
                selectColEl = $("<div>").attr("id", id)
                    .addClass(me.winBgClass + " sweet-grid-select-column")
                    .bind("click", function() {
                    selectColEl.data("selectColFlag", true);
                }).appendTo($(document.body)),
                list,
                columnData,
                data = [],
                value = [];
            columnData = me.__getSelectColumnData();
            data = columnData.data;
            value = columnData.value;
            var maxh = me.gridEl.height() - 70;

            var hl = data.length * 22 + 10;
            list = new Sweet.list.OptimizeList({
                width: 200,
                height: hl > maxh ? maxh : hl,
                multi: true,
                data: data,
                value: value,
                minRemains: 1,
                tip: true,
                renderTo: id
            });
            // 注册复选框点击事件
            list.addListener("checkboxClick", function(e, data) {
                me.__onSingleColumnHiddenClick(e, data.data.index, data.checked);
            });

            offset = $.getFloatOffset(obj, selectColEl, true);
            selectColEl.css(offset).show().data("selectColFlag", true);
            me.selectColEl = selectColEl;
            me.selectColList = list;
        },
        /**
         * @private
         * @description 获取列信息，用于设置列选择使用
         */
        __getSelectColumnData: function() {
            var me = this,
                headerColumns = me.headerColumns,
                enableHdMenu,
                hiddenForever,
                i,
                length = headerColumns.length,
                temp,
                tempVal,
                data = [],
                value = [];
            for (i = 0; i < length; i++) {
                temp = headerColumns[i];
                enableHdMenu = temp.enableHdMenu;
                hiddenForever = temp.hiddenForever || false;
                tempVal = {
                    "text": temp.header,
                    "value": temp.name,
                    "data": {
                        "index": i
                    }
                };
                if (($.isUndefined(enableHdMenu) || enableHdMenu) && !hiddenForever) {
                    data.push(tempVal);
                    if (!temp.hidden) {
                        value.push(tempVal);
                    }
                }
            }

            return {
                "data": data,
                "value": value
            };
        },
        /**
         * @private
         * @description 创建导出面板
         * @param {Object} obj 弹出框浮着的目标对象
         */
        __createExportPanel: function(obj) {
            var me = this,
                offset,
                exportW = 80;
            if (me.exportEl) {
                offset = $.getFloatOffset(obj, me.exportEl, true);
                me.exportEl.css(offset).show().data("exportFlag", true);
                return;
            }
            var exportType = me.options.data.exportType || [],
                length = exportType.length,
                exportEl = $("<div>").width(exportW).addClass(me.winBgClass + " sweet-grid-export"),
                ulEl = $("<ul>"),
                liEl,
                i,
                temp;
            for (i = 0; i < length; i++) {
                temp = exportType[i];
                if (exportTypeConf.CSV === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiCsvClass).text(exportTypeText.csv).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportCsvClass).prependTo(liEl);
                } else if (exportTypeConf.XLS === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiXlsClass).text(exportTypeText.xls).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportXlsClass).prependTo(liEl);
                } else if (exportTypeConf.PDF === temp) {
                    liEl = $("<li>").addClass(actionBarExportLiPdfClass).text(exportTypeText.pdf).appendTo(ulEl);
                    $("<span>").addClass(actionBarExportPdfClass).prependTo(liEl);
                }
            }
            ulEl.appendTo(exportEl);
            offset = $.getFloatOffset(obj, exportEl, true);
            var maxzindex = $.getMaxZIndex(undefined, "sweet-grid-action-bar-pic");
            exportEl.data("exportFlag", true)
                .bind("click", {
                "me": me
            }, me._onExportClick)
                .appendTo($(document.body)).css(offset).css("z-index", maxzindex);
            me.exportEl = exportEl;
        },
        /**
         * @private
         * @description 导出点击事件
         * @param {Object} e 事件对象
         */
        _onExportClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                headerColumns = me.headerColumns,
                columns = [],
                column = {},
                data = {},
                temp,
                i;
            // 获取列信息
            for (i = 0; i < headerColumns.length; i++) {
                temp = headerColumns[i];
                column = {};
                column.header = temp.header;
                column.name = temp.name;
                column.dataType = temp.dataType;
                column.hidden = temp.hidden;
                columns.push(column);
            }
            // csv
            if (self.hasClass(actionBarExportLiCsvClass)) {
                data = {
                    "type": exportTypeText.csv,
                    "columns": columns
                };
            }
            // xls
            else if (self.hasClass(actionBarExportLiXlsClass)) {
                data = {
                    "type": exportTypeText.xls,
                    "columns": columns
                };
            }
            // pdf
            else if (self.hasClass(actionBarExportLiPdfClass)) {
                data = {
                    "type": exportTypeText.pdf,
                    "columns": columns
                };
            } else {
                me._error("Unknown export type.");
                return;
            }

            me._triggerHandler(e, eventNameExport, data);
        },
        /**
         * @private
         * @description 创建表头
         */
        _createGridHeader: function() {
            var me = this;
            if (!me.options.data.columns) {
                return true;
            }
            // 恢复横向滚动
            if (me.headerDivEl) {
                me.headerDivEl.css({
                    "left": 0
                });
            }
            if (me.resizeEl) {
                me.resizeEl.css({
                    "left": 0
                });
            }
            // 移除全选状态
            if (me.allCheckboxEl) {
                me.allCheckboxEl.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);
            }
            //比较值是否一样，不一样才创建表头
            if ($.equals(me.historyColumns, me.options.data.columns)) {
                return false;
            } else {
                me.gridScrollLeftFlag = 0;
            }

            // 记录历史columns配置
            me.historyColumns = $.objClone(me.options.data.columns);

            // 先销毁之前的元素，再创建
            me.__destroyTableHeader();
            var columns = $.objClone(me.options.data.columns),
                checkbox = me.options.data.checkbox,
                sn = me.options.data.sn,
                headerEl = me.headerEl = $("<div>").addClass(gridHeaderClass).appendTo(me.gridEl),
                headerDivEl = me.headerDivEl = $("<div>").appendTo(headerEl),
                headerTableEl = me.headerTableEl = $("<table>")
                    .attr({
                    "cellspacing": 0,
                    "cellpadding": 0,
                    "border": 0
                })
                    .appendTo(headerDivEl),
                headerTrEl = $("<tr>").appendTo(headerTableEl),
                headerTdEl,
                headerTdEls = [],
                headerTdDivEl,
                index = 0,
                widths = [],
                rows = [],
                tdArr = [],
                tdTempArr = [];
            // 保存过滤组件对象，格式为{"name": , "dataType": , "value": {}}
            me.filterObjs = [];
            // 保存过滤条件
            me.filters = {};
            //保存过滤面板对象
            me.filterPanels = [];
            // 保存排序条件
            me.orders = [];
            // 记录已隐藏列数
            me.hiddenColumn = 0;
            // 列名和列号对应关系
            me.columnRelation = {};
            me.count = 0;

            // 修正列数据
            me._amendColumns(columns);
            // 表头数据预处理，将树转换成数组
            me._parseHeader(columns, 0, rows);
            // @TODO 重新计算colspan，支持无限级表格列头合并，暂只支持两级
            // 列和列号对应关系
            me.__ColumnNumRelation(columns);

            // 是否有复选框
            if (checkbox) {
                var checkboxI = index++;
                headerTdEl = $("<td>").attr("rowspan", rows.length)
                    .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                    .mouseenter({
                    "me": me
                }, me.__onHeaderTdMouseEnter)
                    .mouseleave({
                    "me": me
                }, me.__onHeaderTdMouseLeave)
                    .appendTo(headerTrEl);
                headerTdDivEl = $("<div>").addClass(gridCheckboxClass).appendTo(headerTdEl);
                me.allCheckboxEl = $("<a>").addClass(checkboxUncheckdClass)
                    .bind("click", {
                    "me": me
                }, me._onAllRowClick)
                    .appendTo(headerTdDivEl);
                headerTdEls[checkboxI] = headerTdEl;
                widths[checkboxI] = checkboxWidth;
                me.count++;
            }

            // 是否有序号列
            if (sn) {
                var snI = index++;
                headerTdEl = $("<td>").attr("rowspan", rows.length)
                    .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                    .mouseenter({
                    "me": me
                }, me.__onHeaderTdMouseEnter)
                    .mouseleave({
                    "me": me
                }, me.__onHeaderTdMouseLeave)
                    .appendTo(headerTrEl);
                headerTdDivEl = $("<div>").text(i18n.SN).addClass(gridHeaderTextClass).appendTo(headerTdEl);
                headerTdEls[snI] = headerTdEl;
                widths[snI] = snWidth;
                me.count++;
            }

            // 处理表头，包括表头合并
            tdTempArr = me._generateHeader(rows, headerTrEl, headerTableEl);
            // 修正列数据
            tdArr = me._amendHeader(tdTempArr);

            me.headerTdEls = headerTdEls;
            // 所有列宽度
            me.widths = widths;
            //存放原始的列宽信息，即用户配置的宽度或没配置时为ncWidth
            me.originalWidths = JSON.parse(JSON.stringify(widths));
            // 保存表头
            me.headerColumns = [];
            for (var k = 0; k < tdArr.length; k++) {
                var t = tdArr[k].tdEl.attr("column", k);
                if ($.isNotNull(tdArr[k].column)) {
                    t.attr("columnName", tdArr[k].column.name);
                }
                me.headerTdEls.push(t);
                me.widths.push(!$.isNull(tdArr[k].width) ? tdArr[k].width : minColumnWidth);
                me.originalWidths.push(!$.isNull(tdArr[k].width) ? tdArr[k].width : ncWidth);
                me.headerColumns.push(tdArr[k].column);
            }

            // 实现列宽动态改变
            me._columnResizable();
            me.headerReRender = true;
            return true;
        },
        /**
         * @public
         * @description 表头元素中的属性发生改变，例如某列的hidden发生变化，可调用 些方法进行隐藏或显示
         * @param {Array} headers  列头数组，与创建表格的columns中相同
         */
        headerChanged: function(headers) {
            if ($.isNull(headers) || !$.isArray(headers) || headers.length <= 0) {
                return;
            }
            var me = this,
                i = 0,
                index,
                hc = [],
                len = headers.length,
                columns = me.headerColumns,
                temp;
            if (len > me.headerColumns.length) {
                return;
            }
            for (i = 0; i < len; i++) {
                temp = headers[i];
                if (!$.isPlainObject(temp)) {
                    continue;
                }
                index = me._findIndex(temp.name);
                if (-1 !== index) {
                    hc.push({
                        index: index,
                        show: !temp.hidden
                    });
                    columns[index] = $.extend(columns[index], temp);
                }
            }
            if (hc.length > 0) {
                me.__ColumnsHidden(hc);
                me.headerReRender = true;
                me._doLayout(true);
                // 设置列选中列表
                if (me.selectColList) {
                    me.selectColList.setValue(me.__getSelectColumnData().value);
                }
            }
        },
        /**
         * @private
         * @description 在已经有的列头中找相应的列的索引
         * @param {string} key 寻找的列的key,即name 
         * @returns {Number} 返回相应列在已经有的列中的索引，如果没有，返回-1
         */
        _findIndex: function(key) {
            var me = this,
                i = 0,
                columns = me.headerColumns;

            for (i = 0; i < columns.length; i++) {
                if (key === columns[i].name) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * @private
         * @description 列和列号对应关系
         * @param {Array} columns 表格列
         * @param {Number} column 列数
         */
        __ColumnNumRelation: function(columns, column) {
            var me = this;
            column = column || 0;
            $.each(columns, function(index, obj) {
                if (obj.children && 0 < obj.children.length) {
                    column = me.__ColumnNumRelation(obj.children, column);
                } else {
                    me.columnRelation[obj.name] = column++;
                }
            });

            return column;
        },
        /**
         * @private
         * @description 修正列数据，如果父节点hidden为true，子节点也为true
         * @param {Array} columns 列数组
         * @param {Boolean} b hidden属性值
         */
        _amendColumns: function(columns, b) {
            var me = this,
                temp;
            for (var i = 0; i < columns.length; i++) {
                temp = columns[i];
                if (temp.children && temp.hidden) {
                    me._amendColumns(temp.children, temp.hidden);
                } else {
                    if ($.isNotNull(b)) {
                        temp.hidden = b;
                    }
                }
            }
        },
        /**
         * @private
         * @description 实现列宽动态改变功能
         */
        _columnResizable: function() {
            var me = this,
                el;
            // 列大小是否可拖动
            if (me.options.data.resizable) {
                var resizeEl = me.resizeEl = $("<div>").addClass(resizeElClass).appendTo(me.gridEl),
                    columns = me.headerColumns;
                me.resizeEls = [];
                for (var i = 0; i < columns.length; i++) {
                    el = me.resizeEls[i] = $("<div>").attr("num", i)
                        .mousedown({
                        "me": me
                    }, me._onResizeElDown)
                        .addClass(gridHeaderDragClass)
                        .appendTo(resizeEl);
                    if (columns[i].hidden) {
                        el.hide();
                    }
                }
            }
        },
        /**
         * @private
         * @description 列动态改变div鼠标按下事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElDown: function(e) {
            var me = e.data.me,
                self = $(e.target),
                num = $.string.toNumber(self.attr("num")),
                index = num + me.count,
                tdEl = me.headerTdEls[index];
            // 处于隐藏状态的拖动条，不能拖动
            if ("true" !== self.attr("visiable")) {
                return;
            }
            me._helperEl = self;
            me._prevHelperEl = null;
            me._helperElWidth = self.width();
            me._startX = e.pageX;
            me._startLeft = self.position().left;
            me._startTdLeft = tdEl.position().left;
            me._startTdWidth = tdEl.externalWidth();
            // 在document上绑定mouseup、mousemove事件
            $(document).bind("mousemove", {
                "me": me
            }, me._onResizeElMove)
                .bind("mouseup", {
                "me": me
            }, me._onResizeElUp);
            $(document.body).addClass(selectNoneClass);
            me.__dealResizeElClass(true, self, num);
        },
        /**
         * @private
         * @description 列动态改变div鼠标松开事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElUp: function(e) {
            var me = e.data.me,
                self = me._helperEl;
            if (!self) {
                return;
            }
            var x = self.position().left - me._startLeft,
                num = $.string.toNumber(self.attr("num")),
                index = num + me.count,
                headerWidth = 0,
                resizeEl;
            $(document).unbind("mousemove", me._onResizeElMove)
                .unbind("mouseup", me._onResizeElUp);
            $(document.body).removeClass(selectNoneClass);
            me.__dealResizeElClass(false, self, num);

            // 修改表头列宽度
            me.widths[index] += x;
            me.__resetHeaderTdEl(index);
            headerWidth = me.__calHeaderWidth();
            me.__resetHeaderWidth(headerWidth);

            // 刷新内容区宽度
            me.__resetContentWidth();
            me._resetContentTdELWidthByCol(index);

            // 刷新其他拖动条位置
            for (var i = 0; i < me.resizeEls.length; i++) {
                if (num < i) {
                    resizeEl = me.resizeEls[i];
                    resizeEl.css("left", resizeEl.position().left + x);
                }
            }
        },
        /**
         * @private
         * @description 处理拖动线样式
         * @param {Boolean} down 是否鼠标按下
         * @param {Object} el 被拖动线
         * @param {Number} num 编号
         */
        __dealResizeElClass: function(down, el, num) {
            var me = this,
                prevEl,
                defaultZIndex;
            if (down) {
                el.addClass(gridHeaderDownClass).css("z-index", $.getMaxZIndex());
                if (0 !== num) {
                    prevEl = me.__findPrevResizeEl(num);
                    if (prevEl && $.isVisiable(prevEl)) {
                        me._prevHelperEl = prevEl;
                        prevEl.addClass(gridHeaderDownClass).width(1).css("z-index", $.getMaxZIndex());
                    }
                }
            } else {
                defaultZIndex = "auto";
                el.removeClass(gridHeaderDownClass).css("z-index", defaultZIndex);
                if (0 !== num) {
                    prevEl = me._prevHelperEl;
                    if (prevEl && $.isVisiable(prevEl)) {
                        prevEl.removeClass(gridHeaderDownClass).width(me._helperElWidth).css("z-index", defaultZIndex);
                    }
                }
            }
        },
        /**
         * @private
         * @description 找到当前拖动元素前一个
         * @param {Number} num 编号
         */
        __findPrevResizeEl: function(num) {
            var me = this,
                prevEl,
                visiable;
            if (0 < num) {
                prevEl = me.resizeEls[num - 1];
                visiable = prevEl.attr("visiable");
                if ($.isNull(visiable) || "true" === visiable) {
                    return prevEl;
                } else {
                    return me.__findPrevResizeEl(num - 1);
                }
            }
        },
        /**
         * @private
         * @description 列动态改变div拖动事件处理
         * @param {Object} e 事件对象
         */
        _onResizeElMove: function(e) {
            var me = e.data.me,
                self = me._helperEl;
            if (!self) {
                return;
            }
            var x = e.pageX - me._startX;
            // 设定拖动缩小的最小值
            if (0 > x && me._startTdWidth + x < minTdWidth) {
                return;
            }
            self.css("left", me._startLeft + x);
        },
        /**
         * @private
         * @description 表格排序，表格上排序只支持单列排序
         * @param {Object} e 事件对象
         */
        _sort: function(e) {
            var me = e.data.me,
                tdEl = $(this),
                column = tdEl.attr("column"), // 列数
                sortType = Sweet.constants.sortType.ASC; // 默认升序
            if (me.locked) {
                return;
            }
            if (!me.sortEl) {
                me.sortEl = tdEl;
            } else {
                // 是否同一列
                if (me.sortEl.attr("column") !== tdEl.attr("column")) {
                    me.sortEl.removeClass(gridHeaderSortAscClass + " " + gridHeaderSortDescClass + " " + gridHeaderTdHoverClass)
                        .addClass(gridHeaderTdCommonClass);
                    me.sortEl.find("div:first").removeClass(gridHeaderTextHoverClass);
                }
            }
            // 升序
            if (tdEl.hasClass(gridHeaderSortAscClass)) {
                tdEl.removeClass(gridHeaderSortAscClass)
                    .addClass(gridHeaderSortDescClass);
                sortType = Sweet.constants.sortType.DESC;
            }
            // 降序
            else if (tdEl.hasClass(gridHeaderSortDescClass)) {
                tdEl.removeClass(gridHeaderSortDescClass)
                    .addClass(gridHeaderSortAscClass);
                sortType = Sweet.constants.sortType.ASC;
            }
            // 未排序，按升序处理
            else {
                tdEl.addClass(gridHeaderSortAscClass);
                sortType = Sweet.constants.sortType.ASC;
            }

            me.sortEl = tdEl.removeClass(gridHeaderTdCommonClass);
            tdEl.find("div:first").addClass(gridHeaderTextClass);

            // 排序
            var columnObj = me.headerColumns[$.string.toNumber(column)];
            me.orders = [];
            me.orders.push(me.__getOrderFormat(columnObj.name, sortType, columnObj.dataType));
            // 当前页记为1
            if (me.page) {
                me.page.currentPage = 1;
            }
            if (me.options.store) {
                me.options.store._setDataPage(me.getPageInfo());
                me.options.store.load(me.getAllConditions());
            } else {
                me._triggerHandler(e, "sort", me.getAllConditions());
            }
            //清空所有多列排序条件已选值
            me._clearMultiSort();
            //清空除此列外所有列上的排序标志
            $.each(me.headerTdEls, function(index, obj) {
                if (obj) {
                    if (tdEl.attr("columnName") !== obj.attr("columnName")) {
                        obj.removeClass(gridHeaderTdHoverClass + " " + gridHeaderSortAscClass + " " + gridHeaderSortDescClass)
                            .addClass(gridHeaderTdCommonClass);
                        obj.find("div:first").removeClass(gridHeaderTextHoverClass);
                    }
                }
            });
        },
        /**
         * @private
         * @description 格式化排序
         * @param {String} name 列名
         * @param {String} type 排序类型
         * @param {String} dataType 数据类型
         */
        __getOrderFormat: function(name, type, dataType) {
            return {
                "name": name,
                "order": type,
                "dataType": dataType
            };
        },
        /**
         * @private
         * @description 生成表头对象
         * @param {Array} rows 表头数组
         * @param {Object} headerTrEl 行对象
         * @param {Object} headerTableEl table对象
         * @return {Object} tdTempArr 临时存放表头对象数组
         */
        _generateHeader: function(rows, headerTrEl, headerTableEl) {
            var me = this,
                column,
                columnHeight = 0,
                headerTdEl,
                headerTdDivEl,
                row,
                tdTempArr = [];
            for (var i = 0; i < rows.length; i++) {
                row = rows[i];
                tdTempArr[i] = [];
                if (0 !== i) {
                    headerTrEl = $("<tr>").appendTo(headerTableEl);
                }
                for (var j = 0; j < row.length; j++) {
                    column = row[j];
                    columnHeight = column.height || defaultColumnHeight;
                    headerTdEl = $("<td>").height(columnHeight)
                        .addClass(gridHeaderTdClass + " " + gridHeaderTdCommonClass)
                        .mouseenter({
                        "me": me
                    }, me.__onHeaderTdMouseEnter)
                        .mouseleave({
                        "me": me
                    }, me.__onHeaderTdMouseLeave)
                        .appendTo(headerTrEl);
                    headerTdDivEl = $("<div>").text(column.header)
                        .addClass(gridHeaderTextClass)
                        .appendTo(headerTdEl);
                    // 是否隐藏
                    if (column.hidden) {
                        headerTdEl.hide();
                        // 只记最后一行的隐藏列
                        if (i === rows.length - 1) {
                            me.hiddenColumn++;
                        }
                    }
                    // 是否有tip提示
                    if (column.tooltip) {
                        headerTdDivEl.attr("title", column.tooltip);
                    }
                    // 处理子节点
                    if (column.children && (0 < column.children.length)) {
                        headerTdEl.attr({
                            "colspan": column.colspan
                        })
                            .addClass(gridHeaderBottomClass);
                        tdTempArr[i][j] = {
                            "width": column.width,
                            "column": column,
                            "tdEl": headerTdEl,
                            "children": column.children.length
                        };
                        continue;
                    }
                    // 是否可排序
                    if (column.sortable) {
                        headerTdEl.bind("click", {
                            "me": me
                        }, me._sort);
                    }
                    // 是否过滤
                    if (column.filter) {
                        $("<span>").addClass(gridHeaderFilterClass)
                            .click({
                            "oTd": headerTdEl,
                            "column": column,
                            "me": me
                        },
                        me._headerFilterPanel)
                            .hide()
                            .appendTo(headerTdEl);
                    }
                    headerTdEl.attr({
                        "rowspan": rows.length - i,
                        "depth": rows.length
                    });
                    tdTempArr[i][j] = {
                        "width": column.width,
                        "column": column,
                        "tdEl": headerTdEl
                    };
                }
            }

            return tdTempArr;
        },
        /**
         * @private
         * @description 生成表格过滤面板
         * @param {Object} e 事件对象
         */
        _headerFilterPanel: function(e) {
            // 阻止事件冒泡
            e.stopImmediatePropagation();
            var me = e.data.me,
                oTd = e.data.oTd,
                oSpan = $(this),
                filterPanel = oTd.data("filterPanel");
            // 判断点击是否同一列
            if (me.activeFilterTdEl && me.activeFilterTdEl.attr("column") !== oTd.attr("column")) {
                me.oldActiveFilterTdEl = me.activeFilterTdEl;
            }
            me._triggerBodyClick();
            // 当前过滤激活列
            me.activeFilterTdEl = oTd;
            if (filterPanel) {
                me.__setFilterPanelPosition(oSpan, filterPanel);
                oTd.data("created", true);
                filterPanel.show();
                return;
            }
            var column = e.data.column,
                enableHdMenu = column.enableHdMenu,
                obj,
                addBtn,
                resetBtn,
                index = $.string.toNumber(oTd.attr("column")),
                id = me.options.id + "-" + index + gridHeaderFilterSuffix,
                btnId = me.options.id + "-" + index + gridHeaderFilterBtnSuffix,
                hEl = $("<h1>").text(i18n.hideCol).attr("column", index),
                textEl = $("<div>").addClass("title").text(i18n.filter),
                panel = $("<div>").attr("id", id),
                btnPanel = $("<div>").attr("id", btnId);

            filterPanel = $("<div>").click(function(e) {
                oTd.data("created", true);
            })
                .addClass(me.floatBgClass + " sweet-grid-header-filter-panel")
                .appendTo($(document.body));
            $.isArray(me.filterPanels) ? me.filterPanels.push(filterPanel) : "";
            // 绑定列隐藏事件
            if ($.isUndefined(enableHdMenu) || enableHdMenu) {
                hEl.bind("click", function(e) {
                    e.stopImmediatePropagation();
                    me.__onSingleColumnHiddenClick(e, $.string.toNumber($(this).attr("column")));
                    me._triggerBodyClick();
                }).appendTo(filterPanel);
            }
            textEl.appendTo(filterPanel);
            panel.appendTo(filterPanel);
            btnPanel.appendTo(filterPanel);
            // 计算过滤面板相对位置
            me.__setFilterPanelPosition(oSpan, filterPanel);

            // 生成过滤面板
            switch (column.filterType) {
                // 列表
                case dataType.LIST:
                    obj = me.__headerFilterListPanel(panel, column);
                    break;
                    // 字符串
                case dataType.STRING:
                    obj = me.__headerFilterStringPanel(panel);
                    break;
                    // 数值
                case dataType.NUMBER:
                    obj = me.__headerFilterNumberPanel(panel);
                    break;
                    // 日期
                case dataType.DATE:
                    obj = me.__headerFilterDatePanel(panel);
                    break;
                default:
                    me._error("Unsupported filter type [" + column.filterType + "].");
            }

            // 添加操作按钮
            addBtn = new Sweet.form.Button({
                width: 70,
                value: {
                    value: 0,
                    text: i18n.okBtn
                }
            });
            addBtn.addListener("click", function() {
                me.__onFilterOKClick(oTd, column.name);
            });
            resetBtn = new Sweet.form.Button({
                width: 70,
                value: {
                    value: 1,
                    text: i18n.clearSingleFilter
                }
            });
            resetBtn.addListener("click", function() {
                me.__onFilterResetClick(oTd, obj, column.name);
                me._triggerBodyClick();
            });
            new Sweet.panel.FlowPanel({
                width: "100%",
                height: 25,
                align: Sweet.constants.align.RIGHT,
                items: [addBtn, resetBtn],
                renderTo: btnId
            });

            oTd.data("created", true);
            oTd.data("filterPanel", filterPanel);
            oTd.data("filter", obj);
            me.filterObjs.push({
                "name": column.name,
                "filterType": column.filterType,
                "filter": obj,
                "tdEl": oTd
            });
        },
        /**
         * @private
         * @description 设置过滤窗口面板位置
         * @param {Object} relativeObj 相对位置对象
         * @param {Object} filterPanel 过滤面板对象
         */
        __setFilterPanelPosition: function(relativeObj, filterPanel) {
            var offset,
            zIndex;
            // 计算offset
            offset = $.getFloatOffset(relativeObj, filterPanel, true);
            // 设置z-index
            zIndex = $.getMaxZIndex();
            filterPanel.css({
                "top": offset.top,
                "left": offset.left,
                "z-index": zIndex
            });
        },
        /**
         * @private
         * @description 单列隐藏
         * @param {Object} e 事件对象
         * @param {Number} index 列号
         * @param {Boolean} show 显示还是隐藏
         */
        __ColumnsHidden: function(hc) {
            var me = this,
                show, i = 0,
                count = me.count,
                columns = me.headerColumns,
                column,
                tdEls = [];

            for (i = 0; i < hc.length; i++) {
                show = hc[i].show || false;
                tdEls = [];
                column = hc[i].index;
                if (0 < me.contentVTdEls.length) {
                    if (0 < me.contentTreeVTdEls.length) {
                        tdEls = me.contentVTdEls[column].concat(me.contentTreeVTdEls[column]);
                    } else {
                        tdEls = me.contentVTdEls[column];
                    }
                }
                if (show) {
                    me.hiddenColumn--;
                    // 显示表头
                    me.headerTdEls[column + count].show();
                    me.contentColEls[column + count].show();
                    // 显示表格内容
                    $.each(tdEls, function(i, o) {
                        o.show();
                    });
                } else {
                    // 只剩一列时，不允许隐藏
                    if (me.hiddenColumn === me.headerColumns.length - 1) {
                        return;
                    }
                    me.hiddenColumn++;
                    // 隐藏表头
                    me.headerTdEls[column + count].hide();
                    me.contentColEls[column + count].hide();
                    // 隐藏表格内容
                    $.each(tdEls, function(i, o) {
                        o.hide();
                    });
                }

                columns[column].hidden = !show;
            }
        },
        /**
         * @private
         * @description 单列隐藏
         * @param {Object} e 事件对象
         * @param {Number} index 列号
         * @param {Boolean} show 显示还是隐藏
         */
        __onSingleColumnHiddenClick: function(e, index, show) {
            var me = this;
            var show = show || false;
            me.__ColumnsHidden([{
                index: index,
                show: show
            }]);

            me.headerReRender = true;
            me._doLayout(true);
            // 设置列选中列表
            if (me.selectColList) {
                me.selectColList.setValue(me.__getSelectColumnData().value);
            }
        },
        /**
         * @private
         * @description 过滤面板点确定处理
         * @param {Object} tdEl 列对象
         * @param {String} name 列名
         */
        __onFilterOKClick: function(tdEl, name) {
            var me = this,
                filters, filterVal;
            $.each(me.filterObjs, function(index, obj) {
                var temp = obj.filter,
                    type = obj.filterType;
                if (obj.name !== name) {
                    return;
                }
                switch (type) {
                    // 列表
                    case dataType.LIST:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue(),
                            "text": temp.getText()
                        };
                        break;
                        // 字符串
                    case dataType.STRING:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                        // 数值
                    case dataType.NUMBER:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                        // 日期
                    case dataType.DATE:
                        me.filters[obj.name] = {
                            "type": type,
                            "value": temp.getValue()
                        };
                        break;
                    default:
                        me._error("Unsupported filter type [" + obj.dataType + "].");
                }
            });

            filters = me.filters[name];
            filterVal = filters.value;
            if (!filterVal) {
                // 返回布尔类型的，不向上冒泡处理
                if (!$.isBoolean(filterVal)) {
                    me._triggerBodyClick();
                }
                return;
            }
            if (filterVal && (dataType.LIST === filters.type || dataType.STRING === filters.type) && !filterVal.pass) {
                return;
            }
            me._triggerBodyClick();
            me.__setColumnFilterPic(tdEl, true);
            me.page.currentPage = 1;
            if (me.options.store) {
                me.options.store._setPage(me.getPageInfo());
                me.options.store.load(me.getAllConditions());
            } else {
                me._triggerHandler(null, "filter", me.getAllConditions());
            }
        },
        /**
         * @private
         * @description 过滤面板重置按钮事件
         * @param {Object} tdEl 列对象
         * @param {Object} obj 过滤条件对象
         * @param {String} name 列名
         */
        __onFilterResetClick: function(tdEl, obj, name) {
            var me = this;
            // 只有进行过滤的列，才执行重置
            obj.reset();
            if (0 < tdEl.find("." + gridHeaderFilterPicClass).length) {
                me.__setColumnFilterPic(tdEl);
                delete me.filters[name];
                me.page.currentPage = 1;
                if (me.options.store) {
                    me.options.store._setPage(me.getPageInfo());
                    me.options.store.load(me.getAllConditions());
                } else {
                    me._triggerHandler(null, "filter", me.getAllConditions());
                }
            }
        },
        /**
         * @private
         * @description 设置列过滤图片
         * @param {Object} tdEl 列对象
         * @param {Boolean} add 是否添加过滤图片，默认undefined
         */
        __setColumnFilterPic: function(tdEl, add) {
            if (add) {
                var textEl = tdEl.find("." + gridHeaderTextClass),
                    filterPic = $("<span>");
                filterPic.addClass(gridHeaderFilterPicClass).appendTo(textEl);
            } else {
                tdEl.find("." + gridHeaderFilterPicClass).remove();
            }
        },
        /**
         * @private
         * @description 生成列表面板
         * @param {String} o 待渲染目标对象
         * @param {Object} column 列描述
         * @return {Object} 返回列表对象
         */
        __headerFilterListPanel: function(o, column) {
            var grid = this;
            /**
             * @private
             * @description 列表面板对象
             * @param {String} o 待渲染目标对象
             * @param {Object} column 列描述
             * @return {Object} 返回列表面板对象
             */
            var ListPanel = function(o, column) {
                var id = o.attr("id");
                this.listPanel = new Sweet.list.List({
                    width: "100%",
                    height: "auto",
                    maxHeight: 150,
                    search: true,
                    multi: true,
                    tip: true,
                    widgetClass: gridHeaderFilterBgClass,
                    data: column.filterList,
                    renderTo: id
                });
            };

            /**
             * @private
             * @description 获取值，返回格式{"symbol": "IN", "value": }
             */
            ListPanel.prototype.getValue = function() {
                var me = this,
                    temp,
                    tempArr = [],
                    value = me.listPanel.getValue() || [];
                $.each(value, function(index, obj) {
                    tempArr.push(obj.value);
                });
                if (0 !== tempArr.length) {
                    temp = grid.__getFilterFormat("IN", tempArr, 0 < tempArr.length);
                }
                return temp;
            };

            /**
             * @private
             * @description 获取值显示的字符串，返回格式{"symbol": "IN", "text": }
             */
            ListPanel.prototype.getText = function() {
                var me = this,
                    temp,
                    tempArr = [],
                    value = me.listPanel.getValue() || [];
                $.each(value, function(index, obj) {
                    tempArr.push(obj.text);
                });
                if (0 !== tempArr.length) {
                    temp = grid.__getFilterFormat("IN", tempArr, 0 < tempArr.length);
                }
                return temp;
            };

            /**
             * @private
             * @description 清空值
             */
            ListPanel.prototype.reset = function() {
                var me = this;
                Sweet.Task.Delay.start({
                    id: grid.options.id + "-grid-list-delay",
                    run: function(args) {
                        me.listPanel.setValue({});
                    },
                    delay: 800
                });
            };

            o.addClass("filter-list");
            return new ListPanel(o, column);
        },
        /**
         * @private
         * @description 创建字符串过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterStringPanel: function(o) {
            var grid = this;

            /**
             * @private
             * @description 设置文本框状态
             * @param {Object} obj 文本框对象
             * @param {String} value 值
             */
            function setTextDisabled(obj, value) {
                if (symbol.EQNULL === value || symbol.NOTNULL === value) {
                    obj.setDisabled(true);
                } else {
                    obj.setDisabled(false);
                }
            }
            /**
             * @private
             * @description 字符串过滤面板
             * @param {String} o 目标对象
             */
            var StringPanel = function(o) {
                var id = o.attr("id"),
                    radioGroup,
                    textField;
                radioGroup = this.radioGroup = new Sweet.form.RadioGroup({
                    width: 150,
                    height: 100,
                    columns: 1,
                    data: [{
                        "text": i18n.exactMatch,
                        "value": symbol.EQUAL,
                        "checked": true
                    }, {
                        "text": i18n.fuzzyMatch,
                        "value": symbol.LIKE
                    }, {
                        "text": i18n.notEqual,
                        "value": symbol.NOTEQUAL
                    }, {
                        "text": i18n.eqNull,
                        "value": symbol.EQNULL
                    }, {
                        "text": i18n.notNull,
                        "value": symbol.NOTNULL
                    }]
                });
                // 注册click事件
                radioGroup.addListener("click", function(e, data) {
                    setTextDisabled(textField, data.value.value);
                });

                textField = this.textField = new Sweet.form.TextField({
                    width: "100%",
                    widgetClass: gridHeaderFilterPadClass,
                    editable: true
                });

                new Sweet.panel.VPanel({
                    width: "100%",
                    height: 135,
                    items: [radioGroup, textField],
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取组件值
             * @return {Object} 返回格式{"symbol": , "value": }，value表示文本框值，symbol约定如下
             *  =：精确匹配
             *  LIKE：模糊匹配
             *  <>：不等于
             *  NULL：为空
             *  NOTNULL：非空
             */
            StringPanel.prototype.getValue = function() {
                var radioVal = this.radioGroup.getValue().value,
                    textVal = this.textField.getValue().value;
                if (symbol.EQNULL === radioVal || symbol.NOTNULL === radioVal) {
                    return grid.__getFilterFormat(radioVal, "", true);
                }
                if ($.isNotNull(textVal)) {
                    return grid.__getFilterFormat(radioVal, textVal, $.isNotNull(textVal));
                }
                return;
            };

            /**
             * @private
             * @description 清空字符串面板
             */
            StringPanel.prototype.reset = function() {
                this.radioGroup.setValue({
                    "text": i18n.exactMatch,
                    "value": symbol.EQUAL,
                    "checked": true
                });
                this.textField.setValue({
                    "value": "",
                    "text": ""
                });
                setTextDisabled(this.textField, symbol.EQUAL);
            };

            o.addClass(gridHeaderFilterBgClass);
            return new StringPanel(o);
        },
        /**
         * @private
         * @description 创建日期过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterDatePanel: function(o) {
            var grid = this;
            /**
             * @private
             * @description 创建日期面板
             * @param {Object} o 待渲染目标对象
             */
            var DatePanel = function(o) {
                var id = o.attr("id"),
                    dateFrom,
                    dateTo;

                o.parent().addClass("sweet-grid-header-filter-date");
                dateFrom = this.dateFrom = new Sweet.form.Date({
                    blank: false,
                    label: true,
                    labelWidth: 35,
                    labelText: i18n.from,
                    width: "100%"
                });

                dateTo = this.dateTo = new Sweet.form.Date({
                    blank: false,
                    label: true,
                    labelWidth: 35,
                    labelText: i18n.to,
                    width: "100%"
                });

                new Sweet.panel.VPanel({
                    width: 205,
                    height: 55,
                    items: [dateFrom, dateTo],
                    widgetClass: gridHeaderFilterPadClass,
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取日期面板值
             * @return {Object} 返回值，格式为{"<": , ">": }
             */
            DatePanel.prototype.getValue = function() {
                var fromVal = this.dateFrom.getValue() || {},
                toVal = this.dateTo.getValue() || {},
                a,
                b,
                temp;
                if ($.isNull(fromVal.data) && $.isNull(toVal.data)) {
                    return;
                }
                // DTS2013073006399 添加日期校验
                if ($.isNull(fromVal.data)) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.beginDate,
                        "propagation": true
                    });
                    return false;
                }
                if ($.isNull(toVal.data)) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.endDate,
                        "propagation": true
                    });
                    return false;
                }
                // 比较日期大小
                if (-1 !== $.date.compare(fromVal.value, toVal.value, "-")) {
                    Sweet.Dialog.warn({
                        "message": i18n.validate.compare,
                        "propagation": true
                    });
                    return false;
                }
                a = $.extend(grid.__getFilterFormat(symbol.GT, fromVal.data), {
                    text: fromVal.value
                });
                b = $.extend(grid.__getFilterFormat(symbol.LT, toVal.data), {
                    text: toVal.value
                });
                temp = [a, b];
                return temp;
            };

            /**
             * @private
             * @description 清空日期面板
             */
            DatePanel.prototype.reset = function() {
                this.dateFrom.setValue({
                    "value": ""
                });
                this.dateTo.setValue({
                    "value": ""
                });
            };

            o.addClass(gridHeaderFilterBgClass);
            return new DatePanel(o);
        },
        /**
         * @private
         * @description 创建数值过滤面板
         * @param {String} o 待渲染目标对象
         */
        __headerFilterNumberPanel: function(o) {
            var grid = this,
                nullValue = {
                    "value": ""
                };
            /**
             * @private
             * @description 创建数值面板
             * @param {Object} o 待渲染目标对象
             */
            var NumberPanel = function(o) {
                var id = o.attr("id"),
                    largeObj,
                    smallObj,
                    equalObj;
                largeObj = this.largeObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.GT,
                    symbol: false,
                    width: "100%"
                });
                largeObj.addListener("focus", function() {
                    equalObj.setValue(nullValue);
                });
                smallObj = this.smallObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.LT,
                    symbol: false,
                    width: "100%"
                });
                smallObj.addListener("focus", function() {
                    equalObj.setValue(nullValue);
                });
                equalObj = this.equalObj = new Sweet.form.NumberField({
                    blank: false,
                    label: true,
                    labelWidth: 15,
                    allowDecimals: true,
                    labelText: symbol.EQUAL,
                    symbol: false,
                    width: "100%"
                });
                equalObj.addListener("focus", function() {
                    largeObj.setValue(nullValue);
                    smallObj.setValue(nullValue);
                });
                new Sweet.panel.VPanel({
                    width: "100%",
                    height: 85,
                    items: [largeObj, smallObj, equalObj],
                    widgetClass: gridHeaderFilterPadClass,
                    renderTo: id
                });

                return this;
            };

            /**
             * @private
             * @description 获取数值组件值
             * @returns {Object} 返回数值组件值，格式为{symbol: value, ..}
             */
            NumberPanel.prototype.getValue = function() {
                var me = this,
                    temp = [],
                    large = me.largeObj.getValue(),
                    small = me.smallObj.getValue(),
                    equal = me.equalObj.getValue();
                if ($.isNotNull(equal.value)) {
                    temp.push(grid.__getFilterFormat(symbol.EQUAL, equal.value));
                } else {
                    if ($.isNotNull(large.value)) {
                        temp.push(grid.__getFilterFormat(symbol.GT, large.value));
                    }
                    if ($.isNotNull(small.value)) {
                        temp.push(grid.__getFilterFormat(symbol.LT, small.value));
                    }
                }

                return 0 === temp.length ? null : temp;
            };

            /**
             * @private
             * @description 重置数值面板
             */
            NumberPanel.prototype.reset = function() {
                var me = this;
                me.largeObj.setValue(nullValue);
                me.smallObj.setValue(nullValue);
                me.equalObj.setValue(nullValue);
            };

            o.addClass(gridHeaderFilterBgClass);
            return new NumberPanel(o);
        },
        /**
         * @private
         * @description 格式化过滤值
         * @param {String} symbol 符号
         * @param {Object/String/Array} value 值
         * @param {Boolean} pass 是否通过
         */
        __getFilterFormat: function(symbol, value, pass) {
            return {
                "symbol": symbol,
                "value": value,
                "pass": pass
            };
        },
        /**
         * @private
         * @description 处理表头TD标签，鼠标移入时动作
         * @param {Object} e 事件对象
         */
        __onHeaderTdMouseEnter: function(e) {
            var me = e.data.me,
                o = $(this),
                rowspan,
                spanEl = o.find("." + gridHeaderFilterClass),
                position = o.position();
            // 控制文字颜色
            me.__dealHeaderTdTextHover(o, spanEl, true);
            if (spanEl && 0 < spanEl.length) {
                rowspan = $.string.toNumber(o.attr("rowspan"));
                if (1 === rowspan) {
                    spanEl.addClass(gridHeaderFilterOneClass);
                } else if (2 === rowspan) {
                    spanEl.addClass(gridHeaderFilterTwoClass);
                } else {
                    me._error("Unsupported rowspan. rowspan = " + rowspan);
                    return;
                }
                spanEl.show();
                // 计算位置
                spanEl.css({
                    "left": position.left + o.width() - spanEl.width(),
                    "top": position.top
                });
            }
        },
        /**
         * @private
         * @description 处理表头TD标签，鼠标移出时动作
         * @param {Object} e 事件对象
         * @param {Object} obj 关闭对象
         */
        __onHeaderTdMouseLeave: function(e, obj) {
            var me,
            o = obj || $(this),
                filterPanel = o.data("filterPanel"),
                spanEl = o.find("." + gridHeaderFilterClass);
            if (filterPanel && $.isVisiable(filterPanel)) {
                return;
            }
            me = e ? (e.data ? e.data.me : this) : this;
            // 控制文字颜色
            me.__dealHeaderTdTextHover(o, spanEl);
            if (spanEl && !o.data("created")) {
                spanEl.hide();
            }
        },
        /**
         * @private
         * @description 处理文字颜色
         * @param {Object} oTd TD对象
         * @param {Object} oSpan span对象
         * @param {Boolean} b 增加还是删除样式
         */
        __dealHeaderTdTextHover: function(oTd, oSpan, b) {
            if (oTd.hasClass(gridHeaderSortAscClass) || oTd.hasClass(gridHeaderSortDescClass) || oTd.data("created")) {
                return;
            }
            if (b) {
                oTd.addClass(gridHeaderTdHoverClass);
                oTd.find("div:first").addClass(gridHeaderTextHoverClass);
            } else {
                oTd.removeClass(gridHeaderTdHoverClass);
                oTd.find("div:first").removeClass(gridHeaderTextHoverClass);
            }
        },
        /**
         * @private 
         * @description 修正列数据
         * @param {Array} arr 待修正数组
         * @TODO 支持表头无限级合并
         */
        _amendHeader: function(arr) {
            var temp, children, destArr = [],
                k = 0;
            // 处理非列合并情况
            if (1 === arr.length) {
                for (var m = 0; m < arr[0].length; m++) {
                    destArr[k] = arr[0][m];
                    k++;
                }

                return destArr;
            }
            for (var i = arr.length - 2; i >= 0; i--) {
                for (var j = 0; j < arr[i].length; j++) {
                    temp = arr[i][j];
                    children = temp.children;
                    if (children && 1 < children) {
                        destArr = destArr.concat(arr[i + 1].slice(0, children));
                        arr[i + 1].splice(0, children);
                        k += children;
                    } else {
                        destArr[k] = arr[i][j];
                        k++;
                    }
                }
            }
            return destArr;
        },
        /**
         * @private
         * @description 解析表头，将树形表头转换成数组
         * @param {Array} trees 树形结构数据
         * @param {Number} depth 深度
         * @param {Array} rows 行数组
         */
        _parseHeader: function(trees, depth, rows) {
            for (var i = 0; i < trees.length; i++) {
                trees[i].colspan = 1;
                if (trees[i].children && trees[i].children.length > 0) {
                    trees[i].colspan = trees[i].children.length;
                    this._parseHeader(trees[i].children, depth + 1, rows);
                }
                if (!rows[depth]) {
                    rows[depth] = [];
                }
                if (rows[depth][i]) {
                    rows[depth][rows[depth].length] = trees[i];
                } else {
                    rows[depth][i] = trees[i];
                }
            }
        },
        _addLoading: function() {
            var me = this;
            me.loadEl = $("<div>")
                .css({
                "background": "#eeeeee",
                "display": "none",
                "height": 30,
                "position": "absolute",
                "opacity": 0.6,
                "top": 0
            });
            me.loadEl.appendTo(me.gridEl);
        },
        /**
         * @private
         * @description 创建表格内容
         */
        _createGridContent: function() {
            // 先销毁之前的元素，再创建
            this.__destroyTableContent();
            var me = this,
                contentEl = me.contentEl = $("<div>").addClass(contentElClass).appendTo(me.gridEl),
                contentDivEl = me.contentDivEl = $("<div>").appendTo(contentEl);

            me.contentTableEl = $("<table>").appendTo(contentDivEl);
            me.headerColumns ? me.headerColumns.length : maxColumnLength;
            me.singleSelect = me.options.data.singleSelect || false;
            me.checkbox = me.options.data.checkbox;
            me.sn = me.options.data.sn || false;

            // 添加rowId
            me._addRowId(me.options.data.data);
            // 选中的表格数据
            me.selectedData = {};
            // 选中的表格记录数
            me.selectedDataLength = 0;
            // 选中树形表格数据
            me.selectedTreeData = {};
            me.selectedTreeDataLength = 0;
            // 表格col元素对象数组
            me.contentColEls = [];
            // 记录行
            me.contentTrEls = [];
            // 记录内容区单元格对象的二位数组
            me.contentTdEls = [];
            // 记录内容区单元格对象的二位数组，按列排
            me.contentVTdEls = [];
            // 记录树节点行
            me.contentTreeTrEls = [];
            // 记录内容区树形单元格对象的二位数组
            me.contentTreeTdEls = [];
            // 记录内容区树形单元格对象的二位数组，按列排
            me.contentTreeVTdEls = [];
            // 记录checkbox
            me.checkboxTdEls = [];
            // 记录树节点checkbox
            me.checkboxTreeTdEls = [];
            // 记录SN对象
            me.SNTdEls = [];
            // 树表数据
            me.treeData = [];
            // 单次树节点加载的长度
            me.treeRow = 0;
            // 记录实际行和逻辑行对应关系
            me.rowRelations = {};

            //只有准备好了，才创建tr,td单元格，及高度必须要取得一个固定值
            if (me._readyBuildGridContent()) {
                me.options.beforeMoveGrid();
                me._buildMoveGridContent();
                me.options.afterMoveGrid();
                // 矩阵转换
                me.contentVTdEls = $.matrix.reversal(me.contentTdEls);
            }

            // 生成表格左键菜单区域
            me._gridMenuId = me.options.id + "-grid-menu";
            // 绑定表格内容区事件
            me._bindGridContentEvent();
        },
        _readyBuildGridContent: function() {
            var me = this,
                h = me.options.height,
                dataLen = (me.options.data.data || []).length,
                contentH = 0,
                headerHeight = 30,
                rowHeight = 30;

            me.rowH = rowHeight;
            contentH = dataLen * me.rowH;
            me.contentDivEl.height(contentH).css({
                position: "absolute",
                top: "0px"
            });

            if (String(h).indexOf("%") !== -1) {
                me.isNotReady = false;
                return false;
            }
            me.isNotReady = true;
            me.pageCount = Math.floor((h - headerHeight) / me.rowH);
            if (dataLen !== 0 && dataLen <= me.pageCount) {
                me.contentTableEl.height(h - headerHeight).css("position", "absolute");
            } else {
                me.contentTableEl.height(h - headerHeight).css("position", "absolute");
            }

            return true;
        },
        /**
         * @private
         * @description 创建表格内容区col元素，对表格单元格的统一集中处理
         */
        _buildGridContentCol: function() {
            var me = this,
                headerColumns = me.headerColumns || [],
                length = headerColumns.length,
                count = me.count || 0,
                temp,
                tempColumn,
                i,
                j;
            for (i = 0; i < count; i++) {
                temp = $("<col>").appendTo(me.contentTableEl);
                me.contentColEls.push(temp);
            }
            for (j = 0; j <= length; j++) {
                tempColumn = headerColumns[j];
                temp = $("<col>").appendTo(me.contentTableEl);
                if (tempColumn && tempColumn.hidden) {
                    temp.hide();
                }
                me.contentColEls.push(temp);
            }
        },
        /**
         * @private
         * @description 数据转换，数组转换成JSON，如果是JSON，则复制一份返回
         * @param {Object} data 数据
         */
        _toJson: function(data) {
            var me = this;
            // 对数据的预处理，如果是二维数组，需要转换成json格式数据
            if (data && 0 < data.length && $.isArray(data[0])) {
                return me.__preTreatData() || [];
            } else {
                return $.objClone(data) || [];
            }
        },
        /**
         * @private
         * @description 绑定表格内容区事件，采用事件冒泡方式处理所有的事件
         */
        _bindGridContentEvent: function() {
            var me = this;
            me.contentEl.scroll({
                "me": me
            }, me._onScroll).click({
                "me": me
            }, me._contentElClick);
        },
        _contentElClick: function(e) { // 单击事件
            var obj = $(e.target),
                row, column, tempData, tempFunc, tempOperType;
            var me = e.data.me,
                columns = me.headerColumns,
                count = me.count;
            // 处理编辑、删除、修改事件
            if (obj.hasClass(gridContentEditClass)) {
                tempOperType = Sweet.constants.operType.EDIT;
            } else if (obj.hasClass(gridContentModifyClass)) {
                tempOperType = Sweet.constants.operType.MODIFY;
            } else if (obj.hasClass(gridContentDeleteClass)) {
                tempOperType = Sweet.constants.operType.DELETE;
            } else if (obj.hasClass(gridContentCloseClass)) {
                tempOperType = Sweet.constants.operType.CLOSE;
            } else if (obj.hasClass(gridContentPauseClass)) {
                tempOperType = Sweet.constants.operType.PAUSE;
            } else if (obj.hasClass(gridContentStartClass)) {
                tempOperType = Sweet.constants.operType.START;
            } else if (obj.hasClass(gridContentResetClass)) {
                tempOperType = Sweet.constants.operType.RESET;
            } else if (obj.hasClass(gridContentDetailClass)) {
                tempOperType = Sweet.constants.operType.DETAIL;
            } else if (obj.hasClass(gridContentConfirmClass)) {
                tempOperType = Sweet.constants.operType.CONFIRM;
            }
            // 回调注册函数
            if (tempOperType) {
                row = $.string.toNumber(obj.attr("row"));
                column = $.string.toNumber(obj.attr("column"));
                tempData = {
                    "row": row,
                    "column": column,
                    "rowData": $.objClone(me.options.data.data[row])
                };
                tempFunc = columns[column - count].rendererArr[tempOperType];
                tempFunc.call(this, e, tempData);
                return;
            }

            // 处理未选中复选框事件
            if (obj.hasClass(checkboxUncheckdClass)) {
                me._onRowClick(obj, true);
                // 触发checkbox点击事件
                me._triggerCheckBoxHandler(e, obj, true);
                return;
            }
            // 处理选中复选框事件
            if (obj.hasClass(checkboxCheckdClass)) {
                me._onRowClick(obj, false);
                me._triggerCheckBoxHandler(e, obj, false);
                return;
            }

            // 是否点击菜单
            var aEl = obj.parent().parent();
            if (0 === e.button && aEl.hasClass(gridContentMenuClass)) {
                column = $.string.toNumber(aEl.attr("column"));
                var columnObj = columns[column - count],
                    showMenu = true;

                //默认配置了menu的都显示，但是有的单元格不需要显示时，用户自己判断(回调)
                if (columnObj.beforeShowMenu && $.isFunction(columnObj.beforeShowMenu)) {
                    tempData = {
                        "column": column,
                        "name": columnObj.name,
                        "rowData": $.objClone(me.options.data.data[row])
                    };
                    showMenu = columnObj.beforeShowMenu.call(this, tempData);
                }
                //如果用户没有特别需要，默认显示menu
                if (showMenu) {
                    if (me._gridMenu) {
                        me._gridMenu.destroy();
                    }
                    column = $.string.toNumber(aEl.attr("column"));
                    var x = e.pageX;
                    //修正表格最右边数字钻取时，menu超出边界的情况,150为菜单宽度
                    if (x + 150 > me.gridEl.width() - scrollWidth - 2) {
                        x = me.gridEl.width() - scrollWidth - 2 - 150;
                    }
                    me._gridMenu = new Sweet.menu.Menu({
                        renderTo: me._gridMenuId,
                        X: x,
                        Y: e.pageY,
                        itemClick: columns[column - count].itemClick,
                        items: columns[column - count].menus
                    });
                    e.stopPropagation();
                    return;
                }
            }
        },
        /**
         * @private
         * @description 触发checkbox点击事件
         * @param {Object} event 事件
         * @param {Object} obj checkbox对象
         * @param {Boolean} checked 是否选中
         */
        _triggerCheckBoxHandler: function(event, obj, checked) {
            var me = this,
                row,
                isTree,
                tempData;
            row = $.string.toNumber(obj.attr("row"));
            isTree = obj.attr("tree");
            if ("true" === isTree) {
                tempData = $.objClone(me.treeData[row]);
            } else {
                tempData = $.objClone(me.options.data.data[row]);
            }
            tempData.checked = checked;
            me._triggerHandler(event, eventNameCheckBoxClick, tempData);
        },
        /**
         * @private
         * @description 二维数组转换成json格式
         */
        __preTreatData: function() {
            var me = this,
                finalData = [],
                tempData = me.options.data.data,
                tempDataLength = tempData.length,
                columns = me.headerColumns,
                columnLength = me.headerColumns.length;

            for (var i = 0; i < tempDataLength; i++) {
                finalData[i] = {};
                for (var j = 0; j < columnLength; j++) {
                    finalData[i][columns[j].name] = tempData[i][j];
                }
            }

            return finalData;
        },
        /**
         * @private
         * @description 从表格的整个数据中取得表格当前可视界面需要展现的数据
         * @param {type} info 垂直滚动条的信息，包含top, scrollHeight
         * @returns {Array} 返回当前表格可视界面需要展现数据
         */
        _getCurrentDisplayData: function(info) {
            var me = this,
                pageCount = me.pageCount,
                tempData = [],
                i = 0,
                scrollCount = 0,
                rows = me.options.data.data ? me.options.data.data.length : 0;

            scrollCount = info ? (Math.ceil((info.top * rows) / info.scrollHeight)) : 0;
            for (i = scrollCount; i < (scrollCount + pageCount); i++) {
                if (i >= rows) {
                    break;
                }
                tempData.push(me.options.data.data[i]);
            }

            return tempData;
        },
        _buildMoveGridContent: function() {
            var me = this,
                pageCount = me.pageCount,
                rows = me.options.data.data ? me.options.data.data.length : 0,
                tempData = [];

            if (rows < pageCount) {
                var temp = pageCount - rows;
                var finalRowId = rows <= 0 ? 0 : me.options.data.data[rows - 1].rowId;
                for (var i = 0; i < temp; i++) {
                    me.options.data.data.push({
                        rowId: finalRowId + i + 1
                    });
                }
            }
            tempData = me._getCurrentDisplayData();
            //如果没有数据，什么也不做
            if (tempData.length <= 0) {
                return tempData;
            }
            me._buildGridContentCol();
            // 添加rowId
            me._buildGridTrContent(tempData);
            me._refreshRowRelations(tempData);
        },
        /**
         * @private
         * @description 插入表格数据，实现向前或向后追加功能，不能与store一起使用
         * @param {Array} data 待插入数据
         * @param {Boolean} before 是否向前追加
         */
        _buildInsertGridContent: function(data, before) {
            var me = this,
                timeBegin = $.date.getMilliseconds(),
                timeEnd;
            me._info("_buildInsertGridContent() begin");

            // 添加rowId
            me._addRowId(data, me.options.data.data.length);
            me.options.data.data = me.options.data.data.concat(data);
            me._buildGridTrContent(data, before);
            me._refreshContentSN();

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildInsertGridContent() end");
        },
        /**
         * @private
         * @description 生成表格行数据
         * @param {Array} data 数据
         * @param {Boolean} before 是否向前追加，默认向后追加
         */
        _buildGridTrContent: function(data, before) {
            var me = this,
                rows = data.length,
                row, // 行号
                columns = me.headerColumns || [], // 列信息
                trEl,
                tdEl,
                checkboxEl,
                SNEl,
                temp,
                depth = 0; // 深度，默认为0

            // 绘制表格
            for (var i = 0; i < rows; i++) {
                temp = data[i];
                row = temp.rowId - 1;
                trEl = $("<tr>").addClass(gridContentTrClass);
                trEl.bind("click", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowClick
                }, me._onTrClick)
                    .bind("dblclick", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowDBClick
                }, me._onTrClick);
                // 行变色处理
                me._addRowColor(trEl, temp.options);
                me.contentTdEls[row] = [];
                if (me.checkbox) {
                    checkboxEl = me._getCheckbox(row).appendTo(trEl);
                    me.checkboxTdEls[row] = checkboxEl;
                }
                if (me.sn) {
                    SNEl = me._getSN(temp.rowId).appendTo(trEl);
                }

                // 生成数据单元格
                for (var j = 0; j < columns.length; j++) {
                    tdEl = me._getContentTd({
                        "row": row,
                        "column": j + me.count,
                        "rowData": temp,
                        "columnObj": columns[j],
                        "depth": depth
                    })
                        .appendTo(trEl);
                    me.contentTdEls[row][j] = tdEl;
                }
                // 添加列，用以填充表格剩余宽度 DTS2013090208329
                me.contentTdEls[row][columns.length] = $("<td>").appendTo(trEl);

                if (before) {
                    trEl.prependTo(me.contentTableEl);
                } else {
                    trEl.appendTo(me.contentTableEl);
                }

                me.contentTrEls[row] = trEl;
            }
        },
        /**
         * @private
         * @description 生成表格树节点数据
         */
        _buildGridTreeContent: function() {
            this._info("_buildGridTreeContent() begin");
            var timeBegin = $.date.getMilliseconds(),
                timeEnd;
            var me = this,
                lazyLoadRows = me.lazyLoadRows;

            // 防止越界查找，并关闭定时器
            if (0 === me.tempTreeData.length || me.treeDataIndex >= me.treeData.length) {
                Sweet.Task.Timeout.stop(me.timerGridTreeContent, function() {
                    me._refreshContentSN();
                });
                // 矩阵转换
                me.contentTreeVTdEls = $.matrix.reversal(me.contentTreeTdEls);
                return;
            }

            var data = me.treeData;
            var treeDataLength = data.length;
            // 实际行数
            var rows = Math.floor((treeDataLength - me.treeDataIndex) / lazyLoadRows) > 0 ? lazyLoadRows : treeDataLength - me.treeDataIndex;
            // 行号
            var row;
            // 临时行号
            var tempTreeRow = 0;
            // 或取待显示数据
            var tempData = data.slice(me.treeDataIndex, me.treeDataIndex + rows);
            // 列信息
            var columns = me.headerColumns || [];
            var trEl;
            var tdEl;
            var checkboxEl;
            var SNEl;
            // 取深度
            var depth = $.string.toNumber(me.rowTreeTdEl.attr("depth")) + 1;
            var treeTrEls = me.rowTreeTdEl.data("treeTrEls");

            // 绘制表格
            for (var i = 0; i < rows; i++) {
                row = i + me.treeDataIndex;
                tempTreeRow = i + me.tempTreeDataIndex;
                trEl = $("<tr>").addClass(gridContentTrClass).attr("tree", "true");
                trEl.bind("click", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowClick
                }, me._onTrClick)
                    .bind("dblclick", {
                    "me": me,
                    "tr": trEl,
                    "eventName": eventNameRowDBClick
                }, me._onTrClick);
                // 行变色处理
                me._addRowColor(trEl, tempData[i].options);
                me.contentTreeTdEls[row] = [];
                if (me.checkbox) {
                    checkboxEl = me._getCheckbox(row, true).appendTo(trEl);
                    me.checkboxTreeTdEls[row] = checkboxEl;
                }
                if (me.sn) {
                    SNEl = me._getSN("").appendTo(trEl);
                }

                // 生成数据单元格
                for (var j = 0; j < columns.length; j++) {
                    tdEl = me._getContentTd({
                        "row": row,
                        "column": j + me.count,
                        "rowData": tempData[i],
                        "columnObj": columns[j],
                        "depth": depth,
                        "isTree": true
                    })
                        .appendTo(trEl);
                    me.contentTreeTdEls[row][j] = tdEl;
                }
                me.contentTreeTdEls[row][columns.length] = $("<td>").appendTo(trEl);
                trEl.insertAfter(me.rowTreeEl);

                me.contentTreeTrEls[row] = trEl;
                treeTrEls[tempTreeRow] = trEl;
            }

            // 索引位置增加
            me.treeDataIndex += rows;
            me.tempTreeDataIndex += rows;

            timeEnd = $.date.getMilliseconds();
            me._info("Render grid content. Time-consuming = " + (timeEnd - timeBegin) + "ms");
            me._info("_buildGridTreeContent() end");
        },
        /**
         * @private
         * @description 添加行变色
         * @param {Object} trEl 行对象
         * @param {Object} opts 行配置参数
         */
        _addRowColor: function(trEl, opts) {
            if (!opts) {
                return;
            }
            var color = opts.color,
                cssColorName = trColor[color];
            if (cssColorName) {
                trEl.addClass(cssColorName);
            }
        },
        /**
         * @private
         * @description 行点击事件,配置checkbox时，只有点击checkbox，才记录到selectData中去
         * @param {Object} e 事件对象
         */
        _onTrClick: function(e) {
            var me = e.data.me,
                tr = e.data.tr,
                eName = e.data.eventName,
                row = $.string.toNumber(tr.attr("row")),
                targetObj,
                rowData = [],
                realRow,
                trEl;
            // 是否单选
            if (me.checkbox) {
                return;
            }
            targetObj = me.__findTargetTr(row);
            realRow = targetObj.realRow;
            // 查找当前选中的行
            trEl = me._getSelectedFirstRow();
            if (me.options.data.checkbox) {
                if (targetObj.tree) {
                    rowData.push(me.treeData[realRow]);
                } else {
                    rowData.push(me.options.data.data[realRow]);
                }
            } else {
                if (trEl && 0 < trEl.length) {
                    trEl = $(trEl);
                    trEl.removeClass(gridContentRowSelectedClass);
                }
                delete me.selectedTreeData;
                delete me.selectedTreeDataLength;
                me.selectedTreeData = {};
                me.selectedTreeDataLength = 0;
                delete me.selectedData;
                delete me.selectedDataLength;
                me.selectedData = {};
                me.selectedDataLength = 0;

                //处理选中效果
                tr.addClass(gridContentRowSelectedClass);
                if (targetObj.tree) {
                    me.selectedTreeData[me.treeData[realRow].rowId] = me.treeData[realRow];
                    me.selectedTreeDataLength = 1;
                } else {
                    me.selectedData[me.options.data.data[realRow].rowId] = me.options.data.data[realRow];
                    me.selectedDataLength = 1;
                }
                rowData = me.getSelectedValue();
            }

            // 触发行点击事件
            me._triggerHandler(e, eName, {
                "row": row,
                "rowData": rowData
            });
        },
        /**
         * @private
         * @description 重新设置表格内容区宽度
         */
        _resetContentTdELWidth: function() {
            var me = this;
            $.each(me.contentColEls, function(index, obj) {
                me._resetContentTdELWidthByCol(index);
            });
        },
        /**
         * @private
         * @description 按列设置表格内容区宽度
         * @param {Number} index 列索引
         */
        _resetContentTdELWidthByCol: function(index) {
            var me = this;
            if (me.widths) {
                me.contentColEls[index].width(me.widths[index] + tdBorder);
            }
        },
        /**
         * @private
         * @description 刷新序列号
         */
        _refreshContentSN: function() {
            var me = this,
                snEls,
                snElsLength,
                i;
            if (me.options.data.sn) {
                snEls = me.contentTableEl.find("." + gridSNClass);
                snElsLength = snEls.length;
                for (i = 0; i < snElsLength; i++) {
                    $(snEls[i]).text(i + 1);
                }
            }

        },
        /**
         * @private
         * @description 刷新逻辑行和实际行的对应关系
         * @param {Array} data 可视区域显示的数据
         */
        _refreshRowRelations: function(data) {
            var me = this,
                trLen,
                dataLen = data ? data.length : 0,
                trs,
                row,
                tempTrEl,
                j;

            if (me.options.tree) {
                trLen = me.contentTreeTrEls.length;
                trs = me.contentTreeTrEls;
            } else {
                trLen = me.contentTrEls.length;
                trs = me.contentTrEls;
            }

            if (dataLen === 0 || trLen !== dataLen) {
                return;
            }
            for (j = 0; j < trLen; j++) {
                tempTrEl = trs[j];
                row = data[j].rowId;
                if (tempTrEl) {
                    tempTrEl.attr("row", row);
                }
            }
        },
        /**
         * @private
         * @description 返回行对象
         */
        __getContentTrEls: function() {
            return this.contentTableEl.find("." + gridContentTrClass);
        },
        /**
         * @private
         * @description 生成复选框对象
         * @param {Number} row 行号
         * @param {Boolean} isTree 是否树
         */
        _getCheckbox: function(row, isTree) {
            var tdEl = $("<td>"),
                divEl = $("<div>").addClass(gridCheckboxClass).appendTo(tdEl),
                aEl = $("<a>").addClass(checkboxUncheckdClass)
                    .attr({
                    "row": row
                })
                    .appendTo(divEl);
            if (isTree) {
                aEl.attr("tree", "true");
            }

            return tdEl;
        },
        /**
         * @private
         * @description 生成列数
         * @param {Number} sn 序号
         */
        _getSN: function(sn) {
            var tdEl = $("<td>");
            $("<div>").addClass(gridSNClass).attr("title", sn).text(sn).appendTo(tdEl);

            return tdEl;
        },
        /**
         * @private
         * @description 生成数据单元格
         * @param {Object} params 参数，格式如下：
         *      {Number} row 行数
         *      {Number} column 列数
         *      {Object} rowData 行数据
         *      {Object} columnObj 列信息
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点
         */
        _getContentTd: function(params) {
            var me = this,
                row = params.row,
                column = params.column,
                columnObj = params.columnObj,
                depth = params.depth,
                isTree = params.isTree,
                tdEl = $("<td>"),
                divEl = $("<div>").appendTo(tdEl),
                tempParams;
            tempParams = {
                "row": row,
                "column": column,
                "rowData": params.rowData,
                "columnObj": columnObj,
                "divEl": divEl,
                "depth": depth,
                "isTree": isTree,
                "tdEl": tdEl
            };

            // 处理表格内部数据对其方式
            me.__getContentTdAlign(tempParams);

            // 是否用户有对列的处理
            me.__getContentTdRender(tempParams);

            // 绑定TD单击事件
            me.__bindContentTdClick(tempParams);

            // 是否隐藏列
            if (columnObj.hidden) {
                tdEl.hide();
            }

            return tdEl;
        },
        /**
         * @private
         * @description 绑定表格内容区TD标签click事件
         * @param {Object} params 参数
         */
        __bindContentTdClick: function(params) {
            var me = this,
                tdEl = params.tdEl,
                row = params.row,
                column = params.column,
                columnObj = params.columnObj;
            tdEl.bind("click", {
                "me": me,
                "row": row,
                "column": column,
                "name": columnObj.name,
                "rowData": $.objClone(params.rowData)
            },

            function(e) {
                var row = e.data.row;
                var column = e.data.column;
                var name = e.data.name;
                var data = {
                    "row": row,
                    "column": column,
                    "name": name,
                    "rowData": e.data.rowData
                };
                e.data.me._triggerHandler(e, eventNameCellClick, data);
            });
        },
        /**
         * @private 
         * @description 表格内容区对隐藏列处理
         * @param {Object} params 参数
         */
        __getContentTdAlign: function(params) {
            var column = params.columnObj,
                divEl = params.divEl;
            if (column.align) {
                // 右对齐
                if (Sweet.constants.align.RIGHT === column.align) {
                    divEl.addClass(gridContentDataRightClass);
                }
                // 居中对齐
                else if (Sweet.constants.align.CENTER === column.align) {
                    divEl.addClass(gridContentDataCenterClass);
                }
                // 默认左对齐
                else {
                    divEl.addClass(gridContentDataLeftClass);
                }
            } else {
                // 组件内部根据数据类型处理数据对其方式
                if (Sweet.constants.dataType.NUMBER === column.dataType) {
                    divEl.addClass(gridContentDataRightClass);
                }
            }
        },
        /**
         * @private
         * @description 表格内容区数据处理
         * @param {Object} params 参数，格式如下：
         *      {Number} row 行
         *      {Number} column 列
         *      {Object} rowData 行数据
         *      {Object} columnObj 列描述
         *      {Object} divEl 内容区附着对象
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点数据
         */
        __getContentTdRender: function(params) {
            var me = this,
                row = params.row,
                column = params.column,
                columnObj = params.columnObj,
                divEl = params.divEl,
                depth = params.depth,
                isTree = params.isTree,
                tempDivContent,
                tempParams = {},
                tempData,
                aMenu = "<a class='" + gridContentMenuClass + "' column='" + column + "'>";
            if (columnObj.renderer) {
                tempParams = {
                    "row": row,
                    "column": column,
                    "data": params.rowData[columnObj.name],
                    "rowData": $.objClone(params.rowData),
                    "columnDesc": $.objClone(columnObj)
                };
                tempDivContent = columnObj.renderer.call(null, tempParams);
                if (columnObj.menus) {
                    $(aMenu).html(tempDivContent)
                        .appendTo(divEl);
                } else {
                    divEl.html(tempDivContent);
                }
            } else {
                // 处理表格型数据
                tempParams = {
                    "data": params.rowData[columnObj.name],
                    "rowData": params.rowData,
                    "row": row,
                    "column": column,
                    "depth": depth,
                    "isTree": isTree,
                    "name": columnObj.name
                };
                tempData = me.__getContentTdTree(tempParams);
                if (columnObj.menus) {
                    $(aMenu).html(tempData)
                        .appendTo(divEl);
                } else {
                    divEl.html(tempData);
                }
            }
            // 是否开启tip提示功能
            if (columnObj.tip) {
                divEl.attr("title", $.isPlainObject(params.rowData[columnObj.name]) ? $.htmlEscape(params.rowData[columnObj.name].text) : $.htmlEscape(params.rowData[columnObj.name]));
            }
        },
        /**
         * @private
         * @description 创建树形节点
         * @param {Object} params 参数，格式如下：
         *      {Object} data 表格单元格数据
         *      {Object} rowData 行数据
         *      {Number} row 行数
         *      {Number} column 列数
         *      {Number} depth 深度
         *      {Boolean} isTree 是否树节点
         *      {String} name 列名称
         * @return {String} 返回树形数据或普通数据
         */
        __getContentTdTree: function(params) {
            var me = this,
                data = params.data,
                outputData,
                rowData = params.rowData,
                row = params.row,
                column = params.column,
                depth = params.depth,
                isTree = params.isTree,
                name = params.name,
                divEl = $("<div>").addClass(gridContentTreeDivClass),
                textEl;
            if ($.isPlainObject(data) && data.children && $.isNotNull(data.text)) {
                // 计算树节点偏移量
                if (isTree) {
                    divEl.css("padding-left", treeBlankWidth * depth);
                }
                var aEl = $("<a>").addClass(gridContentTreePlusClass + " " + gridContentTreeSpaceClass + " " + gridContentTreeClass)
                    .bind("click", function(event) {
                    event.stopImmediatePropagation();
                    var self = $(this);
                    var tempData;
                    // 表格树数据追加行节点
                    me.rowTreeEl = self.parent().parent().parent().parent();
                    // 表格树数据触发列节点
                    me.rowTreeTdEl = self;
                    // 处理表格树展开问题
                    if (self.hasClass(gridContentTreePlusClass)) {
                        self.removeClass(gridContentTreePlusClass).addClass(gridContentTreeMinusClass);
                        if (self.data("expand")) {
                            me._gridContentTreeExpand(self.data("treeTrEls"), true);
                            return;
                        }
                        tempData = {
                            "row": row,
                            "column": column,
                            "name": name,
                            "depth": depth,
                            "rowData": $.objClone(rowData) || {}
                        };
                        // 回调展开事件
                        tempData = me._triggerHandler(event, eventNameTreeExpand, tempData);
                        if (me.options.store) {
                            me.options.store.load(tempData, true, "setTreeData");
                        }
                        self.data("expand", true);
                        self.data("treeTrEls", []);
                    }
                    // 处理表格树折叠问题
                    else if (self.hasClass(gridContentTreeMinusClass)) {
                        self.removeClass(gridContentTreeMinusClass).addClass(gridContentTreePlusClass);
                        me._gridContentTreeExpand(self.data("treeTrEls"), false);
                    } else {
                        me._info("__getContentTdTree() Nothing to do.");
                    }
                })
                    .attr({
                    "row": row,
                    "column": column,
                    "depth": depth
                })
                    .appendTo(divEl);
                outputData = $.nullToString(data.text);
                textEl = $("<div>").html($.htmlEscape(outputData)).appendTo(divEl);
            } else {
                textEl = $("<div>").appendTo(divEl);
                divEl.css("padding-left", treeBlankWidth * depth);
                if (isTree && $.isPlainObject(data)) {
                    outputData = data.text;
                } else {
                    outputData = $.isPlainObject(data) ? data.text : data;
                }
                textEl.html($.htmlEscape($.nullToString(outputData)));
            }

            return divEl[0];
        },
        /**
         * @private
         * @description 控制表格树展开、折叠
         * @param {Array} trEls 表格树节点数组
         * @param {Boolean} expand true展开，false折叠
         */
        _gridContentTreeExpand: function(trEls, expand) {
            var trEl;
            var trTreeEls;
            var trTreeEl;
            if (expand) {
                for (var m = 0; m < trEls.length; m++) {
                    trEls[m].show();
                }
            } else {
                for (var i = 0; i < trEls.length; i++) {
                    trEl = trEls[i].hide();
                    // 该行是否有树形节点
                    trTreeEls = trEl.find("." + gridContentTreeClass);
                    for (var j = 0; j < trTreeEls.length; j++) {
                        trTreeEl = $(trTreeEls[j]);
                        trTreeEl.removeClass(gridContentTreeMinusClass).addClass(gridContentTreePlusClass);
                        this._gridContentTreeExpand(trTreeEl.data("treeTrEls") || [], false);
                    }
                }
            }
        },
        /**
         * @description 处理滚动条事件，保持表头与表内容一致
         * @private
         */
        _onScroll: function(e) {
            var me = e.data.me,
                scrollLeft = me.contentEl.scrollLeft();
            if (me._gridMenu) {
                me._gridMenu.destroy();
            }
            me.gridScrollLeft = scrollLeft;
            me.gridScrollLeftFlag++;
            me.headerDivEl.css({
                "left": -scrollLeft
            });
            if (me.resizeEl) {
                me.resizeEl.css({
                    "left": -scrollLeft
                });
            }
            var scrollInfo = {
                left: scrollLeft,
                top: me.contentEl.scrollTop(),
                scrollWidth: me.contentEl.get(0).scrollWidth,
                scrollHeight: me.contentEl.get(0).scrollHeight
            };
            //拖动滚动条后的回调函数
            if (me.options.scrollCallBack && $.isFunction(me.options.scrollCallBack)) {
                me.options.scrollCallBack(scrollInfo);
            }
            //只有拖动竖直滚动条时，才触发
            if (me.options.move) {
                me.options.beforeMoveGrid();
                var tdata = me._getCurrentDisplayData(scrollInfo);
                me.contentTableEl.css("top", scrollInfo.top + "px");

                //最大的滚动值
                var maxTop = me.contentDivEl.height() - me.contentEl.height();
                //如果是分次请求数据，需要出遮罩，回调中用户发请求,使用异步和回调，进行数据的追加
                if (scrollInfo && scrollInfo.top >= maxTop) {
                    if (!me.hasShowMask && me.options.data.total > me.options.data.data.length && !me.locked) {
                        me.loadEl.show().sweetMask({
                            loading: true
                        });
                        tdata.shift();
                        me.hasShowMask = true;
                        me.options.afterMoveGrid(tdata, maxTop, me.options.data.data.length);
                    } else {
                        if (me.hasShowMask) {
                            tdata.shift();
                        }
                        me.options.afterMoveGrid(tdata, undefined, undefined);
                    }
                } else {
                    me.options.afterMoveGrid(tdata, undefined, undefined);
                }
                me._refreshRowRelations(tdata);
                //处理更新后原来选中的行问题
                var select = me.getSelectedValue();
                me._dealRowSelect(me.checkboxTdEls, me.contentTrEls, {
                    "current": checkboxUncheckdClass,
                    "old": checkboxCheckdClass
                }, {
                    "current": "",
                    "old": gridContentRowSelectedClass
                });
                me._dealRowSelect(me.checkboxTreeTdEls, me.contentTreeTrEls, {
                    "current": checkboxUncheckdClass,
                    "old": checkboxCheckdClass
                }, {
                    "current": "",
                    "old": gridContentRowSelectedClass
                });
                if (select[0] && select[0].rowId) {
                    var selectTr = me.__findTargetTr(select[0].rowId);
                    if (selectTr.trEl) {
                        selectTr.trEl.addClass(gridContentRowSelectedClass);
                    }
                }
            }
            me.preScrollInfo = scrollInfo;
        },
        /**
         * @description 限制用户拖动滚动条时---数据不够时向后台发送请求的动作
         * @returns boolean 是否向后台以请求，true表示锁定，不再发请求；false表示正常发请求，默认值flase
         */
        setLocked: function(locked) {
            var me = this;
            me.locked = locked;
        },
        /**
         * @description 取得当前表格的滚动条信息
         * @returns object 取得当前表格的滚动条信息,其中包含top, left等信息
         */
        getScrollInfo: function() {
            return this.preScrollInfo;
        },
        /**
         * @description 取得当前滚动条拖动到的位置对应的数据的索引值
         */
        getStartIndex: function() {
            return this.options.data.data.length;
        },
        /**
         * @description 给表格追加数据并去除表格底部的遮罩，修改垂直滚动条的高度
         * @param {Array} data  数据
         * @param {Number} top  原来滚动条的位置
         * @param {boolean} isClear 是否清除原来的数据
         */
        setAppendData: function(data, top, isClear) {
            var me = this,
                top = top || 0;
            if (data && me.options.data.data) {
                if (isClear) {
                    me.options.data.data = null;
                    me.options.data.data = []; // 每次设置数据时，data不需要保留
                    if ($.isArray(data)) {
                        me.options.data.data = data;
                    } else {
                        me.options.data = $.extend({}, me.options.data, data);
                    }

                    top = 0;
                } else {
                    if ($.isArray(data)) {
                        me.options.data.data = me.options.data.data.concat(data);
                    } else {
                        me.options.data.data = me.options.data.data.concat(data.data || []);
                    }
                }

                // 添加rowId
                me._addRowId(me.options.data.data);
                if (me.options.data.data.length <= me.pageCount) {
                    var rows = me.options.data.data.length;
                    var temp = me.pageCount - rows;
                    var finalRowId = rows <= 0 ? 0 : me.options.data.data[rows - 1].rowId;
                    for (var i = 0; i < temp; i++) {
                        me.options.data.data.push({
                            rowId: finalRowId + i + 1
                        });
                    }
                    me._refreshRowRelations(me.options.data.data);
                }
                //将数据进行追加后，需要修改相应的垂直滚动条的高度
                me.contentDivEl.height(me.options.data.data.length * me.rowH);
                //将hasShowMask设置为false
                me.hasShowMask = false;
                //去掉相应的遮罩并隐藏遮罩
                me.loadEl.unSweetMask();
                me.loadEl.hide();
                me.contentEl.scrollTop(top);
                me._onScroll({
                    data: {
                        "me": me
                    }
                });
            }
        },
        /**
         * @description 隐藏遮罩，主要是出现异常时隐藏遮罩，保证下次还可以正常操作
         */
        hideMask: function() {
            var me = this;
            //将hasShowMask设置为false
            me.hasShowMask = false;
            //去掉相应的遮罩并隐藏遮罩
            me.loadEl.unSweetMask();
            me.loadEl.hide();
            me._onScroll({
                data: {
                    "me": me
                }
            });
        },
        /**
         * @description 行全选
         * @private
         * @param {Object} event 复选框按钮本身
         */
        _onAllRowClick: function(event) {
            var me = event.data.me,
                self = $(this),
                tempData = {};
            /**
             * @private
             * @description 数组转换对象
             * @param {Array} arr 数组
             * @return {Object} 对象
             */
            function arrToObject(arr) {
                var temp, obj = {};
                for (var i = 0; i < arr.length; i++) {
                    temp = arr[i];
                    if (temp) {
                        obj[temp.rowId] = temp;
                    }
                }
                return obj;
            }

            // 未选中
            if (self.hasClass(checkboxUncheckdClass)) {
                tempData.checked = true;
                self.removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                me.selectedData = arrToObject(me.options.data.data);
                me.selectedDataLength = me.options.data.data.length;
                me.selectedTreeData = arrToObject(me.treeData);
                me.selectedTreeDataLength = me.treeData.length;
                me._dealRowSelect(me.checkboxTdEls, me.contentTrEls, {
                    "current": checkboxCheckdClass,
                    "old": checkboxUncheckdClass
                }, {
                    "current": gridContentRowSelectedClass,
                    "old": ""
                });
                me._dealRowSelect(me.checkboxTreeTdEls, me.contentTreeTrEls, {
                    "current": checkboxCheckdClass,
                    "old": checkboxUncheckdClass
                }, {
                    "current": gridContentRowSelectedClass,
                    "old": ""
                });
            }
            // 选中
            else if (self.hasClass(checkboxCheckdClass)) {
                tempData.checked = false;
                self.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);
                me._allRowUnSelect();
            } else {
                me._info("Nothing we can do.");
                return;
            }
            me._triggerHandler(event, eventNameCheckBoxClick, tempData);
        },
        /**
         * @private
         * @description 所有行取消选中
         */
        _allRowUnSelect: function() {
            var me = this;
            me.selectedData = {};
            me.selectedDataLength = 0;
            me.selectedTreeData = {};
            me.selectedTreeDataLength = 0;
            me._dealRowSelect(me.checkboxTdEls, me.contentTrEls, {
                "current": checkboxUncheckdClass,
                "old": checkboxCheckdClass
            }, {
                "current": "",
                "old": gridContentRowSelectedClass
            });
            me._dealRowSelect(me.checkboxTreeTdEls, me.contentTreeTrEls, {
                "current": checkboxUncheckdClass,
                "old": checkboxCheckdClass
            }, {
                "current": "",
                "old": gridContentRowSelectedClass
            });
        },
        /**
         * @description 处理复选框选中
         * @private
         * @param {Array} checkboxs 复选框组
         * @param {Array} rows 行数组
         * @param {String} checkboxClass 样式
         * @param {String} rowClass 行样式
         */
        _dealRowSelect: function(checkboxs, rows, checkboxClass, rowClass) {
            for (var i = 0; i < rows.length; i++) {
                if (checkboxs[i]) {
                    checkboxs[i].find("a").removeClass(checkboxClass.old).addClass(checkboxClass.current);
                }
                rows[i].removeClass(rowClass.old).addClass(rowClass.current);
            }
        },
        /**
         * @description 行复选框点击事件
         * @private
         * @param {Object} obj 复选框对象本身
         * @param {Boolean} checked true选中，false未选中
         */
        _onRowClick: function(obj, checked) {
            var me = this,
                row = $.string.toNumber(obj.attr("row")),
                isTree = obj.attr("tree"),
                rowData;
            // 选中
            if (checked) {
                obj.removeClass(checkboxUncheckdClass).addClass(checkboxCheckdClass);
                me._oneRowSelect(row, isTree);
                // 未选中
            } else {
                var tempData = me.options.data.data[row];
                obj.removeClass(checkboxCheckdClass).addClass(checkboxUncheckdClass);

                if ("true" === isTree) {
                    tempData = me.treeData[row];
                    // 取消行选中
                    me.contentTreeTrEls[row].removeClass(gridContentRowSelectedClass);
                    delete me.selectedTreeData[tempData.rowId];
                    me.selectedTreeDataLength--;
                } else {
                    tempData = me.options.data.data[row];
                    // 取消行选中
                    me.contentTrEls[row].removeClass(gridContentRowSelectedClass);
                    delete me.selectedData[tempData.rowId];
                    me.selectedDataLength--;
                }

                // 如果全部取消选中
                if (me.options.data.data.length + me.treeData.length !== me.selectedTreeDataLength + me.selectedDataLength) {
                    me.headerTdEls[0].find("a").removeClass().addClass(checkboxUncheckdClass);
                }
            }
        },
        /**
         * @private
         * @description 单号选择
         * @param {Number} row 行号
         * @param {String} isTree 是否是树
         */
        _oneRowSelect: function(row, isTree) {
            var me = this,
                rowData;
            if ("true" === isTree) {
                rowData = $.objClone(me.treeData[row]);
                // 添加行选中
                me.contentTreeTrEls[row].addClass(gridContentRowSelectedClass);
                me.selectedTreeData[me.treeData[row].rowId] = rowData;
                me.selectedTreeDataLength++;
            } else {
                rowData = $.objClone(me.options.data.data[row]);
                // 添加行选中
                me.contentTrEls[row].addClass(gridContentRowSelectedClass);
                me.selectedData[me.options.data.data[row].rowId] = rowData;
                me.selectedDataLength++;
            }

            // 如果全部选中
            if (me.selectedDataLength + me.selectedTreeDataLength === me.options.data.data.length + me.treeData.length) {
                me.headerTdEls[0].find("a").removeClass().addClass(checkboxCheckdClass);
            }
        },

        /**
         * @private
         * @description 跳转按钮blur事件处理
         */
        _onGoBlur: function() {
            var me = this;
            var value = $.string.toNumber(me.pagingGoTextEl.val());
            if (1 > value) {
                me.pagingGoTextEl.val(1);
            } else if (value > me.page.totalPage) {
                me.pagingGoTextEl.val(0 === me.page.totalPage ? 1 : me.page.totalPage);
            }
        },
        /**
         * @description 上、下翻页按钮单击事件
         * @private
         * @param {Boolean} bool true前翻 false后翻
         */
        _onPagingButtonClick: function(bool) {
            var me = this,
                findTarget = false,
                page = me.page,
                numEls = me.numEls,
                currentPage;
            // 页数必须在有效范围内
            if (page.totalPage < page.currentPage || 1 > page.currentPage) {
                return;
            }
            // 计算当期要显示的页数
            if (1 === page.currentPage) {
                if (bool || 1 === page.totalPage) {
                    return;
                } else {
                    currentPage = page.currentPage + 1;
                }
            } else if (page.totalPage === page.currentPage) {
                if (bool) {
                    currentPage = page.totalPage - 1;
                } else {
                    return;
                }
            } else {
                currentPage = bool ? --page.currentPage : ++page.currentPage;
            }

            me.page.currentPage = currentPage;

            // 简单翻页栏
            if (me.options.data.page.simple) {
                me.pagingPageDropDownEl.find("li:eq(" + --me.page.currentPage + ")").click();
                return;
            }

            // 找到需要点击的目标元素
            for (var i = 0; i < numEls.length; i++) {
                if (currentPage === $.string.toNumber(numEls[i].val())) {
                    numEls[i].click();
                    findTarget = true;
                }
            }

            // DTS2013090502641 没有找到目标元素，也要重新加载数据
            if (!findTarget) {
                // 上下翻页使用Go按钮计算开始值
                me.goClick = true;
                me._onPagingBarNumClick(null, true);
            }
        },
        /**
         * @description Go按钮点击事件
         * @private
         * @param {Object} event 事件
         */
        _onPagingGoClick: function(event) {
            var me = this,
                goTextValue = $.string.toNumber(me.pagingGoTextEl.val());
            // 如果当前页同跳转页相同，不进行跳转
            if (me.page.currentPage === goTextValue) {
                return;
            }
            me.page.currentPage = goTextValue;
            me.goClick = true;
            me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
        },
        /**
         * @description 每页记录数选择时触发
         * @private
         * @param {Object} event 每页记录数本身
         */
        _onPagingRowClick: function(event) {
            var me = event.data.me,
                self = $(this);
            me.options.data.page.size = me.page.size = $.string.toNumber(self.val());
            me.page.currentPage = 1;
            me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
        },
        /**
         * @description 创建显示记录数下拉框
         * @private
         * @param {Object} obj 配置参数
         * @return {Object} selectEl 下拉框对象
         */
        _createPagingBarSelectPage: function(obj) {
            var me = this,
                size = obj.size,
                select = obj.select,
                downElClass = "sweet-gird-paging-select-down",
                selectEl = $("<div>").addClass(obj.selectElClass),
                aEl = $("<a>"),
                emEl = $("<em>"),
                downEl = $("<div>"),
                pageRowDropDown,
                params = {};
            pageRowDropDown = me._createDropDown(select);
            emEl.appendTo(aEl);
            downEl.addClass(downElClass).appendTo(aEl);
            aEl.addClass(obj.aElClass)
                .bind("click", {
                "attachEl": selectEl,
                "dropDown": pageRowDropDown,
                "type": obj.type
            }, me._onSelectClick)
                .appendTo(selectEl);
            pageRowDropDown.addClass(obj.downElClass).appendTo(document.body);
            // 绑定单击事件
            params = {
                "me": me,
                "obj": obj,
                "emEl": emEl,
                "pageRowDropDown": pageRowDropDown
            };
            pageRowDropDown.find("li").bind("click", params,
            me._onPageListClick);
            // 设定每页显示记录默认值
            pageRowDropDown.find("li").each(function() {
                var value = $.string.toNumber($(this).val());
                if (size === value) {
                    me._onPageListClick({
                        "data": params
                    }, $(this));
                }
            });

            return {
                "selectEl": selectEl,
                "dropDownEl": pageRowDropDown
            };
        },
        /**
         * @private
         * @description 响应每页显示条数点击事件
         * @param {Object} e 事件对象或参数
         * @param {Object} self 点击对象本身，可选
         */
        _onPageListClick: function(e, self) {
            var me = e.data.me,
                obj = e.data.obj,
                emEl = e.data.emEl,
                pageRowDropDown = e.data.pageRowDropDown,
                value,
                tempHtml;
            self = self || $(this);
            value = $.string.toNumber(self.val());
            // 每页记录数下拉框
            if (gridPagingComboboxType[0] === obj.type) {
                if (me.pageRowsChoosedLiEl) {
                    me.pageRowsChoosedLiEl.removeClass(pageRowChoosedClass);
                }
                emEl.text(obj.text.replace("{0}", value));
                me.pageRowsChoosedLiEl = self;
            } else if (gridPagingComboboxType[1] === obj.type) {
                if (me.pageChoosedLiEl) {
                    me.pageChoosedLiEl.removeClass(pageRowChoosedClass);
                }
                tempHtml = self.html();
                emEl.text(obj.text.replace("{0}", value)
                    .replace("{1}", tempHtml.substr(tempHtml.indexOf("/") + 1, tempHtml.length)));
                me.pageChoosedLiEl = self;
            } else {
                me._error("Unsupported combobox type. Not in [" + gridPagingComboboxType[0] + ", " + gridPagingComboboxType[1] + "].");
                return;
            }
            self.addClass(pageRowChoosedClass);
            pageRowDropDown.hide();
            // 第一次初始化表格时，不触发
            if (!me.initial) {
                me._triggerHandler(e, eventNamePageClick, $.objClone(me.page));
                me.initial = false;
            }
        },
        /**
         * @description 处理每页记录数下拉框单击事件
         * @private
         * @param {Object} event 每页记录数下拉框事件
         */
        _onSelectClick: function(event) {
            if ($.isVisiable(event.data.dropDown)) {
                return;
            }
            var attachEl = event.data.attachEl,
                dropDown = event.data.dropDown,
                type = event.data.type,
                zIndex = $.getMaxZIndex($.string.toNumber(dropDown.css("z-index")));
            if (gridPagingComboboxType[0] === type) {
                dropDown.data("rowFlag", true);
            } else if (gridPagingComboboxType[1] === type) {
                dropDown.data("pageFlag", true);
            }
            // 计算z-index值，避免覆盖
            dropDown.css($.getFloatOffset(attachEl, dropDown, null)).css("z-index", zIndex).show();
        },
        /**
         * @description 创建下拉列表
         * @private
         * @param {Array} data 列表参数
         */
        _createDropDown: function(data) {
            var me = this,
                dropDownEl = $("<div>"),
                ulEl = $("<ul>");
            data = data || [20, 50, 100];
            for (var i = 0, temp, tempIndex; i < data.length; i++) {
                temp = data[i].toString();
                tempIndex = temp.indexOf("/");
                $("<li>").val(-1 === tempIndex ? temp : temp.substr(0, tempIndex)).text(temp).appendTo(ulEl);
            }
            ulEl.appendTo(dropDownEl);
            dropDownEl.addClass(gridPagingDropDownElClass + " " + me.floatBgClass);
            return dropDownEl;
        },
        /**
         * @description 创建分页栏显示文本
         * @private
         */
        _createPagingBarTotalText: function() {
            var me = this,
                totalTextElClass = "sweet-grid-paging-totaltext",
                totalTextEl = me.totalTextEl = $("<span>");
            totalTextEl.addClass(totalTextElClass)
                .text(i18n.text.replace("{0}", me.options.data.page.total)).appendTo(me.pagingInnerEl);
        },
        /**
         * @description 刷新分页栏显示文本总条数信息
         * @private
         * @param {Number/String} total 总记录数
         */
        _refreshPagingBarTotalText: function(total) {
            var me = this;
            me.totalTextEl.text(i18n.text.replace("{0}", total));
        },
        /**
         * @description 创建分页栏按钮
         * @private
         * @param {String} picClass 图片样式，用于控制按钮图片
         * @param {String} text 按钮显示文本
         * @param {String} textPos 文本位置，居左或居右显示
         * @param {String} title 提示
         * @return {Object} 返回按钮对象
         */
        _createPagingBarButton: function(picClass, text, textPos, title) {
            var buttonElClass = "sweet-gird-paging-button",
                buttonElTextClass = "sweet-grid-paging-button-text",
                buttonEl = $("<a>"),
                picEl = $("<div>"),
                emEl = $("<em>");
            picEl.addClass(picClass).appendTo(buttonEl);
            if ($.isNotNull(text)) {
                if (gridPagingTextPos[0] === textPos) {
                    emEl.html(text).insertAfter(picEl);
                    buttonEl.addClass(buttonElTextClass);
                } else if (gridPagingTextPos[1] === textPos) {
                    emEl.html(text).insertBefore(picEl);
                    buttonEl.addClass(buttonElTextClass);
                } else {
                    $.log("Nothing we can do. Not in [" + gridPagingTextPos[0] + ", " + gridPagingTextPos[1] +
                        "]. value=" + textPos);
                }
            }
            if ($.isNotNull(title)) {
                buttonEl.attr("title", title);
            }
            buttonEl.addClass(buttonElClass);
            return buttonEl;
        },
        /**
         * @description 创建翻页栏翻页条
         * @private
         */
        _createPagingBarNumItem: function() {
            var me = this,
                minNumBtn = gridPagingDefaultNum + 2,
                numPrevMoreEl = $("<span>").text("...").hide(),
                numNextMoreEl = $("<span>").text("..."),
                numItemEl = me.numItemEl = $("<div>"),
                numEl,
                numEls = [],
                numMoreEls = [],
                totalPage = me.page.totalPage,
                currentPage = me.page.currentPage,
                beginIndex = 1,
                tempI;
            // 如果总页数小于默认显示按钮个数，按钮全部呈现
            if (totalPage <= minNumBtn) {
                for (var m = 0; m < totalPage; m++) {
                    tempI = m + 1;
                    numEl = $("<a>")
                        .addClass(gridPagingANumClass)
                        .val(tempI)
                        .text(tempI)
                        .appendTo(numItemEl);
                    numEls[m] = numEl;
                }
            } else {
                // 计算按钮开始值
                if (1 === totalPage || totalPage === currentPage) {
                    beginIndex = (1 === currentPage ? currentPage + 1 : currentPage - gridPagingDefaultNum);
                } else if (currentPage - 1 < gridPagingDefaultNum) {
                    beginIndex = 2;
                } else if (totalPage - currentPage < gridPagingDefaultNum) {
                    beginIndex = totalPage - gridPagingDefaultNum;
                } else {
                    // 如果点击跳转按钮
                    if (me.goClick) {
                        beginIndex = currentPage;
                        me.goClick = false;
                    }
                    // 如果点击第一个浮动按钮
                    else if ($.string.toNumber(me.numEls[1].val()) === currentPage || $.string.toNumber(me.numEls[gridPagingDefaultNum].val()) === currentPage) {
                        beginIndex = currentPage - 2;
                    } else {
                        beginIndex = $.string.toNumber(me.numEls[1].val());
                    }
                }

                for (var i = 0; i < minNumBtn; i++) {
                    tempI = i + beginIndex - 1;
                    numEl = $("<a>").addClass(gridPagingANumClass)
                        .val(tempI)
                        .text(tempI)
                        .appendTo(numItemEl);
                    if (0 === i) {
                        numEl.val(1).text(1);
                        numPrevMoreEl.insertAfter(numEl);
                        numMoreEls[0] = numPrevMoreEl;
                    } else if (gridPagingDefaultNum + 1 === i) {
                        numEl.val(totalPage).text(totalPage);
                        numNextMoreEl.insertBefore(numEl);
                        numMoreEls[1] = numNextMoreEl;
                    }
                    numEls[i] = numEl;
                }
            }

            // 处理分页按钮默认选中
            for (var n = 0; n < numEls.length; n++) {
                if (me.page.currentPage === $.string.toNumber(numEls[n].val())) {
                    numEls[n].addClass(gridPagingCurrentElClass);
                    me.pageingcurrentNumEl = numEls[n];
                }
            }

            // 刷新省略号
            if (0 < numMoreEls.length) {
                // 第一个省略号
                if (1 === $.string.toNumber(numEls[1].val()) - 1) {
                    numMoreEls[0].hide();
                } else {
                    numMoreEls[0].show();
                }
                // 最后一个省略号
                if (totalPage === $.string.toNumber(numEls[gridPagingDefaultNum].val()) + 1) {
                    numMoreEls[1].hide();
                } else {
                    numMoreEls[1].show();
                }
            }

            numItemEl.bind("click", function(event) {
                me._onPagingBarNumClick(event);
            })
                .appendTo(me.pagingInnerEl);
            me.numEls = numEls;
            me.numMoreEls = numMoreEls;
        },
        /**
         * @description 分页栏数字按钮点击事件
         * @private
         * @param {Object} event 事件
         * @param {Boolean} force 是否强制加载，true表示强制加载
         */
        _onPagingBarNumClick: function(event, force) {
            var me = this,
                self;
            if (force) {
                me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
            } else {
                self = $(event.target);
                if (self.hasClass(gridPagingANumClass) || self.hasClass(pageRowChoosedClass)) {
                    me.page.currentPage = $.string.toNumber(self.val());
                    me._triggerHandler(event, eventNamePageClick, $.objClone(me.page));
                }
            }
        },
        /**
         * @private
         * @description 触发handler注册事件
         * @param {Object} event 
         * @param {eventName} eventName 事件名
         * @param {Object} data 数据
         */
        _triggerHandler: function(event, eventName, data) {
            var me = this;
            var returnData;
            // 如果是pageClick事件并且注册store，触发store
            if (eventNamePageClick === eventName && me.options.store) {
                me.options.store._setDataPage(me.getPageInfo());
                me.options.store.loadRecords(me.getAllConditions());
            }
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eventName === handlerName) {
                    me._info(eventName + " event occured!");
                    returnData = func.call(null, event, data);
                }
            });

            return returnData ? returnData : data;
        },
        /**
         * @description 获取所有条件
         * @return {Object} 返回所有条件
         */
        getAllConditions: function() {
            var me = this,
                temp = {},
                page = me.getPageInfo(),
                filters = me._getFilters(),
                orders = JSON.parse(JSON.stringify(me._getOrders())),
                i = 0,
                j = 0,
                orderTemp, o,
                columns = me.headerColumns,
                len = columns.length;
            if (page && undefined !== page.start && undefined !== page.limit) {
                temp.start = page.start;
                temp.limit = page.limit;
            }
            if (filters.filter) {
                temp.filter = filters.filter;
            }
            if (orders.order) {
                //关于夏令时的排序修改成utc排序
                for (i = 0; i < orders.order.length; i++) {
                    orderTemp = orders.order[i];
                    for (j = 0; j < len; j++) {
                        if (columns[j].name === orderTemp.name && orderTemp.dataType === "date" && !orderTemp.hidden && !orderTemp.hiddenForever && $.isNotNull(columns[j].useDSTutcOrder)) {
                            //取夏令时的UTC时间进行替换当前时间的列进行排序，并使用number进行排序
                            o = JSON.parse(JSON.stringify(orderTemp));
                            orderTemp.name = columns[j].useDSTutcOrder;
                            orderTemp.dataType = "number";
                            //将没有改变的信息也放在data中
                            orderTemp.data = o;
                            break;
                        }
                    }
                }
                temp.order = orders.order;
            }

            return temp;
        },
        /**
         * @description 获取分页信息
         * @return {Object} 返回{"start": , "limit": }
         */
        getPageInfo: function() {
            var me = this;
            if (!me.page) {
                return {};
            }
            return {
                "start": (me.page.currentPage - 1) * me.page.size,
                "limit": me.page.size,
                "currentPage": me.page.currentPage,
                "size": me.page.size
            };
        },
        /**
         * @private
         * @description 获取过滤条件
         */
        _getFilters: function() {
            var me = this,
                result = [];
            $.each(me.filters, function(key, obj) {
                result.push({
                    "name": key,
                    "type": obj.type,
                    "value": obj.value,
                    "text": obj.text
                });
            });
            return {
                "filter": result
            };
        },
        /**
         * @private
         * @description 获取排序
         */
        _getOrders: function() {
            var me = this;
            return {
                "order": me.orders
            };
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.gridEl.appendTo(me.renderEl);
            me._gridMenuEl = $("<div id=\"" + me._gridMenuId + "\">").appendTo(document.body);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 销毁表格组件
         */
        _destroyWidget: function() {
            var me = this;
            me.__destroyTableActionBar();
            me.__destroyTableHeader();
            me.__destroyTableContent();
            me.__destroyTablePagingBar();
            if (me.gridEl) {
                me.gridEl.remove();
                me.gridEl = null;
            }
            if (me._gridMenuEl) {
                me._gridMenuEl.remove();
                me._gridMenuEl = null;
            }
        },
        /**
         * @private
         * @description 销毁表格操作栏
         */
        __destroyTableActionBar: function() {
            var me = this;
            //销毁列选择中的list对象和dom
            if (me.selectColEl) {
                me.selectColEl.remove();
                me.selectColEl = null;
            }
            if (me.selectColList && $.isFunction(me.selectColList.destroy)) {
                me.selectColList.destroy();
                me.selectColList = null;
            }
            //销毁多列排序中的sweet对象
            if (me._multiSortWin && $.isFunction(me._multiSortWin.destroy)) {
                me._multiSortWin.destroy();
                me._multiSortWin = null;
                if (me.firstCol) {
                    me.firstCol = null;
                }
                if (me.secondCol) {
                    me.secondCol = null;
                }
                if (me.thirdCol) {
                    me.thirdCol = null;
                }
            }
            //销毁二次统计中的对象
            if (me.secondaryPanel && $.isFunction(me.secondaryPanel.destroy)) {
                me.secondaryPanel.destroy();
                me.secondaryPanel = null;
            }
            if (me.actionBarEl) {
                me.actionBarEl.remove();
                me.actionBarEl = null;
            }
            if (me.exportEl) {
                me.exportEl.remove();
                me.exportEl = null;
            }
        },
        /**
         * @private
         * @description 销毁表头
         */
        __destroyTableHeader: function() {
            var me = this,
                gps = me.filterPanels,
                len = gps ? gps.length : 0;
            if (me.headerEl) {
                me.headerEl.remove();
                me.headerEl = null;
            }
            if (me.resizeEl) {
                me.resizeEl.remove();
                me.resizeEl = null;
            }
            for (var i = 0; i < len; i++) {
                me.filterPanels[i].remove();
            }
            me.filterPanels = null;
        },
        /**
         * @private
         * @description 销毁表格内容
         */
        __destroyTableContent: function() {
            var me = this;
            if (me.contentEl) {
                me.contentEl.remove();
                me.contentEl = null;
            }
        },
        /**
         * @private
         * @description 销毁分页栏
         */
        __destroyTablePagingBar: function() {
            var me = this;
            if (me.pagingRowDropDownEl) {
                me.pagingRowDropDownEl.find("li").unbind();
                me.pagingRowDropDownEl.remove();
                me.pagingRowDropDownEl = null;
            }
            if (me.pagingPageDropDownEl) {
                me.pagingPageDropDownEl.find("li").unbind();
                me.pagingPageDropDownEl.remove();
                me.pagingPageDropDownEl = null;
            }
            if (me.pagingEl) {
                me.pagingEl.remove();
                me.pagingEl = null;
            }
        }
    });

    /**
     * @description 表格
     * @name Sweet.grid.BigGrid
     * @class 
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建表格：
     * var sweetGrid = new Sweet.grid.BigGrid({
     * });
     */
    Sweet.grid.BigGrid = $.sweet.widgetBigGrid;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * menu菜单组件
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    /**menu菜单的样式名称*/
    var mClass = "sweet-widget-menu",
        mAlphaClass = "sweet-widget-menu-alpha",
        mColorClass = "sweet-widget-menu-color",
        mhiddenClass = "sweet-widget-menu-hidden",
        mListClass = "sweet-widget-menu-list",
        mListItemClass = "sweet-widget-menu-list-item",
        mItemClass = "sweet-widget-menu-item",
        mItemArrowClass = "sweet-widget-menu-item-arrow",
        mItemIconClass = "sweet-widget-menu-item-icon",
        mItemTextClass = "sweet-widget-menu-item-text",
        mItemDisabledClass = "sweet-widget-menu-item-disabled",
        mItemActiveClass = "sweet-widget-menu-item-active",
        mItemMouseoverDisableClass = "sweet-widget-menu-item-mouseover-disabled",
        /**菜单显示的距离上下左右的最小距离*/
        defaultDistance = 10,
        menuDefaultImage = Sweet.libPath + "themes/default/core/images/menu/s.gif";

    $.widget("sweet.widgetMenu", $.sweet.widget, /** @lends Sweet.menu.Menu.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-menu]",
        type: "menu",
        eventNames: /** @lends Sweet.menu.Menu.prototype*/
        {
            /**
             * @event
             * @description 菜单选项选择,参数为两个(event, data)
             */
            itemClick: "菜单选项选择事件"
        },
        // menu类输入组件公共配置参数
        options: /** @lends Sweet.menu.Menu.prototype*/
        {
            /**
             * @description 菜单项内容
             * @type Array
             * @default []
             */
            items: [],
            /**
             * @description 菜单的左上角的x坐标
             * @type number
             * @default 0
             */
            X: 0,
            /**
             * @description 菜单的左上角的y坐标
             * @type number
             * @default 0
             */
            Y: 0,
            /**
             * @description 菜单的每一项的高度
             * @type number
             * @default 26
             */
            itemHeight: 26,
            /**
             * @description 菜单的宽度
             * @type number
             * @default 150
             */
            itemWidth: 150,
            /**
             * @description 是否透明，true：透明 false：不透明
             * @param {Boolean}
             * @default false
             */
            transparent: false
        },
        /**
         * @public
         * @description 设置menu中的含禁用项的菜单数据
         * @param {Array} items 具体的数据
         */
        setDisabled: function(items) {
            if ($.isNull(items) || items.length <= 0) {
                return;
            }
            var me = this,
                id = me.options.renderTo;
            if (items instanceof Array) {
                for (var i = 0; i < items.length; i++) {
                    $("#" + id).find("#" + items[i].value).addClass(mItemDisabledClass);
                }
            }
        },
        /**
         * @public
         * @description 为menu重新设置数据项
         * @param {Array} data 具体的数据
         */
        setData: function(data) {
            if ($.isNull(data) || data.length <= 0) {
                return;
            }

            var me = this;
            if (me.menuEl) {
                me.menuEl.remove();
            }
            me.options.items = data;
            me._createSweetWidget();
            me.rendered = false;
            me._render(me.options.renderTo);
            me._doLayout();
        },
        /**
         * @private
         * @description 创建menu组件
         */
        _createSweetWidget: function() {
            var me = this,
                options = me.options,
                /**menu显示时的绝对坐标*/
                menuX = Number(options.X),
                menuY = Number(options.Y),
                pixSuff = "px",
                itemCount = options.items.length,
                divHeight = itemCount * options.itemHeight + 2,
                menuId = me.menuId = options.id,
                menuEl = me.menuEl = $("<div>").attr("id", menuId),
                bcWidth = document.body.clientWidth,
                bcHeight = document.body.clientHeight,
                scrollTop = $(document).scrollTop(),
                menuW = options.width;
            //问题单：DTS2013122504067
            /**修正menu的坐标位置*/

            /**menu div*/
            menuEl.addClass(mClass);
            if (options.transparent) {
                menuEl.addClass(mAlphaClass);
            } else {
                menuEl.addClass(mColorClass);
            }
            /**创建menu*/
            me._createMenuItems();
        },
        /**
         * @private
         * @description 创建具体的每一个menu item
         */
        _createMenuItems: function() {
            var me = this,
                tempItem,
                options = me.options,
                items = options.items,
                itemCount = items.length,
                itemHeight = options.itemHeight,
                ulHeight = itemCount * itemHeight + 2,
                /**创建<ul></ul>*/
                menuUl = me.menuUl = $("<ul>").addClass(mListClass)
                    .attr("id", "sweet-menu-ul-" + options.id)
                    .css({
                    "height": ulHeight
                }),
                hasChild, tempItemValue, disabled, menuLi, menuA, icon, menuImage, menuText, tempId;

            for (var i = 0; i < itemCount; i++) {
                tempItem = items[i];
                hasChild = false;
                tempItemValue = tempItem.value;
                tempId = options.id + "-" + i;
                /**判断此item menu是否有子菜单*/
                if (tempItem.children && tempItem.children.length > 0) {
                    hasChild = true;
                }

                //判断此menu项是否是禁用状态
                disabled = false;
                if (tempItem.disabled || tempItem.disabled === "true") {
                    disabled = true;
                }

                /**如果value值为空或没有，设置默认值*/
                if (!tempItemValue || tempItemValue === "") {
                    tempItemValue = "sweet-menu-item" + (i + 1);
                }

                /**创建<li></li>*/
                menuLi = $("<li>").addClass(mListItemClass)
                    .attr("id", tempItemValue)
                    .css({
                    "height": itemHeight
                })
                    .bind("click", {
                    "me": me,
                    "hasChild": hasChild,
                    "disabled": disabled
                }, me._itemClick)
                    .bind("mouseover", {
                    "id": tempItemValue,
                    "me": me,
                    "index": (i + 1),
                    "disabled": disabled,
                    "children": items[i].children
                }, me._mouseOver)
                    .bind("mouseout", {
                    "id": tempItemValue,
                    "hasChild": hasChild,
                    "me": me
                }, me._mouseOut);
                if (options.itemWidth > 150) {
                    menuLi.width(options.itemWidth);
                }
                /**创建<a></a>*/
                menuA = $("<a>").attr({
                    "id": "sweet-menu-a-" + tempId,
                    "href": "#"
                })
                    .addClass(mItemClass);
                /**如果此menu还有子节点*/
                if (hasChild) {
                    menuA.addClass(mItemArrowClass); // 添加子节点样式
                }
                if (disabled) {
                    menuLi.addClass(mItemDisabledClass);
                }

                menuA.appendTo(menuLi);

                /**创建menu icon, 如果没有设置icon,使用默认的icon*/
                icon = items[i].icon && items[i].icon !== "" ? items[i].icon : menuDefaultImage;
                menuImage = $("<img>").attr({
                    "id": "sweet-menu-img-" + tempId,
                    "src": icon
                })
                    .addClass(mItemIconClass).appendTo(menuA);

                /**创建<span></span>*/
                menuText = $("<span>").attr({
                    "id": "sweet-menu-text-" + tempId
                })
                    .addClass(mItemTextClass)
                    .text(items[i].text)
                    .appendTo(menuA);

                menuUl.append(menuLi);
            }

            menuUl.appendTo(me.menuEl);
        },
        /**
         * @private
         * @description 鼠标悬浮在菜单事件
         * @param {Object}evt:当前鼠标所指菜单对象
         */
        _mouseOver: function(evt) {
            // 当前item的id
            var tempData = evt.data,
                menuLiId = tempData.id,
                itemInfo = tempData.me.options.items,
                // 当前menu对象
                parentMenu = tempData.me,
                itemHeight = tempData.me.options.itemHeight,
                // 当前item的索引
                index = tempData.index,
                disabled = tempData.disabled,
                // menu的宽度
                liWidth = parentMenu.menuEl.width() - 1,
                // 子菜单相对于主菜单的
                overHeight = (index - 1) * itemHeight,
                tempMenu = tempData.me.subMenu,
                temp, child,
                bcWidth = document.body.clientWidth,
                bcHeight = document.body.clientHeight;

            while (tempMenu) {
                tempMenu._destroyWidget();
                tempMenu = tempMenu.subMenu;
            }

            /**移除此item所在的menu上的activeclass*/
            for (var i = 0; i < itemInfo.length; i++) {
                temp = itemInfo[i].value;
                if (!temp || temp === "") {
                    temp = "sweet-menu-item" + (i + 1);
                }

                $("#" + temp).removeClass(mItemActiveClass + " " + mItemMouseoverDisableClass);
            }

            if (disabled) {
                $("#" + menuLiId).addClass(mItemActiveClass).addClass(mItemMouseoverDisableClass);
            } else {
                $("#" + menuLiId).addClass(mItemActiveClass);
            }

            /**如果有子菜单，鼠标移动上来时，应该显示出子菜单来*/
            child = tempData.children;
            if (child && child.length > 0 && !disabled) {
                /**计算menu显示的xy值*/
                var pMenuOpt = parentMenu.options,
                    menux = 0,
                    menuy = 0;
                menux = pMenuOpt.X + liWidth;
                menuy = pMenuOpt.Y + overHeight;
                tempData.me.subMenu = new Sweet.menu.Menu({
                    X: menux,
                    Y: menuy,
                    renderTo: pMenuOpt.renderTo,
                    items: child,
                    transparent: pMenuOpt.transparent,
                    itemClick: function(ievent, idata) {
                        parentMenu._trigger("itemClick", ievent, idata);
                        parentMenu._destroyWidget();
                    }
                });
            }
        },
        /**
         * @private
         * @description 鼠标移出菜单事件
         * @param {Object}evt:鼠标移出的菜单对象
         */
        _mouseOut: function(evt) {
            if (!evt.data.hasChild) {
                $("#" + evt.data.id).removeClass(mItemActiveClass);
            }
        },
        /**
         * @private
         * @description menu组件的菜单选择事件
         * @param {object} evt item选择事件
         */
        _itemClick: function(evt) {
            var itemData = {}, data = evt.data,
                me = data.me,
                hasChild = data.hasChild,
                options = me.options,
                func = data.func,
                disabled = data.disabled;
            itemData.text = evt.currentTarget.textContent;
            itemData.value = evt.currentTarget.id;

            if (disabled || hasChild) {
                //置灰或者有子菜单的不关闭菜单
                evt.stopPropagation();
                return;
            }

            for (var i = 0; i < options.items.length; i++) {
                if (itemData.value === options.items[i].value) {
                    itemData.data = options.items[i].data;
                    break;
                }
            }

            /**如果有子菜单，则不触发事件*/
            if (!hasChild) {
                if (func) {
                    func(evt, itemData);
                } else {
                    me._trigger("itemClick", evt, itemData);
                }
            }

            if (me.subMenu) {
                me.subMenu._destroyWidget();
            }
            me._destroyWidget();
            return false;
        },
        /**
         * @private
         * @description 点击页面时关闭menu
         */
        _closeFloatPanel: function() {
            var me = this;
            me._destroyWidget();
        },
        /**
         * @private
         * @description 删除menu
         */
        _destroyWidget: function() {
            if (this.menuEl) {
                this.menuEl.empty().remove();
            }
        },
        /**
         * @private
         * @description 去激活注册事件
         * @param {String} eName 去除的事件的名称，不传或为空时，去除全部的注册事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};
            //去除所有的绑定的事件
            if (!eName || eName === "") {
                $.each(me.handlers, function(eventName, func) {
                    $("#" + me.options.renderTo + " ." + mListItemClass).unbind(eventName);
                });
            } else {
                $.each(me.handlers, function(eventName, func) {
                    //只去除特定的绑定事件
                    if (eName === eventName) {
                        me.chartElement.removeListener(me.chartElement, eventName, func);
                    }
                });
            }
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                $("#" + me.options.renderTo + " ." + mListItemClass).bind(eventName, {
                    "func": func
                }, function(evt) {
                    me._itemClick(evt);
                });
            });
        },
        /**
         * @private
         * @description 渲染menu组件
         * @param {string} id 渲染的id
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }

            me.menuEl.appendTo(me.renderEl);
            me.rendered = true;
            me._doLayout();
            return true;
        },
        _getWidth: function() {
            return this.menuEl.width();
        },
        _getHeight: function() {
            return this.menuEl.height();
        },
        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var renderTo = this.options.renderTo;
            if (!renderTo || renderTo === "") {
                return;
            }
            var me = this;
            var mx = me.options.X,
                pixSuff = "px",
                options = me.options,
                my = me.options.Y,
                itemCount = options.items.length,
                tPadding = 10,
                divHeight = itemCount * options.itemHeight + 2 + tPadding,
                bcWidth = window.document.body.scrollWidth,
                bcHeight = window.document.body.scrollHeight,
                scrollTop = $(document).scrollTop(),
                documentW = $(document).width(),
                menuW = me.menuEl.width(),
                _tMenuW = me.menuEl.outerWidth(),
                menuH = me.menuEl.outerHeight();
            if (documentW > bcWidth) {
                bcWidth = documentW;
            }
            if (_tMenuW > menuW) {
                menuW = _tMenuW;
            }
            /**修正menu的坐标位置*/
            if (mx + menuW >= bcWidth) {
                var prev = $("#" + options.id).prev();
                if (prev.length > 0) {
                    var first = $("#" + renderTo + " > div").eq(0);
                    var prevx = parseInt(prev.css("left"));
                    var firstx = parseInt(first.css("left"));
                    if (prevx < firstx) {
                        mx = prevx - menuW;
                    } else if (prevx === firstx) {
                        mx = firstx - menuW;
                    }
                } else {
                    mx = bcWidth - menuW - defaultDistance;
                }
            }
            if (menuH > divHeight) {
                divHeight = menuH;
            }
            if (my - scrollTop + divHeight > bcHeight) {
                //往上再移10像素
                my = bcHeight - divHeight <= 0 ? scrollTop : bcHeight - divHeight + scrollTop - tPadding;
                if (my < 0) {
                    my = 0;
                }
            }
            me.menuEl.css({
                "left": mx + pixSuff,
                "top": my + pixSuff
            });
        }
    });

    /**
     * 菜单
     * @name Sweet.menu.Menu
     * @class
     * @extends Sweet.widget
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * <pre>
     *  menu = new Sweet.menu.Menu({
     *       renderTo : "sweet-menu",
     *       X: 60,
     *       Y: 40,
     *       itemClick : function(evt, data){
     *           alert(data.text);
     *       },
     *       items: [
     *           {"value":1, "text": "ONE", "icon": "可选", disabled : true},
     *           {"value":2, "text": "TWO", "icon": "可选"},
     *           {"value":3, "text": "Three", "icon": "可选"},
     *           {"value":7, "text": "Seven", "icon": "可选", "children":[{"text":"test1","value":"test1","children":[
     *           {"text":"test3","value":"test3"},{"text":"test4","value":"test5"}]},
     *           {"text":"test2","value":"test2"}]},
     *           {"value":5, "text": "Five", "icon": "可选"}
     *   ]});
     * </pre>
     */
    Sweet.menu.Menu = $.sweet.widgetMenu;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * char组件基类
 * 2012/11/28
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * </pre>
 * @version 1.0
 */

/**
 * char组件
 * @name Sweet.chart
 * @class
 * @extends Sweet.widget
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * </pre>
 */
(function($, undefined) {
    $.widget("sweet.widgetChart", $.sweet.widget, /** @lends Sweet.chart.prototype*/ {
        version: "1.0",
        /**
         * @private
         * 组件名称
         */
        sweetWidgetName: "[widget-chart]:",
        /**
         * @private
         * 图形最大支持分组个数
         */
        maxPacket: 10,
        /**
         * 颜色序列
         */
        colors: {
            colors1: ["#97A9B7"],
            colors2: ["#97a9b6", "#3281cb"],
            colors: ["#448bce", "#60a2e0", "#76b6f1", "#378838", "#4bb54d",
                "#7ece56", "#c26e37", "#db8349", "#e6a05c", "#d5dae0"] //["#369cd8", "#b7e042", "#cf7a37", "#8e4beb", "#5adbd3","#ffb940", "#98458b", "#ff5ce5", "#69db08", "#cf4737", "#a5a5a5"]
        },
        options: /** @lends Sweet.chart.prototype*/
        {
            /**
             * 图的数据
             * @type Array
             * @default []
             */
            data: [],
            /**
             * 组件数据key值, 约定第一个是文本key, 之后全部为数据key
             * @type Array
             * @default []
             */
            dataKeys: [],
            /**
             * 图形组件的store
             * @type object
             * @default null
             */
            store: null
        },
        labelColor: Sweet.constants.chart.titleCfg.labelColor,
        labelAlpha: Sweet.constants.chart.titleCfg.labelAlpha,
        fontSizeLarger: Sweet.constants.chart.fontSize.larger,
        fontSizeNormal: Sweet.constants.chart.fontSize.normal,
        textColor: Sweet.constants.chart.textColor,
        chartFontFamily: Sweet.constants.chart.fontFamily,
        /**
         * @description 返回组件对象
         */
        widget: function() {
            return this.chartElement;
        },
        /**
         * @description 设置组件数据
         * @param {Object} dataInfo  数据对象 {chartTitle:"", data: [{},{}...], dataKeys: []}
         * @param {Boolean} isClear 设置数据时是否destroy图表
         * @return {boolean} 判断dataKeys的值，如果不合要求，返回false
         */
        setData: function(dataInfo, isClear) {
            var me = this,
                //对象个数
                index = 0,
                //表示是否有除数据外的其它属性改变
                isPropertyChanged = false;
            if ($.isNull(dataInfo)) {
                $.log("set data is null");
                return;
            }
            // 校验
            if ($.isFunction(me._validate) && !me._validate(dataInfo)) {
                return;
            }

            // 更新options中的配置数据
            if ($.isArray(dataInfo)) {
                me.options.data = dataInfo;
                //表示只更新数据
                isPropertyChanged = true;
            } else {
                //Begin----------add for DTS2014031407008
                //判断是否只更新数据，只有一个对象属性，且为data属性; 或data和dataKey且dataKey较上次一样
                if (me._isUpdateData(dataInfo)) {
                    isPropertyChanged = true;
                }
                //end----------add for DTS2014031407008
            }

            //没有数据时，设置自己格式的数据
            if ($.isNull(me.options.data)) {
                me.options.data = [];
            }
            if (me.options.data.length === 0 && isPropertyChanged && me._setDefaultData) {
                me._setDefaultData(); //各自的子类实现
            } else {
                if ($.isFunction(me._setChangeProperty) && isClear) {
                    me._setChangeProperty(isClear);
                    return;
                }
                //除了更新数据，还要更新其它属性时，调用_setChangeProperty
                if (!isPropertyChanged) {
                    //当图的属性发生改变时，调用各子类的方法更新属性值
                    if ($.isFunction(me._setChangeProperty)) {
                        me._setChangeProperty(); //各子类实现
                    }
                } else {
                    //仅仅只更新数据
                    if ($.isFunction(me._updateData)) {
                        me._updateData(); //各子类实现
                    }
                }
            }
        },
        _getCanvasObject: function() {
            var me = this,
                id = me.options.id;
            //must rendered
            if (!me.rendered) {
                return null;
            }
            var h = me.chartEl.height(),
                w = me.chartEl.width();
            //
            var canvs = $("<canvas>").attr({
                width: w,
                height: h
            });
            //first find all svg or canvas in component id
            var div = me.chartEl.get(0),
                svgsPos = [],
                th = 0,
                tw = 0,
                x = 0,
                y = 0,
                svgs = div.getElementsByTagName('svg');
            var remember = {
                x: 0,
                y: 0
            };
            if (!svgs || svgs.length <= 0) {
                var canvas = div.getElementsByTagName('canvas');
                var d = null;
                if (canvas && canvas.length > 0) {
                    d = canvas[0];
                }
                return d;
            }
            //对所有的svg的位置进行解析，并计算出最终图占用的宽度和高度
            for (var i = 0; i < svgs.length; i++) {
                var temp = svgs[i],
                    parent = temp.parentNode,
                    svgX = Number(parent.style.left.slice(0, -2)),
                    svgY = Number(parent.style.top.slice(0, -2));
                if (parent.style.position == 'relative') {
                    x = svgX ? svgX : x;
                    y = svgY ? svgY : y;
                } else {
                    x = svgX + remember.x;
                    y = svgY + remember.y;
                }
                svgsPos.push({
                    svg: $.dealAttrSVG(temp.cloneNode(true)),
                    offset: {
                        x: x,
                        y: y
                    }
                });
                if (svgY && svgX) {} else {
                    y += svgY ? 0 : parent.offsetHeight;
                    th += parent.offsetHeight;
                }
            }
            canvs.attr({
                width: w,
                height: th > h ? th : h
            });
            var fcanvas = canvs.get(0);
            for (var i = 0; i < svgsPos.length; i++) {
                var svg = svgsPos[i].svg,
                    offset = svgsPos[i].offset,
                    str = new XMLSerializer().serializeToString(svg);
                canvg(fcanvas, str, {
                    offsetX: offset.x,
                    offsetY: offset.y,
                    ignoreMouse: true,
                    ignoreAnimation: true,
                    ignoreDimensions: true,
                    ignoreClear: true
                });
            }
            return fcanvas;
        },
        /**
         * @private
         * @description 是否走更新数据操作
         * @param {Object} dataInfo  数据对象 {chartTitle:"", data: [{},{}...], dataKeys: []}
         * @return {boolean} 如果走更新则返回true,否则返回false
         */
        _isUpdateData: function(dataInfo) {
            var me = this,
                keyCount = 0,
                keys = {},
                KEYNAME_DATA = "data",
                KEYNAME_DATAKEYS = "dataKeys",
                oldDataKeys = me.options[KEYNAME_DATAKEYS];
            if (!dataInfo) {
                return false;
            }
            for (var key in dataInfo) {
                keyCount++;
                me.options[key] = dataInfo[key];
                keys[key] = key;
            }
            if (keyCount > 2) {
                return false;
            }
            if (keyCount <= 0) {
                return false;
            }
            if (1 == keyCount) {
                if (keys[KEYNAME_DATA]) {
                    return true;
                }
                if (keys[KEYNAME_DATAKEYS] && !me._isDataKeysChange(dataInfo[KEYNAME_DATAKEYS], oldDataKeys)) {
                    return true;
                }
            }
            if (2 == keyCount && keys[KEYNAME_DATA] && keys[KEYNAME_DATAKEYS]) {
                if (me._isDataKeysChange(dataInfo[KEYNAME_DATAKEYS], oldDataKeys)) {
                    return false;
                }
                return true;
            }
            return false;
        },
        /**
         * @private
         * @description 更新数据时判断前后dataKey是否有变化
         * @param {Array} newDataKeys  新的dataKey
         * @param {Array} oldDataKeys  旧的dataKey
         * @return {boolean} 如果前后dataKey有变化则返回true,否则返回false
         */
        _isDataKeysChange: function(newDataKeys, oldDataKeys) {
            var keyLength = 0,
                startIndex = 0,
                flag = false;
            try {
                if (newDataKeys.length == oldDataKeys.length) {
                    keyLength = newDataKeys.length;
                    for (var i = 0; i < keyLength; i++) {
                        if (startIndex == i) {
                            if (newDataKeys[i] != oldDataKeys[i]) {
                                flag = true;
                                break;
                            }
                        } else {
                            if (newDataKeys[i][0] != oldDataKeys[i][0]) {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if (flag) {
                        return true;
                    }
                    return false;
                }
                return true;
            } catch (e) {
                return true;
            }
        },
        /**
         * @private
         * @description 图的点击事件
         */
        _click: $.noop,
        /**
         * @private
         * @description 为组件注册事件, 子类实现
         */
        _addListener: $.noop,
        /**
         * @private
         * 删除注册监听事件，子类继承实现
         */
        _removeListener: $.noop,
        /**
         * @private
         * @description 数据校验
         * @param {Object} data 进行校验的数据集合
         */
        _validate: function(data) {
            if ($.isNull(data)) {
                this._error("Input parameter must not be empty!");
                return false;
            }

            // 图最多支持的分组,暂不限制

            if (!this.__validate()) {
                return false;
            }

            return true;
        },
        /**
         * @private
         * @description 供子类实现各自特有校验规则
         */
        __validate: function() {
            return true;
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            this.chartEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            this.chartEl.externalHeight(height);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        _getWidth: function() {
            return this.chartEl.externalWidth();
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        _getHeight: function() {
            return this.chartEl.externalHeight();
        },
        /**
         * @description 返回图组件最外层jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        _getWidgetEl: function(original) {
            return original ? this.chartEl[0] : this.chartEl;
        },
        /**
         * @private
         * @description 绘制饼图 
         */
        _createSweetWidget: function() {
            // 校验
            if (!this._validate(this.options.data)) {
                return;
            }

            var me = this,
                options = me.options;

            // 图的容器对象
            me.chartEl = $("<div>").width(options.width)
                .height(options.height)
                .attr("id", options.id)
                .addClass(options.widgetClass);

            //如果配置了store，设置store的setData事件，进行数据的更新
            if (!$.isNull(options.store)) {
                options.store.addListener({
                    "setData": me.setData,
                    "scope": this
                });
            }

            // not support flash chart any longer

            this._createJsChart();
        },
        /**
         * @private
         * @description 创建js版饼图
         */
        _createJsChart: $.noop,
        /**
         * @private
         * @description 渲染饼图到相应的到div
         * @param {String} id 目标元素ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.chartEl.appendTo(me.renderEl);
            me.options.renderTo = id;
            me._chartRender();
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 图形类子组件继承实现
         */
        _chartRender: $.noop,
        /**
         * @private
         * @description 组件宽度、高度发生变化后调用，进行页面重绘，子类继承实现。
         */
        _doLayout: $.noop,
        /**
         * @private
         * @description 关闭浮动窗口，子类继承实现。框架统一调用。
         */
        _closeFloatPanel: $.noop,
        /**
         * @private
         * @description 创建flash版饼图
         */
        _createFlashChart: $.noop,
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            if (this.chartEl) {
                this.chartEl.remove();
            }
        },
        /**
         * 根据序列总数，及序列索引，取得颜色值
         * @param {Number} count 总数据数
         * @param {Number} idx 数据索引
         * @param {Boolean} skip 是否跳跃选择
         * @returns {string}
         * @private
         */
        _getColor: function(count, idx, skip) {
            var colors = {};

            // 取得颜色序列
            if (count <= this.maxPacket) {
                colors = this.colors["colors" + (count <= 2 ? count : "")];
            } else {
                return;
            }

            // 从颜色序列中间隔取颜色
            if (idx > 0 && count > 2 && skip) {
                idx = Math.floor(colors.length / count) * idx;
            }

            return colors[idx];
        }
    });
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 示速器组件
 * 2013/2/18
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    'use strict';

    /* 函数最大行数限制修改为100 */
    /* jshint maxstatements:100 */

    // 常量
    var dataLabelColor = "#919191";
    var GOLD_RATIO = 0.86; // 宽高比
    var THICK_RATIO = 0.33; // 圆弧厚度占半径的比例
    var INDICATOR_COUNT = 10; // 数据步长标志个数

    // SpeedoMeter控件
    var Meter = function(options) {
        var textureObj;

        // Raphael的Paper对象
        var R = null;
        var or = null;
        var ctx = null;

        // 保存动态创建的Raphael对象
        var allSet = null;
        var pointer = null;
        var txtValue = null;
        var valueRange = null;
        var txtLabel = null;
        var selectedIcon = null;
        var hoverInfoDiv = null;

        var meterData = null;
        var oldValue = null;
        var holderId = null;
        var config = {};

        var listeners = {};

        /**
         * @private
         * @description 根据阀值把弧形分段
         * @return {Array} 根据阀值分开的弧形信息
         */
        function getParts() {
            if (meterData === null) {
                return null;
            }

            var parts = [];
            var partInfo = {};

            // fill colors, should be configurable
            var fillInfo = [
                "#81BC7A:67-#9CE18F:75-#63D04E:85-#3ABD21", // green
            "#AB9558:67-#F6DA8D:75-#F1C44C:85-#E0A51E", // yellow
            "#D25751:67-#E68B8B:75-#D64242:85-#B32424" // red
            ];
            if (config.flat) {
                fillInfo = [
                    "#51942B", // green
                "#f5c245", // yellow
                "#DA6263" // red
                ];
            }

            // fix exception data
            if (meterData.start === meterData.end) {
                meterData.end = meterData.start + 10;
            }
            if (meterData.start < meterData.end) {
                if (meterData.threshold1 && (meterData.threshold1 < meterData.start || meterData.threshold1 > meterData.end)) {
                    meterData.threshold1 = null;
                }
                if (meterData.threshold2 && (meterData.threshold2 < meterData.start || meterData.threshold2 > meterData.end)) {
                    meterData.threshold2 = null;
                }
            } else {
                if (meterData.threshold1 && (meterData.threshold1 < meterData.end || meterData.threshold1 > meterData.start)) {
                    meterData.threshold1 = null;
                }
                if (meterData.threshold2 && (meterData.threshold2 < meterData.end || meterData.threshold2 > meterData.start)) {
                    meterData.threshold2 = null;
                }
            }

            // no threshold
            if (!meterData.threshold1 && !meterData.threshold2) {
                partInfo.fill = fillInfo[0];
                partInfo.start = meterData.start;
                partInfo.end = meterData.end;
                parts.push(partInfo);
            }
            // two threshold
            else if (meterData.threshold1 && meterData.threshold2) {
                // confirm fill color
                if (meterData.rule === "good") {
                    fillInfo.reverse();
                }

                // first
                partInfo.fill = fillInfo[0];
                partInfo.start = meterData.start;
                partInfo.end = meterData.threshold1;
                parts.push(partInfo);

                // second
                partInfo = {};
                partInfo.fill = fillInfo[1];
                partInfo.start = meterData.threshold1;
                partInfo.end = meterData.threshold2;
                parts.push(partInfo);

                // third
                partInfo = {};
                partInfo.fill = fillInfo[2];
                partInfo.start = meterData.threshold2;
                partInfo.end = meterData.end;
                parts.push(partInfo);
            }
            // one threshold
            else {
                // confirm fill color
                if (meterData.rule === "good") {
                    fillInfo.reverse();
                }

                // first
                partInfo.fill = fillInfo[0];
                partInfo.start = meterData.start;
                partInfo.end = meterData.threshold1 || meterData.threshold2;
                parts.push(partInfo);

                // second
                partInfo = {};
                partInfo.fill = fillInfo[2];
                partInfo.start = (meterData.threshold1 || meterData.threshold2);
                partInfo.end = meterData.end;
                parts.push(partInfo);
            }

            return parts;
        }

        /**
         * @private
         * @description 得到当前值应该以什么颜色显示
         * @param {Number} value 当前值
         * @return {String} 颜色值
         */
        function getValueColor(value) {
            var color;
            if (config.flat) {
                color = ["#51942B", "#f5c245", "#DA6263"];
            } else {
                color = ["#3ABD21", "#E0A51E", "#B32424"];
            }

            if (value === null || meterData === null) {
                return color[0];
            }

            // no threshold
            if (!meterData.threshold1 && !meterData.threshold2) {
                return color[0];
            }
            // two threshold
            else if (meterData.threshold1 && meterData.threshold2) {
                // confirm fill color
                if (meterData.rule === "good") {
                    color.reverse();
                }

                if (value >= meterData.start && value < meterData.threshold1) {
                    return color[0];
                }

                if (value >= meterData.threshold1 && value < meterData.threshold2) {
                    return color[1];
                }

                return color[2];
            }
            // one threshold
            else {
                // confirm fill color
                if (meterData.rule === "good") {
                    color.reverse();
                }

                var thresh = meterData.threshold1 || meterData.threshold2;

                if (value >= meterData.start && value < thresh) {
                    return color[0];
                } else {
                    return color[2];
                }
            }
        }

        /**
         * @private
         * @description canvas画圆角矩形
         */
        function roundRect(x, y, w, h, r) {
            if (!ctx) {
                return;
            }
            if (w < 2 * r) {
                r = w / 2;
            }
            if (h < 2 * r) {
                r = h / 2;
            }

            ctx.beginPath();
            if ($.isIE()) {
                ctx.rect(x, y, w, h);
            } else {
                ctx.moveTo(x + r, y);
                ctx.arcTo(x + w, y, x + w, y + h - r, r);
                ctx.arcTo(x + w, y + h, x + r, y + h, r);
                ctx.arcTo(x, y + h, x, y + r, r);
                ctx.arcTo(x, y, x + r, y, r);
            }
            ctx.closePath();
        }

        /**
         * @private
         * @description 角度转弧度
         */
        function toRad(angle) {
            return angle * Math.PI / 180;
        }

        /**
         * 把数字格式化成xx.yyK/xx.yy.M等形式
         * @param value
         */
        function toKMG(value) {
            var n, s;
            var K = 1000,
                M = K * 1000,
                B = M * 1000;

            // 转成Number
            if ($.type(value) !== "number") {
                s = value.toString();
                n = parseFloat(s);
                if (isNaN(n)) {
                    return s;
                }
            } else {
                n = value;
            }

            // 转成缩写
            s = "";
            if (n >= B) {
                n = Math.round(n * 10 / B) / 10;
                s = n + "b";
            } else if (n >= M) {
                n = Math.round(n * 10 / M) / 10;
                s = n + "m";
            } else if (n >= K) {
                n = Math.round(n * 10 / K) / 10;
                s = n + "k";
            } else {
                s = n + "";
            }

            return s;
        }

        /**
         * 绘制表盘
         * @param {Object} parts 阀值信息
         * @private
         */
        function _drawPartShapes(parts) {
            var cx = config.cx;
            var cy = config.cy;
            var r = config.r;
            var r2 = r - config.thick;
            var angle1, angle2, rad1, rad2;
            var x1, y1, x2, y2, x3, y3, x4, y4;
            var i = 0,
                j = 0;
            var fill, path, part, elem;
            var fillList, stop;

            // render parts, max to 3
            for (i = 0; i < parts.length; i++) {
                part = parts[i];

                angle1 = (i === 0 ? 180 : angle2);
                angle2 = 180 * (1.0 - (part.end - meterData.start) / (meterData.end - meterData.start));
                rad1 = toRad(angle1);
                rad2 = toRad(angle2);

                // calculate 4 vertex
                x1 = cx + Math.cos(rad1) * r;
                y1 = cy - Math.sin(rad1) * r;
                x2 = cx + Math.cos(rad2) * r;
                y2 = cy - Math.sin(rad2) * r;
                x3 = cx + Math.cos(rad2) * r2;
                y3 = cy - Math.sin(rad2) * r2;
                x4 = cx + Math.cos(rad1) * r2;
                y4 = cy - Math.sin(rad1) * r2;

                if (config.engine === "svg") {
                    if (config.flat) {
                        fill = part.fill;
                    } else {
                        fill = "r(" + cx + "," + cy + "," + cx + "," + cy + "," + r + ")" + part.fill;
                    }
                    path = ["M", x1, y1, "A", r, r, 0, 0, 1, x2, y2, "L", x3, y3, "A", r2, r2, 0, 0, 0, x4, y4, "Z"];
                    elem = R.path(path).attr({
                        stroke: "none",
                        fill: fill
                    });
                } else if (config.engine === "canvas") {
                    ctx.save();

                    // convert to canvas perspect
                    rad1 = Math.PI * 2 - rad1;
                    rad2 = Math.PI * 2 - rad2;

                    // draw arc
                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.arc(cx, cy, r, rad1, rad2, false);
                    ctx.lineTo(x3, y3);
                    ctx.arc(cx, cy, r2, rad2, rad1, true);
                    ctx.closePath();

                    // create radial fill
                    fill = ctx.createRadialGradient(cx, cy, 0, cx, cy, r);
                    fillList = part.fill.split("-");
                    for (j = 0; j < fillList.length; j++) {
                        stop = fillList[j];
                        if (stop.indexOf(':') > 0) {
                            fill.addColorStop(stop.split(":")[1] / 100, stop.split(":")[0]);
                        } else {
                            if (j === 0) {
                                fill.addColorStop(0, stop);
                            } else {
                                fill.addColorStop(1, stop);
                            }
                        }
                    }

                    // fill
                    ctx.fillStyle = fill;
                    ctx.fill();

                    ctx.restore();
                }
            }
        }

        /**
         * 绘制表盘的边框，并填充材质
         * @private
         */
        function _drawPartTexture() {
            var cx = config.cx;
            var cy = config.cy;
            var r = config.r;
            var thick = config.thick;
            var r2 = r - thick;
            var elem = null;
            var x1, y1, x2, y2;
            var path = "";
            var pattern;

            if (config.showTexture === false) {
                return;
            }

            // draw outer edge to fill texture
            x1 = cx - r;
            y1 = cy;
            x2 = cx + r;
            y2 = cy;

            if (config.engine === "svg") {
                path = ["M", x1, y1, "A", r, r, 0, 0, 1, x2, y2];
                path += ["L", x2 - thick, y2, "A", r2, r2, 0, 0, 0, x1 + thick, y2];
                path += ["z"];
                elem = R.path(path).attr({
                    "stroke-width": 1.5,
                    "stroke-opacity": 0.2,
                    "fill-opacity": 0.8,
                    "fill": config.texture
                });
            } else if (config.engine === "canvas" && textureObj._complete === true) {
                ctx.save();

                ctx.beginPath();
                ctx.moveTo(cx - r, cy);
                ctx.arc(cx, cy, r, Math.PI, Math.PI * 2, false);
                ctx.lineTo(cx + r - thick, cy);
                ctx.arc(cx, cy, r - thick, Math.PI * 2, Math.PI, true);
                ctx.closePath();

                pattern = ctx.createPattern(textureObj, "repeat");
                ctx.fillStyle = pattern;
                ctx.globalAlpha = 0.7;
                ctx.fill();

                ctx.lineWidth = 1;
                ctx.strokeStyle = "rgba(0, 0, 0, 0.3)";
                ctx.stroke();

                ctx.restore();
            }
        }

        /**
         * 绘制表盘在下方的倒影
         * @private
         */
        function _drawPartReflection() {
            var cx = config.cx;
            var cy = config.cy;
            var r = config.r;
            var thick = config.thick;
            var elem = null;
            var r2 = r - thick;
            var x1, y1, x2, y2;
            var fill = "";
            var path = "";

            // 计算内侧两个顶点
            x1 = cx - r;
            y1 = cy + 2;
            x2 = cx + r;
            y2 = cy + 2;

            // 绘制。填充由上到下颜色变浅
            if (config.engine === "svg") {
                path = ["M", x1, y2, "A", r, r, 0, 0, 0, x2, y2];
                path += ["L", x2 - thick, y2, "A", r2, r2, 0, 0, 1, x1 + thick, y2];
                path += ["z"];
                elem = R.path(path).attr({
                    "stroke-width": 0,
                    opacity: 0.1,
                    fill: "270-#D3D3D3-#FFFFFF:90"
                });
            } else if (config.engine === "canvas") {
                ctx.save();

                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.arc(cx, cy + 2, r, Math.PI, 0, true);
                ctx.lineTo(x2 - thick, y2);
                ctx.arc(cx, cy + 2, r - thick, 0, Math.PI, false);
                ctx.closePath();

                fill = ctx.createLinearGradient(x1, y1, x1, y1 + r);
                fill.addColorStop(0, "#D3D3D3");
                fill.addColorStop(0.8, "rgba(245, 245, 245, 0)");
                ctx.fillStyle = fill;
                ctx.fill();

                ctx.restore();
            }
        }

        /**
         * 绘制表盘上的刻度线
         * @private
         */
        function _drawPartIndicators() {
            var cx = config.cx;
            var cy = config.cy;
            var r = config.r;
            var thick = config.thick;
            var r2 = r - thick;
            var elem = null;
            var rad;
            var x1, y1, x2, y2;
            var span = 3.6;
            var path = "";
            var i = 0;

            // draw indicators
            span = 180 / INDICATOR_COUNT;
            for (i = 1; i < INDICATOR_COUNT; i++) {
                rad = toRad(180 - span * i);

                // 主刻度要长一些
                if (i % 2 === 0) {
                    r2 = r - thick * 0.35;
                } else {
                    r2 = r - thick * 0.25;
                }

                // 计算刻度线两个顶点的位置
                x1 = cx + Math.cos(rad) * (r - 1);
                y1 = cy - Math.sin(rad) * (r - 1);
                x2 = cx + Math.cos(rad) * r2;
                y2 = cy - Math.sin(rad) * r2;

                if (config.engine === "svg") {
                    path = ["M", x1, y1, "L", x2, y2];
                    elem = R.path(path).attr({
                        "stroke-width": 2,
                        stroke: "white",
                        "stroke-opacity": 0.6
                    });
                } else if (config.engine === "canvas") {
                    ctx.save();

                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);

                    ctx.lineWidth = 2;
                    ctx.strokeStyle = "rgba(255, 255, 255, 0.6)";
                    ctx.stroke();

                    ctx.restore();
                }
            }
        }

        /**
         * 在表盘外侧，显示起始值和阀值文本标签
         * @private
         */
        function _drawPartLabels() {
            var cx = config.cx;
            var cy = config.cy;
            var r = config.r;
            var elem = null;
            var angle1, rad;
            var x1, y1;
            var span = 3.6;
            var i = 0;
            var label;

            if (!config.showRange) {
                return;
            }

            var dataLabelAttr = {
                "font-size": Math.floor(12 * config.zoom),
                "fill": dataLabelColor
            };

            // start value
            x1 = cx - r - Math.floor(15 * config.zoom);
            y1 = cy;
            label = toKMG(meterData.start);
            if (config.engine === "svg") {
                R.text(x1, y1, label).attr(dataLabelAttr);
            } else if (config.engine === "canvas") {
                // canvas可以设置右对齐
                x1 = cx - r - 2;
                ctx.save();

                ctx.textBaseline = "alphabetic";
                ctx.textAlign = "right";
                ctx.font = dataLabelAttr["font-size"] + "px" + " Arial";
                ctx.fillStyle = dataLabelColor;
                ctx.fillText(label, x1, y1);
            }

            // threshold
            var th = [meterData.threshold1, meterData.threshold2];
            for (i in th) {
                if (th[i]) {
                    angle1 = 180 * (1.0 - (th[i] - meterData.start) / (meterData.end - meterData.start));
                    angle1 = Math.round(angle1 / span) * span;
                    rad = toRad(angle1);
                    label = toKMG(th[i]);

                    if (config.engine === "svg") {
                        x1 = cx + Math.cos(rad) * (r + Math.ceil(12 * config.zoom));
                        y1 = cy - Math.sin(rad) * (r + Math.ceil(12 * config.zoom));
                        elem = R.text(x1, y1, label).attr(dataLabelAttr);
                    } else if (config.engine === "canvas") {
                        x1 = cx + Math.cos(rad) * (r + Math.ceil(2 * config.zoom));
                        y1 = cy - Math.sin(rad) * (r + Math.ceil(2 * config.zoom));

                        if (angle1 <= 90) {
                            ctx.textAlign = "left";
                        } else {
                            ctx.textAlign = "right";
                        }

                        ctx.fillText(label, x1, y1);
                    }
                }
            }

            // end value
            label = toKMG(meterData.end);
            if (config.engine === "svg") {
                x1 = cx + r + Math.ceil(15 * config.zoom);
                y1 = cy;
                R.text(x1, y1, label).attr(dataLabelAttr);
            } else if (config.engine === "canvas") {
                x1 = cx + r + 2;
                y1 = cy;

                ctx.textAlign = "left";
                ctx.fillText(label, x1, y1);
                ctx.restore();
            }
        }

        /**
         * @private
         * @description 根据阀值信息，绘制半圆区域
         */
        function drawPart() {
            var parts = getParts();
            if (parts === null || parts.length === 0) {
                return;
            }

            // render parts, max to 3
            _drawPartShapes(parts);

            // draw outer edge to fill texture
            _drawPartTexture();

            // draw bottom reflection
            _drawPartReflection();

            // draw indicators
            _drawPartIndicators();

            // draw data label
            _drawPartLabels();

            return;
        }

        /**
         * @private
         * @description 绘制指针，指向180度方向
         */
        function drawPointer(angle) {
            var cx = config.cx;
            var cy = config.cy;
            var r = (config.r - config.thick) * 0.8;
            var x1, y1, x2, y2, x3, y3, x4, y4;
            var path;
            var r2 = r * 0.18;
            var r3 = r * 0.1;
            var rad;
            var elem1;
            var fill;

            if (config.engine === "svg") {
                // get vertex
                x1 = cx - r;
                y1 = cy;
                x2 = cx;
                y2 = cy - r2;
                x3 = cx;
                y3 = cy + r2;
                x4 = cx + r2;
                y4 = cy;

                path = ["M", x1, y1, "L", x2, y2, "A", r2, r2, 0, 1, 1, x3, y3, "z"];
                if (config.flat) {
                    fill = "#5A6470";
                } else {
                    fill = "70-#1C242E-#718096:70-#1C242E";
                }
                elem1 = R.path(path).attr({
                    "stroke-width": 0,
                    fill: fill
                });
                R.circle(cx, cy, r3).attr({
                    stroke: "none",
                    fill: "#F1F2F3"
                });
                pointer = elem1;
            } else if (config.engine === "canvas") {
                if ($.type(angle) === 'undefined') {
                    return;
                } else {
                    rad = toRad(angle);
                }

                ctx.save();

                x1 = cx + Math.cos(rad) * r;
                y1 = cy - Math.sin(rad) * r;
                x2 = cx + Math.cos(rad - Math.PI / 2) * r2;
                y2 = cy - Math.sin(rad - Math.PI / 2) * r2;
                x3 = cx + Math.cos(rad + Math.PI / 2) * r2;
                y3 = cy - Math.sin(rad + Math.PI / 2) * r2;

                if (config.flat) {
                    fill = "#5A6470";
                } else {
                    fill = ctx.createLinearGradient(x2, y2, x3, y3);
                    fill.addColorStop(0, "#1C242E");
                    fill.addColorStop(0.7, "#718096");
                    fill.addColorStop(1, "#1C242E");
                }

                rad = Math.PI * 2 - rad;
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.arc(cx, cy, r2, rad - Math.PI / 2, rad + Math.PI / 2, true);
                ctx.closePath();

                ctx.fillStyle = fill;
                ctx.fill();

                // button
                ctx.beginPath();
                ctx.arc(cx, cy, r3, 0, Math.PI * 2, false);
                ctx.fillStyle = "#F1F2F3";
                ctx.fill();

                ctx.restore();
            }

            return;
        }

        /**
         * @private
         * @description 绘制文本（当前值和指标名称）
         */
        function drawText() {
            var x1, y1, w;
            var fontSize = 10;
            var elem;
            var metrics;
            var msg, value, end, unit;
            var metric1, metric2;
            var font1, font2;

            value = $.isNull(meterData.value) ? "--" : meterData.value;
            end = $.isNull(meterData.end) ? "--" : meterData.end;
            unit = $.isNull(meterData.unit) || $.isNull(meterData.value) ? "" : meterData.unit;

            // value
            x1 = config.cx;
            y1 = config.cy + (config.r - config.thick) / 2;

            fontSize += Math.floor(config.r / 10) * 3;
            fontSize = fontSize < 16 ? 16 : (fontSize > 40 ? 40 : fontSize);
            fontSize = Math.floor(fontSize * config.zoom);

            if (config.engine === "svg") {
                elem = R.text(x1, y1, value + unit);
                elem.attr({
                    "font-family": "Arial",
                    "font-size": fontSize,
                    "font-weight": "normal"
                });
                txtValue = elem;
            } else if (config.engine === "canvas") {
                ctx.save();

                font1 = "" + fontSize + "px" + " Arial,微软雅黑";
                font2 = "normal " + Math.round(fontSize * 0.6) + "px" + " Arial,微软雅黑";

                ctx.font = font1;
                metric1 = ctx.measureText(value + "");

                ctx.font = font2;
                metric2 = ctx.measureText(unit);

                ctx.fillStyle = getValueColor(meterData.value);
                ctx.textBaseline = "alphabetic";

                ctx.font = font1;
                ctx.textAlign = "left";
                ctx.fillText(value + "", x1 - (metric1.width + metric2.width) / 2, y1 + fontSize / 2);

                ctx.font = font2;
                ctx.textAlign = "right";
                ctx.fillText(unit, x1 + (metric1.width + metric2.width) / 2 + 2, y1 + fontSize / 2);
            }

            // value range
            fontSize = 12;
            if (config.showValueMax) {
                y1 = config.cy + config.r - config.thick;

                if (config.engine === "svg") {
                    elem = null;
                    elem = R.text(x1, y1, "(" + value + "/" + end + ")");
                    elem.attr({
                        "font-family": "sans-serif",
                        "font-size": fontSize,
                        "fill": "#394449"
                    });
                    valueRange = elem;
                } else if (config.engine === "canvas") {
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";
                    ctx.font = fontSize + "px" + " sans-serif";
                    ctx.fillStyle = "#394449";
                    msg = "(" + value + "/" + end + ")";
                    metrics = ctx.measureText(msg);
                    ctx.fillText(msg, x1, y1);
                }

                y1 = config.cy + config.r + 8;
            } else {
                y1 = config.cy + config.r - 5;
            }

            // SVG绘制指标名
            function svgLabel(text) {
                var elem = R.text(x1, y1, text);
                elem.attr({
                    "font-family": "Arial",
                    "font-size": fontSize,
                    "fill": "#394449"
                });
                return elem;
            }

            fontSize = 12;
            if (config.engine === "svg") {
                msg = meterData.name;
                elem = svgLabel(msg);
                w = config.width - 10;
                if (elem.getBBox().width >= w) {
                    while (elem.getBBox().width >= w) {
                        msg = msg.substr(0, msg.length - 1);
                        elem.remove();
                        elem = svgLabel(msg);
                    }
                    msg = msg + "\n" + meterData.name.substring(msg.length);
                    elem.remove();
                    elem = svgLabel(msg);
                    elem.attr("title", meterData.name);
                }
                txtLabel = elem;
            } else if (config.engine === "canvas") {
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                ctx.font = fontSize + "px" + " Arial";
                ctx.fillStyle = "#394449";
                msg = meterData.name;
                metrics = ctx.measureText(msg);
                ctx.fillText(msg, x1, y1);

                ctx.restore();
            }
        }

        /**
         * @private
         * @description 点击meter时，切换选择状态
         */
        function drawSelectIconCanvas() {
            if (selectedIcon === null || config.engine !== "canvas") {
                return;
            }

            var cx = config.left + config.width - 13;
            var cy = config.top + 13;
            var r = 8;

            ctx.save();

            ctx.beginPath();
            ctx.arc(cx, cy, r, 0, Math.PI * 2, false);
            ctx.closePath();

            ctx.fillStyle = "#4F6BA8";
            ctx.fill();

            ctx.beginPath();
            ctx.moveTo(cx - 5, cy);
            ctx.lineTo(cx - 1, cy + 4);
            ctx.lineTo(cx + 5, cy - 3);

            ctx.lineWidth = 2;
            ctx.strokeStyle = "white";
            ctx.stroke();
            ctx.closePath();

            ctx.restore();
        }

        /**
         * @private
         * @description 设置当前值，转动指针并更新显示的值
         * @param {Number} value 新的当前值
         * @param {Boolean} flag 是否动画
         */
        function setValue(value, flag) {
            if (config.engine === "svg" && pointer === null) {
                return;
            }

            if (isNaN(config.r)) {
                return;
            }

            var last = oldValue;
            if (last === null || typeof last === 'undefined') {
                last = meterData.start;
            }

            // meterData is null
            if (last === null || typeof last === 'undefined') {
                return;
            }

            // rotate pointer
            var v = value ? value : meterData.start;
            var angle1 = 180 * (last - meterData.start) / (meterData.end - meterData.start);
            var angle2 = 180 * (v - meterData.start) / (meterData.end - meterData.start);
            if (angle2 > 180) {
                angle2 = 180;
            } else if (angle2 < 0) {
                angle2 = 0;
            }

            var step = angle1 > angle2 ? -3 : 3;
            if ($.isIE() || !flag) {
                step = angle2 - angle1;
            }

            // 避免闪烁，先绘制一次
            if (config.engine === "canvas") {
                draw();
                drawPointer(180 - angle1);
            }

            // customized animation
            var timer = window.setInterval(function() {
                angle1 += step;
                if (step > 0 && angle1 > angle2) {
                    angle1 = angle2;
                }
                if (step < 0 && angle1 < angle2) {
                    angle1 = angle2;
                }

                if (config.engine === "svg") {
                    var m = Raphael.matrix();
                    m.rotate(angle1, config.cx, config.cy);
                    pointer.transform(m.toTransformString());
                } else if (config.engine === "canvas") {
                    draw();
                    drawPointer(180 - angle1);
                }

                if (angle1 === angle2) {
                    window.clearInterval(timer);
                }
            }, 10);

            oldValue = value;
            meterData.value = value;

            // change text value
            if (config.engine === "svg") {
                txtValue.attr({
                    text: value === null ? "--" : value + meterData.unit,
                    fill: getValueColor(value)
                });
                if (valueRange !== null) {
                    if (value !== null) {
                        valueRange.attr({
                            text: "(" + value + "/" + meterData.end + ")"
                        });
                    } else {
                        valueRange.attr({
                            text: " "
                        });
                    }
                }
            }
            return;
        }

        /**
         * @private
         * @description 鼠标悬停或移出时，更改边框宽度
         * @param {Object} border 边框对象
         * @param {Boolean} flag 进入true/移出false
         */
        function stressBorder(border, flag) {
            if (config.engine === "svg") {
                if (flag) {
                    border.attr({
                        "stroke-width": 1.5
                    });
                } else {
                    border.attr({
                        "stroke-width": 1
                    });
                }
            } else if (config.engine === "canvas") {
                if (flag) {
                    ctx.save();

                    ctx.lineWidth = 2;
                    ctx.strokeStyle = "#B6B7B9";
                    roundRect(0, 0, config.width, config.height, 5);
                    ctx.stroke();

                    ctx.restore();
                } else {
                    redraw();
                }
            }
        }

        /**
         * 绘制背景
         */
        function drawBackground() {
            var x1, y1;
            var border = null;

            x1 = config.left;
            y1 = config.top;

            if (config.engine === "svg") {
                // begin set
                R.setStart();

                R.rect(x1, y1, config.width, config.height, 5)
                    .attr({
                    stroke: "none",
                    fill: config.bgColor
                });
            } else if (config.engine === "canvas") {
                ctx.save();
                ctx.clearRect(0, 0, config.width, config.height);
                ctx.fillStyle = config.bgColor;
                ctx.fillRect(0, 0, config.width, config.height);
                ctx.restore();

                border = $("#" + config.renderTo + "-canvas");
                border.attr("width", config.width).attr("height", config.height);
            }
        }

        /**
         * 绘制最外的边框
         */
        function drawOuterBorder() {
            var border = null;
            var cursor = "pointer";
            var x1, y1;

            x1 = config.left;
            y1 = config.top;


            if (config.engine === "svg") {
                border = R.rect(x1, y1, config.width, config.height, 5)
                    .attr({
                    "stroke-width": 1,
                    stroke: "#B6B7B9",
                    fill: "white",
                    "fill-opacity": 0.01,
                    cursor: cursor
                });

                if (config.borderStyle === "solid") {
                    $.noop();
                } else if (config.borderStyle === "dashed") {
                    border.attr({
                        "stroke-dasharray": "- "
                    });
                } else {
                    config.borderStyle = "none";
                    border.attr({
                        "stroke": "none"
                    });
                }

                // end set
                allSet = R.setFinish();

                addEvent(border);
            } else if (config.engine === "canvas") {
                ctx.save();

                if (config.borderStyle !== "none") {
                    ctx.lineWidth = 1;
                    ctx.strokeStyle = "#B6B7B9";
                    roundRect(0, 0, config.width, config.height, 5);
                    ctx.stroke();
                }

                ctx.restore();

                border = $("#" + config.renderTo + "-canvas");
                border.css("cursor", cursor);
            }
        }

        /**
         * @private
         * @description 在paper上绘制内容
         */
        function draw() {
            var cx, cy, r;
            var thick;

            if (!$.isNumeric(config.width) || !$.isNumeric(config.height)) {
                return false;
            }
            if (config.width <= 0 || config.height <= 0) {
                return false;
            }

            // get center position
            if (config.width < config.height * GOLD_RATIO) {
                r = config.width / 2;
                cx = config.left + r;
                cy = config.top + r;
            } else {
                r = config.height * GOLD_RATIO / 2;
                cx = config.left + config.width / 2;
                cy = config.top + r;
            }

            r = r > config.padding ? r - config.padding : 1;
            thick = Math.round(r * THICK_RATIO);

            config.cx = cx;
            config.cy = cy;
            config.r = r;
            config.thick = thick;

            // draw
            drawBackground();
            drawPart();
            drawPointer();
            drawText();
            drawSelectIconCanvas();
            drawOuterBorder();

            return;
        }

        /**
         * @private
         * @description 设置事件
         * @param {Object} border 边框对象，用于登记事件
         */
        function addEvent(border) {
            if (config.hoverInfo === true) {
                border.mouseover(function(evt) {
                    stressBorder(border, true);
                    hoverInfo(evt, true);
                });

                border.mouseout(function(evt) {
                    stressBorder(border, false);
                    hoverInfo(evt, false);
                });

                border.mousemove(function(evt) {
                    stressBorder(border, true);
                    hoverInfo(evt, true);
                });
            }

            border.click(function(evt) {
                if (config.selectable) {
                    switchSelect();
                    hoverInfo(evt, false);
                }
                fireEvent(evt);
            });
            return;
        }

        /**
         * @private
         * @description 设置数据
         * @example
         * var data = {
         *      name: "呼叫成功率",
         *      value: 98,      // 当前值
         *      start: 0,       // 最小值
         *      end: 100,       // 最大值
         *      threshold1: 75, // 提示告警阀值
         *      threshold2: 85, // 紧急告警阀值
         *      unit: "%",      // 数值单位
         *      rule: "good"    // 数据趋势类型，good-越大越好,bad-越大越差
         * };
         * meterObject.setData(data);
         * @param {Object} data 详细数据
         */
        function setData(data) {
            var changed = false;
            $.each(data, function(key, value) {
                if (key === 'value') {
                    return;
                }

                if (value !== meterData[key]) {
                    changed = true;
                }
            });

            meterData = $.extend(meterData, data);

            if (changed) {
                redraw();
                setValue(meterData.value, false);
            } else {
                setValue(meterData.value, true);
            }
        }

        /**
         * @private
         * @description 设置缩放比例，为兼容性，以重绘方式实现
         * @param {Number} scale 缩放比例
         * @param {Number} cx 缩放的中心点x坐标
         * @param {Number} cy 缩放的中心点y坐标
         */
        function setScale(scale, cx, cy) {
            // record original size
            if (config.zoom === 1.0) {
                config.orgWidth = config.width;
                config.orgHeight = config.height;
                config.orgLeft = config.left;
                config.orgTop = config.top;
                config.orgPadding = config.padding;
            }

            config.zoom = scale;
            config.zoomX = cx;
            config.zoomY = cy;

            config.width = config.orgWidth * config.zoom;
            config.height = config.orgHeight * config.zoom;
            config.padding = config.orgPadding * config.zoom;

            var m = Raphael.matrix();
            var x = config.orgLeft;
            var y = config.orgTop;

            m.scale(scale, scale, cx, cy);
            config.left = m.x(x, y);
            config.top = m.y(x, y);

            redraw(config.width, config.height);
        }

        /**
         * @private
         * @description 点击meter时，切换选择状态
         */
        function switchSelect() {
            if (selectedIcon === null) {
                var cx = config.left + config.width - 13;
                var cy = config.top + 13;
                var r = 8;

                if (config.engine === "svg") {
                    var c = R.circle(cx, cy, r).attr({
                        stroke: "none",
                        fill: "#4F6BA8"
                    });
                    var path = [
                        "M", cx - 5, cy,
                        "L", cx - 1, cy + 4,
                        "L", cx + 5, cy - 3];
                    var l = R.path(path).attr({
                        stroke: "white",
                        "stroke-width": 2
                    });

                    selectedIcon = [];
                    selectedIcon.push(c);
                    selectedIcon.push(l);
                    allSet.push(c, l);
                } else if (config.engine === "canvas") {
                    selectedIcon = true;
                    drawSelectIconCanvas();
                }
            } else {
                if (config.engine === "svg") {
                    for (var x in selectedIcon) {
                        if (selectedIcon.hasOwnProperty(x)) {
                            allSet.exclude(selectedIcon[x]);
                            selectedIcon[x].remove();
                            selectedIcon[x] = null;
                        }
                    }
                } else if (config.engine === "canvas") {
                    selectedIcon = null;
                    redraw();
                }

                selectedIcon = null;
            }
        }

        /**
         * @private
         * @description 鼠标悬停时，显示提示信息
         * @param {Event} evt 鼠标事件
         * @param {Boolean} flag 显示true或隐藏false
         */
        function hoverInfo(evt, flag) {
            // 创建信息框
            if (flag && hoverInfoDiv === null) {
                var html = '<div class="sweet-chart-speedometer-hover-info"></div>';
                var label = '<label>[INFO]</label>';
                hoverInfoDiv = $(html).appendTo("body");

                var info = Sweet.core.i18n.chart.meter.name + " : " + meterData.name;
                hoverInfoDiv.append($(label.replace("[INFO]", info)));

                info = Sweet.core.i18n.chart.meter.value + " : " + (0 === meterData.value || meterData.value ? meterData.value + meterData.unit : "--");
                hoverInfoDiv.append($(label.replace("[INFO]", info)));

                if (meterData.threshold2) {
                    info = Sweet.core.i18n.chart.meter.major + " : " + meterData.threshold2 + meterData.unit;
                    hoverInfoDiv.append($(label.replace("[INFO]", info)));
                }

                if (meterData.threshold1) {
                    info = Sweet.core.i18n.chart.meter.minor + " : " + meterData.threshold1 + meterData.unit;
                    hoverInfoDiv.append($(label.replace("[INFO]", info)));
                }

                info = Sweet.core.i18n.chart.meter.min + " : " + meterData.start + meterData.unit;
                hoverInfoDiv.append($(label.replace("[INFO]", info)));

                info = Sweet.core.i18n.chart.meter.max + " : " + meterData.end + meterData.unit;
                hoverInfoDiv.append($(label.replace("[INFO]", info)));
            }

            if (hoverInfoDiv === null) {
                return;
            }

            // 关闭提示信息
            if (flag === false) {
                hoverInfoDiv.hide();
            } else {
                hoverInfoDiv.show();

                // 显示在鼠标右下方
                hoverInfoDiv.css("left", evt.clientX + 5 + "px")
                    .css("top", evt.clientY + 20 + "px");
            }
        }

        /**
         * @private
         * @description 初始化绘图环境
         * @return {Boolean} 初始化结果
         */
        function init() {
            config = {};
            meterData = {
                name: "--",
                value: null,
                start: 0,
                end: 1,
                threshold1: 1,
                threshold2: null,
                unit: "",
                rule: "bad"
            };

            // 初始化配置
            config.renderTo = "";
            config.renderToObj = null;
            config.paper = null;
            config.width = 124;
            config.height = 200;
            config.left = 0;
            config.top = 0;
            config.padding = 5;
            config.borderStyle = "none";
            config.selectable = false;
            config.showRange = false;
            config.showValueMax = true;
            config.bgColor = "transparent";
            config.hoverInfo = false;
            config.zoom = 1.0;
            config.engine = "svg";
            config.flat = false;
            config.showTexture = true;

            // update config
            config = $.extend(config, options);

            holderId = config.renderTo;
            or = options.paper;

            // create paper
            if (config.engine === "svg" && R === null) {
                if (!$.isNull(or)) {
                    R = or;
                } else {
                    /* 在这一行关闭jshint newcap告警 */
                    /* jshint newcap: false */
                    R = Raphael(config.renderToObj || holderId, config.width, config.height);
                }
                allSet = R.set();
            } else if (config.engine === "canvas") {
                var canvas = $("<canvas>").appendTo($("#" + holderId))
                    .attr('id', holderId + '-canvas')
                    .attr('width', '1000')
                    .attr('height', '1000');
                ctx = document.getElementById(holderId + '-canvas').getContext("2d");

                // pre process
                textureObj = new Image();
                var re = /url\([\"\']?(.*)[\"\']?\)/g;
                var match;
                if ((match = re.exec(config.texture)) !== null) {
                    config.texture = match[1].replace(/[\"\']?$/g, "");
                    textureObj.onload = function() {
                        textureObj._complete = true;
                        redraw(config.width, config.height);
                    };
                    textureObj.src = config.texture;
                }

                addEvent(canvas);
            }

            return true;
        }

        /**
         * 触发事件，调用回调函数处理
         * @private
         * @param {obj} event 事件
         */
        function fireEvent(event) {
            if ($.isNull(listeners[event.type])) {
                return;
            }

            var handler = listeners[event.type];
            for (var i in handler) {
                if (handler.hasOwnProperty(i)) {
                    try {
                        handler[i](event, selectedIcon !== null);
                    } catch (e) {
                        $.noop();
                    }
                }
            }
        }

        /**
         * @private
         * 添加事件处理
         * @param {String} event 事件名
         * @param {Function} handler 回调函数
         */
        function addListener(event, handler) {
            if ($.isNull(listeners[event])) {
                listeners[event] = [];
            }

            listeners[event].push(handler);
        }

        /**
         * @private
         * @description 销毁对象
         */
        function destroy() {
            // remove all elements
            if (config.engine === "svg" && allSet) {
                allSet.forEach(function(obj) {
                    obj.remove();
                });
                allSet.clear();

                if (or === null) {
                    R.remove();
                    R = null;
                }
            } else if (config.engine === "canvas") {
                ctx.clearRect(0, 0, config.width, config.height);
            }
        }

        /**
         * @description 重新绘制
         */
        function redraw(width, height) {
            // remove all elements
            if (config.engine === "svg" && allSet) {
                allSet.forEach(function(obj) {
                    obj.remove();
                });
                allSet.clear();

                pointer = null;
                txtValue = null;
                valueRange = null;
                txtLabel = null;
                selectedIcon = null;
            } else if (config.engine === "canvas") {
                ctx.clearRect(0, 0, config.width, config.height);
            }

            if (hoverInfoDiv) {
                hoverInfoDiv.remove();
            }
            hoverInfoDiv = null;

            // 刷新大小
            if (typeof width !== 'undefined') {
                config.width = width;
            }
            if (typeof height !== 'undefined') {
                config.height = height;
            }

            // 绘制
            if (config.paper !== R && R) {
                R.setSize(config.width, config.height);
            } else if (ctx) {
                $("#" + config.holderId + "-canvas")
                    .attr("width", config.width)
                    .attr("height", config.height);
            }

            draw();
            setValue(meterData.value);
        }

        // create object
        var meterObj = {};

        function _initMeterObj() {
            meterObj.init = init;
            meterObj.setData = setData;
            meterObj.redraw = redraw;
            meterObj.setValue = setValue;
            meterObj.setScale = setScale;
            meterObj.destroy = destroy;
            meterObj.addListener = addListener;

            // init object
            meterObj.init();
        }

        _initMeterObj();
        return meterObj;
    };

    var self = null;
    var textureClass = 'sweet-chart-texture';
    $.widget("sweet.widgetChartSpeedometer", $.sweet.widgetChart, {
        version: "1.0",
        sweetWidgetName: "[widget-chart-speedometer]:",
        eventNames: /** @lends Sweet.chart.Speedometer.prototype*/
        {
            /**
             * @event
             * @description 单击事件
             */
            click: "单击事件"
        },
        // 组件配置参数
        options: /**@lends Sweet.chart.Speedometer.prototype*/
        {
            /**
             * 渲染目标DIV的id
             * @type String
             * @default ""
             */
            renderTo: "",
            /**
             * 外部创建好的Raphael Paper对象，此属性有效时，Speedometer不再自行创建Paper对象
             * @type Object
             * @default null
             */
            paper: null,
            /**
             * 对象在画布上的左边距
             * @type Number
             * @default 0
             */
            left: 0,
            /**
             * 对象在画布上的上边距
             * @type Number
             * @default 0
             */
            top: 0,
            /**
             * 对象宽度
             * @type Number
             * @default 110
             */
            width: 110,
            /**
             * 对象高度
             * @type Number
             * @default 130
             */
            height: 130,
            /**
             * 对象渲染内边距
             * @type Number
             * @default 10
             */
            padding: 10,
            /**
             * 边框类型，可选值：solid/dashed/none
             * @type String
             * @default solid
             */
            borderStyle: "solid",
            /**
             * 是否允许选中。为True时，点击选中对象会在右上角显示选中图标
             * @type Boolean
             * @default true
             */
            selectable: true,
            /**
             * 是否在表盘外侧显示起始值及阀值
             * @type Boolean
             * @default false
             */
            showRange: false,
            /**
             * 是否在数值下方显示数值、最大值信息
             * @type Boolean
             * @default true
             */
            showValueMax: true,
            /**
             * 绘图引擎
             * @type String
             * @default "svg"
             */
            engine: "svg",
            /**
             * 是否取消在颜色上绘制渐变效果
             * @type Boolean
             * @default false
             */
            flat: false,
            /**
             * 是否显示底纹
             * @type Boolean
             * @default true
             */
            showTexture: true
        },

        /**
         * @description 设置当前值，转动指针并更新显示的值
         * @param {Number} value 新的当前值
         */
        setValue: function(value) {
            this.chartElement.setValue(value, true);
        },
        /**
         * @description 设置缩放比例
         * @param {Number} scale 缩放比例
         * @param {Number} cx 缩放的中心点x坐标
         * @param {Number} cy 缩放的中心点y坐标
         */
        setScale: function(scale, cx, cy) {
            this.chartElement.setScale(scale, cx, cy);
        },
        /**
         * @description 设置图表数据
         * @param {Object} data 数据对象
         */
        setData: function(data) {
            this.options.data = data;
            if (this.rendered) {
                this.chartElement.setData(data);
            }
        },

        /**
         * @private
         * @description 注册事件
         */
        _addEvent: function() {
            var me = this;
            me.chartElement.addListener("click", function(e) {
                me._triggerHandler(e, e.type, me.options && me.options.data ? me.options.data : {});
            });
        },

        /**
         * @private
         * @description 创建js版图表
         */
        _createJsChart: function() {},
        /**
         * @description 渲染到容器
         * @private
         */
        _chartRender: function() {
            var me = this;
            var options = me.options;

            // 绘制对象
            var config = {};
            config.renderTo = me.chartEl.attr("id");
            config.renderToObj = me.chartEl.get(0);
            config.paper = options.paper;
            config.width = this.chartEl.width();
            config.height = this.chartEl.height();
            config.left = options.left;
            config.top = options.top;
            config.padding = options.padding;
            config.borderStyle = options.borderStyle;
            config.selectable = options.selectable;
            config.showRange = options.showRange;
            config.showValueMax = options.showValueMax;
            config.hoverInfo = options.hoverInfo;
            config.engine = options.engine;
            config.flat = options.flat;
            config.showTexture = options.showTexture;

            // 取得材质图片路径
            var tdiv = $("<div></div>").addClass(textureClass).appendTo("body");
            var textureUrl = tdiv.css('background-image');
            config.texture = textureUrl;
            tdiv.remove();

            var chart = this.chartElement = new Meter(config);

            // 注册事件
            me._addEvent();

            // 设置数据
            var data = me.options.data;
            if (!$.isNull(data)) {
                chart.setData(data);
            }
        },
        /**
         * @private
         * @description 创建flash版图表
         */
        _createFlashChart: function() {
            this._error("not implemented yet!");
        },
        /**
         * @event
         * @description 点击事件
         * @name Sweet.chart.Speedometer#click
         * @param {Event} event 事件名称
         */
        click: function(event) {
            $.log(event);
        },

        /**
         * @description 刷新布局
         * @private
         */
        _doLayout: function() {
            var me = this;

            if ($.isNull(me.chartElement) || $.isNull(me.renderEl)) {
                return;
            }

            // 取得当前容器大小，重新绘制图表
            var width = me.chartEl.width();
            var height = me.chartEl.height();
            me.chartElement.redraw(width, height);
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            // 删除图表对象
            if (this.chartElement && $.isFunction(this.chartElement.destroy)) {
                try {
                    this.chartElement.destroy();
                } catch (e) {
                    this._error(e);
                }
                this.chartElement = null;
            }

            // 清除数据
            this.options.data = null;

            // 删除Dom
            if (this.chartEl) {
                this.chartEl.remove();
            }
        }

    });

    /**
     * @description 示速器组件
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.chart
     * @requires <pre>
     * jquery.js,
     * raphael.js
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.chart.js
     * </pre>
     * @example
     * 创建示速器：
     * var sweetSpeedometer = new Sweet.chart.Speedometer();
     */
    Sweet.chart.Speedometer = $.sweet.widgetChartSpeedometer;

}(jQuery));;
/**
 * @fileOverview 折线图
 * @date 2013/02/28
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建拓扑图
 * @name Sweet.chart.Topology
 * @class 
 * @extends Sweet.chart
 * @requires  
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  var data = [{
 *                   id: "node1111",
 *                  text: "test1",
 *                   icon: "server.png",
 *                   connect: [{
 *                           id: "node33333",
 *                           label:"skjdknwjk\n我非要大果的的",
 *                           currentTask : "true"
 *                   },
 *                   {
 *                       id:"node44444",
 *                       label: "lsjdj我扔的遥枯，\n枯枯妻"
 *                   }]
 *               },
 *               {
 *                   id: "node2222",
 *                   text: "test2",
 *                  icon: "server.png",
 *                  connect: [{
 *                          id: "node33333",
 *                          label:"skjdksjdkjsnvnnwjk\n我非要大"
 *                 },
 *                   {
 *                       id:"node44444",
 *                       label: "lsjdj我嘌和靣 \n在揪扔的遥枯\n唱片的遥"
 *                   }]
 *               },
 *               {
 *                   id: "node33333",
 *                   text: "BKPI.............\n文件影响大小：\ndddddddd",
 *                   icon: "",
 *                   shape: "Rect",
 *                   connect: [{
 *                           id: "node55555",
 *                           label:"大帅哥果的的"
 *                   }]
 *               },
 *               {
 *                  id: "node44444",
 *                   text: "BKPI...失持..........文件影响\n大小：。",
 *                   icon: "",
 *                   shape: "Rect",
 *                   connect: [{
 *                           id: "node55555",
 *                           label:"大帅哥果的的"
 *                   }]
 *               },
 *               {
 *                   id: "node55555",
 *                   shape: "Rect",
 *                   icon: "server.png",
 *                   text: "jshfd s 的手霜顶号别玩"
 *               }];
 *  sweetTopo = new Sweet.chart.Topology({
 *      width : "100%",
 *      height : 600,
 *      data : data,
 *      renderTo : "sweet-topo"
 * });
 * </pre>
 */
(function($, undefined) {
    var defaultInfo = {
        minTextWidth: 150,
        textHeight: 30,
        /**鼠标悬停在拓扑图节点上时的鼠标形状，默认为小手状*/
        cursorType: "pointer",
        //连线的颜色
        lineColor: "#d2d2d2",
        //连线上的字符颜色
        textOnLineColor: "#d2d2d2",
        paddingLeftZoom: 75,
        paperHeight: 6000,
        paperWidth: 8000,
        currentTaskConfig: {
            textOnLineColor: "#0084d8",
            lineColor: "#0084d8"
        },
        font: {
            size: 12,
            rollSize: 12,
            family: "Tahoma"
        },
        stroke: {
            width: 2,
            rollWidth: 2,
            rollColor: "#84aed9"
        },
        zoomAction: {
            zoomIn: "zoomin",
            zoomOut: "zoomout"
        }
    };
    var topoElClass = "sweet-chart-topology-El";
    var topoNodeClass = "sweet-chart-topology-node";
    var topoArrowLineClass = "sweet-chart-topology-arrow-line";
    var topoNodeRectClass = "sweet-chart-topology-node-rect";
    var topoBoardClass = "sweet-chart-topology-board";
    var topoNodeClickClass = "sweet-chart-topology-node-click";
    var topoNodeDBClickClass = "sweet-chart-topology-node-dblclick";
    var topoNodeActiveClass = "sweet-chart-node-active";
    var topoStartHighLightClass = "sweet-chart-node-start-highlight";
    //有image，但是没有边框时
    var topoNodeImgClass = "sweet-chart-topology-node-img";
    //有边框且只有label，没有image时
    var topoNodeLabelClass = "sweet-chart-topology-node-label";
    var topoZoomInClass = "sweet-chart-topology-zoom-in";
    var topoZoomOutClass = "sweet-chart-topology-zoom-out";
    /**
     * 创建拓扑图的数据结构如下：
     * var data = [{
     *     id : "node1",
     *     text: "BKPI表名：...，影响行数：...",
     *     shape: "Rect",
     *     icon: "unit.gif",
     *     data : "",    // 此节点的其它信息，可以是对象或数组等
     *     connect: [{
     *         id: "node4",
     *         label: "文件大小：..."
     *     },
     *     ...
     *     ]
     * },
     * ...
     * ];
     * */
    $.widget("sweet.widgetChartTopology", $.sweet.widgetChart, /** @lends Sweet.chart.Topology.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-topology]:",
        eventNames: /** @lends Sweet.chart.Topology.prototype*/
        {
            /**
             * @event
             * @description 节点的点击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前点击的节点的数据信息
             */
            nodeclick: "nodeclick",
            /**
             * @event
             * @description 节点的双击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前点击的节点的数据信息
             */
            nodedblclick: "nodedblclick",
            /**
             * @event
             * @description 节点的单击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前连线的数据信息
             */
            lineclick: "lineclick",
            /**
             * @event
             * @description 连线的双击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前连线的数据信息
             */
            linedblclick: "linedblclick"
        },
        options: /** @lends Sweet.chart.Topology.prototype*/
        {
            /**
             * 拓扑图的布局方向，"H"代表水平方向展开(默认值)，"V"代表垂直方向展开
             * @type String
             * @default "H"
             */
            layoutDirection: "H",
            /**
             * 拓扑图是否可以拖动
             * @type boolean
             * @default true
             */
            draggable: true,
            /**
             * 两个层级之间的最小间距，minGapX是横向的
             * @type number
             * @default 250
             */
            minLevelGapX: 250,
            /**
             * 两个层级之间的最小间距，minGapY表示纵向的
             * @type number
             * @default 250
             */
            minLevelGapY: 250,
            /**
             * 根节点距离边框的距离
             * @type number
             * @default 5
             */
            paddingBorder: 5,
            /**
             * 节点默认的宽度
             * @type number
             * @default 200
             */
            nodeWidth: 200,
            /**
             * 节点默认的高度
             * @type number
             * @default 200
             */
            nodeHeight: 75,
            /**
             * 节点默认的字体大小
             * @type number
             * @default 14
             */
            fontSize: 14,
            /**
             * 两个节点之间的最小间距
             * @type number
             * @default 30
             */
            minNodeGap: 30
        },

        /**
         * @private
         * @description 图的点击事件,支持图的钻取
         * @param {Object} evt 图点击节点对象的信息
         */
        _onClick: function(evt) {
            //添加node单击时的样式
            $(this).addClass(topoNodeClickClass);

            var node = evt.data.nodeInfo;
            var me = evt.data.me;
            me._trigger("nodeclick", evt, node);
        },

        /**
         * @private
         * @description 拓扑图的节点双击事件
         * @param {type} evt 图点击节点对象的信息
         */
        _onDBClick: function(evt) {
            //添加node双击时的样式
            $(this).addClass(topoNodeDBClickClass);

            var node = evt.data.nodeInfo;
            var me = evt.data.me;
            me._trigger("nodedblclick", evt, node);
        },

        /**
         * 
         * @private
         * @param {String/Array} eName 事件名称
         * @param {type} events  整个事件集合
         * @param {type} id   移除事件的对象id
         * @description 移除对应的事件
         * @returns {undefined}  无
         */
        _subRemoveListener: function(eName, events, id) {
            var nameEvt = "";
            if (eName === events.nodeclick) {
                nameEvt = "click";
                $("#" + id + " ." + topoNodeClass).unbind(nameEvt);
            } else if (eName === events.nodedblclick) {
                nameEvt = "dblclick";
                $("#" + id + " ." + topoNodeClass).unbind(nameEvt);
            }
        },

        /**
         * @private
         * @description 去激活注册事件
         * @param {String} eName 移除事件的名称，不会传递时，表示全部移除
         */
        _removeListener: function(eName) {
            var me = this;
            var topoId = me.topoId;
            if (!eName || eName === "") {
                me.handlers = me.handlers || {};
                $.each(me.handlers, function(eventName, func) {
                    me._subRemoveListener(eventName, me.eventNames, topoId);

                    //去除连线上的监听事件
                    me.lineClickEvent = {};
                    me.lineDblclickEvent = {};
                });
            } else {
                me._subRemoveListener(eName, me.eventNames, topoId);
                //去除所有点的连线单击或双击事件
                if (eName === me.eventNames.lineclick) {
                    me.lineClickEvent = {};
                } else if (eName === me.eventNames.linedblclick) {
                    me.lineDblclickEvent = {};
                }
            }

        },

        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            var topoId = me.topoId;
            var data = me.options.data;
            $.each(me.handlers, function(eventName, func) {
                /**节点的单击和双击事件*/
                var nameEvt = "";
                if (eventName === me.eventNames.nodeclick || eventName === me.eventNames.nodedblclick) {
                    nameEvt = "";
                    if (eventName === me.eventNames.nodeclick) {
                        nameEvt = "click";
                    } else if (eventName === me.eventNames.nodedblclick) {
                        nameEvt = "dblclick";
                    }
                    var node = $("#" + topoId + " ." + topoNodeClass);
                    if (node.length > 0) {
                        node.unbind(nameEvt);
                        node.bind(nameEvt, {
                            "func": func,
                            "nodes": data
                        }, function(evt) {
                            //添加node单击时的样式
                            $(this).addClass(topoNodeClickClass);
                            var func = evt.data.func;
                            var nodeInfo = evt.data.nodes; //所有的Nodes信息
                            var curNodeId = $(evt.currentTarget).attr("node-id"); //取得当前node对象的id
                            var curNode; //当前对象节点信息
                            for (var i = 0; i < nodeInfo.length; i++) {
                                if (curNodeId === nodeInfo[i].id) {
                                    curNode = nodeInfo[i];
                                }
                            }
                            func(evt, curNode);
                        });
                    }
                }
                /**节点连线的单击和双击事件*/
                else if (eventName === me.eventNames.lineclick || eventName === me.eventNames.linedblclick) {
                    nameEvt = "";
                    if (eventName === me.eventNames.lineclick) {
                        nameEvt = "click";
                    } else if (eventName === me.eventNames.linedblclick) {
                        nameEvt = "dblclick";
                    }
                    for (var i = 0; i < data.length; i++) {
                        var temp = data[i];
                        if (temp.connect && temp.connect.length > 0) {
                            var tempConnect = temp.connect;
                            for (var j = 0; j < tempConnect.length; j++) {
                                //节点连线和连线上的字符串单击和双击都生效
                                if (tempConnect[j].nodeLinePath) {
                                    if (nameEvt === "click") {
                                        me.lineClickEvent[temp.id] = func;
                                    } else if (nameEvt === "dblclick") {
                                        me.lineDblclickEvent[temp.id] = func;
                                    }
                                }
                            }
                        } //end the connect for loop
                    } //end the data for loop
                } //end the else if
            }); //end for $.each
        },

        /**
         * @private
         * @description 取得第一层级的节点信息
         * @param {type} nodeData  整个节点集合信息
         * @returns {object} 返回开始层级的节点信息
         */
        _getStartNodes: function(nodeData) {
            var startNodes = {};
            var nonStartNodes = [];
            $.each(nodeData.connections, function(key, value) {
                startNodes[key] = true;
                $.each(value, function(index, item) {
                    nonStartNodes.push(item.id);
                });
            });

            for (var i = 0; i < nonStartNodes.length; i++) {
                delete startNodes[nonStartNodes[i]];
            }
            return startNodes;
        },
        /**
         * @private
         * @description 对节点进行布局
         * @param {Object} nodeData 创建各节点连线的节点信息
         */
        _layoutNodes: function(nodeData) {
            if (!nodeData) {
                return;
            }
            var me = this;
            var options = me.options;
            var viewWidth = me.topologyEl.width() - defaultInfo.paddingLeftZoom;
            var viewHeight = me.topologyEl.height();

            // 取得根节点，上下布局，就是第一行的节点；左右布局，就是第一列的数据
            var startNodes = me._getStartNodes(nodeData);
            //按层级/列储存节点,nodeList的长度就是层级数
            var nodeList = [];
            //每一个层级的节点信息
            var levelNodes = [];
            // tree size info, root->leaf direction
            var treeMaxWidth = 0; // max tree width(px), without any padding
            var treeWidth = []; // width of each level
            //节点数最多的层级的索引
            var treeMaxWidthLevel = 0;
            var levelMaxDeep = [0]; // max deep of each level (px)
            var treeDeep = 0; // sum of max deep of all levels

            //取得 第一层级的信息
            var nodeObj;
            for (var id in startNodes) {
                levelNodes.push(id);
                nodeObj = me._findObjById(id, me.nodesArr);
                if (options.layoutDirection === "H") {
                    treeMaxWidth += nodeObj.height() + options.minNodeGap;
                    if (nodeObj.width() > levelMaxDeep[0]) {
                        levelMaxDeep[0] = nodeObj.width();
                    }
                } else {
                    treeMaxWidth += nodeObj.width() + options.minNodeGap;
                    if (nodeObj.height() > levelMaxDeep[0]) {
                        levelMaxDeep[0] = nodeObj.height();
                    }
                }
            }
            nodeList.push(levelNodes);
            treeDeep = levelMaxDeep[0];
            treeWidth.push(treeMaxWidth);

            // put all nodes in levels
            var tempParams = me._putNodesToLevel(nodeList, nodeData, {
                "treeMaxWidth": treeMaxWidth,
                "treeMaxWidthLevel": treeMaxWidthLevel,
                "treeWidth": treeWidth,
                "levelMaxDeep": levelMaxDeep,
                "treeDeep": treeDeep
            });
            treeMaxWidth = tempParams.treeMaxWidth;
            treeWidth = tempParams.treeWidth;
            treeMaxWidthLevel = tempParams.treeMaxWidthLevel;
            levelMaxDeep = tempParams.levelMaxDeep;
            treeDeep = tempParams.treeDeep;
            nodeList = tempParams.nodeList;
            // get level padding
            var levelPadding = me._calcLevelPadding(treeDeep, nodeList, viewWidth, viewHeight);

            // set nodes position
            var levelOffset = defaultInfo.paddingLeftZoom;

            $.each(nodeList, function(level, nodes) {
                // get nodes padding and offset
                var temp = me._calcNodesPadding({
                    "nodes": nodes,
                    "level": level
                }, {
                    "vHeight": viewHeight,
                    "vWidth": viewWidth
                }, {
                    "treeMaxWidthLevel": treeMaxWidthLevel,
                    "treeWidth": treeWidth
                });
                var nodePadding = temp.padding ? temp.padding : options.minNodeGap;
                var nodeOffset = temp.offset ? temp.offset : 0;
                //计算每一个节点的坐标值和保存画所有节点需要的最大的宽和高
                me._updateNodePos(nodes, nodeData, levelOffset, nodeOffset, nodePadding);
                //计算每一层级的offset
                levelOffset += levelMaxDeep[level] + levelPadding;
            });
            return;
        },

        /**
         * @private
         * @description 确定节点的坐标并保存在对象中
         * @param {object} nodes  需要确定坐标的节点集合
         * @param {object} nodeData  整个节点的集合
         * @param {number} levelOffset  层级之间的offset偏移
         * @param {number} nodeOffset   节点之间的offset偏移
         * @param {number} nodePadding   节点之间的padding间隙
         */
        _updateNodePos: function(nodes, nodeData, levelOffset, nodeOffset, nodePadding) {
            var me = this;
            var options = me.options;
            $.each(nodes, function(index, node) {
                var x, y;
                var nodeObj = me._findObjById(node, me.nodesArr);

                if (options.layoutDirection === "H") {
                    x = levelOffset;
                    y = nodeOffset;
                } else {
                    x = nodeOffset;
                    y = levelOffset;
                }

                //保存画所有节点需要的最大的宽和高
                if (x > me.maxWidth - nodeObj.width()) {
                    me.maxWidth = x + nodeObj.width() + 10;
                }
                if (y > me.maxHeight - nodeObj.height()) {
                    me.maxHeight = y + nodeObj.height() + 10;
                }
                //保存节点的坐标值
                nodeData.nodes[node].pos = {
                    x: x,
                    y: y
                };
                nodeObj.css("left", x);
                nodeObj.css("top", y);
                //计算下一个节点的offset值
                nodeOffset += nodeObj.height() + nodePadding;
            });
        },
        /**
         * @private
         * @description 将节点分成不同的层级
         * @param {object} nodeList   层级节点的集合
         * @param {object} nodeData  节点信息集合
         * @param {object} params   树中树的宽度，最大层级的宽度和层级的索引等
         * @returns {object}  返回树中分层级后的信息
         */
        _putNodesToLevel: function(nodeList, nodeData, params) {
            var me = this;
            var options = me.options;
            var level = 0; //层级索引
            var levelNodes = [];
            var distinctNodes = {};
            var levelWidth = 0;
            var levelDeep = 0;
            while (true) {
                levelNodes = []; //层级的节点集合
                distinctNodes = {};
                levelWidth = 0; //层级宽度
                levelDeep = 0; //层级深度
                // find all children of nodes in each level
                $.each(nodeList[level], function(index, node) {
                    $.each(nodeData.connections, function(key, value) {
                        if (node === key) {
                            $.each(value, function(index1, node) {
                                if (!(node.id in distinctNodes)) {
                                    levelNodes.push(node.id);
                                    distinctNodes[node.id] = true;

                                    var nodeObj = me._findObjById(node.id, me.nodesArr);
                                    if (options.layoutDirection === "H") {
                                        levelWidth += nodeObj.height();
                                        if (nodeObj.width() > levelDeep) {
                                            levelDeep = nodeObj.width();
                                        }
                                    } else {
                                        levelWidth += nodeObj.width();
                                        if (nodeObj.height() > levelDeep) {
                                            levelDeep = nodeObj.height();
                                        }
                                    }
                                }
                            });
                        }
                    });
                });

                // save current level nodes
                if (levelNodes.length > 0) {
                    nodeList.push(levelNodes);
                    // size info
                    if (levelWidth > params.treeMaxWidth) {
                        params.treeMaxWidth = levelWidth;
                        params.treeMaxWidthLevel = level + 1;
                    }
                    params.treeWidth.push(levelWidth);
                    params.levelMaxDeep.push(levelDeep);
                    params.treeDeep += levelDeep;
                } else {
                    break;
                }

                level += 1;
            }
            params.nodeList = nodeList;
            return params;
        },
        /**
         * @private
         * @description 计算节点间的offset偏移和padding间距
         * @param {Object} cur 当前node和层级
         * @param {Object} vInfo  view的高度和宽度
         * @param {Object} params  treeWidth和treeMaxWidthLevel
         * @returns {Object}  返回node的offset和padding
         */
        _calcNodesPadding: function(cur, vInfo, params) {
            var me = this;
            var options = me.options;
            var nodeOffset = 0;
            var nodePadding = options.minNodeGap; //节点间最小的间隙
            var nodeLen = cur.nodes.length; //这一层级节点的个数
            var borders = options.paddingBorder * 2; //两个padding boder的和
            var levelTreeWid = params.treeWidth[cur.level]; //在level层级下的树的宽度
            if (options.layoutDirection === "H") {
                if (levelTreeWid + options.minLevelGapY * (nodeLen - 1) + borders < vInfo.vHeight - 2) {
                    var tempValue = vInfo.vHeight - 2 - borders - levelTreeWid;
                    if (nodeLen > 1) {
                        nodePadding = tempValue / (nodeLen - 1);
                    } else {
                        nodePadding = tempValue;
                    }
                }
            } else {
                //竖向时计算offset和padding
                if (levelTreeWid + options.minLevelGapX * (nodeLen - 1) + borders < vInfo.vWidth - 2) {
                    var tempWidValue = vInfo.vWidth - 2 - borders - levelTreeWid;
                    if (nodeLen > 1) {
                        nodePadding = tempWidValue / (nodeLen - 1);
                    } else {
                        nodePadding = tempWidValue;
                    }
                }
            }
            nodePadding = Math.floor(nodePadding);
            //如果是节点最多的层级，设置paddingBorder
            if (cur.level === params.treeMaxWidthLevel) {
                nodeOffset = options.paddingBorder;
            } else {
                nodeOffset = Math.floor(nodePadding / (nodeLen + 1));
                nodePadding = Math.floor((nodePadding * (nodeLen - 1) - nodeOffset * 2) / (nodeLen - 1));
            }
            //在缩放时，没有最小值限制
            if (nodePadding < options.minNodeGap && me.scale === 1) {
                nodePadding = options.minNodeGap;
            }
            return {
                offset: nodeOffset,
                padding: nodePadding
            };
        },
        /**
         * @private
         * @description 计算层级之间的padding值
         * @param {number} treeDeep   树的深度
         * @param {Array} nodeList   所的节点的集合
         * @param {number} viewWidth  view的宽度
         * @param {number} viewHeight view的高度
         * @returns {number} 返回层级之间的padding值
         */
        _calcLevelPadding: function(treeDeep, nodeList, viewWidth, viewHeight) {
            var me = this;
            var options = me.options;
            var levelPadding = 0;
            if (options.layoutDirection === "H") {
                if (treeDeep + options.minLevelGapX * (nodeList.length - 1) + options.paddingBorder * 2 < viewWidth - 2) {
                    levelPadding = (viewWidth - 2 - options.paddingBorder * 2 - treeDeep) / (nodeList.length - 1);
                } else {
                    levelPadding = options.minLevelGapX;
                }
                //在缩放时，没有最小值限制
                if (levelPadding < options.minLevelGapX && me.scale === 1) {
                    levelPadding = options.minLevelGapX;
                }
            } else {
                if (treeDeep + options.minLevelGapY * (nodeList.length - 1) + options.paddingBorder * 2 < viewHeight - 2) {
                    levelPadding = (viewHeight - 2 - options.paddingBorder * 2 - treeDeep) / (nodeList.length - 1);
                } else {
                    levelPadding = options.minLevelGapY;
                }
                //在缩放时，没有最小值限制
                if (levelPadding < options.minLevelGapY && me.scale === 1) {
                    levelPadding = options.minLevelGapY;
                }
            }

            return Math.floor(levelPadding);
        },
        /**
         * @private
         * @description 画节点到节点之间的连线和连线上的信息
         * @param {Object} nodeData 创建节点连线的信息
         * @param {boolean} isMove
         */
        _createConnections: function(nodeData, isMove) {
            if (!nodeData) {
                return;
            }
            var me = this;
            var options = me.options;

            // create path
            $.each(nodeData.connections, function(node, children) {
                $.each(children, function(index, target) {
                    var x1, x2, y1, y2;
                    var srcObj = me._findObjById(node, me.nodesArr);
                    var destObj = me._findObjById(target.id, me.nodesArr);

                    if (options.layoutDirection === "H") {
                        x1 = nodeData.nodes[node].pos.x + srcObj.width();
                        y1 = nodeData.nodes[node].pos.y + srcObj.height() / 2;

                        x2 = nodeData.nodes[target.id].pos.x;
                        y2 = nodeData.nodes[target.id].pos.y + destObj.height() / 2;

                        //拖动节点时，需要对坐标进行修改
                        if (isMove) {
                            if (x1 > x2) {
                                x1 = x1 - srcObj.width();
                            } else if (x1 === x2) {
                                x1 = x1 - srcObj.width() / 2;
                            }
                        }
                    } else {
                        x1 = nodeData.nodes[node].pos.x + srcObj.width() / 2;
                        y1 = nodeData.nodes[node].pos.y + srcObj.height();

                        x2 = nodeData.nodes[target.id].pos.x + destObj.width() / 2;
                        y2 = nodeData.nodes[target.id].pos.y;

                        //拖动节点时，需要对坐标进行修改
                        if (isMove) {
                            if (y1 > y2) {
                                y1 = y1 - srcObj.height();
                            } else if (y1 === y2) {
                                y1 = y1 - srcObj.height() / 2;
                            }
                        }
                    }

                    // main line
                    var line = ["M", x1, y1, "L", x2, y2];

                    // create or update path
                    if (!("nodeLinePath" in target)) {
                        var lineColor = defaultInfo.lineColor;
                        //这里设置自定义的连线的颜色
                        if (target.currentTask && target.currentTask === "true") {
                            lineColor = defaultInfo.currentTaskConfig.lineColor;
                            me._findObjById(target.id, me.nodesArr).addClass(topoStartHighLightClass); //
                        }

                        target.nodeLinePath = me.R.path(line)
                            .attr({
                            cursor: "pointer",
                            stroke: lineColor,
                            title: target.label,
                            "stroke-width": defaultInfo.stroke.width,
                            "arrow-end": "classic-wide-long"
                        })
                            .mouseover(function(evt) {
                            me._arrowLineMouseOver(evt, target);
                        }).mouseout(function(evt) {
                            me._arrowLineMouseOut(evt, target);
                        }).click(function(evt) {
                            me._arrowLineClick(evt, node, target, me);
                        }).dblclick(function(evt) {
                            me._arrowLineDblclick(evt, node, target, me);
                        });
                    } else {
                        target.nodeLinePath.attr({
                            path: line
                        });
                    }
                });
            });
        },

        /**
         * @private
         * @description 节点连线上的单击事件
         * @param {object} evt  单击事件的evt
         * @param {string} srcNodeId  连线的开始节点的id
         * @param {object} el  此单击连线的对象
         * @param {object} me  拓扑图的对象
         */
        _arrowLineClick: function(evt, srcNodeId, el, me) {
            var nodes = {};
            var data = me.options.data;
            for (var i = 0; i < data.length; i++) {
                if (data[i].id === srcNodeId) {
                    nodes.startNode = data[i];
                }

                if (data[i].id === el.id) {
                    nodes.endNode = data[i];
                }
            }

            if (me.lineClickEvent && me.lineClickEvent[srcNodeId]) {
                var func = me.lineClickEvent[srcNodeId];
                if (func) {
                    func(evt, nodes);
                }
            } else {
                me._trigger("lineclick", evt, nodes);
            }
        },

        /**
         * @private
         * @description 节点连线上的双击事件
         * @param {object} evt 双击事件的evt
         * @param {string} srcNodeId  连线的开始节点的id
         * @param {object} el 此双击连线的对象
         * @param {object} me 拓扑图的对象
         */
        _arrowLineDblclick: function(evt, srcNodeId, el, me) {
            var nodes = {};
            var data = me.options.data;
            for (var i = 0; i < data.length; i++) {
                if (data[i].id === srcNodeId) {
                    nodes.startNode = data[i];
                }

                if (data[i].id === el.id) {
                    nodes.endNode = data[i];
                }
            }

            if (me.lineDblclickEvent && me.lineDblclickEvent[srcNodeId]) {
                var func = me.lineDblclickEvent[srcNodeId];
                if (func) {
                    func(evt, nodes);
                }
            } else {
                me._trigger("linedblclick", evt, nodes);
            }
        },

        /**
         * @private
         * @description 鼠标在节点连线和节点连线的信息上滑过时，连线和信息的样式的改变
         * @param {type} evt  鼠标滑动时的事件对象
         * @param {type} el  当前鼠标滑动时的raphael对象
         */
        _arrowLineMouseOver: function(evt, el) {
            var rpath = el.nodeLinePath;
            var rlabel = el.nodeLineLabel ? el.nodeLineLabel : null;
            if (el.currentTask && el.currentTask === "true") {
                rpath.attr({
                    "stroke-width": defaultInfo.stroke.rollWidth
                });
                if (rlabel) {
                    rlabel.attr({
                        "font-size": defaultInfo.font.rollSize
                    });
                }
            } else {
                rpath.attr({
                    "stroke": defaultInfo.stroke.rollColor,
                    "stroke-width": defaultInfo.stroke.rollWidth
                });
                if (rlabel) {
                    rlabel.attr({
                        "stroke": defaultInfo.stroke.rollColor,
                        "font-size": defaultInfo.font.rollSize
                    });
                }
            }


        },

        /**
         * @private
         * @description 鼠标在节点连线和节点连线的信息上滑出时，连线和信息的样式恢复原来的样式
         * @param {type} evt  鼠标滑出时的事件对象
         * @param {type} el  当前鼠标滑出时的raphael对象
         * @returns {undefined}
         */
        _arrowLineMouseOut: function(evt, el) {
            var rpath = el.nodeLinePath;
            var rlabel = el.nodeLineLabel ? el.nodeLineLabel : null;
            if (el.currentTask && el.currentTask === "true") {
                rpath.attr({
                    "stroke-width": defaultInfo.stroke.width
                });
                if (rlabel) {
                    rlabel.attr({
                        "font-size": defaultInfo.font.size
                    });
                }
            } else {
                rpath.attr({
                    "stroke": defaultInfo.lineColor,
                    "stroke-width": defaultInfo.stroke.width
                });
                if (rlabel) {
                    rlabel.attr({
                        "stroke": defaultInfo.lineColor,
                        "font-size": defaultInfo.font.size
                    });
                }
            }
        },

        /**
         * @private
         * @description 画带有箭头的直线，连接两个节点
         * @param {type} x1
         * @param {type} y1
         * @param {type} x2
         * @param {type} y2
         * @param {type} size
         * @returns {Object} result
         */
        _getArrowLine: function(x1, y1, x2, y2, size) {
            // angle between main line and arrow edge
            var innerAngle = 30;

            var angle = Raphael.angle(x1, y1, x2, y2); // get line angle
            var a1 = Raphael.rad(angle - innerAngle);
            var a2 = Raphael.rad(angle + innerAngle);

            var x2a = x2 + Math.cos(a1) * size;
            var y2a = y2 + Math.sin(a1) * size;
            var x2b = x2 + Math.cos(a2) * size;
            var y2b = y2 + Math.sin(a2) * size;

            var result = ["M", x1, y1, "L", x2, y2, "L", x2a, y2a, "M", x2, y2, "L", x2b, y2b];

            return result;
        },

        /**
         * @private
         * @description 画节点连线上的信息
         * @param {type} x1
         * @param {type} y1
         * @param {type} x2
         * @param {type} y2
         * @param {type} text
         * @returns {Object} result
         */
        _getLineLabel: function(x1, y1, x2, y2, text) {
            var offset = 7;

            // offset angle
            var angle = Raphael.angle(x1, y1, x2, y2); // get line angle
            var a = Raphael.rad(angle + 90);

            // middle point
            var mx = (x1 + x2) / 2;
            var my = (y1 + y2) / 2;

            var tx = mx + Math.cos(a) * offset;
            var ty = my + Math.sin(a) * offset;

            var result = ["T", tx, ty, "R", angle + 180];

            return result;
        },

        /**
         * @parivate
         * @description 画节点前的准备工作
         * @returns {undefined}
         */
        _prepare: function() {
            var me = this;
            if (me.topologyPaper.length === 0) {
                return;
            }
            // clear all dom
            me.topologyPaper.empty().css("overflow", "hidden");

            // add a board
            me.topoBoard = $('<div class=' + topoBoardClass + ' ></div>').appendTo(me.topologyPaper);
        },

        /**
         * @private
         * @description 创建各个节点
         */
        _createNodes: function() {
            var me = this;
            var data = me.options.data;
            if (data.length <= 0) {
                return false;
            }

            // templates
            var tShape = '<div node-id="[id]">[content]</div>';
            var tImage = '<img src="[icon]"/>';
            var tLabel = '<label style="display: block; cursor: pointer;">[label]</label>';

            // create
            for (var i = 0; i < data.length; i++) {
                var img = "";
                var text = "";
                var shape = "";
                var content = "";

                // fill info
                if (data[i].icon && data[i].icon !== "") {
                    img = tImage.replace("[icon]", data[i].icon);
                    content += img;
                } else {
                    if (data[i].shape && data[i].shape !== "") {
                        tLabel = '<label class="' + topoNodeLabelClass +
                            '" style="display: block; cursor: pointer;">[label]</label>';
                    }
                }

                if (!$.isNull(data[i].text)) {
                    //对外现在都用<br>"进行换行
                    data[i].tips = data[i].text;
                    text = tLabel.replace("[label]", data[i].text);
                    content += text;
                }

                shape = tShape.replace("[content]", content);
                shape = shape.replace("[id]", data[i].id);

                // node append to holder
                var obj = $(shape);
                var fontSize = me.options.fontSize + "px";
                obj.css({
                    position: "absolute",
                    cursor: defaultInfo.cursorType,
                    "font-size": fontSize
                })
                    .addClass(topoNodeClass);
                if (!$.isNull(data[i].icon) && (!data[i].shape) || data[i].shape === "") {
                    obj.addClass(topoNodeImgClass);
                }

                // adjust
                if (!$.isNull(data[i].shape)) {
                    obj.addClass(topoNodeClass + "-" + data[i].shape.toLowerCase())
                        .css("min-width", defaultInfo.minTextWidth.toString() + "px")
                        .width(me.options.nodeWidth).height(me.options.nodeHeight);
                }

                //tips,提示，显示全部的内容
                obj.attr("title", data[i].tips).css("overflow", "hidden");

                /**为节点绑定单击和双击事件*/
                obj.bind("click", {
                    "nodeInfo": data[i],
                    "me": me
                }, me._onClick)
                    .bind("dblclick", {
                    "nodeInfo": data[i],
                    "me": me
                }, me._onDBClick)
                    .bind("mouseover", me._nodeMouseOver)
                    .bind("mouseout", me._nodeMouseOut);
                // render to holder
                obj.appendTo(me.topoBoard);
                // 保存每一个node对象
                me.nodesArr.push({
                    id: data[i].id,
                    obj: obj
                });
            }

            return true;
        },

        /**
         * @private
         * @description 节点mouse over时处理函数
         * @param {Object} evt  mouse over事件
         */
        _nodeMouseOver: function(evt) {
            $(evt.currentTarget).addClass(topoNodeActiveClass);
        },
        /**
         * @private
         * @description 节点mouse out时处理函数
         * @param {Object} evt  mouse out事件
         */
        _nodeMouseOut: function(evt) {
            $(evt.currentTarget).removeClass(topoNodeActiveClass);
        },
        /**
         * @parivate
         * @description 创建js版拓扑图
         */
        _createJsChart: function() {
            var me = this;
            me.nodesArr = [];
            var options = me.options;
            var topoId = me.topoId = options.id + "-topology";
            var id = me.id = options.id + "-paper";
            //画所有节点时画布的最大宽度和高度
            me.maxWidth = 0;
            me.maxHeight = 0;
            me.scale = 1; //默认为全图显示，无缩放图
            me.minNodeGap = me.options.minNodeGap;
            me.minLevelGapX = me.options.minLevelGapX;
            me.minLevelGapY = me.options.minLevelGapY;
            //记录连线的单击或双击事件的node的addListener的回调函数
            me.lineClickEvent = {};
            me.lineDblclickEvent = {};

            var topologyEl = me.topologyEl = $("<div>").attr({
                id: topoId
            })
                .addClass(topoElClass);

            //画布容器
            var topologyPaper = me.topologyPaper = $("<div>").attr({
                id: id
            }).appendTo(topologyEl)
                .width(defaultInfo.paperWidth).height(defaultInfo.paperHeight).css({
                overflow: "visible"
            });
            me.board = id + " ." + topoBoardClass;
            /**创建节点div的容器*/
            me._prepare();

            // 初始化 raphael,保存在me中
            me.R = new Raphael(topologyPaper[0], topologyPaper.width(), topologyPaper.height());
            var tempSVG = me.topoSVG = $("#" + id + " >svg");
            tempSVG.css("overflow", "visible");

            /**没有数据，直接返回*/
            if (!me.options.data || me.options.data.length <= 0) {
                return;
            }

            me._createNodesLine();
        },

        /**
         * @private
         * @description 创建节点和节点连线
         * @returns {undefined} 无
         */
        _createNodesLine: function() {
            var me = this;
            /**将数据结构进行转换*/
            me.nodeData = me._transData(me.options.data);

            /**重新绘制缩放工具按钮*/
            me._drawZoomIcon();

            /**重新创建各个节点*/
            me._createNodes();

            var nodesArr = me.nodesArr;
            //添加延时，否则有可能布局时拿不到宽度和高度(chrome)
            setTimeout(function() {
                //添加stetimeout和移动到此处计算这些值，是因为在chrome上处理延时，计算不出这些值
                var data;
                var obj;
                for (var i = 0; i < me.options.data.length; i++) {
                    data = me.options.data[i];
                    obj = me._findObjById(data.id, nodesArr);
                    //缩放时需要使用
                    data.domInfo = {
                        divHeight: obj.height(),
                        divWidth: obj.width()
                    };
                    //设置image的宽高
                    if (data.icon && data.icon !== "") {
                        var imgObj = obj.find("img");
                        data.domInfo.imgHeight = imgObj.height();
                        data.domInfo.imgWidth = imgObj.width();
                    }
                }

                //重新对创建好的各节点进行布局
                me._layoutNodes(me.nodeData);

                //重新画连接节点之间的连线和标注label信息
                me._createConnections(me.nodeData);
                //支持节点的拖动
                if (me.options.draggable) {
                    var tempNode = $("#" + me.topoId + " ." + topoNodeClass);
                    tempNode.draggable();
                    tempNode.on("drag", {
                        "me": me
                    }, me._topologyNodeMove);
                }
                //整个画布的拖动
                me.topologyPaper.draggable();
                me.topologyPaper.on("drag", {
                    "me": me
                }, me._topologyPaperMove);
                // 注册事件
                me.addListener();
            }, 200);
        },

        /**
         * @private
         * @description 用户点击缩放按钮后，对图进行重新的绘制
         * @param {string} zoomAction 其值为"in"或"out","in"表示缩小
         * @param {object} me 拓扑图的对象 
         */
        _zoomer: function(zoomAction, me) {
            var data = me.options.data;
            var scale = 1;
            var topoHeight = me.topologyEl.height();
            var topoWidth = me.topologyEl.width();
            var minWidthDiv = 15; //当有图片时，最小宽度和高度

            if (zoomAction === defaultInfo.zoomAction.zoomIn) {
                var scaleX = topoWidth / me.maxWidth;
                var scaleY = topoHeight / me.maxHeight;
                if (scaleX < scaleY) {
                    scale = scaleX;
                } else {
                    scale = scaleY;
                }
            } else {
                scale = 1;
            }
            me.scale = scale; //记录当前的缩放数值

            me.topologyPaper.css({
                top: 0,
                left: 0
            });
            me.options.minNodeGap = me.minNodeGap * scale;
            me.options.minLevelGapX = me.minLevelGapX * scale;
            me.options.minLevelGapY = me.minLevelGapY * scale;
            //计算缩放字体的大小
            var scaleFont = me.options.fontSize * scale;
            $("#" + me.topoId + " ." + topoNodeClass).css({
                "font-size": scaleFont
            });

            var tempNodeDom;
            var node;
            var nodeObj;
            var imgObj;
            var tempConnect;
            for (var i = 0; i < data.length; i++) {
                node = data[i];
                tempNodeDom = node.domInfo;
                nodeObj = $("div[node-id=" + node.id + "]");
                nodeObj.width(tempNodeDom.divWidth * scale < minWidthDiv ? minWidthDiv : tempNodeDom.divWidth * scale)
                    .height(tempNodeDom.divHeight * scale < minWidthDiv ? minWidthDiv : tempNodeDom.divHeight * scale);
                if (node.icon && node.icon !== "") {
                    imgObj = nodeObj.find("img");
                    imgObj.width(tempNodeDom.imgWidth * scale < minWidthDiv ? minWidthDiv : tempNodeDom.imgWidth * scale)
                        .height(tempNodeDom.imgHeight * scale < minWidthDiv ? minWidthDiv : tempNodeDom.imgHeight * scale);
                }
                //更新节点连线上的文字的大小
                if (node.connect && node.connect.length > 0) {
                    for (var j = 0; j < node.connect.length; j++) {
                        tempConnect = node.connect[j];
                        if (tempConnect.nodeLineLabel) {
                            tempConnect.nodeLineLabel.attr("font-size", defaultInfo.font.size * scale);
                        }
                    }
                }
            }

            /**将数据结构进行转换*/
            var nodeData = me._transData(data);

            setTimeout(function() {
                //对创建好的各节点进行布局
                me._layoutNodes(nodeData);
                //连接节点之间的连线和标注label信息
                me._createConnections(nodeData);
            }, 200);

        },

        /**
         * @private
         * @description  根据id去找到相应的jquery对象
         * @param {type} id   node的id值
         * @param {type} arr  保存的所有node对象数组
         * @returns {object}  返回相应id的node对象   
         */
        _findObjById: function(id, arr) {
            for (var i = 0; i < arr.length; i++) {
                if (id === arr[i].id) {
                    return arr[i].obj;
                }
            }
        },

        /**
         * @private
         * @description 将数据进行转换成内部格式
         * @param {type} data 需要转换的数据
         * @returns {_L16.Anonym$0._transData.nodeData}
         */
        _transData: function(data) {
            if (data && data.length <= 0) {
                return null;
            }
            var nodeData = {};
            nodeData.nodes = {};
            nodeData.connections = {};
            for (var i = 0; i < data.length; i++) {
                var temp = data[i];
                nodeData.nodes[temp.id] = temp;
                if (temp.connect) {
                    nodeData.connections[temp.id] = temp.connect;
                }
            }

            return nodeData;
        },

        /**
         * @private
         * @description 创建缩放按钮工具
         */
        _drawZoomIcon: function() {
            var me = this;
            var options = me.options;
            var zoomInIcon = $("<div>").addClass(topoZoomInClass).appendTo(me.topologyEl)
                .click(function(evt) {
                zoomInIcon.hide();
                zoomOutIcon.show();

                //重新进行绘制相应的节点,进行缩小动作
                me._zoomer(defaultInfo.zoomAction.zoomIn, me);
            });

            var zoomOutIcon = $("<div>").addClass(topoZoomOutClass).appendTo(me.topologyEl)
                .click(function(evt) {
                zoomInIcon.show();
                zoomOutIcon.hide();

                //重新进行绘制相应的节点,进行放大动作
                me._zoomer(defaultInfo.zoomAction.zoomOut, me);
            });

            //最开始的时候显示为zoom in,即全部显示
            zoomInIcon.show();
            zoomOutIcon.hide();

        },

        /**
         * @private
         * @description  拖动整个画节点的画布
         * @param {Event} event 拖动事件的对象
         * @param {Object} ui  拖动的整个画布对象
         */
        _topologyPaperMove: function(event, ui) {
            var me = event.data.me;
            var svg = $("#" + me.id + ">svg");
            $("#" + me.board).css("left", svg.css("left")).
            css("top", svg.css("top"));
        },

        /**
         * @private
         * @description 拖动拓扑图上的节点事件
         * @param {Event} event 拖动事件的对象
         * @param {Object} ui 拖动的节点对象  
         */
        _topologyNodeMove: function(event, ui) {
            var me = event.data.me;
            var node = $(event.currentTarget);
            //拖动后的鼠标的坐标值
            var left = ui.position.left;
            var top = ui.position.top;
            var id = node.attr("node-id");

            var nodeData = me.nodeData;
            //更新节点的坐标值
            nodeData.nodes[id].pos = {
                x: left,
                y: top
            };

            var nodeObj = $("div[node-id=" + id + "]");
            nodeObj.css("left", left);
            nodeObj.css("top", top);

            //重新绘制节点连线
            me._createConnections(nodeData, true);
        },

        /**
         * @public
         * @description 设置数据
         * @param {Array} data 节点数据及节点关系的描述
         */
        setData: function(data) {
            if (!data || data.length <= 0) {
                return;
            }

            var me = this;
            delete me.nodeData;
            delete me.options.data;
            me.options.data = data;
            me._reDraw();
        },

        /**
         * @parivate
         * @description 渲染折线图到相应的到div
         */
        _chartRender: function() {
            if (this.rendered || $.isNull(this.topologyEl)) {
                return;
            }

            this.topologyEl.appendTo(this.chartEl);
        },

        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var me = this;
            if (!me.options.renderTo || me.options.renderTo === "") {
                return;
            }

            // 为topoEl设置宽度和高度
            me.topologyEl.width(me.chartEl.width());
            me.topologyEl.height(me.chartEl.height());
        },

        /**
         * @private
         * @description 容器改变大小后，重新绘制图
         * @returns {undefined}
         */
        _reDraw: function() {
            var me = this;
            me.removeListener();
            // 清空svg和board下的dom
            me.chartEl.empty();
            me.options.minNodeGap = me.minNodeGap;
            me.options.minLevelGapX = me.minLevelGapX;
            me.options.minLevelGapY = me.minLevelGapY;

            //重新绘制节点及连线信息
            me._createJsChart();
            me.topologyEl.appendTo(me.chartEl);
        },

        /**
         * @parivate
         * @description 创建flash版event图
         */
        _createFlashChart: function() {

        }
    });

    // 拓扑图组件
    Sweet.chart.Topology = $.sweet.widgetChartTopology;

}(jQuery));;
/**
 * @fileOverview 图形组件
 * @date 2013/02/20
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建折线，柱图，堆积图，面积图等
 * @name Sweet.chart.Line
 * @class 
 * @extends Sweet.chart
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  var data = [{
 *               text: "1950-01-03 16:00",
 *               value: 150000000,
 *               value1: 560000000
 *           }, {
 *               text: "1951-01-03 17:00",
 *               value: 330000000,
 *               value1: 100000000
 *           }, {
 *               text: "1952-01-03 18:00",
 *               value: 250000000,
 *               value1: 550000000
 *           }];
 *  var reader = new Sweet.Reader.JsonReader();
 *           var store = new Sweet.Store({
 *               url : "../data/line.jsp",
 *               reader : reader
 *           });
 *           line = new Sweet.chart.Line({
 *               store : store,
 *				chartTitle : "Test Chart",
 *               height : "100%",
 *               width : "100%",
 *				xThresholdValue : "2013",
 *               yThresholdValue : "214500200",
 *				graphType : "line",
 *               stackType : "none",
 *               data: [],
 *				leftUnit : "times",
 *               rightUnit : "count",
 *               dataKeys: ["text", ["value", "Tuanjie11"], ["value1", "tesddjdkdk"]]});
 *           line.render("sweet-chart-line");
 *           store.load();
 * </pre>
 */
(function($, undefined) {

    var lineColors = Sweet.constants.colors;

    /**
     * 图形组件的样式的配置数据，推荐最多同时显示5种数据，大于5种时，颜色将随机产生
     */
    var config = {
        colors: [lineColors[0], lineColors[3], lineColors[5], lineColors[7], lineColors[8], lineColors[9], lineColors[1], lineColors[6], lineColors[2], lineColors[4], lineColors[10]],
        /**
         * 绘制图形描述信息
         */
        graph: {
            bullet: "round",
            type: "line",
            lineThickness: 2
        },
        /**
         * 提示的样式配置
         */
        balloon: {
            adjustBorderColor: true,
            fillColor: "#ffffff",
            pointerWidth: 5,
            cornerRadius: 0
        },
        /**
         * cursor鼠标滑动时样式配置
         */
        cursor: {
            cursorPosition: "mouse",
            categoryBalloonColor: "#526f9f"
        },
        /**
         * legend图例样式配置
         */
        legend: {
            position: "bottom",
            align: "center",
            markerType: "square"
        },
        /**
         * 阈值线样式配置
         */
        guide: {
            lineColor: "#d72e2e",
            lineAlpha: 1,
            dashLength: 2,
            inside: true,
            labelRotation: 90
        },
        /**
         * 只给柱状图和面积图使用有效
         */
        stackType: ["regular", "100%", "3d", "none"]
    };
    $.widget("sweet.widgetChartLine", $.sweet.widgetChart, /** @lends Sweet.chart.Line.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-line]:",
        eventNames: /** @lends Sweet.chart.Line.prototype*/
        {
            /**
             * @event
             * @description 图上的节点或柱的单击事件，需要在数据中配置drillable属性：drillable=" "(值为空字符，不是没有)
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "图的单击事件"
        },
        maxPacket: 11,
        options: /** @lends Sweet.chart.Line.prototype*/
        {
            /**
             * 是否显示鼠标滑过效果
             * @type boolean
             * @default true
             */
            isCursor: true,
            /**
             * 是否显示滚动效果
             * @type boolean
             * @default true
             */
            isScrollbar: true,
            /**
             * 是否显示图例
             * @type boolean
             * @default true
             */
            isLegend: true,
            /**
             * 设置category(x轴)上的label的旋转角度，默认不旋转
             * @type number
             * @default 0
             */
            labelRotation: 0,
            /**
             * 图中值和key的实例，由于历史原因，现在是二维数组：["text",["value","NSC1","left","line/column"],...]
             * 其中第一个"text"代表x轴的数据在data中对应的value；从第二个数组数据，才代表每个图的信息，其中包含与data中对应的
             * value和图的title,依次顺序代表为：图对应的value，图的名称，此图属于左轴还是右轴，此图的类型
             * 重要：现在在"图的类型"后面再添加"descriptionField"项，用来表示不同图的描述信息(用户自定义)，和value使用方法一样；
             * @type Array
             * @default ["text"]  x轴的field
             */
            dataKeys: ["text"],
            /**
             * 图的类型，其值有: "area","line","column","columnline","bar"
             * @type string
             * @default "line" 不设置此值，默认为折线图,其它值参看Sweet.constants.graphType
             */
            graphType: Sweet.constants.graphType.LINE,
            /**
             * stack图的类型,配合graphType可产生面积堆积图、柱状堆积图等
             * @type string
             * @default undefined ,可使用的值不"regular", "100%", "3d", "none"
             */
            stackType: undefined,
            /**
             * 折线图的风格
             * @type number
             * @default 1  1表示节点显示为圆圈，2表示节点直接连接
             */
            style: 1,
            /**
             * 鼠标在图上移动时，图例位置是否出现数据提示
             * @type boolean
             * @default true  true表示带数据提示，默认值; false表示不带提示
             */
            legendTips: true,
            /**
             * 日期是否使用组件解析的形式
             * @type boolean
             * @default false  如果设置为true,在数据中x轴的数据必须为日期对象
             */
            parseDate: false,
            /**
             * x轴上日期显示的格式，只有parseDate设置为true时才有效
             * @type string
             * @default "hh"  默认为"hh"表示小时，其它为fff - milliseconds, ss - seconds, mm - minutes, 
             * hh - hours, DD - days, MM - months, YYYY - years.
             */
            xDateFormat: "hh",
            /**
             * 鼠标移动到点时，x轴上提示的日期显示的格式，只有parseDate设置为true时才有效
             * @type string
             * @default "YYYY MMM DD JJ:NN"  所有全显示格式为： "YYYY MMM DD JJ:NN:SS"
             */
            categoryBalloonDateFormat: "YYYY MMM DD JJ:NN",
            /**
             * 图的图例是否可以点击，以隐藏或显示 相应图形
             * @type boolean
             * @default true
             */
            switchable: true,
            /**
             * 用户自定义颜色值，只对条形图，柱状图有效，其它图形颜色值设置无效
             * 颜色值请使用下面的值，如果没有相应的值，请找UCD zhaoting 给合适的值
             * 颜色：红:"#f56161",黄:"#f1b32c",绿:"#57aa4f"，灰:"#97A9B6"
             * 需要在数据中配置指定color:[{text : "2013-10-12", value : "254", color : "#57aa4f"},...]
             * 当设定为true且data中配置color属性时，才生效，
             * @type boolean
             * @default false
             */
            definedColor: false,
            /**
             * 无数据时，折线是否连接起来，而不是断开
             * @type boolean
             * @default false
             */
            connect: false,
            /**
             * 左边Y轴的最大数值
             * @type number
             * @default null
             */
            maxnumLeft: null,
            /**
             * 右边Y轴的最大数值
             * @type number
             * @default null
             */
            maxnumRight: null,
            /**
             * y轴的值从什么地方开始（最小值），如果设置值，使用数组，第一个为左轴的，第二值为右轴的，
             * @type Array
             * @default ["", ""]
             */
            minimum: ["", ""],
            /**
             * y轴上的数值是否只显示整数的形式，默认不是只显示整数，由于支持两个轴，所以是数组，第一个代表左轴的配置，第二个代表右轴的配置
             * @type Array
             * @default [false, false]
             */
            integersOnly: [false, false],
            /**
             * 鼠标移动到图上时，提示框中的文字的布局方向，支持："middle", "left", "right"
             * @type String
             * @default "middle"
             */
            balloonTextAlign: "middle",
            /**
             * 鼠标移动到图上时，提示框中的内容的格式，主要用于用户自定义时用，一般使用组件默认的即可；一般用到的格式为："[[title]]: [[percents]]% ([[value]])"
             * title对应图例的名称；percents对应当前数值的百分比；value对应当前的值；还可以添加上"[[description]]",其值与value的一样，需要在dataKeys中配置才能生效；
             * 所以在data数据中和dataKeys中都要配置对应关系，最后在balloonText中配置显示格式；
             * @type String
             * @default "" 
             */
            balloonText: "",
            /**
             * 鼠标移动到图上时，只显示当前鼠标移动到的点的提示内容，即只显示一个提示(isCursor必须为true才有效果)
             * @type boolean
             * @default false
             */
            oneBalloonOnly: false
        },

        /**
         * @private
         * @description 图的点击事件,支持折线图的钻取，柱状图的点击
         * @param {Object} event 图点击区域对象的信息
         * @param {Object} me 此图的对象引用
         * @param {function} func (event, data) 通过addListener注册的单击元事件回调函数
         */
        _onClick: function(event, me, func) {
            var originalData = {};
            originalData.item = JSON.parse(JSON.stringify(event.item.dataContext));
            /* 当前点击点所在的legend对象的值，用legendValue表示 */
            originalData.legendValue = event.item.graph.title;
            /* 点击这个点的值，用data表示 */
            originalData.data = event.item.values.value;
            originalData.valueField = event.graph.valueField;

            if (func) {
                func(event, originalData);
            } else {
                me._trigger("click", event, originalData);
            }
        },

        /**
         * @private
         * @description 去激活注册事件
         * @param {string} eName 去除的事件的名称，不传或为空时，去除全部的注册事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};
            if (!eName || eName === "") {
                $.each(me.handlers, function(eventName, func) {
                    me.chartElement.removeListener(me.chartElement, eventName, func);
                });
            } else {
                $.each(me.handlers, function(eventName, func) {
                    if (eName === eventName) {
                        me.chartElement.removeListener(me.chartElement, eventName, func);
                    }
                });
            }
        },

        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    me.chartElement.addListener("clickGraphItem", function(evt) {
                        me._onClick(evt, me, func);
                    });
                }
            });
        },

        /**
         * @parivate
         * @description 创建js版折线图
         */
        _createJsChart: function() {
            var me = this,
                options = me.options,
                lineEl,
                temp = {},
                chartElement,
                data = options.data;
            if (!$.isNull(options.dataKeys) && options.dataKeys.length === 0) {
                options.dataKeys = ["text"];
            }
            if (data.length === 0 && !options.parseDate) {
                temp = {};
                temp[options.dataKeys[0]] = Sweet.core.i18n.chart.noDataTips;
                me.options.data = [temp];
            }
            me.lineId = options.id + "-lineEl";
            lineEl = me.lineEl = $("<div>").attr("id", me.lineId)
                .width(options.width).height(options.height)
                .appendTo(me.chartEl);
            /* 绘制折线图 */
            chartElement = me.chartElement = new AmCharts.AmSerialChart();
            chartElement.pathToImages = Sweet.amchartsImagePath;
            chartElement.categoryField = options.dataKeys[0];
            chartElement.dataProvider = data;
            chartElement.numberFormatter = {
                precision: -1,
                decimalSeparator: '.',
                thousandsSeparator: ','
            };
            /* balloon的设置，使用默认值 */
            chartElement.balloon.adjustBorderColor = config.balloon.adjustBorderColor;
            chartElement.balloon.fillColor = config.balloon.fillColor;
            chartElement.balloon.cornerRadius = 5;
            chartElement.balloon.pointerWidth = config.balloon.pointerWidth;
            chartElement.balloon.showBullet = true;
            chartElement.balloon.textAlign = options.balloonTextAlign;
            chartElement.color = chartElement.balloon.color = chartElement.balloon.textShadowColor = me.textColor;
            /* 图的字体大小和形式 */
            chartElement.fontSize = me.fontSizeNormal;
            chartElement.fontFamily = me.chartFontFamily;
            if (options.graphType === Sweet.constants.graphType.COLUMN || options.graphType === Sweet.constants.graphType.MIX_COLUMN_LINE) {
                chartElement.columnWidth = 0.5;
            }

            /* 设置CategoryAxis和valueAxis信息及上面的阈值线 */
            me._setCategoryAxis();
            me.yAxis = me._createValueAxis();

            /* 绘图和添加图例等 */
            me._createGraphs();
            me._createJsCursor();
            me._createJsScrollbar();
            me._createJsLegend();
            if (options.graphType === Sweet.constants.graphType.BAR) {
                me._doAddUnitTitleFun = function() {
                    me._addUnitTitle();
                };
                me.chartElement.addListener("rendered", me._doAddUnitTitleFun);
            }
        },
        /**
         * @private
         * @description 创建具体的阈值线
         * @param {Object} axis 坐标轴对象
         * @param {String} axisType 坐标轴类型valueAxis或categoryAxis
         * @param {String/Number} guideValue 阈值线的值
         * @returns {object} axis 返回axis对象
         */
        _guide: function(axis, axisType, guideValue) {
            var threshold = new AmCharts.Guide();
            var _lineColor = config.guide.lineColor,
                _guideValue = guideValue,
                _dashLength = config.guide.dashLength;
            if (guideValue && guideValue["color"]) {
                _lineColor = guideValue["color"];
            }
            if (guideValue && guideValue["value"]) {
                _guideValue = guideValue["value"];
            }
            if (guideValue && guideValue["dashLength"]) {
                _dashLength = guideValue["dashLength"];
            }
            /* 判断是横轴还是竖轴 */
            if (axisType === Sweet.constants.axisType.VALUE) {
                threshold.value = _guideValue;
            } else if (axisType === Sweet.constants.axisType.CATEGORY) {
                threshold.category = _guideValue;
            }
            /* 阈值线的样式值 */
            threshold.lineColor = _lineColor;
            threshold.lineAlpha = config.guide.lineAlpha;
            threshold.dashLength = _dashLength;
            threshold.inside = config.guide.inside;
            threshold.labelRotation = config.guide.labelRotation;
            threshold.balloonText = _guideValue;
            if (guideValue && guideValue["label"]) {
                threshold.label = guideValue["label"];
            }
            axis.addGuide(threshold);

            return axis;
        },

        /**
         * @private
         * @description 创建阈值线
         * @param {Object} axis 坐标轴对象
         * @param {String} axisType 坐标轴类型valueAxis或categoryAxis
         * @param {Array/String/Number} guideValues 阈值线的值，可以是数组，创建多个阈值线
         */
        _createGuide: function(axis, axisType, guideValues) {
            var me = this;
            if (!guideValues || guideValues === "") {
                return;
            }

            /* 设置guide时支持数组一次设置多个 */
            if (guideValues instanceof Array) {
                for (var i = 0; i < guideValues.length; i++) {
                    me._guide(axis, axisType, guideValues[i]);
                }
            } else {
                /* 只设置一个guide时 */
                me._guide(axis, axisType, guideValues);
            }
        },

        /**
         * @private
         * @description 置categoryAxis的配置信息和阈值线
         */
        _setCategoryAxis: function() {
            var me = this,
                options = me.options,
                categoryAxis = me.chartElement.categoryAxis;
            /* 日期使用自动解析的方式,且一定要有数据，否则使用noData时会报错 */
            if (options.parseDate) {
                categoryAxis.parseDates = true;
                categoryAxis.isParseDate = true;
                categoryAxis.minPeriod = options.xDateFormat;
                categoryAxis.equalSpacing = true;
            } else {
                categoryAxis.parseDates = false;
                categoryAxis.isParseDate = false;
                categoryAxis.minPeriod = "DD";
                categoryAxis.equalSpacing = false;
            }

            /* x轴的显示文字不进行截取 */
            categoryAxis.isPieText = false;
            categoryAxis.gridPosition = "start";
            /* 面积图时从axis开始显示 */
            categoryAxis.startOnAxis = options.graphType === Sweet.constants.graphType.AREA ? true : false;
            /*DTS2013121002395  start*/
            categoryAxis.autoGridFrequency = options.graphType === Sweet.constants.graphType.BAR ? true : false;
            /*DTS2013121002395 end*/
            /* 如果设置了旋转角度或步长，则使用用户设置的 */
            if (Number(options.labelRotation) !== 0) {
                categoryAxis.autoGridFrequency = true;
                categoryAxis.labelRotation = Number(options.labelRotation);
            }
            /* 判断是否需要设置X轴的阈值 */
            if (options.xThresholdValue) {
                me._createGuide(categoryAxis, Sweet.constants.axisType.CATEGORY, options.xThresholdValue);
            }
        },

        /**
         * @private
         * @description 创建并设置valueAxis的配置信息和阈值线
         */
        _createValueAxis: function() {
            var me = this,
                options = me.options,
                categoryAxis = me.chartElement.categoryAxis;

            /* 创建之前，先清空其中已有的值 */
            if (me.yAxis) {
                if (me.yAxis.left) {
                    me.chartElement.removeValueAxis(me.yAxis.left);
                }
                if (me.yAxis.right) {
                    me.chartElement.removeValueAxis(me.yAxis.right);
                }
                me.yAxis = {};
                me.chartElement.valueAxes = [];
            }
            var yAxis = {},
            rightValueAxis,
            graphType = Sweet.constants.graphType,
                /* 对不同的图形设置特殊的valueAxis的属性 */
                valueAxis = new AmCharts.ValueAxis();
            options.maxnumLeft ? valueAxis.maximum = options.maxnumLeft : "";
            //支持左y轴只显示整数值
            if (options.integersOnly && options.integersOnly[0]) {
                valueAxis.integersOnly = options.integersOnly[0];
            }
            switch (options.graphType) {
                case graphType.AREA:
                case graphType.BAR:
                case graphType.COLUMN:
                case graphType.MIX_COLUMN_LINE:
                    options.stackType ? valueAxis.stackType = options.stackType : "";
                    if (options.graphType === graphType.BAR) {
                        /* bar图时，不设置Y轴的labelFrequency，恢复为默认值1 */
                        categoryAxis.labelFrequency = 1;
                    } else if (options.graphType === graphType.MIX_COLUMN_LINE) {
                        /* 混合图("columnline")时的情况，有两个Y轴 */
                        rightValueAxis = new AmCharts.ValueAxis();
                        rightValueAxis.position = "right";
                        //支持右y轴只显示整数值
                        if (options.integersOnly && options.integersOnly[1]) {
                            rightValueAxis.integersOnly = options.integersOnly[1];
                        }
                        if (options.minimum[1] && $.type(options.minimum[1]) === "number") {
                            rightValueAxis.minimum = options.minimum[1];
                        }
                        options.maxnumRight ? rightValueAxis.maximum = options.maxnumRight : "";
                        me.chartElement.addValueAxis(rightValueAxis);
                        yAxis.right = rightValueAxis;
                    }
                    break;
            }

            /* UI规范中图Y轴必须从0开始,但有些场景趋势不明显，所以用户可以自己设置 */
            if (options.minimum[0] && $.type(options.minimum[0]) === "number") {
                valueAxis.minimum = options.minimum[0];
            }

            /* 判断是否需要设置Y轴的阈值 */
            if (options.yThresholdValue) {
                me._createGuide(valueAxis, Sweet.constants.axisType.VALUE, options.yThresholdValue);
            }
            me.chartElement.addValueAxis(valueAxis);
            /* 默认为左边的竖轴 */
            yAxis.left = valueAxis;
            return yAxis;
        },

        /**
         * @private
         * @description 添加unit单位或者图的title
         * @param {Boolean} isCreateTitle 是否创建title
         */
        _addUnitTitle: function(isCreateTitle) {
            var me = this,
                options = me.options,
                unitText,
                leftUnitText,
                marginRight,
                rightUnitText,
                offset = 20,
                /* unit*/
                xUnit = offset, //(me.chartElement.marginLeft - offset)/2 + offset,
                /* y的值需要减去fontsize，再减去上下各5pix */
                yUnit = me.chartElement.marginTop - me.fontSizeNormal - 10;
            /* 添加title或label时，先清除已经有的,但不能清除title */
            me.chartElement.clearLabels();
            /* title */
            if (!$.isNull(options.chartTitle) && (me.preTitle !== options.chartTitle || isCreateTitle)) {
                /* 30为title的高度 */
                me.chartElement.titles = [];
                me.chartElement.addTitle(options.chartTitle, me.fontSizeLarger,
                me.labelColor, me.labelAlpha, me.chartFontFamily);
                me.preTitle = options.chartTitle; //记录title
            }
            /* 加55的来历：其中30为title原来增加的，另外25是title底部到图的间隔(小于真正的这段距离) */
            if (me.preTitle) {
                yUnit += 33;
            }

            if (yUnit < 0) {
                yUnit = 0;
            }

            /* 如果是stackType为100%,不管是否设置了单位，单位一定有且为% */
            if (options.stackType === config.stackType[1]) {
                unitText = "%";
                me.chartElement.addLabel(xUnit, yUnit, unitText, "left", me.fontSizeNormal, me.textColor, 0, 1);
            }
            /* 增加左侧的axis的单位 */
            else if (options.leftUnit && options.leftUnit !== "") {
                leftUnitText = options.leftUnit;
                if (options.graphType === Sweet.constants.graphType.BAR) {
                    xUnit = $("#" + me.options.id).width() - offset;
                    me.chartElement.addLabel(xUnit, yUnit, leftUnitText, "right", me.fontSizeNormal, me.textColor, 0, 1);
                } else {
                    me.chartElement.addLabel(xUnit, yUnit, leftUnitText, "left", me.fontSizeNormal, me.textColor, 0, 1);
                }
            }

            /* 右侧Y轴的单位 */
            if (options.rightUnit && options.rightUnit !== "") {
                if (options.graphType === Sweet.constants.graphType.BAR) {
                    yUnit += me.chartElement.plotAreaHeight + 33;
                }
                xUnit = $("#" + me.options.id).width() - offset;
                rightUnitText = options.rightUnit;
                me.chartElement.addLabel(xUnit, yUnit, rightUnitText, "right", me.fontSizeNormal, me.textColor, 0, 1);
            }
        },

        /**
         * @private
         * @description 创建graphs
         */
        _createGraphs: function() {
            var me = this,
                options = me.options,
                /* 图的个数 */
                lineNum = options.dataKeys.length - 1,
                /* 如果折线数超过maxPacket，将不对颜色进行指定 */
                colors = config.colors;

            me._addGraphs(lineNum, colors);
        },

        /**
         * @private
         * @description 循环将各个实例图加入到整个图中去
         * @param {type} lineNum  图的个数
         * @param {type} colors  图的颜色集合
         */
        _addGraphs: function(lineNum, colors) {
            var me = this,
                options = me.options,
                graph,
                cEl = me.chartElement,
                graphType = Sweet.constants.graphType,
                sType = options.stackType,
                cfgSTpye = config.stackType[1],
                tempTValue = "",
                tipValue = "[[value]]",
                tipPercent = "[[percents]]%",
                tipTitle = "[[title]]: ",
                composeTP = tipTitle + tipPercent + " (" + tipValue + ")",
                composeTV = tipTitle + tipValue;
            me._graphs = {};
            for (var i = 1; i <= lineNum; i++) {
                graph = new AmCharts.AmGraph();
                graph.valueField = options.dataKeys[i][0];
                graph.descriptionField = options.dataKeys[i][4];
                graph.title = options.dataKeys[i][1];
                graph.type = config.graph.type;
                graph.connect = options.connect;
                /**"drillable"是dataprovider中field，表示此数据item是否可以进行钻取的标志
                 *如果可以钻取，drillable=" ";(值为空字符，不是没有)如果不能钻取，则不设置此值。
                 */
                graph.drillField = "drillable";

                /* 支持用户配置自定义图的提示定义 */
                if (options.balloonText) {
                    graph.balloonText = options.balloonText;
                } else {
                    tempTValue = options.leftUnit ? (composeTV + " " + options.leftUnit) : composeTV;
                    graph.balloonText = (sType === cfgSTpye) ? composeTP : tempTValue;
                }
                /* 图例的提示格式 */
                graph.lineThickness = config.graph.lineThickness;
                /* 如果折线数超过maxPacket，将不对颜色进行指定 */
                if (lineNum > 0 && lineNum <= me.maxPacket) {
                    graph.lineColor = colors[i - 1];
                }

                /* 用户自定义颜色值 */
                if (options.definedColor) {
                    graph.colorField = "color";
                    graph.lineThickness = 0;
                    delete graph.lineColor;
                }
                switch (options.graphType) {
                    case graphType.AREA:
                        graph.lineAlphas = 1;
                        graph.fillAlphas = 0.6;
                        break;
                    case graphType.BAR:
                    case graphType.COLUMN:
                        /* 如果不是折线图,是柱状图，需要设置填充alphas为1 */
                        graph.fillAlphas = 1;
                        graph.type = graphType.COLUMN;
                        options.graphType === graphType.BAR ? cEl.rotate = true : graph.labelText = "";
                        break;
                    case graphType.LINE:
                        if (options.style === 1) {
                            if (lineNum > 0 && lineNum <= me.maxPacket) {
                                /* 折线图时，bullet的样式颜色 */
                                if (!$.isNull(graph.lineColor)) {
                                    graph.bulletBorderColor = graph.lineColor;
                                }
                                graph.bulletColor = "#ffffff";
                            }
                            graph.bullet = config.graph.bullet;
                        }
                        break;
                    case graphType.MIX_COLUMN_LINE:
                        /* 混合图的情况，有两个Y轴，dataKeys[i][1]对应左轴，dataKeys[i][2]对应右轴,dataKeys[i][3]对应相应轴是line还是column */
                        var ttype = options.dataKeys[i][3];
                        if (ttype === graphType.LINE) {
                            graph.type = graphType.LINE;
                        } else if (ttype === graphType.COLUMN || ttype === graphType.BAR) {
                            graph.type = graphType.COLUMN;
                            graph.fillAlphas = 1;
                            options.graphType === graphType.BAR ? cEl.rotate = true : graph.labelText = "";
                        } else if (ttype === graphType.AREA) {
                            graph.lineAlphas = 1;
                            graph.fillAlphas = 0.6;
                        }

                        if (options.style === 1 && ttype === graphType.LINE) {
                            graph.bullet = config.graph.bullet;
                            if (!$.isNull(graph.lineColor)) {
                                graph.bulletBorderColor = graph.lineColor;
                            }
                            graph.bulletColor = "#ffffff";
                        }

                        if (options.dataKeys[i][2] === "left") {
                            if ($.isNull(ttype)) {
                                graph.type = graphType.COLUMN;
                                graph.fillAlphas = 1;
                            }
                            graph.valueAxis = me.yAxis.left;
                        } else {
                            /* 支持用户配置自定义图的提示定义 */
                            if (options.balloonText) {
                                graph.balloonText = options.balloonText;
                            } else {
                                tempTValue = options.rightUnit ? (composeTV + " " + options.rightUnit) : composeTV;
                                graph.balloonText = (sType === cfgSTpye) ? composeTP : tempTValue;
                            }
                            graph.valueAxis = me.yAxis.right;
                        }
                        break;
                }
                me._graphs[graph.valueField] = graph;
                cEl.addGraph(graph);
            }
        },
        /**
         * @private
         * @description 改变了图中的属性时调用
         * @param {Boolean} isClear 设置数据时是否destroy图表
         */
        _setChangeProperty: function(isClear) {
            var me = this,
                options = me.options;
            //DTS2013081300532 add start
            /* dataKeys为空时的情况 */
            if ($.isNull(options.dataKeys) || (!$.isNull(options.dataKeys) && options.dataKeys.length === 0)) {
                options.dataKeys = ["text"];
            }

            me.chartElement.categoryField = me.options.dataKeys[0];
            /* data为空时的情况 */
            if ($.isNull(options.data) || (!$.isNull(options.data) && options.data.length === 0)) {
                me._setNoData();
            }
            if (me._doAddUnitTitleFun) {
                me.chartElement.removeListener(me.chartElement, "rendered", me._doAddUnitTitleFun);
                me._doAddUnitTitleFun = null;
            }
            //图性能优化
            if (isClear) {
                if (me.chartElement) {
                    me.chartElement.destroy();
                }
                if (me.chartEl) {
                    me.chartEl.empty();
                }
                me._createJsChart();
                me._addListener();
                me.chartElement.dataProvider = me.options.data;
                me.rendered = false;
                me._chartRender(me.options.renderTo);
                me.rendered = true;
                me.chartElement.invalidateSize();
                if (me._doAddUnitTitleFun) {
                    me.chartElement.removeListener(me.chartElement, "rendered", me._doAddUnitTitleFun);
                    me._doAddUnitTitleFun = null;
                }
                /* 对单位进行重新定位 */
                if (options.graphType === Sweet.constants.graphType.BAR) {
                    if (!$.isNull(options.chartTitle) && (me.preTitle !== options.chartTitle)) {
                        me.chartElement.titles = [];
                        me.chartElement.addTitle(options.chartTitle, me.fontSizeLarger,
                        me.labelColor, me.labelAlpha, me.chartFontFamily);
                        me.preTitle = options.chartTitle;
                    }
                    me._doAddUnitTitleFun = function() {
                        me._addUnitTitle(true);
                    };
                    me.chartElement.addListener("rendered", me._doAddUnitTitleFun);
                } else {
                    me._addUnitTitle(true);
                }
                return;
            }
            //DTS2013081300532 add end
            me.chartElement.dataProvider = me.options.data;
            /* 设置CategoryAxis信息及上面的阈值线 */
            me._setCategoryAxis();

            /* 设置valueAxis信息及上面的阈值线 */
            me.yAxis = me._createValueAxis();
            me._createGraphs();
            me.chartElement.invalidateSize();
            if (options.graphType === Sweet.constants.graphType.BAR) {
                if (!$.isNull(options.chartTitle) && (me.preTitle !== options.chartTitle)) {
                    me.chartElement.titles = [];
                    me.chartElement.addTitle(options.chartTitle, me.fontSizeLarger,
                    me.labelColor, me.labelAlpha, me.chartFontFamily);
                    me.preTitle = options.chartTitle;
                }
                me._doAddUnitTitleFun = function() {
                    me._addUnitTitle();
                };
                me.chartElement.addListener("rendered", me._doAddUnitTitleFun);
            } else {
                me._addUnitTitle();
            }
        },
        /**
         * @private
         * @description 只更新数据 
         */
        _updateData: function() {
            var me = this;
            me.chartElement.dataProvider = me.options.data;
            me.chartElement.validateData();
        },
        /**
         * @private
         * @description 创建cursor
         */
        _createJsCursor: function() {
            var me = this;
            if (me.options.isCursor) {
                var chartCursor = new AmCharts.ChartCursor();
                chartCursor.bulletsEnabled = true;
                chartCursor.oneBalloonOnly = me.options.oneBalloonOnly;
                if (me.options.parseDate) {
                    chartCursor.categoryBalloonDateFormat = me.options.categoryBalloonDateFormat;
                }
                /* UI规范的内容 */
                chartCursor.cursorPosition = config.cursor.cursorPosition;
                chartCursor.dashLength = 8;
                chartCursor.cursorColor = chartCursor.categoryBalloonColor = config.cursor.categoryBalloonColor;
                me.chartElement.addChartCursor(chartCursor);
            }
        },

        /**
         * @private
         * @description 创建scrollbar
         */
        _createJsScrollbar: function() {
            if (this.options.isScrollbar) {
                var chartScrollbar = new AmCharts.ChartScrollbar();
                /* UI规范的内容 */
                chartScrollbar.backgroundColor = "#e2ebf4";
                chartScrollbar.scrollbarHeight = 15;
                this.chartElement.addChartScrollbar(chartScrollbar);
            }
        },
        /**
         * @private
         * @description 创建legend
         */
        _createJsLegend: function() {
            var me = this;
            if (me.options.isLegend) {
                var legend = new AmCharts.AmLegend();
                legend.position = config.legend.position;
                //UI规范的内容
                legend.align = config.legend.align;
                legend.valueAlign = "left";
                legend.markerType = config.legend.markerType;
                legend.color = me.textColor;
                legend.valueWidth = 110;
                legend.switchType = "v";
                legend.switchable = me.options.switchable;
                if (!me.options.legendTips) {
                    legend.valueText = "";
                }
                //Begin----------add for DTS2014031407008
                legend.addListener("hideItem", function(e) {
                    if (!me._graphs) {
                        return;
                    }
                    me._graphs[e.dataItem.valueField].hidden = true;
                });
                legend.addListener("showItem", function(e) {
                    if (!me._graphs) {
                        return;
                    }
                    me._graphs[e.dataItem.valueField].hidden = false;
                });
                //End----------add for DTS2014031407008
                me.chartElement.addLegend(legend);
            }
        },
        /**
         * @public
         * @description 设置图的类型，并按设置的类型重绘图(图形切换使用)
         * @param {string} chartType 图的类型,例如: "line", "column", "area"等
         * @param {string} stackType 图的stackType类型，例如："100%", "regular"等
         */
        setChartType: function(chartType, stackType) {
            var me = this,
                options = me.options;
            if (!$.isNull(chartType)) {
                options.graphType = chartType;
            }

            /* stack可以为undefined */
            options.stackType = stackType;
            me.chartElement.rotate = false;
            /* 更新各个和chart type相关的属性设置,设置CategoryAxis信息及上面的阈值线 */
            me._setChangeProperty();
        },
        /**
         * @private
         * @description 专门用来设置没有数据时的显示内容 
         */
        _setNoData: function() {
            var me = this;
            if ($.isNull(me.chartElement.categoryField)) {
                me.chartElement.categoryField = "text";
            }
            /* 因为没有数据时x轴显示为"没有数据"，所有parseDates为false才能显示 */
            if (!me.options.parseDate) {
                var temp = {};
                temp[me.chartElement.categoryField] = Sweet.core.i18n.chart.noDataTips;
                me.options.data = [temp];
            } else {
                me.options.data = [];
            }
        },

        /**
         * @private
         * @description 当没有数据时，各自图设置自己格式的默认数据
         */
        _setDefaultData: function() {
            var me = this;
            //DTS2013081300532 add  start
            me._setNoData();
            //DTS2013081300532 add  end
            me._updateData();
        },
        /**
         * @parivate
         * @description 渲染折线图到相应的到div
         */
        _chartRender: function() {
            var me = this;
            if (me.rendered || !me.chartElement) {
                return;
            }

            /* 渲染图*/
            me.chartElement.write(me.lineId);
            /* 添加unit或者title */
            me._addUnitTitle();
        },
        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var me = this;
            if (!me.options.renderTo || me.options.renderTo === "" || !me.chartElement) {
                return;
            }

            me.chartElement.invalidateSize();
            /* 对单位进行重新定位 */
            me._addUnitTitle();
        }
    });

    /**
     * 折线图，面积图，条形图，柱状图组件
     */
    Sweet.chart.Line = $.sweet.widgetChartLine;

}(jQuery));;
/**
 * @fileOverview 饼图
 * @date 2013/03/17
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建饼图
 * @name Sweet.chart.Pie
 * @class 
 * @extends Sweet.chart
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  var data = [{"value":1, "text": "ONE"}, 
 *                  {"value":2, "text": "TWO"}, 
 *                  {"value":1, "text": "eww"}, 
 *                  {"value":1, "text": "Four"},
 *                  {"value":1, "text": "Five"},
 *                  {"value":1, "text": "Six"}];
 *  sweetTopo = new Sweet.chart.Pie({
 *      width : "100%",
 *      height : 600,
 *      data : data,
 *      renderTo : "sweet-pie"
 * });
 * </pre>
 */
(function($, undefined) {
    /**
     * 饼图支持颜色集合
     */
    var colorsPie = [
        ["#369cd8"],
        ["#369cd8", "#b7e042"],
        ["#369cd8", "#b7e042", "#cf7a37"],
        ["#369cd8", "#b7e042", "#cf7a37", "#9a53e4"],
        ["#369cd8", "#63ccd3", "#b7e042", "#cf7a37", "#9a53e4"],
        ["#369cd8", "#63ccd3", "#b7e042", "#f2a14e", "#cf7a37", "#9a53e4"],
        ["#369cd8", "#63ccd3", "#b7e042", "#f2a14e", "#cf7a37", "#d07dd0", "#9a53e4"],
        ["#369cd8", "#60b2df", "#63ccd3", "#b7e042", "#f2a14e", "#cf7a37", "#d07dd0", "#9a53e4"],
        ["#369cd8", "#60b2df", "#63ccd3", "#b7e042", "#90cc19", "#f2a14e", "#cf7a37", "#d07dd0", "#9a53e4"],
        ["#369cd8", "#60b2df", "#63ccd3", "#b7e042", "#90cc19", "#f2a14e", "#cf7a37", "#cf4737", "#d07dd0", "#9a53e4"],
        ["#369cd8", "#60b2df", "#63ccd3", "#b7e042", "#90cc19", "#f2a14e", "#cf7a37", "#cf4737", "#d07dd0", "#9a53e4",
            "#a5a5a5"]
    ];
    var fillGraphPath = Sweet.libPath + 'themes/default/core/images/chart/';
    var pieConfigData = {
        // 3D属性描述
        depth3D: 0,
        angle: 0,
        textureMap: {
            '#369CD8': fillGraphPath + 'texture_369CD8.png',
            "#60B2DF": fillGraphPath + 'texture_60B2DF.png',
            "#63CCD3": fillGraphPath + 'texture_63CCD3.png',
            "#B7E042": fillGraphPath + 'texture_B7E042.png',
            "#90CC19": fillGraphPath + 'texture_90CC19.png',
            "#F2A14E": fillGraphPath + 'texture_F2A14E.png',
            "#CF7A37": fillGraphPath + 'texture_CF7A37.png',
            "#CF4737": fillGraphPath + 'texture_CF4737.png',
            "#D07DD0": fillGraphPath + 'texture_D07DD0.png',
            "#9A53E4": fillGraphPath + 'texture_9A53E4.png',
            "#A5A5A5": fillGraphPath + 'texture_A5A5A5.png',
            "#777D8B": fillGraphPath + 'texture_777D8B.png',
            "#F77007": fillGraphPath + 'texture_F77007.png'
        }
    };
    var noData = [{
        text: Sweet.core.i18n.chart.noDataTips
    }];
    var noDataColor = "#A5A5A5";
    $.widget("sweet.widgetChartPie", $.sweet.widgetChart, /** @lends Sweet.chart.Pie.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-pie]:",
        eventNames: /** @lends Sweet.chart.Pie.prototype*/
        {
            /**
             * @event
             * @description 饼图块单击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "饼图块单击事件"
        },
        options: /** @lends Sweet.chart.Pie.prototype*/
        {
            /**
             * 组件数据, 默认要求数据格式为[{"text":one, "value":1},{"text":two, "value":2}]
             * @type Array
             * @default []
             */
            data: [],
            /**
             * 饼图组件数据key值
             * @type Array
             * @default ['text', 'value']
             */
            dataKeys: ['text', 'value'],
            /**
             * 饼图中tips与饼之间的距离,设置为负值，表示tip在饼图中显示
             * @type number
             * @default 15
             */
            labelRadius: 15,
            /**
             * 是否显示图例
             * @type boolean
             * @default true
             */
            isLegend: true,
            /**
             * 饼图的填充是否使用颜色图片，否则使用纯色进行填充
             * @type boolean
             * @default false  默认为false，dashborad现在使用的true
             */
            fillGraph: false,
            /**
             * 饼图的标题内容
             * @type string
             * @default ""
             */
            title: "",
            /**
             * 表示是3D还是2D图
             * @type number
             * @default 2
             */
            depth3D: 2,
            /**
             * 图旋转的角度
             * @type number
             * @default 0
             */
            angle: 0,
            /**
             * 图例的位置，使用的值为"right","left","top","bottom"
             * @type string
             * @default "right"
             */
            position: "right",
            /**
             * 饼图上的文字，一般显示饼图的百分占比，如果不显示，设置为""
             * @type String
             * @default "[[percents]]%"
             */
            labelText: "[[percents]]%",
            /**
             * 点击饼图时，是否一直只有一块饼在out
             * @type boolean
             * @default false
             */
            pullOutOnlyOne: false,
            /**
             * 饼图是否自动根据屏幕分辨率显示相应的样式，具体：在<=1024时，饼图上不显示label提示；
             * 在<=1350的情况下，最小半径为30px，并且图例间的垂直间隔各不相同。
             * @type boolean
             * @default false
             */
            autoScreenDisplay: false,
            /**
             * 图例的中文最多显示多少个字符，多于的添加"...",不出提示，在饼图上提示
             * @type Number
             * @default 10
             */
            maxLegendTextZH: 10,
            /**
             * 图例的英文最多显示多少个字符，多于的添加"...",不出提示，在饼图上提示
             * @type Number
             * @default 20
             */
            maxLegendTextEN: 20,
            /**
             * 饼图的最小半径
             * @type Number
             * @default 10
             */
            minRadius: 10,
            /**
             * 饼图上的百分比数据保留的小数位数，0表示全部取整,负数表示不处理全部显示
             * @type Number
             * @default 2
             */
            precision: 2,
            /**
             * 是否应用dashboard的样式
             * @type Boolean
             * @default false
             */
            dashboard: false,
            /**
             * 鼠标移动到饼图时的提示信息的格式
             * @type string
             * @default "[[title]]: [[percents]]% ([[value]])"
             */
            balloonText: "[[title]]: [[percents]]% ([[value]])",
            /**
             * 饼图中描述信息的key值,例如：可以在balloonText提示信息中使用"[[title]]: [[percents]]% ([[description]])"
             * @type String
             * @default ""
             */
            descriptionField: "",
            /**
             * 图的图例是否可以点击，以隐藏或显示 相应图形
             * @type boolean
             * @default true
             */
            switchable: true,
            /**
             * 是否对传入的数据进行从大到小的排序，默认组件排序，如果用户自己排序，请设置此值为false
             * @type boolean
             * @default true
             */
            isSortForData: true,
            /**
             * 饼图上的百分比小于此值时会隐藏不显示label，默认值为6(UCD给出的最佳数值)
             * @type Number
             * @default 6
             */
            hideLabelsPercent: 6
        },

        /**
         * @private
         * @description 饼图的点击事件,如果有配置钻取信息，则点击出菜单进行钻取
         * @param {Object} evt 饼图点击区域事件对象
         * @param {object} me 饼图对象
         * @param {function} func (event, data) 通过addListener注册的回调函数
         */
        _onClick: function(evt, me, func) {
            var x = evt.chart.mouseX,
                y = evt.chart.mouseY,
                dataContext = evt.dataItem.dataContext,
                chartData = evt.chart.dataProvider,
                tempData,
                menuItem;
            /**取得当前点击块是否有钻取菜单信息*/
            for (var i = 0; i < chartData.length; i++) {
                tempData = chartData[i];
                if (!$.isNull(tempData.menu)) {
                    menuItem = JSON.parse(JSON.stringify(tempData.menu));
                    delete tempData.menu;
                    var isEqual = $.equals(tempData, dataContext);
                    tempData.menu = menuItem;
                    if (isEqual) {
                        break;
                    } else {
                        menuItem = null;
                    }
                }
            }

            /**点击图中任何位置，需要先去掉已经存在的menu*/
            if (me.menu) {
                me.menu.hide();
            }

            /**如果有钻取菜单，点击需要显示菜单*/
            if (menuItem) {
                var menuDivId = me.options.id + "-pie-menu",
                    menuDiv;
                if ($("#" + menuDivId).length === 0) {
                    menuDiv = $("<div>").attr("id", menuDivId);
                } else {
                    menuDiv = $("#" + menuDivId);
                }
                menuDiv.appendTo($("#" + me.options.renderTo));
                me.menu = new Sweet.menu.Menu({
                    renderTo: menuDivId,
                    X: x,
                    Y: y,
                    items: menuItem,
                    itemSelect: function(itemEvent, itemInfo) {
                        var temp = {
                            "event": itemEvent,
                            "itemInfo": itemInfo,
                            "value": dataContext
                        };
                        //通过addListener注册的回调函数
                        if (func) {
                            func(evt, temp);
                        } else {
                            me._trigger("click", evt, temp);
                        }
                    }
                });
            } else {
                //通过addListener注册的回调函数
                if (func) {
                    func(evt, dataContext);
                } else {
                    me._trigger("click", evt, dataContext);
                }
            }
        },

        /**
         * @private
         * @description 关闭浮动窗口(饼图钻取弹出的menu菜单),框架统一调用。
         */
        _closeFloatPanel: function() {},

        /**
         * @private
         * @description 去激活注册事件
         * @param {Sting} eName 去除的事件的名称，不传或为空时，去除全部的注册事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};
            if (!eName || eName === "") {
                $.each(me.handlers, function(eventName, func) {
                    me.chartElement.removeListener(me.chartElement, eventName, func);
                });
            } else {
                $.each(me.handlers, function(eventName, func) {
                    if (eName === eventName) {
                        me.chartElement.removeListener(me.chartElement, eventName, func);
                    }
                });
            }
        },

        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    me.chartElement.addListener("clickSlice", function(evt) {
                        me._onClick(evt, me, func);
                    });
                }
            });
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            this.chartEl.externalWidth(width);
            this.pieEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            this.chartEl.externalHeight(height);
            this.pieEl.externalHeight(height);
        },
        /**
         * @parivate
         * @description 创建js版饼图
         */
        _createJsChart: function() {
            var me = this,
                options = me.options,
                pieId,
                pieEl,
                w = options.width,
                h = options.height,
                cc = Sweet.constants.chart,
                chartElement;

            pieId = me.pieId = me.options.id + "-pieEl";
            pieEl = me.pieEl = $("<div>").attr("id", pieId).height(h).width(w)
                .appendTo(me.chartEl);
            chartElement = me.chartElement = new AmCharts.AmPieChart();
            chartElement.balloonText = options.balloonText;
            var scW = window.screen.width,
                fontSize = cc.fontSize.larger,
                markerSize = 16,
                legendverticalGap = 10;
            if (options.autoScreenDisplay) {
                if (scW < 1280) {
                    markerSize = 12;
                    fontSize = cc.fontSize.normal,
                    legendverticalGap = 0;
                    chartElement.minRadius = 30;
                    chartElement.labelsEnabled = false;
                    chartElement.pullOutRadius = "10%";
                    chartElement.balloonText = "[[percents]]%([[value]])";
                } else if (scW <= 1680 && scW >= 1280) {
                    fontSize = cc.fontSize.normal;
                    chartElement.minRadius = 30;
                    legendverticalGap = 2;
                    markerSize = 14;
                } else if (scW > 1680) {
                    legendverticalGap = 3;
                }
            }
            me.fontSize = fontSize;
            me.pageFontSize = fontSize - 2 < cc.fontSize.normal ? cc.fontSize.normal : fontSize - 2;
            chartElement.labelText = options.labelText;
            me._setChartProperty();
            chartElement.depth3D = options.depth3D;
            chartElement.pullOutOnlyOne = options.pullOutOnlyOne;
            chartElement.angle = options.angle;
            chartElement.labelRadius = options.labelRadius;
            chartElement.fontSize = me.pageFontSize;
            chartElement.fontFamily = cc.fontFamily;
            chartElement.hideLabelsPercent = options.hideLabelsPercent;
            chartElement.marginBottom = 0;
            chartElement.marginTop = 0;
            chartElement.numberFormatter = {
                precision: -1,
                decimalSeparator: '.',
                thousandsSeparator: ','
            };
            chartElement.percentFormatter = {
                precision: options.precision,
                decimalSeparator: '.',
                thousandsSeparator: ','
            };
            //balloon的设置，使用UI规范设置的值
            chartElement.balloon.adjustBorderColor = true;
            chartElement.balloon.fillColor = "#ffffff";
            chartElement.balloon.cornerRadius = 0;
            chartElement.balloon.pointerWidth = 5;
            //======= add DTS2014041806537==============================
            chartElement.balloon.isPieBalloon = true;
            //======= add DTS2014041806537==============================
            chartElement.color = chartElement.balloon.color = chartElement.balloon.textShadowColor = cc.textColor;
            //设置填充颜色还是图片
            if (options.fillGraph) {
                chartElement.textureMap = $.objCopy(pieConfigData.textureMap);
            }

            // 设置legned
            if (options.isLegend) {
                //除了在此设置的，其它属性值使用amChart的默认值
                var legend = new AmCharts.AmLegend();
                legend.switchType = "V";
                legend.switchable = me.options.switchable;
                legend.textClickEnabled = me.options.switchable ? false : true;
                legend.fontSize = me.pageFontSize;
                legend.color = cc.textColor;
                //legend的位置，使用的值为"right","left","top","bottom"
                legend.position = options.position;
                legend.maxLegendTextZH = options.maxLegendTextZH;
                legend.maxLegendTextEN = options.maxLegendTextEN;
                legend.graphType = "pie";
                legend.valueText = "";
                legend.verticalGap = legendverticalGap;
                legend.marginRight = 0;
                legend.marginLeft = 0;
                legend.markerSize = markerSize;
                chartElement.addLegend(legend);
            }
        },
        /**
         * @private
         * @description 更新饼图的title 
         */
        _addTitle: function() {
            var me = this,
                cc = Sweet.constants.chart,
                options = me.options;
            if (!$.isNull(options.title) && me.title !== options.title) {
                me.chartElement.titles = [];
                me.chartElement.addTitle(options.title, me.fontSize,
                cc.titleCfg.labelColor, cc.titleCfg.labelAlpha, cc.fontFamily);
                me.title = options.title;
            }
        },
        /**
         * @private
         * @description 改变了图中的属性时调用
         */
        _setChangeProperty: function() {
            var me = this;
            me._setChartProperty();
            me.chartElement.validateData();
            //由于amchart本身的原因，在饼图图例文字变短且宽度和高度固定时，需要dolayout
            me._doLayout();
        },
        /**
         * @private
         * @description 只更新数据 
         */
        _updateData: function() {
            var me = this;
            me._setChartProperty();
            me.chartElement.dataProvider = me.options.data;
            me.chartElement.validateData();
        },
        /**
         * @private
         * @description 设置饼图的data和datakeys及title
         */
        _setChartProperty: function() {
            var me = this,
                options = me.options,
                dataLength = 0,
                valueField,
                colors = [],
                noDataTxt = Sweet.core.i18n.chart.noDataTips,
                iData,
                tData;
            options.data = options.data || [];
            dataLength = options.data.length;
            me.chartElement.titleField = options.dataKeys[0];
            if ($.isArray(options.dataKeys[1])) {
                valueField = options.dataKeys[1][0];
            } else {
                valueField = options.dataKeys[1];
            }
            me.chartElement.valueField = valueField;
            if (options.descriptionField) {
                me.chartElement.descriptionField = options.descriptionField;
            }

            // 对传入数据由小到大进行排序
            if (options.isSortForData) {
                options.data.sort($.objSort(valueField, Sweet.constants.sortType.DESC));
            }

            // 设置颜色,最多11块，否则不指定颜色
            if (dataLength <= 11) {
                if (options.dashboard) {
                    if (1 == dataLength) {
                        colors = colorsPie[dataLength - 1];
                    } else {
                        for (var i = 0; i < dataLength; i++) {
                            colors.push(me._getColor(dataLength, i, true));
                        }
                    }
                    me.chartElement.colors = colors;
                } else {
                    if (dataLength <= 0) {
                        me.chartElement.colors = colors;
                    } else {
                        me.chartElement.colors = colorsPie[dataLength - 1];
                    }
                }
            }
            if (!options.data || options.data.length <= 0) {
                me.chartElement.balloonText = noDataTxt;
                me.chartElement.labelText = noDataTxt;
                iData = {};
                iData[me.chartElement.titleField] = noDataTxt;
                iData["color"] = noDataColor;
                tData = [iData];
            } else {
                me.chartElement.balloonText = options.balloonText;
                me.chartElement.labelText = options.labelText;
                tData = options.data;
            }
            me.chartElement.dataProvider = tData;
            me._addTitle();
        },
        /**
         * @parivate
         * @description 渲染饼图到相应的到div
         */
        _chartRender: function() {
            var me = this;
            if (me.rendered) {
                return;
            }

            //渲染饼图
            me.chartElement.write(me.pieId);
        },

        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var me = this;
            if (!me.rendered) {
                return;
            }

            // 延迟重绘
            Sweet.Task.Delay.start({
                id: "sweet.widget.chart.pie.layout-" + this.options.id,
                run: function() {
                    me._reDraw();
                },
                delay: 100
            });
        },

        /**
         * @description 容器改变大小后，重新绘制图
         * @returns {undefined}
         */
        _reDraw: function() {
            var me = this;
            // 重新绘制以适应容器大小
            me.chartElement.invalidateSize();
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            Sweet.Task.Delay.stop("sweet.widget.chart.pie.layout-" + this.options.id);

            this._super();
        }
    });

    // 饼图组件
    Sweet.chart.Pie = $.sweet.widgetChartPie;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 图--指示灯
 * 2013/4/10
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 创建指示灯
 * @name Sweet.chart.Indicator
 * @class 
 * @extends Sweet.chart
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  indicator1 = new Sweet.chart.Indicator({
 *      width: 300,
 *      data: {"major": 2, "minor": 3, "normal": 5},
 *      renderTo: "sweet-chart-indicator1",
 *      click: function(e, data) {
 *          console.log("clicK: current value is " + 
 *              data.currentVal + ", and this indicator's value is " + 
 *              data.value.major + "," + data.value.minor + ","  + data.value.normal);
 *      }
 *  });
 * </pre>
 */

(function($, undefined) {
    var indicatorDiv1Cls = "sweet-chart-indicator-div1",
        indicatorColorCommon = "sweet-chart-indicator-color-common",
        indicatorRedLeft = "sweet-chart-indicator-red-left",
        indicatorRedAll = "sweet-chart-indicator-red-all",
        indicatorYellowAll = "sweet-chart-indicator-yellow-all",
        indicatorYellowLeft = "sweet-chart-indicator-yellow-left",
        indicatorYellowMiddel = "sweet-chart-indicator-yellow-middle",
        indicatorYellowRight = "sweet-chart-indicator-yellow-right",
        indicatorGreenAll = "sweet-chart-indicator-green-all",
        indicatorGreenRight = "sweet-chart-indicator-green-right",
        indicatorGrayAll = "sweet-chart-indicator-gray-all";
    $.widget("sweet.widgetChartIndicator", $.sweet.widgetChart, /** @lends Sweet.chart.Indicator.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-indicator]:",
        eventNames: /** @lends Sweet.chart.Indicator.prototype*/
        {
            /**
             * @event
             * @description 指示灯单击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "指示灯单击事件"
        },
        options: /** @lends Sweet.chart.Indicator.prototype*/
        {
            /**
             * 组件高度
             * @type Number
             * @default 21
             */
            height: 21,
            /**
             * 组件数据, 默认要求数据格式为{"major": 2, "minor": 1, "normal": 3}
             * @type Object
             * @default {}
             */
            data: {}
        },
        /**
         * @description 设置组件值
         * @param {Object} data 数据
         */
        setData: function(data) {
            var me = this;
            me.options.data = data;
            me._doLayout();
        },
        /**
         * @private
         * @description 去激活注册事件
         * @param {Sting} eName 去除的事件的名称，不传或为空时，去除全部的注册事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(eventName, func) {
                me.indicatorDiv1El.unbind(eventName);
            });
        },
        /**
         * @private
         * 组件注册监听事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if ("click" === eventName && me.indicatorDiv1El) {
                    me.indicatorDiv1El.bind(eventName, {
                        "me": me,
                        "func": func
                    }, me._onClick);
                }
            });
        },
        /**
         * @parivate
         * @description 创建js版饼图
         */
        _createJsChart: function() {
            var me = this,
                options = me.options,
                data = options.data;

            // 红、黄、绿组件
            var indicatorDiv1El = me.indicatorDiv1El = $("<div>").appendTo(me.chartEl),
                indicatorLeftEl = me.indicatorLeftEl = $("<div>").appendTo(me.indicatorDiv1El),
                indicatorMiddelEl = me.indicatorMiddelEl = $("<div>").appendTo(me.indicatorDiv1El),
                indicatorRightEl = me.indicatorRightEl = $("<div>").appendTo(me.indicatorDiv1El);
            me.indicatorLeftEl.data({
                type: "major"
            });
            me.indicatorMiddelEl.data({
                type: "minor"
            });
            me.indicatorRightEl.data({
                type: "normal"
            });
            // 注册事件
            me.addListener();
            me._creatDiffIndicator();
        },
        /**
         * @private
         * @description 计算比例，默认最小应占到 1/4
         * @param {Number} proportion 所占比例
         * @param {Number} total 总值
         * @param {Number} width 外层组件宽度
         */
        _creatDiffIndicator: function() {
            var me = this,
                options = me.options,
                data = options.data;

            // 数据格式校验
            if (data.major === undefined || data.major < 0 || data.minor === undefined || data.minor < 0 || data.normal === undefined || data.normal < 0) {
                if (!data.options || data.options.gray === undefined) {
                    return;
                }
                me._creatGrayIndicator();
            } else {
                me._madeColorElCss();
            }
        },
        /**
         * @private
         * @description 计算比例，默认最小应占到 1/4
         * @param {Number} proportion 所占比例
         * @param {Number} total 总值
         * @param {Number} width 外层组件宽度
         */
        __caculateWidth: function(proportion, total) {
            if (0 === proportion) {
                return 0;
            }
            return (proportion / total) * 100;
        },
        /**
         * @parivate
         * @description 修改不同颜色组合的样式
         */
        _madeColorElCss: function() {
            var me = this,
                data = me.options.data;

            var segmentWidth = me._getColorSegmentWidth(),
                majorSize = segmentWidth.majorSize,
                normalSize = segmentWidth.normalSize,
                minorSize = segmentWidth.minorSize;

            // 颜色组合分类
            // 有红色
            if (data.major !== 0) {
                // 有黄色
                if (data.minor !== 0) {
                    // 1、 红-黄-绿
                    if (data.normal !== 0) {
                        me.indicatorLeftEl.html(data.major)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorRedLeft)
                            .width(majorSize);
                        me.indicatorMiddelEl.html(data.minor)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorYellowMiddel)
                            .width(minorSize);
                        me.indicatorRightEl.html(data.normal)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorGreenRight)
                            .width(normalSize);
                    }
                    // 2、红-黄
                    else {
                        me.indicatorLeftEl.html(data.major)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorRedLeft)
                            .width(majorSize);
                        me.indicatorRightEl.html(data.minor)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorYellowRight)
                            .width(minorSize);
                    }
                }
                // 无黄色
                else {
                    // 3、红-绿
                    if (data.normal !== 0) {
                        me.indicatorLeftEl.html(data.major)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorRedLeft)
                            .width(majorSize);
                        me.indicatorRightEl.html(data.normal)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorGreenRight)
                            .width(normalSize);
                    } // 4、红
                    else {
                        me.indicatorLeftEl.html(data.major)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorRedAll)
                            .width(majorSize);
                    }
                }
            }
            // 无红色
            else {
                if (data.minor !== 0) {
                    if (data.normal !== 0) {
                        // 5、黄-绿
                        me.indicatorLeftEl.html(data.minor)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorYellowLeft)
                            .width(minorSize);
                        me.indicatorRightEl.html(data.normal)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorGreenRight)
                            .width(normalSize);
                    } else {
                        // 6、黄
                        me.indicatorLeftEl.html(data.minor)
                            .removeClass()
                            .addClass(indicatorColorCommon + " " + indicatorYellowAll)
                            .width(minorSize);
                    }
                } else {
                    // 7、只有绿色数值或三个数据都为0，都有绿色表示，宽度为100%
                    me.indicatorLeftEl.html(data.normal)
                        .removeClass()
                        .addClass(indicatorColorCommon + " " + indicatorGreenAll)
                        .width(me.chartEl.width());
                }
            }
            if (data && data["unClick"]) {
                if ("true" === data["unClick"]["major"] || true === data["unClick"]["major"]) {
                    if (me.indicatorLeftEl) {
                        me.indicatorLeftEl.css({
                            cursor: "default"
                        });
                    }
                }
                if ("true" === data["unClick"]["minor"] || true === data["unClick"]["minor"]) {
                    if (me.indicatorMiddelEl) {
                        me.indicatorMiddelEl.css({
                            cursor: "default"
                        });
                    }
                }
                if ("true" === data["unClick"]["normal"] || true === data["unClick"]["normal"]) {
                    if (me.indicatorRightEl) {
                        me.indicatorRightEl.css({
                            cursor: "default"
                        });
                    }
                }
            }
        },
        /**
         * @parivate
         * @description 计算红黄绿各占的像素值
         */
        _getColorSegmentWidth: function() {
            var me = this,
                data = me.options.data,
                width = me.chartEl.width();

            data.major = parseInt(data.major, 10);
            data.minor = parseInt(data.minor, 10);
            data.normal = parseInt(data.normal, 10);

            var total = data.major + data.minor + data.normal;
            var majorSize = me.__caculateWidth(data.major, total);
            var minorSize = me.__caculateWidth(data.minor, total);
            var normalSize = me.__caculateWidth(data.normal, total);

            var majorFlag = (majorSize < 25 && majorSize > 0);
            var minorFlag = (minorSize < 25 && minorSize > 0);
            var normalFlag = (normalSize < 25 && normalSize > 0);

            var num = 0;
            num = majorFlag ? num + 1 : num;
            num = minorFlag ? num + 1 : num;
            num = normalFlag ? num + 1 : num;

            if (1 === num) {
                var tot = 0;
                var wid = 0;
                if (majorFlag) {
                    majorSize = Math.round(25 / 100 * width);
                    tot = data.minor + data.normal;
                    wid = width - majorSize;
                    minorSize = Math.round(me.__caculateWidth(data.minor, tot) / 100 * wid);
                    normalSize = wid - minorSize;
                }
                if (minorFlag) {
                    minorSize = Math.round(25 / 100 * width);
                    tot = data.major + data.normal;
                    wid = width - minorSize;
                    majorSize = Math.round(me.__caculateWidth(data.major, tot) / 100 * wid);
                    normalSize = wid - majorSize;
                }
                if (normalFlag) {
                    normalSize = Math.round(25 / 100 * width);
                    tot = data.minor + data.major;
                    wid = width - normalSize;
                    minorSize = Math.round(me.__caculateWidth(data.minor, tot) / 100 * wid);
                    majorSize = wid - minorSize;
                }
            } else if (2 === num) {
                majorSize = Math.round(25 / 100 * width);
                minorSize = Math.round(25 / 100 * width);
                normalSize = Math.round(25 / 100 * width);
                if (!normalFlag) {
                    normalSize = Math.round(50 / 100 * width);
                }
                if (!minorFlag) {
                    minorSize = Math.round(50 / 100 * width);
                }
                if (!majorFlag) {
                    majorSize = Math.round(50 / 100 * width);
                }
            } else {
                majorSize = Math.round(majorSize / 100 * width);
                minorSize = Math.round(minorSize / 100 * width);
                normalSize = Math.round(normalSize / 100 * width);
            }

            var widthValue = {
                "majorSize": majorSize,
                "minorSize": minorSize,
                "normalSize": normalSize
            };
            return me._correctWidthValue(widthValue, width);
        },
        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _creatGrayIndicator: function() {
            var me = this,
                options = me.options,
                data = options.data;

            me.indicatorLeftEl.html(data.options.gray)
                .removeClass()
                .addClass(indicatorColorCommon + " " + indicatorGrayAll)
                .width(me.chartEl.width());
            if (data && data["unClick"]) {
                if ("true" === data["unClick"]["major"] || true === data["unClick"]["major"]) {
                    if (me.indicatorLeftEl) {
                        me.indicatorLeftEl.css({
                            cursor: "default"
                        });
                    }
                }
            }
        },
        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            if (!this.rendered) {
                return;
            }
            var me = this;
            me.indicatorLeftEl.width(0).text("").removeClass();
            me.indicatorMiddelEl.width(0).text("").removeClass();
            me.indicatorRightEl.width(0).html("").removeClass();
            me._creatDiffIndicator();
        },
        /**
         * @parivate
         * @descrption 重新设置数据
         * @param {object} val 组件data值
         */
        _setValue: function(val) {
            this._error("Nothing to do!");
            return;
        },
        /**
         * 获取组件值
         * @private
         * @return {Object} 
         */
        _getValue: function() {
            this._error("Nothing to do!");
            return;
        },
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this;
            if (me.indicatorDiv1El) {
                me.indicatorDiv1El.bind("click", {
                    "me": me
                }, me._onClick);
            }
        },
        /**
         * @parivate
         * 点击事件
         * @param {Object} event 按钮单击对象
         */
        _onClick: function(event) {
            var me = event.data.me,
                obj = $(event.target),
                currentType = obj.data("type"),
                data = me.options.data,
                params = {
                    currentVal: obj.html(),
                    currentType: currentType,
                    value: data
                },
                func = event.data.func;
            if (data && data["unClick"]) {
                if ("true" === data["unClick"][currentType] || true === data["unClick"][currentType]) {
                    return false;
                }
            }
            if (func) {
                func.call(this, $.objClone(params));
            } else {
                me._trigger("click", event, $.objClone(params));
            }
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            var me = this;
            if (me.indicatorLeftEl) {
                me.indicatorLeftEl.remove();
            }
            if (me.indicatorMiddelEl) {
                me.indicatorMiddelEl.remove();
            }
            if (me.indicatorRightEl) {
                me.indicatorRightEl.remove();
            }
            if (me.indicatorDiv1El) {
                me.indicatorDiv1El.unbind();
                me.indicatorDiv1El.remove();
            }
            me._super();
        },
        /**
         * @private
         * @description 对计算的三个像素值处理
         * @param {Object} jsonData,红黄绿各占的像素值
         * @param {Object} totolWidth,组件的宽度
         * @return {Number} 返回最大值的位置 
         */
        _correctWidthValue: function(jsonData, totalWidth) {
            var result = jsonData,
                addWidth = jsonData.majorSize + jsonData.minorSize + jsonData.normalSize,
                diff = addWidth - totalWidth,
                max = {
                    name: "majorSize",
                    value: jsonData.majorSize
                };
            if (0 === addWidth) {
                return result;
            }
            for (var key in jsonData) {
                if (jsonData[key] > max.value) {
                    max = {
                        name: key,
                        value: jsonData[key]
                    };
                }
            }
            result[max.name] = result[max.name] - diff;
            return result;
        }
    });

    // 饼图组件
    Sweet.chart.Indicator = $.sweet.widgetChartIndicator;

}(jQuery));;
/**
 * @fileOverview 折线图
 * @date 2013/02/20
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建dashboard专用的折线，柱图，堆积图，面积图等
 * @name Sweet.chart.DashLine
 * @class 
 * @extends Sweet.chart
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 <pre>
 *  var data = [{
 *               text: "1950-01-03 16:00",
 *               value: 150000000,
 *               value1: 560000000
 *           }, {
 *               text: "1951-01-03 17:00",
 *               value: 330000000,
 *               value1: 100000000
 *           }, {
 *               text: "1952-01-03 18:00",
 *               value: 250000000,
 *               value1: 550000000
 *           }];
 *  var reader = new Sweet.Reader.JsonReader();
 *           var store = new Sweet.Store({
 *               url : "../data/line.jsp",
 *               reader : reader
 *           });
 *           line = new Sweet.chart.DashLine({
 *               store : store,
 *				chartTitle : "Test Chart",
 *               height : "100%",
 *               width : "100%",
 *				xThresholdValue : "2013",
 *               yThresholdValue : "214500200",
 *				graphType : "line",
 *               stackType : "none",
 *               data: [],
 *				leftUnit : "times",
 *               rightUnit : "count",
 *               dataKeys: ["text", ["value", "Tuanjie11"], ["value1", "tesddjdkdk"]]});
 *           line.render("sweet-chart-line");
 *           store.load();
 * </pre>
 */
(function($, undefined) {

    var fillGraphPath = Sweet.libPath + 'themes/default/core/images/chart/';
    // 折线图配置数据
    var lineConfData = {
        // 绘制图形描述信息
        graph: {
            bullet: "round",
            type: "line",
            lineThickness: 2
        },
        // 提示配置
        balloon: {
            adjustBorderColor: true,
            fillColor: "#ffffff",
            pointerWidth: 5,
            cornerRadius: 0
        },
        // cursor鼠标滑动时配置
        cursor: {
            cursorPosition: "mouse",
            corsorColor: "#777d8b",
            //这里使用渐变颜色
            categoryBalloonColor: ["#717581", "#454e5f"]
        },
        // legend图例配置
        legend: {
            position: "bottom",
            align: "center",
            markerType: "square"
        },
        // 阈值线配置
        guide: {
            lineColor: ["#f5c245", "#DA6263"],
            lineAlpha: 1,
            fillAlpha: 0.2,
            dashLength: 2,
            inside: true,
            labelRotation: 90
        },
        axisColor: "#777d8b",
        //只给柱状图和面积图使用有效
        stackType: ["regular", "100%", "3d", "none"],
        textureMap: {
            '#369CD8': fillGraphPath + 'texture_369CD8.png',
            "#60B2DF": fillGraphPath + 'texture_60B2DF.png',
            "#63CCD3": fillGraphPath + 'texture_63CCD3.png',
            "#B7E042": fillGraphPath + 'texture_B7E042.png',
            "#90CC19": fillGraphPath + 'texture_90CC19.png',
            "#F2A14E": fillGraphPath + 'texture_F2A14E.png',
            "#CF7A37": fillGraphPath + 'texture_CF7A37.png',
            "#CF4737": fillGraphPath + 'texture_CF4737.png',
            "#D07DD0": fillGraphPath + 'texture_D07DD0.png',
            "#9A53E4": fillGraphPath + 'texture_9A53E4.png',
            "#A5A5A5": fillGraphPath + 'texture_A5A5A5.png',
            "#777D8B": fillGraphPath + 'texture_777D8B.png',
            "#F77007": fillGraphPath + 'texture_F77007.png'
        },
        bar: {
            maxLeftMargin: 150
        }
    };
    var noData = [{
        text: Sweet.core.i18n.chart.noDataTips
    }];

    var chartClass = "sweet-chart-dashline",
        rangeTipClass = "sweet-chart-dashline-range-tip",
        arrowClass = "tip-arrow",
        labelClass = "tip-label";

    $.widget("sweet.widgetChartDashLine", $.sweet.widgetChart, /** @lends Sweet.chart.DashLine.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget_chart_dashLine]:",
        eventNames: /** @lends Sweet.chart.DashLine.prototype*/
        {
            /**
             * @event
             * @description 图上的节点或柱的单击事件，需要在数据中配置drillable属性：drillable=" "(值为空字符，不是没有)
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "图的单击事件"
        },
        maxPacket: 10,
        toolHeight: 25,
        options: /** @lends Sweet.chart.DashLine.prototype*/
        {
            /**
             * 是否显示鼠标滑过效果
             * @type boolean
             * @default true
             */
            isCursor: true,
            /**
             * 是否显示滚动效果
             * @type boolean
             * @default true
             */
            isScrollbar: true,
            /**
             * 是否显示图例
             * @type boolean
             * @default true
             */
            isLegend: true,
            /**
             * 设置category上的label的旋转角度，默认不旋转
             * @type number
             * @default 0
             */
            labelRotation: 0,
            /**
             * 图中值和key的实例，由于历史原因，现在是二维数组：["text",["value","NSC1","left","%","#ededed"],...]
             * 其中第一个"text"代表x轴的数据在data中对应的value；从第二个数组数据，才代表每个图的信息，其中包含与data中对应的
             * value和图的title,依次顺序代表为：图对应的value，图的名称，此图属于左轴还是右轴，单位，自定义颜色
             * @type Array
             * @default ["text"]  x轴的field
             */
            dataKeys: ["text"],
            /**
             * 图的类型
             * @type string
             * @default "line" 不设置此值，默认为折线图
             */
            graphType: Sweet.constants.graphType.LINE,
            /**
             * stack图的类型
             * @type string
             * @default undefined ,可使用的值不"regular", "100%", "3d", "none"
             */
            stackType: undefined,
            /**
             * 折线图的风格
             * @type number
             * @default 1  1表示节点显示为圆圈，2表示节点直接连接
             */
            style: 1,
            /**
             * 鼠标在图上移动时，图例位置是否出现数据提示
             * @type boolean
             * @default true  true表示带数据提示，默认值; false表示不带提示
             */
            legendTips: true,
            /**
             * 日期是否使用组件解析的形式
             * @type boolean
             * @default false  如果设置为true,在数据中x轴的数据必须为日期对象
             */
            parseDate: false,
            /**
             * x轴上日期显示的格式，只有parseDate设置为true时才有效
             * @type string
             * @default "hh"  默认为"hh"表示小时，其它为fff - milliseconds, ss - seconds, mm - minutes, 
             * hh - hours, DD - days, MM - months, YYYY - years.
             */
            xDateFormat: "hh",
            /**
             * 鼠标移动到点时，x轴上提示的日期显示的格式，只有parseDate设置为true时才有效
             * @type string
             * @default "YYYY MMM DD JJ:NN"  所有全显示格式为： "YYYY MMM DD JJ:NN:SS"
             */
            categoryBalloonDateFormat: "YYYY MMM DD JJ:NN",
            /**
             * 是否应用dashboard的样式
             * @type Boolean
             * @default false
             */
            dashboard: false,
            /**
             * 左侧Y轴的单位
             * @type String
             * @default ""
             */
            leftUnit: "",
            /**
             * 右侧Y轴的单位
             * @type String
             * @default ""
             */
            rightUnit: "",
            /**
             * 图表的边距
             * @type Object
             * @default {top: 15, right: 5, bottom: 28, left: 35}
             */
            chartMargin: {
                top: 15,
                right: 5,
                bottom: 28,
                left: 35
            },
            /**
             * 是否显示图的工具栏，默认不显示
             * @type Boolean
             * @default false
             */
            showTools: false,
            /**
             * 图的提示(当鼠标移动到图上时出现的提示)是全部显示还是只显示一个，true:只显示一个；false:显示全部折线的提示
             * @type Boolean
             * @default false
             */
            oneBalloonOnly: false,
            /**
             * 每点所需最小宽度。横向点密度小于此值，自动显示缩放条
             * @type Number
             * @default 23
             */
            pointDensityThreshold: 23
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    me.chartElement.addListener("clickGraphItem", function(evt) {
                        me._onClick(evt, me, func);
                    });
                }
            });
        },
        /**
         * @private
         * @description 去激活注册事件
         * @param {string} eName 去除的事件的名称，不传或为空时，去除全部的注册事件
         */
        _removeListener: function(eName) {
            var me = this;
            me.handlers = me.handlers || {};

            //删除所有的事件
            if (!eName || eName === "") {
                $.each(me.handlers, function(eventName, func) {
                    me.chartElement.removeListener(me.chartElement, eventName, func);
                });
            } else {
                //单独去除相应的事件
                $.each(me.handlers, function(eventName, func) {
                    if (eName === eventName) {
                        me.chartElement.removeListener(me.chartElement, eventName, func);
                    }
                });
            }
        },
        /**
         * @private
         * @description 绑定图的单击事件
         */
        _bindEvent: function() {
            var me = this;

            // 监听点击事件，以实现钻取
            me.chartElement.addListener("clickGraphItem", function(evt) {
                me._onClick(evt, me);
            });

            //监听roll over事件，以改变item的颜色
            me.chartElement.addListener("rollOverGraphItem", function(evt) {
                me._onOverItem(evt, me);
            });

            //监听roll out事件，以恢复item的颜色
            me.chartElement.addListener("rollOutGraphItem", function(evt) {
                me._onOutItem(evt, me);
            });

            // 监听zoom事件，显示tooltip
            me.chartElement.addListener("zoomed", function(evt) {
                if (!me.options.showTools) {
                    me._onZoom(evt);
                }
            });

            // 监听滚动条事件，更新tooltip
            me.chartEl.bind("scrollBar", function(evt, data) {
                me._onScrollBar(evt, data);
            });
        },
        /**
         * @private
         * @description 当鼠标在图的item上时，改变此item的颜色
         * @param {object} evt   amchart事件返回的相应的对象
         * @param {object} me    此图的对象
         */
        _onOverItem: function(evt, me) {
            //添加选中时的颜色样式
            var dItem = evt.item,
                chart = evt.chart,
                len,
                bulletFillColor = chart.balloon.bulletFillColor; //此颜色现在是设置好的bulletFillColor值
            var fill;

            if (dItem.columnSprite && dItem.columnSprite.children && bulletFillColor) {
                len = dItem.columnSprite.children.length;
                if (len > 0) {
                    for (var i = 0; i < len; i++) {
                        fill = dItem.columnSprite.children[i].getAttr("fill");
                        fill = this._adjustLuminosity(fill, -0.2);

                        //设置相应的颜色
                        dItem.columnSprite.children[i].setAttr("fill", fill);
                        dItem.columnSprite.children[i].setAttr("stroke", fill);
                    }
                }
            }
        },
        /**
         * @private
         * @description 当鼠标在图的item之外时，恢复此item的颜色
         * @param {object} evt   amchart事件返回的相应的对象
         * @param {object} me    此图的对象
         */
        _onOutItem: function(evt, me) {
            //添加选中时的颜色样式
            var dItem = evt.item,
                chart = evt.chart,
                len,
                graph = evt.graph;

            if (dItem.columnSprite && dItem.columnSprite.children && chart.balloon.bulletFillColor) {
                len = dItem.columnSprite.children.length;
                if (len > 0) {
                    for (var i = 0; i < len; i++) {
                        //恢复此item的颜色
                        dItem.columnSprite.children[i].setAttr("fill", graph.fillColors);
                        dItem.columnSprite.children[i].setAttr("stroke", graph.fillColors);
                    }
                }
            }
        },
        /**
         * @private
         * @description 图的点击事件,支持折线图的钻取，柱状图的点击
         * @param {Object} event 图点击区域对象的信息
         * @param {Object} me 此图的对象引用
         * @param {function} func (event, data) 通过addListener注册的单击元事件回调函数
         */
        _onClick: function(event, me, func) {
            var originalData = {};
            originalData.item = $.objClone(event.item.dataContext);
            try {
                if (true === me.options.parseDate || "true" === me.options.parseDate) {
                    var dataKeys0 = me.options.dataKeys[0],
                        tData,
                        dateFromat = "yyyy-MM-dd hh:mm:ss";
                    if (originalData.item && originalData.item[dataKeys0]) {
                        tData = originalData.item[dataKeys0];
                        if (Date == tData.constructor) {
                            //如果转换异常,则不转换
                            originalData.item[dataKeys0] = $.date.format(tData, dateFromat);
                        }
                    }
                }
            } catch (e) {}
            //当前点击点所在的legend对象的值，用legendValue表示
            originalData.legendValue = event.item.graph.title;

            //点击这个点的值，用data表示
            originalData.data = event.item.values.value;
            originalData.valueField = event.graph.valueField;

            if ($.isFunction(func)) {
                func(event, originalData);
            } else {
                me._trigger("click", event, originalData);
            }
        },
        /**
         * 处理缩放事件，设置起始、结束值，显示提示
         * @param event
         * @private
         */
        _onZoom: function(event) {
            var me = this;
            var start, end, fmt, startDate, endDate;
            var catKey = "$" + me.options.dataKeys[0] + "$";

            if (!me.rangeTipEl) {
                return;
            }

            // 获取起止值
            start = me.options.data[event.startIndex][catKey];
            end = me.options.data[event.endIndex][catKey];

            if (!start || !end) {
                start = event.startValue;
                end = event.endValue;
            }

            // 如果是日期，格式化后显示
            if (me.options.parseDate) {
                startDate = start;
                endDate = end;

                if ($.type(startDate) === "date" && $.type(endDate) === "date") {
                    if (startDate.getSeconds() !== 0 || endDate.getSeconds() !== 0) {
                        fmt = "hh:mm:ss";
                    } else if (startDate.getMinutes() !== 0 || endDate.getMinutes() !== 0) {
                        fmt = "hh:mm";
                    } else if (startDate.getHours() !== 0 || endDate.getHours() !== 0) {
                        fmt = "MM-dd hh:mm";
                    } else {
                        fmt = "yyyy-MM-dd";
                    }

                    start = $.date.format(startDate, fmt);
                    end = $.date.format(endDate, fmt);
                }
            }

            // zoomed事件可以得到当前start/end
            this._setRangeTipValue({
                start: start,
                end: end
            });
            this._showRangeTip("zoomed");
        },
        /**
         * 处理滚动条变化事件，设置提示的位置
         * @param event
         * @param data
         * @private
         */
        _onScrollBar: function(event, data) {
            if (!this.rangeTipEl) {
                return;
            }

            if (data.type === "changed") {
                this.rangeTipEl.data("data", {
                    left: data.left,
                    width: data.width
                });
            }

            this._showRangeTip(data.type);
        },
        /**
         * 设置提示的开始、结束值
         * @param value
         * @private
         */
        _setRangeTipValue: function(value) {
            var me = this;

            if (value.start) {
                me.startEl.find("." + labelClass).text(value.start);
            }
            if (value.end) {
                me.endEl.find("." + labelClass).text(value.end);
            }
        },
        /**
         * 显示范围提示
         * @param type
         * @private
         */
        _showRangeTip: function(type) {
            var me = this;
            var delayId = "sweet.widget.chart.dashline.tip-" + me.options.id;
            var margin = this.options.chartMargin;
            var top, left, offset, width;
            var data = this.rangeTipEl.data("data");
            var startLabel, endLabel;

            // 内容为空时，不显示
            if ($.isNull(me.startEl.find("." + labelClass).text()) || $.isNull(me.endEl.find("." + labelClass).text())) {
                me.rangeTipEl.stop(false, true);
                return;
            }

            // 判断触发事件
            if (type === "hover") {
                this._scrollbarHovered = true;
            } else if (type === "out") {
                this._scrollbarHovered = false;
            }

            // 显示
            me.rangeTipEl.stop(false, true).show();

            // 刷新位置
            offset = this.lineEl.offset();

            left = offset.left + margin.left + data.left;
            top = offset.top + margin.top - 3;
            this.startEl.css({
                left: left,
                top: top
            });

            left = offset.left + margin.left + data.left + data.width;
            top = offset.top + margin.top - 3;
            this.endEl.css({
                left: left,
                top: top
            });

            // 设置文本的位置，并且防止重叠
            startLabel = this.startEl.find("." + labelClass);
            endLabel = this.endEl.find("." + labelClass);
            width = startLabel.outerWidth() + endLabel.outerWidth();
            if (width / 2 > data.width - 5) {
                offset = (width / 2 - data.width + 5) / 2;
            } else {
                offset = 0;
            }

            startLabel.css({
                left: 0 - startLabel.outerWidth() / 2 - offset
            });
            endLabel.css({
                left: 0 - endLabel.outerWidth() / 2 + offset
            });

            // 如果不是hover触发的显示，显示一段时间后关闭
            if (!this._scrollbarHovered) {
                Sweet.Task.Delay.start({
                    id: delayId,
                    run: function() {
                        me.rangeTipEl.fadeOut(200);
                    },
                    delay: 1000
                });
            }
            // 否则，停止延时定时器
            else {
                Sweet.Task.Delay.stop(delayId);
            }
        },
        /**
         * 创建范围提示
         * @private
         */
        _createRangeTip: function() {
            var me = this;
            if (me.rangeTipEl) {
                return;
            }

            // 提示容器
            me.startEl = $("<div>").addClass(rangeTipClass).appendTo(document.body);
            me.endEl = $("<div>").addClass(rangeTipClass).appendTo(document.body);

            // 箭头、文本
            this.rangeTipEl = me.startEl.add(me.endEl);
            this.rangeTipEl.each(function(i, el) {
                $("<div>").addClass(labelClass).appendTo($(el));
                $("<div>").addClass(arrowClass).appendTo($(el));
            });

            this.rangeTipEl.hide();
        },
        /**
         * 删除类别轴范围提示
         * @private
         */
        _removeRangeTip: function() {
            var me = this;

            if (me.rangeTipEl) {
                me.rangeTipEl.remove();
                me.rangeTipEl = null;
            }
        },
        /**
         * @private
         * 调整16进制颜色的亮度
         * // http://www.sitepoint.com/javascript-generate-lighter-darker-color/
         * @param hex
         * @param lum
         * @returns {string}
         */
        _adjustLuminosity: function(hex, lum) {
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            if (hex.length < 6) {
                hex = String(hex[0]) + String(hex[0]) + String(hex[1]) + String(hex[1]) + String(hex[2]) + String(hex[2]);
            }

            lum = lum || 0;

            var rgb = "#",
                c, i;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i * 2, 2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                rgb += ("00" + c).substr(c.length);
            }
            return rgb;
        },
        _closeFloatPanel: function() {
            if (this.viewEl) {
                this.viewEl.hide();
                this.viewImgEl.removeClass("sweet-chart-tools-view-image-clicked").addClass("sweet-chart-tools-view-image");
            }

            if (this.zoomEl) {
                this.zoomEl.hide();
            }
        },
        _onViewClick: function(e) {
            var me = e.data.me,
                options = me.options;

            if (!me.viewEl) {
                var h = 60;
                var viewId = options.id + "-tools-view-panel";
                me.viewEl = $("<div>").attr("id", viewId).addClass("sweet-chart-tools-view").css("z-index", 1024)
                    .bind("click", function(e) {
                    e.stopPropagation();
                })
                    .width(me.chartEl.width()).height(h).hide()
                    .appendTo(document.body);

                var legendBox = new Sweet.form.CheckBox({
                    width: "100%",
                    value: {
                        "value": "1",
                        "text": Sweet.core.i18n.chart.legend
                    }
                });
                legendBox.addListener("click", function(e, isChecked) {
                    if (isChecked) {
                        me.hideLegend();
                    } else {
                        me.showLegend();
                    }
                });
                me._legendBox = legendBox;
                var balloonBox = new Sweet.form.CheckBox({
                    width: "100%",
                    value: {
                        "value": "1",
                        "text": Sweet.core.i18n.chart.balloon
                    }
                });
                balloonBox.addListener("click", function(e, isChecked) {
                    if (isChecked) {
                        me.oneBalloonShow();
                    } else {
                        me.allBalloonShow();
                    }
                });
                me._balloonBox = balloonBox;
                var vp = new Sweet.panel.VPanel({
                    width: me.chartEl.width(),
                    height: h,
                    padding: 10,
                    items: [legendBox, balloonBox],
                    renderTo: viewId,
                    margin: [10, 0, 0, 0]
                });
            } else {
                if (me.viewEl.is(":visible")) {
                    me.viewEl.hide();
                    return;
                }
            }
            me.viewEl.width(me.toolsEl.width());
            var offset = me.subLineEl.offset();
            var left = offset.left;
            var top = offset.top;
            me.viewEl.css({
                left: left,
                top: top
            });
            me.viewImgEl.removeClass("sweet-chart-tools-view-image").addClass("sweet-chart-tools-view-image-clicked");
            me.viewEl.slideDown("slow");
            e.stopPropagation();
        },
        _onZoomClick: function(e) {
            var me = e.data.me,
                options = me.options,
                id = options.id + "-zoom",
                zoomPanelId = options.id + "-zoom-panel";

            if (!me.zoomEl) {
                var h = 160;
                me.zoomEl = $("<div>").attr("id", zoomPanelId).addClass("sweet-chart-tools-view")
                    .bind("click", function(e) {
                    e.stopPropagation();
                }).css("margin-left", "100px")
                    .width(35).height(h).hide()
                    .appendTo(document.body);
                var zoomOut = $("<div>").addClass("sweet-chart-zoom-out")
                    .css({
                    "margin-top": "5px",
                    "margin-left": "10px"
                })
                    .bind("click", function(e) {
                    //减号，是图变小，值越大
                    var _t = $("#" + me.sliderId);
                    var curValue = _t.slider("value");
                    curValue = curValue + 0.2;
                    me.zoomValue = curValue;
                    _t.slider("value", curValue);
                    me.zoom(curValue);
                }).appendTo(me.zoomEl);


                var jji = options.id + "-zoom-iuo";
                me.sliderId = jji;
                $("<div>").attr("id", jji).width(11).height(90)
                    .css("margin-left", "10px")
                    .css("margin-top", "30px")
                    .appendTo(me.zoomEl);
                //滑动杆对象，最大提供3倍，默认1倍正常大小，每次步长0.2
                $("#" + jji).slider({
                    orientation: "vertical",
                    range: "max",
                    step: 0.2,
                    min: 1,
                    max: 3,
                    value: 1,
                    slide: function(event, ui) {
                        me.zoomValue = ui.value;
                        me.zoom(ui.value);
                    }
                });

                var zoomIn = $("<div>").addClass("sweet-chart-zoom-in")
                    .css({
                    "margin-top": "8px",
                    "margin-left": "9px"
                }).bind("click", function(e) {
                    //加号，是图变大，值越小
                    var _t = $("#" + me.sliderId);
                    var curValue = _t.slider("value");
                    curValue = curValue - 0.2;
                    me.zoomValue = curValue;
                    _t.slider("value", curValue);
                    me.zoom(curValue);
                }).appendTo(me.zoomEl);

            } else {
                if (me.zoomEl.is(":visible")) {
                    me.zoomEl.hide();
                    return;
                }
            }
            me.zoomEl.width(35);
            var offset = me.subLineEl.offset();
            var left = offset.left;
            var top = offset.top;
            me.zoomEl.css({
                left: left,
                top: top
            });
            me.zoomEl.slideDown("slow");
            e.stopPropagation();

        },
        zoom: function(num) {
            var me = this;
            if (me.chartElement) {
                if (me.yAxis) {
                    //更新y轴的minMaxMultiplier值
                    if (me.yAxis.left) {
                        me.yAxis.left.minMaxMultiplier = num;
                    }
                    if (me.yAxis.right) {
                        me.yAxis.right.minMaxMultiplier = num;
                    }
                }
                me.chartElement.validateNow()
            }
        },
        /**
         * @parivate
         * @description 创建js版折线图
         */
        _createJsChart: function() {
            var me = this,
                options = me.options,
                lineEl;

            // 创建工具栏容器
            if (me.options.showTools) {
                me.toolsEl = $("<div>").attr("id", options.id + "-tools")
                    .width(options.width).height(me.toolHeight).addClass("sweet-chart-tools")
                    .appendTo(me.chartEl);

                me.viewTextEl = $("<div>").addClass("sweet-chart-tools-view-text")
                    .text(Sweet.core.i18n.chart.view).bind("click", {
                    "me": me
                }, me._onViewClick)
                    .appendTo(me.toolsEl);

                me.viewImgEl = $("<a>").addClass("sweet-chart-tools-view-image")
                    .bind("click", {
                    "me": me
                }, me._onViewClick).appendTo(me.toolsEl);
                //分隔线
                $("<span>").addClass("sweet-chart-tools-divid-line").appendTo(me.toolsEl);
                me._zoomTextEl = $("<div>").addClass("sweet-chart-tools-zoom-text")
                    .text(Sweet.core.i18n.chart.zoom) //.bind("click", {"me": me}, me._onViewClick)
                .appendTo(me.toolsEl);
                me.zoomImgEl = $("<a>").attr("id", options.id + "-zoom").addClass("sweet-chart-tools-zoom-image")
                    .bind("click", {
                    "me": me
                }, me._onZoomClick).appendTo(me.toolsEl);
            }
            //创建Chart的容器
            me.lineId = options.id + "-lineEl";
            lineEl = me.lineEl = $("<div>").attr("id", me.lineId)
                .width("100%").height("100%")
                .addClass(chartClass)
                .appendTo(me.chartEl);
            if (me.options.showTools) {
                me.subLineId = me.lineId + "-sub";
                me.subLineEl = $("<div>").attr("id", me.subLineId)
                    .width("100%").height("100%").appendTo(me.lineEl);
            }

            // 创建序列图对象
            var chartElement = me.chartElement = new AmCharts.AmSerialChart();

            // 配置属性
            me._setChartOptions();

            //设置CategoryAxis信息及上面的阈值线
            me._setCategoryAxis();

            //设置valueAxis信息及上面的阈值线
            me._createValueAxis();

            // 绘图
            me._createGraphs();

            // 设置cursor
            me._createJsCursor(options.oneBalloonOnly);

            // 设置Scrollbar
            me._createJsScrollbar();

            // 设置legend
            me._createJsLegend();

            //绑定事件
            me._bindEvent();

            // 注册事件
            me.addListener();
        },

        /**
         * 创建Chart对象后，配置基本属性
         * @private
         */
        _setChartOptions: function() {
            var me = this;
            var options = this.options;
            var chartElement = this.chartElement;
            var margin = options.chartMargin;

            // 基本配置
            chartElement.pathToImages = Sweet.amchartsImagePath;
            chartElement.categoryField = options.dataKeys[0];
            chartElement.plotAreaBorderColor = lineConfData.axisColor;
            chartElement.plotAreaBorderAlpha = 0;
            chartElement.color = me.textColor;
            chartElement.balloon.bulletFillColor = "#f77007";
            chartElement.showFirstLabel = true;

            // 数值格式
            chartElement.numberFormatter = {
                precision: -1,
                decimalSeparator: '.',
                thousandsSeparator: ','
            };

            // 字体
            chartElement.fontSize = me.fontSizeNormal;
            chartElement.fontFamily = me.chartFontFamily;

            // 柱子的相对宽度
            chartElement.columnWidth = 0.6;

            // 阴影及底纹
            chartElement.shadow = false;
            //chartElement.textureMap = this.options.dashboard ? {} : $.objCopy(lineConfData.textureMap);

            // dashboard风格
            if (this.options.dashboard) {
                chartElement.autoMargins = false;
                chartElement.marginLeft = margin.left;
                chartElement.marginRight = margin.right;
                chartElement.marginTop = margin.top;
                chartElement.marginBottom = margin.bottom;
                chartElement.columnSpacing = 2;
                chartElement.prefixesOfSmallNumbers = [];

                // 条形图最右一个类别文本可能显示不全，所以加大边距
                if (options.graphType === Sweet.constants.graphType.BAR) {
                    chartElement.marginRight = 50;
                }
            }
        },

        /**
         * @private
         * @description 创建阈值线
         * @param {Object} axis 坐标轴对象
         * @param {String} axisType 坐标轴类型valueAxis或categoryAxis
         * @param {Array/String/Number} guideValues 阈值线的值，可以是数组，创建多个阈值线
         */
        _createGuide: function(axis, axisType, guideValues) {
            var config = lineConfData.guide,
                guide,
                values,
                isObject = false,
                dir = 0,
                value, text, unit, color,
                i;

            // 检查参数
            if ($.isNull(axis) || $.isNull(guideValues)) {
                return;
            }

            // 转成数组
            if ($.isArray(guideValues)) {
                values = guideValues;
            } else {
                values = [guideValues];
            }

            // 判断value是否对象形式
            isObject = $.isPlainObject(values[0]);

            // 判断方向
            if (values.length > 1) {
                if (axisType === Sweet.constants.axisType.CATEGORY) {
                    dir = 1;
                } else if (isObject) {
                    dir = values[0].value < values[1].value ? 1 : -1;
                } else {
                    dir = values[0] < values[1] ? 1 : -1;
                }
            }

            // 添加guide
            for (i = 0; i < values.length; i++) {
                value = values[i];

                // 创建guide对象
                guide = new AmCharts.Guide();

                // 确定颜色序号
                color = i % config.lineColor.length;

                // 取具体数据
                if (isObject) {
                    text = value.text ? value.text + ": " : "";
                    unit = value.unit || "";
                    value = value.value;
                } else {
                    text = unit = "";
                }

                // 数值轴和类别轴的属性值不同，要分开处理
                if (axisType === Sweet.constants.axisType.VALUE) {
                    guide.value = value;
                    guide.toValue = value;
                } else if (axisType === Sweet.constants.axisType.CATEGORY) {
                    guide.category = value;
                    guide.toCategory = value;
                }

                // 阈值线的样式值
                guide.lineColor = config.lineColor[color];
                guide.lineAlpha = config.lineAlpha;
                guide.fillColor = config.lineColor[color];
                guide.fillAlpha = config.fillAlpha;
                guide.dashLength = config.dashLength;
                guide.balloonText = text + value + unit;

                // 添加到座标轴对象
                axis.addGuide(guide);
            }
        },

        /**
         * @private
         * @description 置categoryAxis的配置信息和阈值线
         */
        _setCategoryAxis: function() {
            var me = this,
                options = me.options,
                categoryAxis = me.chartElement.categoryAxis;

            // 日期使用自动解析的方式,且一定要有数据，否则使用noData时会报错
            if (options.parseDate && options.data.length > 0) {
                categoryAxis.parseDates = true;
                categoryAxis.isParseDate = true;
                categoryAxis.minPeriod = options.xDateFormat;
                categoryAxis.equalSpacing = true;
                categoryAxis.dateFormats = [{
                    period: 'fff',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'ss',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'mm',
                    format: 'JJ:NN'
                }, {
                    period: 'hh',
                    format: 'JJ:NN'
                }, {
                    period: 'DD',
                    format: 'MM-DD'
                }, {
                    period: 'MM',
                    format: 'YYYY-MM'
                }, {
                    period: 'YYYY',
                    format: 'YYYY'
                }];
            } else {
                categoryAxis.parseDates = false;
                categoryAxis.isParseDate = false;
                categoryAxis.minPeriod = "DD";
                categoryAxis.equalSpacing = false;
            }

            // 如果设置了旋转角度或步长，则使用用户设置的
            if (Number(options.labelRotation) !== 0) {
                categoryAxis.labelRotation = Number(options.labelRotation);
            }

            categoryAxis.axisColor = lineConfData.axisColor;
            categoryAxis.gridPosition = "start";

            // 面积图时从axis开始显示
            if (options.graphType === Sweet.constants.graphType.AREA) {
                categoryAxis.startOnAxis = false;
            } else {
                categoryAxis.startOnAxis = false;
            }
            categoryAxis.autoGridFrequency = options.graphType === Sweet.constants.graphType.BAR ? true : false;
            // dashboard风格
            if (this.options.dashboard) {
                categoryAxis.axisAlpha = 0;
                categoryAxis.gridAlpha = 0;
            }

            // 设置X轴的阈值
            if (options.xThresholdValue) {
                me._createGuide(categoryAxis, Sweet.constants.axisType.CATEGORY, options.xThresholdValue);
            }
        },

        /**
         * @private
         * @description 创建并设置valueAxis的配置信息和阈值线
         */
        _createValueAxis: function() {
            var me = this,
                options = me.options,
                yAxis = {},
                categoryAxis = me.chartElement.categoryAxis;

            // 创建之前，先清空其中已有的值
            if (me.yAxis) {
                if (me.yAxis.left) {
                    me.chartElement.removeValueAxis(me.yAxis.left);
                }
                if (me.yAxis.right) {
                    me.chartElement.removeValueAxis(me.yAxis.right);
                }
                me.yAxis = {};
                me.chartElement.valueAxes = [];
            }

            // 对不同的图形设置特殊的valueAxis的属性
            var valueAxis = new AmCharts.ValueAxis(),
                a,
                b,
                rightValueAxis;

            valueAxis.axisColor = lineConfData.axisColor;
            valueAxis.minMaxMultiplier = me.zoomValue || 1;

            // 面积图的类型: "100%", "regular", "3d", "none"
            if (options.graphType === Sweet.constants.graphType.AREA) {
                a = lineConfData.stackType[1];
                b = lineConfData.stackType[0];
                valueAxis.stackType = options.stackType === a ? a : b;
            }
            // bar图时，不设置Y轴的labelFrequency，恢复为默认值1
            else if (options.graphType === Sweet.constants.graphType.BAR) {
                categoryAxis.labelFrequency = 1;
            } else if (options.graphType === Sweet.constants.graphType.COLUMN) {
                //100%的柱状堆积图，valueAxis是100%
                if (options.stackType === lineConfData.stackType[1]) {
                    valueAxis.stackType = lineConfData.stackType[1];
                } else if (options.stackType === lineConfData.stackType[0]) {
                    //一般的柱状堆积图
                    valueAxis.stackType = lineConfData.stackType[0];
                }
            } else if (options.graphType === Sweet.constants.graphType.MIX_COLUMN_LINE) {
                //混合图("columnline")时的情况，有两个Y轴
                rightValueAxis = new AmCharts.ValueAxis();
                rightValueAxis.axisColor = lineConfData.axisColor;
                rightValueAxis.position = "right";
                rightValueAxis.minimum = 0;

                me.chartElement.addValueAxis(rightValueAxis);
                yAxis.right = rightValueAxis;
            }

            // dashboard 风格
            if (this.options.dashboard) {
                valueAxis.dashLength = 5;
                valueAxis.usePrefixes = true;
                valueAxis.offset = -7;
                valueAxis.axisAlpha = 0;

                if (rightValueAxis) {
                    rightValueAxis.axisAlpha = 0;
                    rightValueAxis.dashLength = 5;
                    rightValueAxis.usePrefixes = true;
                    rightValueAxis.offset = -7;
                    me.chartElement.marginRight = options.chartMargin.left;
                }
            }

            // 设置Y轴的阈值
            if (options.yThresholdValue) {
                me._createGuide(valueAxis, Sweet.constants.axisType.VALUE, options.yThresholdValue);
            }
            me.chartElement.addValueAxis(valueAxis);

            // 默认为左边的竖轴
            yAxis.left = valueAxis;
            me.yAxis = yAxis;
        },

        /**
         * @private
         * @description 添加unit单位或者图的title
         */
        _addUnitTitle: function() {
            var me = this,
                options = me.options,
                unitText, // 100%unit表示
                leftUnitText, // 左边单位的表示
                rightUnitText, // 右边单位的表示
                marginRight, // 右边单位到右边的间距
                xUnit = me.chartElement.marginLeft + 5,
                yUnit = me.chartElement.marginTop - me.fontSizeNormal - 10; // y的值需要减去fontsize，再减去上下各5pix

            // 添加title或label时，先清除已经有的
            me.chartElement.clearLabels();

            // title
            if (!$.isNull(options.chartTitle) && me.preTitle !== options.chartTitle) {
                //30为title的高度
                me.chartElement.titles = [];
                me.chartElement.addTitle(options.chartTitle, me.fontSizeLarger,
                me.labelColor, me.labelAlpha, me.chartFontFamily);
                me.preTitle = options.chartTitle; //记录title
            }

            // 加55的来历：其中30为title原来增加的，另外25是title底部到图的间隔(小于真正的这段距离)
            if (me.preTitle) {
                yUnit += 55;
            }
            if (yUnit < 0) {
                yUnit = this.chartElement.marginTop;
            }

            // dashboard样式，放在最上边
            if (options.dashboard) {
                yUnit = 0;
            }
            var i;
            var showUnitLeft = true,
                showUnitRight = true;

            // 如果dataKeys里也指定了单位，必须和leftUnit/rightUnit匹配，否则不显示单位信息
            for (i = 1; i < options.dataKeys.length; i++) {
                if ($.isNull(options.dataKeys[i][2])) {
                    continue;
                }

                if (options.dataKeys[i][3] !== "right" && options.dataKeys[i][2] !== options.leftUnit) {
                    showUnitLeft = false;
                } else if (options.dataKeys[i][3] === "right" && options.dataKeys[i][2] !== options.rightUnit) {
                    showUnitRight = false;
                }
            }

            // 如果是stackType为100%,不管是否设置了单位，单位一定有且为%
            if (options.stackType === lineConfData.stackType[1]) {
                unitText = "%";
                me.chartElement.addLabel(xUnit, yUnit, unitText, "left", me.fontSizeNormal, me.textColor, 0, 1);
            }
            // 增加左侧的axis的单位
            else if (options.leftUnit && options.leftUnit !== "" && showUnitLeft) {
                leftUnitText = options.leftUnit;
                me.chartElement.addLabel(xUnit, yUnit, leftUnitText, "left", me.fontSizeNormal, me.textColor, 0, 1);
            }

            // 右侧Y轴的单位
            if (options.rightUnit && options.rightUnit !== "" && showUnitRight) {
                marginRight = me.chartElement.marginRight;
                xUnit = me.chartEl.width() - marginRight - 5;
                rightUnitText = options.rightUnit;
                me.chartElement.addLabel(xUnit, yUnit, rightUnitText, "right", me.fontSizeNormal, me.textColor, 0, 1);
            }
        },

        /**
         * @private
         * @description 创建graphs
         */
        _createGraphs: function() {
            var me = this,
                options = me.options,
                lineNum = options.dataKeys.length - 1;

            me.chartElement.graphs = [];
            me._addGraphs(lineNum);
        },

        /**
         * @private
         * @description 循环将各个实例图加入到整个图中去
         * @param {type} lineNum  图的个数
         */
        _addGraphs: function(lineNum) {
            var me = this,
                options = me.options,
                graph,
                tempTValue = "",
                tipValue = "[[value]]",
                tipPercent = "[[percents]]%",
                tipTitle = "[[title]]: ",
                composeTP = tipTitle + tipPercent + " (" + tipValue + ")",
                composeTV = tipTitle + tipValue,
                unit,
                side,
                attr,
                defaultOptions = {
                    connect: false,
                    bulletSize: 5,
                    fillAlphas: 1,
                    lineAlphas: 1,
                    lineThickness: 1,
                    /**
                     * "drillable"是dataprovider中field，表示此数据item是否可以进行钻取的标志
                     * 如果可以钻取，drillable=" "(值为空字符，不是没有)；如果不能钻取，则不设置此值。
                     */
                    drillField: "drillable"
                };

            for (var i = 0; i < lineNum; i++) {
                unit = options.dataKeys[i + 1][2];
                side = options.dataKeys[i + 1][3] || "left";

                if (typeof unit === 'undefined') {
                    unit = options.leftUnit;
                }

                // 创建Graph
                graph = new AmCharts.AmGraph();
                graph.valueField = options.dataKeys[i + 1][0];
                graph.title = options.dataKeys[i + 1][1];
                graph.type = lineConfData.graph.type;

                for (attr in defaultOptions) {
                    graph[attr] = defaultOptions[attr];
                }

                // 支持用户配置自定义图的提示定义
                if (options.balloonText) {
                    graph.balloonText = options.balloonText;
                } else {
                    tempTValue = unit ? (composeTV + " " + unit) : composeTV;
                    graph.balloonText = (options.stackType === lineConfData.stackType[1]) ? composeTP : tempTValue;
                }

                // 图例的提示格式
                if (options.stackType === lineConfData.stackType[1]) {
                    graph.legendValueText = tipPercent;
                } else {
                    graph.legendValueText = tipValue + " " + (options.leftUnit ? options.leftUnit : "");
                }

                // 序列数小于maxPacket，按预定义颜色序列显示；否则不指定，由amcharts自行决定
                if (lineNum > 0 && lineNum <= me.maxPacket - 1) {
                    graph.lineColor = me._getColor(lineNum, i, true);
                } else if (options.dataKeys[i + 1][4]) {
                    graph.lineColor = options.dataKeys[i + 1][4];
                }

                //如果指定为面积图
                if (options.graphType === Sweet.constants.graphType.AREA) {
                    graph.fillAlphas = 0.6;
                    graph.bullet = lineConfData.graph.bullet;

                    if (!$.isNull(graph.lineColor)) {
                        graph.bulletBorderColor = graph.lineColor;
                    }
                } else if (options.graphType === Sweet.constants.graphType.COLUMN) {
                    graph.type = Sweet.constants.graphType.COLUMN;
                    graph.labelText = "";
                } else if (options.graphType === Sweet.constants.graphType.BAR) {
                    me.chartElement.rotate = true;
                    graph.type = Sweet.constants.graphType.COLUMN;
                    graph.labelText = "[[value]]" + unit;
                } else if (options.graphType === Sweet.constants.graphType.LINE && options.style === 1) {
                    graph.lineThickness = lineConfData.graph.lineThickness;
                    graph.fillAlphas = 0;

                    if (lineNum > 0 && lineNum < me.maxPacket) {
                        graph.bullet = lineConfData.graph.bullet;
                        if (!$.isNull(graph.lineColor)) {
                            graph.bulletBorderColor = graph.lineColor;
                        }
                    }
                } else if (options.graphType === Sweet.constants.graphType.MIX_COLUMN_LINE) {
                    graph.lineThickness = 1;

                    // 混合图的情况，有两个Y轴。需要在dataKeys中指定在哪个轴上
                    if (side === "left") {
                        graph.type = Sweet.constants.graphType.COLUMN;
                        graph.valueAxis = me.yAxis.left;
                    } else {
                        graph.fillAlphas = 0;
                        graph.bullet = lineConfData.graph.bullet;
                        if (!$.isNull(graph.lineColor)) {
                            graph.bulletBorderColor = graph.lineColor;
                        }

                        graph.legendValueText = tipValue + " " + (options.rightUnit ? options.rightUnit : "");
                        graph.valueAxis = me.yAxis.right;
                        graph.balloonText = tipValue + unit;
                    }
                }

                me.chartElement.addGraph(graph);
            }
        },
        /**
         * @private
         * @description 改变了图中的属性时调用
         * 由chart基类在setData时调用。基类调用这个函数后，不会再调用_updateData
         */
        _setChangeProperty: function() {
            var me = this,
                options = me.options;

            // dataKeys为空时的情况
            if ($.isNull(options.dataKeys) || (!$.isNull(options.dataKeys) && options.dataKeys.length === 0)) {
                options.dataKeys = ["text"];
            }

            //应该在setNoData之前更新categoryField，因为setNoData中用到了categoryField
            me.chartElement.categoryField = me.options.dataKeys[0];

            // data为空时的情况
            if ($.isNull(options.data) || (!$.isNull(options.data) && options.data.length === 0)) {
                me._setNoData();
            }

            me.chartElement.dataProvider = me.options.data;

            // 设置CategoryAxis信息及上面的阈值线
            me._setCategoryAxis();

            //设置valueAxis信息及上面的阈值线
            me._createValueAxis();

            me._addUnitTitle();

            me._createGraphs();

            me._createJsCursor(options.oneBalloonOnly);

            // 更新数据
            me._updateData();
        },
        /**
         * @private
         * @description 只更新数据 
         */
        _updateData: function() {
            var me = this;

            me.chartElement.dataProvider = me.options.data;

            if (me.rendered) {
                me._doLayout();
            }
        },
        /**
         * @private
         * @description 创建cursor
         */
        _createJsCursor: function(oneBalloonOnly) {
            var me = this;
            var chartCursor;

            if (me.options.isCursor) {
                me.chartElement.removeChartCursor();

                chartCursor = new AmCharts.ChartCursor();
                chartCursor.bulletsEnabled = true;
                //如果已经有了就使用已经选中的状态来更新数据
                if (me._balloonBox && $.isFunction(me._balloonBox.isChecked)) {
                    oneBalloonOnly = me._balloonBox.isChecked() ? true : false;
                }
                chartCursor.oneBalloonOnly = oneBalloonOnly;
                if (me.options.parseDate) {
                    chartCursor.categoryBalloonDateFormat = me.options.categoryBalloonDateFormat;
                }

                //UI规范的内容
                chartCursor.cursorPosition = lineConfData.cursor.cursorPosition;
                chartCursor.cursorColor = lineConfData.cursor.corsorColor;
                chartCursor.dashLength = 8;
                chartCursor.categoryBalloonColor = lineConfData.cursor.categoryBalloonColor;
                me.chartElement.addChartCursor(chartCursor);
            }
        },

        /**
         * @private
         * @description 创建scrollbar
         * @param {Boolean} force 自动计算后强制显示
         */
        _createJsScrollbar: function(force) {
            var me = this;
            if (me.options.isScrollbar || force === true) {
                var chartScrollbar = new AmCharts.ChartScrollbar();
                //UI规范的内容
                chartScrollbar.backgroundColor = "#e2ebf4";
                chartScrollbar.scrollbarHeight = 7;
                me.chartElement.addChartScrollbar(chartScrollbar);

                if (!this.rangeTipEl) {
                    this._createRangeTip();
                }
            }
        },

        /**
         * @description 删除Scrollbar
         * @private
         */
        _removeJsScrollBar: function() {
            if (this.chartElement) {
                this.chartElement.removeChartScrollbar();

                if (this.rangeTipEl) {
                    this._removeRangeTip();
                }
            }
        },
        oneBalloonShow: function() {
            var me = this;
            if (me.chartElement) {
                me.chartElement.removeChartCursor();
                me._createJsCursor(true);
                me.chartElement.validateNow()
            }
        },
        allBalloonShow: function() {
            var me = this;
            var me = this;
            if (me.chartElement) {
                me.chartElement.removeChartCursor();
                me._createJsCursor(false);
                me.chartElement.validateNow()
            }
        },
        hideLegend: function() {
            var me = this;
            if (me.subLineEl) {
                var subDiv = $(me.subLineEl).children("div");
                if (subDiv.length > 1) {
                    $(subDiv[1]).hide();
                    me.chartElement.invalidateSize();
                }
            }
        },
        showLegend: function() {
            var me = this;
            if (me.subLineEl) {
                var subDiv = $(me.subLineEl).children("div");
                if (subDiv.length > 1) {
                    $(subDiv[1]).show();
                    me.chartElement.invalidateSize();
                }
            }
        },
        /**
         * @private
         * @description 创建legend
         */
        _createJsLegend: function() {
            var me = this;
            if (me.options.isLegend) {
                var legend = new AmCharts.AmLegend();
                legend.position = lineConfData.legend.position;
                me.legend = legend;
                //UI规范的内容
                legend.align = lineConfData.legend.align;
                legend.valueAlign = "left";
                legend.markerType = lineConfData.legend.markerType;
                legend.color = me.textColor;
                legend.valueWidth = 110;
                legend.switchType = "v";
                if (me.options.showTools) {
                    legend.isScroll = true;
                    legend.autoMargins = false;
                    legend.marginLeft = 0;
                    legend.marginRight = 0;
                }

                if (!me.options.legendTips) {
                    legend.valueText = "";
                    legend.valueWidth = 0;
                }

                // dashboard 样式
                if (!me.options.showTools && this.options.dashboard) {
                    legend.position = "absolute";
                    legend.top = 0;
                    legend.left = 0;
                    legend.align = "right";
                    legend.autoMargins = false;
                    legend.marginLeft = 10;
                    legend.marginTop = 0;
                    legend.marginRight = 10;
                    legend.backgroundAlpha = 0.2;
                    legend.maxColumns = 1;
                    legend.markerSize = 15;
                    legend.markerLabelGap = 2;
                    legend.verticalGap = 0;
                    legend.valueText = "";
                    legend.valueWidth = 0;
                    legend.switchable = true;
                }

                me.chartElement.addLegend(legend);
            }
        },

        /**
         * @public
         * @description 设置图的类型，并按设置的类型重绘图(图形切换使用)
         * @param {string} chartType 图的类型,例如: "line", "column", "area"等
         * @param {string} stackType 图的stackType类型，例如："100%", "regular"等
         */
        setChartType: function(chartType, stackType) {
            var me = this,
                options = me.options;

            // 如果没有变化，不需要处理
            if (chartType === options.graphType && stackType === options.stackType) {
                return;
            }

            options.graphType = chartType;
            options.stackType = stackType;

            // 此属性很重要，设置为原来的值false，如设置过bar，此值为true，不还原将一直为true
            me.chartElement.rotate = false;

            // 更新各个和chart type相关的属性设置
            // 设置CategoryAxis信息及上面的阈值线
            me._setChangeProperty();
        },
        /**
         * @private
         * @description 专门用来设置没有数据时的显示内容 
         */
        _setNoData: function() {
            var me = this;
            var temp;

            if ($.isNull(me.chartElement.categoryField)) {
                me.chartElement.categoryField = "text";
            }

            // 因为没有数据时x轴显示为"没有数据"，所有parseDates为false才能显示
            if (!me.options.parseDate) {
                temp = {};
                temp[me.chartElement.categoryField] = Sweet.core.i18n.chart.noDataTips;
                me.options.data = [temp];
            } else {
                me.options.data = [];
            }
        },
        /**
         * @private
         * @description 当没有数据时，各自图设置自己格式的默认数据
         */
        _setDefaultData: function() {
            var me = this;
            me._setNoData();
            me._updateData();
        },
        /**
         * @parivate
         * @description 渲染折线图到相应的到div
         */
        _chartRender: function() {
            var me = this;
            var temp = {},
            data = me.options.data;

            if (me.rendered || !me.chartElement) {
                return;
            }
            if (me.options.showTools) {
                me.lineEl.css("height", "calc(100% - " + me.toolHeight + "px)");
            }

            // 设置配置时给定的数据
            if (data.length === 0) {
                temp[me.options.dataKeys[0]] = Sweet.core.i18n.chart.noDataTips;
                me.options.data = [temp];
            }
            me.chartElement.dataProvider = data;

            //渲染图
            var renderId = me.options.showTools ? me.subLineId : me.lineId;
            me.chartElement.write(renderId);


            // 重新布局
            me._doLayout();

        },

        /**
         * @parivate
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var me = this;
            if (!me.options.renderTo || me.options.renderTo === "" || !me.chartElement) {
                return;
            }

            // 延迟重绘
            Sweet.Task.Delay.start({
                id: "sweet.widget.chart.dashline.layout-" + this.options.id,
                run: function() {
                    // 计算数据点密度，如果超过阀值，显示缩放条
                    var count = me.options.data.length;
                    var width = me.chartEl.width();
                    if (count > 0 && width > 0 && me.options.graphType !== Sweet.constants.graphType.BAR) {
                        if (width / count < me.options.pointDensityThreshold) {
                            me._createJsScrollbar(true);
                        } else {
                            me._removeJsScrollBar();
                        }
                    }

                    // 重绘
                    me._reDraw();
                },
                delay: 100
            });
        },

        /**
         * @private
         * @description 容器改变大小后，重新绘制图
         */
        _reDraw: function() {
            var me = this;

            // 重新布局类别轴的标签
            me._layoutLabels();

            // 单位需要重新计算位置
            me._addUnitTitle();

            // 调整图例，避免遮挡图形
            if (!me.options.showTools && me.options.isLegend) {

                // 图例有两个时，增加marginTop
                if (me.options.dataKeys.length > 2) {
                    me.chartElement.marginTop = me.options.chartMargin.top + 20;
                } else {
                    me.chartElement.marginTop = me.options.chartMargin.top;
                }
            }

            if (me.options.showTools) {
                me.legend.updateMaxHeight(me.subLineEl.height() / 3);
            }

            // 刷新数据
            me.chartElement.validateData();

            // 重绘
            me.chartElement.validateNow();
            if (me.options.showTools && me.subLineEl) {
                var subDiv = $(me.subLineEl).children("div");
                if (subDiv.length > 1) {
                    var legendDiv = $(subDiv[1]);
                    legendDiv.css({
                        "overflow-y": "auto",
                        "overflow-x": "hidden"
                    });
                }
            }
        },

        /**
         * @parivate
         * @description 创建flash版event图
         */
        _createFlashChart: function() {
            $.error("chart.DashLine doesn't support current browser!");
        },

        /**
         * 根据label重新计算外边距、间隔等
         * @private
         */
        _layoutLabels: function() {
            var me = this;
            var height, label, unit, graph, dataLen;
            var i;

            // 条形图比较特殊，要做一些特殊处理
            if (me.options.graphType === Sweet.constants.graphType.BAR) {
                me._interInfo = me._calcLabelInter();
                me.chartElement.marginLeft = me._interInfo.maxWidth + 10;

                // 如果数据序列特别多，Bar的Label会叠在一起，应该把label隐藏掉
                dataLen = me._interInfo.dataLen > 0 ? me._interInfo.dataLen : 1;
                height = me._interInfo.plotSize * me.chartElement.columnWidth / dataLen;
                if (me.options.dataKeys.length > 2) {
                    height = height / (me.options.dataKeys.length - 1);
                }

                // 足够放下12px的文本而不会重叠的高度
                if (height < 13) {
                    label = null;
                } else {
                    label = "[[value]]";
                }

                for (i = 0; i < me.chartElement.graphs.length; i++) {
                    graph = me.chartElement.graphs[i];
                    unit = me.options.dataKeys[i + 1][2];

                    if (label) {
                        graph.labelText = label + unit;
                    } else {
                        graph.labelText = "";
                    }
                }
            }
        },

        /**
         * 计算类别label间隔。目前仅对bar图有效
         * @returns {Object}
         * @private
         */
        _calcLabelInter: function() {
            "use strict";
            var i, inter = 1;
            var maxWidth = 0,
                totalSize = 0,
                avgSize = 0;
            var plotSize = this.chartEl.width();
            var buffer, span;
            var data = this.options.data;
            var dataLen = data.length;
            var catKey = this.options.dataKeys[0],
                category;
            var padding = 10;
            var bar = (this.options.graphType === Sweet.constants.graphType.BAR);
            var margin = this.options.chartMargin;


            // 条形图
            if (bar) {
                plotSize = this.chartEl.height() - margin.top - margin.bottom;
            }

            // 无数据
            if (dataLen === 0 || plotSize <= 10) {
                return {
                    maxWidth: maxWidth,
                    inter: inter,
                    plotSize: plotSize,
                    dataLen: dataLen
                };
            }

            // 避免重复计算
            if (this._interInfo && this._interInfo.plotSize && this._interInfo.plotSize === plotSize && this._interInfo.dataLen === dataLen) {
                return this._interInfo;
            }

            /**
             * 原理：根据文本创建Dom元素，计算元素的宽度。如果总宽度大于width，增加间隔，直到可以在width中放下
             */
            buffer = $("<div>").appendTo("body");
            buffer.css({
                position: "absolute",
                top: "-200px",
                width: "2000px",
                height: "200px",
                display: "block",
                "font-size": this.fontSizeNormal,
                "font-family": this.chartFontFamily
            });

            // 创建label元素
            for (i = 0; i < dataLen; i++) {
                span = $("<span>");
                span.css({
                    display: "block",
                    "float": "left",
                    "padding-left": i === 0 ? "0" : padding + "px"
                });

                // 如果是类别是日期对象，按照提示balloon的大小来计算
                if (this.options.parseDate) {
                    category = this.options.categoryBalloonDateFormat;
                } else {
                    category = data[i][catKey];
                }

                span.text(category).appendTo(buffer);
            }

            // 计算
            function _calc() {
                var count = 0;
                var width = 0,
                    height = 0;

                buffer.children().each(function(index, span) {
                    if (index % inter !== 0) {
                        return;
                    }

                    count++;
                    width = $(span).outerWidth(true);
                    height = $(span).outerHeight(true);

                    if (bar) {
                        totalSize += height;
                    } else {
                        totalSize += width;
                    }

                    if (width > maxWidth) {
                        maxWidth = width;
                    }
                });

                avgSize = plotSize / count;
            }
            _calc();

            // 是否需要间隔，如果需要，尝试增加间隔
            while ((bar && totalSize + (Math.floor(dataLen / inter) - 1) * padding > plotSize && inter < dataLen) || (!bar && (maxWidth > avgSize + padding * 2 || totalSize > plotSize) && inter < dataLen)) {

                maxWidth = avgSize = totalSize = 0;
                inter += 1;

                _calc();
            }

            buffer.remove();

            // 条形图里label宽度不允许超过最大宽度
            if (bar) {
                //“没有数据”不能显示全
                maxWidth += 10;
                if (maxWidth > lineConfData.bar.maxLeftMargin) {
                    maxWidth = lineConfData.bar.maxLeftMargin;
                }
            }

            return {
                maxWidth: maxWidth,
                inter: inter,
                plotSize: plotSize,
                dataLen: dataLen
            };
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            this._removeRangeTip();

            Sweet.Task.Delay.stop("sweet.widget.chart.dashline.tip-" + this.options.id);
            Sweet.Task.Delay.stop("sweet.widget.chart.dashline.layout-" + this.options.id);

            this._removeJsScrollBar();
            this._removeListener(null);
            this.chartElement.clearLabels();
            this.chartElement.removeLegend();

            if (this.chartElement) {
                this.chartElement.clear();
            }

            this._super();
        }
    });

    // 折线图，面积图，条形图，柱状图组件
    Sweet.chart.DashLine = $.sweet.widgetChartDashLine;

}(jQuery));;
/**
 * @fileOverview 拓扑图
 * @date 2013/06/27
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建简单非交叉拓扑图
 * @name Sweet.chart.SimpleTopology
 * @class 
 * @extends Sweet.chart
 * @requires  
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  var data = [{
                    id: "node0",
                    text: "test1",
                    textOutUp : "95Mbps",
                    clickable: "false",
                    to : [{
                            id : "node1"
                    }]
                },
                {
                    id: "node1",
                    text: "test2",
                    textOutUp : "95Mbps",
                    clickable: "true",
                    to : [{
                            id : "node2"
                    }]
                },
                {
                    id: "node2",
                    text: "test3",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    textOutUp : "90Mbps",
                    textOutDown : "21w",
                    clickable: "true",
                    to : [{
                            id : "node3"
                        },
                        {
                            id : "node4"
                        },
                        {
                            id : "node5"
                        },
                        {
                            id : "node6"
                    }]
                },
                {
                    id: "node3",
                    text: "test4",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    textOutUp : "85Mbps",
                    textOutDown : "21w",
                    clickable: "false",
                    to : [{
                            id : "node7"
                    }]
                },
                {
                    id: "node4",
                    text: "test5",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    textOutUp : "85Mbps",
                    textOutDown : "21w",
                    clickable: "true",
                    to : [{
                            id : "node8"
                    }]
                },
                {
                    id: "node5",
                    text: "test6",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    textOutUp : "85Mbps",
                    textOutDown : "21w",
                    clickable: "true",
                    to : [{
                            id : "node8"
                    }]
                },
                {
                    id: "node6",
                    text: "test7",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    clickable: "true"
                },{
                    id: "node7",
                    text: "test9",
                    clickable: "false"
                },{
                    id: "node8",
                    text: "test8",
                    textInUp : "95Mbps",
                    textInDown : "24w",
                    clickable: "true"
                }]
 *  sweetTopo = new Sweet.chart.SimpleTopology({
 *      width : "100%",
 *      height : 600,
 *      data : data,
 *      renderTo : "sweet-topo"
 * });
 * </pre>
 */
(function($, undefined) {
    var SVG_NS = "http://www.w3.org/2000/svg"; //svg的命名空间地址
    var SVG_XLINK = "http://www.w3.org/1999/xlink";
    var padding = 20;
    /**
     * 节点是矩形时的矩形的填充颜色
     * @private
     * @type string
     * @default ["#a1a8b8","#747f97"]
     */
    var rectColor = ["#a1a8b8", "#747f97"];
    /**
     * 节点是矩形时且已经选中此节点时矩形的填充颜色
     * @private
     * @type string
     * @default ["#7cadeb", "#3f87e1"]
     */
    var rectselectedColor = ["#7cadeb", "#3f87e1"];
    var topoUUID = 1;
    var presuffix = "topo-blank-node-";
    $.widget("sweet.widgetChartSimpleTopology", $.sweet.widgetChart, /** @lends Sweet.chart.SimpleTopology.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-simple-topology]:",
        eventNames: /** @lends Sweet.chart.SimpleTopology.prototype*/
        {
            /**
             * @event
             * @description 节点的点击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前点击的节点的数据信息
             */
            nodeclick: "nodeclick",
            /**
             * @event
             * @description 节点的双击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前点击的节点的数据信息
             */
            nodedblclick: "nodedblclick",
            /**
             * @event
             * @description 节点的单击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前连线的数据信息
             */
            lineclick: "lineclick",
            /**
             * @event
             * @description 连线的双击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 当前连线的数据信息
             */
            linedblclick: "linedblclick"
        },
        options: /** @lends Sweet.chart.SimpleTopology.prototype*/
        {
            /**
             * 节点的宽度
             * @type number
             * @default 150
             */
            nodeWidth: 150,
            /**
             * 节点的高度
             * @type number
             * @default 50
             */
            nodeHeight: 50,
            /**
             * 列与列之间的间距
             * @type number
             * @default 150
             */
            levelSpace: 150,
            /**
             * 节点与节点之间竖直的间距
             * @type number
             * @default 50
             */
            nodeSpace: 50,
            /**
             * 节点连线的颜色
             * @type string
             * @default "black"
             */
            lineColor: "#cccccc",
            /**
             * 节点是否可以被选中
             * @type boolean
             * @default true
             */
            selectable: true
        },

        _createSVGElement: function(name) {
            return document.createElementNS(SVG_NS, name);
        },

        _createJsChart: function() {
            var me = this,
                options = me.options;

            me.topoId = options.id + "-topo";
            me.topoEl = $("<div>").attr({
                id: me.topoId
            })
                .height(options.height).width(options.width).css("overflow", "auto");
            me.eventMap = {};
            me._readySVG();
            if (0 < options.data.length) {
                me._draw();
            }
        },

        _readySVG: function() {
            var me = this;
            me.preClickRectId = "";
            me.rects = {};
            //保存所有node的svg dom对象<g>，key是节点的id
            me.nodes = {};
            //一列中最多的节点个数
            me.maxLevelNodes = 0;
            //布局后最大高度
            me.maxHeight = 0;
            //布局后的最大宽度
            me.maxWidth = 0;
            //其中存放的是所有竖直的直线对象
            me.vpath = me._createSVGElement("g");
            //S中存储的是svg的dom结构及对象
            me.S = {};
            me.S.svg = me._createSVGElement("svg");
            me.S.group = me._createSVGElement("g");
            me.S.group.appendChild(me.vpath);
            me.S.defs = me._createSVGElement("defs");
            //创建直线的箭头
            me.marker = me._createMarker();
            me.S.defs.appendChild(me.marker);
            me.linearGradientId = me.options.id + "-linearGradient";
            //创建节点的渐变内容
            me.linearGradient = me._createLinearGradient(rectColor, me.linearGradientId);
            me.S.defs.appendChild(me.linearGradient);
            if (me.options.selectable) {
                me.selectedlinearGradId = me.options.id + "-linearGradient-selected";
                //创建节点被选中后的渐变颜色
                me.selectedlinearGrad = me._createLinearGradient(rectselectedColor, me.selectedlinearGradId);
                me.S.defs.appendChild(me.selectedlinearGrad);
            }
            me.S.svg.appendChild(me.S.defs);
            me.S.svg.appendChild(me.S.group);
            me.topoEl.append(me.S.svg);
        },

        /**
         * @description 为拓扑图设置数据
         * @param {Array} data 设置的数据, 如果没有请设置空数组：[]
         */
        setData: function(data) {
            if ($.isNull(data) || !$.isArray(data)) {
                return;
            }
            var me = this,
                options = me.options;

            options.data = JSON.parse(JSON.stringify(data));
            //清除所有的dom对象
            me.topoEl.empty();
            me._readySVG();
            me._draw();
        },

        /**
         * @description 设置节点为被选中状态(其它节点为非选中状态，不支持多个节点被选中)，在设置完数据后再使用此方法
         * @param {string} id 节点的id
         */
        setSelected: function(id) {
            var me = this;
            if ($.isNull(id) || $.isNull(me.rects[id]) || !me.options.selectable) {
                return;
            }
            me.rects[id].setAttribute("fill", "url(#" + me.selectedlinearGradId + ")");
            //如果原来有选中的节点，则去除原来选中节点的样式
            if (!$.isNull(me.preClickRectId)) {
                me.rects[me.preClickRectId].setAttribute("fill", "url(#" + me.linearGradientId + ")");
            }
            //记录当前点击节点的id
            me.preClickRectId = id;
        },

        /**
         * @description 取得节点为被选中状态的节点
         * @return {object} 返回被选中的节点，如果没有，则返回-1
         */
        getSelectedNode: function() {
            if ($.isNull(me.preClickRectId)) {
                return -1;
            }
            var me = this;
            return me._findById(me.preClickRectId);
        },

        _chartRender: function() {
            var me = this;
            if (me.rendered || $.isNull(me.topoEl)) {
                return;
            }

            me.topoEl.appendTo(me.chartEl);
        },

        _createMarker: function() {
            var me = this,
                marker,
                path,
                markerId = me.topoId + "-marker";
            me.markerId = markerId;
            marker = me._createSVGElement("marker");
            marker.setAttribute("id", markerId);
            marker.setAttribute("viewBox", "0 0 10 10");
            marker.setAttribute("refX", 0);
            marker.setAttribute("refY", 5);
            marker.setAttribute("markerUnits", "strokeWidth");
            marker.setAttribute("markerWidth", 4);
            marker.setAttribute("markerHeight", 3);
            marker.setAttribute("fill", me.options.lineColor);
            marker.setAttribute("orient", "auto");
            path = me._createSVGElement("path");
            path.setAttribute("d", "M 0 0 L 10 5 L 0 10 z");
            marker.appendChild(path);

            return marker;
        },
        /**
         * @private
         * @description 计算字符串的宽度
         * @param {object} attr  字体大小和字体体系等信息
         * @param {string} text  字符串
         * @returns {Object} 返回字符串占有的宽度和高度
         */
        textSize: function(attr, text) {
            var me = this,
                bb,
                result = {};
            var ff = me._createSVGElement("text");
            var te = document.createTextNode(text);
            var tt = me._createSVGElement("tspan");
            tt.appendChild(te);
            ff.appendChild(tt);
            ff.setAttribute("text-anchor", "middle");
            ff.setAttribute("x", attr.x);
            ff.setAttribute("y", attr.y);
            ff.setAttribute("font-size", attr.fontSize);
            ff.setAttribute("font-family", attr.fontFamily);
            me.S.svg.appendChild(ff);
            bb = ff.getBBox();
            if ($.isNull(bb)) {
                result = {
                    width: 0,
                    height: 0
                };
            } else {
                result = {
                    width: bb.width,
                    height: bb.height
                };
            }
            me.S.svg.removeChild(ff);
            return result;
        },
        _createText: function(text, attrs, rowWidth, dir) {
            var me = this,
                temp = String(text).replace(/\n/g, "<br>").split("<br>"),
                attr = $.isNull(attrs) ? {} : attrs,
                textNode, i = 0,
                svgText = me._createSVGElement("text"),
                svgTspan,
                fontSize = attr.fontSize ? attr.fontSize : 14,
                fontFamily = attr.fontFamily ? attr.fontFamily : "Tahoma",
                fillColor = attr.fillColor ? attr.fillColor : "#666666",
                x = attr.x ? attr.x : 0,
                y = attr.y ? attr.y : 0;

            var textSize = me.textSize({
                x: x,
                y: y,
                fontSize: fontSize,
                fontFamily: fontFamily
            }, text);
            if (textSize.width > rowWidth && temp.length === 1) {
                var textLength = String(text).length;
                var rowCount = Math.floor(textLength * rowWidth / textSize.width) - 2;
                var row = Math.ceil(textLength / rowCount);
                var arr = [];
                for (i = 0; i < row; i++) {
                    arr.push(String(text).substr(i * rowCount, rowCount));
                }
                temp = arr;
            }

            //如果有多行显示，进行换行处理
            var len = temp.length;
            var tempy = 0;
            var ty = y;
            if (len > 1 && !dir) {
                ty = y - me.options.nodeHeight / 2 + fontSize + 5;
            }
            for (i = len - 1; i >= 0; i--) {
                textNode = document.createTextNode(temp[(len - 1) - i]);
                svgTspan = me._createSVGElement("tspan");
                svgTspan.appendChild(textNode);
                svgTspan.setAttribute("x", x);
                if (dir === "down") {
                    tempy = y + fontSize * ((len - 1) - i);
                } else if (dir === "up") {
                    tempy = y - fontSize * i;
                } else {

                    tempy = ty + fontSize * ((len - 1) - i);
                }
                svgTspan.setAttribute("y", tempy);
                svgTspan.setAttribute("fill", fillColor);
                svgText.appendChild(svgTspan);
            }
            //对字体设置样式和坐标值
            svgText.setAttribute("text-anchor", "middle");
            svgText.setAttribute("x", x);
            svgText.setAttribute("y", y);
            svgText.setAttribute("font-size", fontSize);
            svgText.setAttribute("font-family", fontFamily);
            //设置提示值
            svgText.setAttribute("title", text);
            if (!$.isNull(attr.fontWeight)) {
                svgText.setAttribute("font-weight", attr.fontWeight);
            }

            return svgText;
        },

        _createLinearGradient: function(color, id) {
            var me = this,
                tempStop,
                linearGrad;
            linearGrad = me._createSVGElement("linearGradient");
            linearGrad.setAttribute("id", id);
            linearGrad.setAttribute("x2", "0%");
            linearGrad.setAttribute("y2", "100%");
            for (var i = 0; i < color.length; i++) {
                tempStop = me._createSVGElement("stop");
                tempStop.setAttribute("offset", (i + 1) / color.length);
                tempStop.setAttribute("stop-color", color[i]);
                linearGrad.appendChild(tempStop);
            }
            return linearGrad;
        },

        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "nodeclick") {
                    me.eventMap.nodeClick = func;
                }
            });
        },

        _removeListener: function(eName) {
            var me = this;
            if ($.isNull(eName)) {
                me.handlers = me.handlers || {};
                $.each(me.handlers, function(eventName, func) {
                    me.eventMap = {};
                });
            } else {
                if (eName === "nodeclick" && !$.isNull(me.eventMap.nodeClick)) {
                    delete me.eventMap.nodeClick;
                }
            }
        },
        _doNodeText: function(node, rectg, tempg) {
            var me = this,
                fontSize = 14,
                inSpace = 48,
                outSpace = 42,
                space = 35,
                lx = node.lpoint.x,
                rx = node.rpoint.x,
                lry = node.lpoint.y,
                levelSpace = me.options.levelSpace,
                nodeWidth = me.options.nodeWidth,
                nodeHeight = me.options.nodeHeight,
                rextx = lx + levelSpace / 2,
                rexty = lry + nodeHeight / 2,
                mainText, textInUp, textInDown, textOutUp, textOutDown;

            if (!$.isNull(node.text)) {
                mainText = me._createText(node.text, {
                    x: rextx + nodeWidth / 2,
                    y: lry,
                    fontWeight: "bold",
                    fillColor: "#ffffff"
                }, nodeWidth);
                rectg.appendChild(mainText);
            } else {
                tempg.removeChild(rectg);
                var nullPath = me._createPath(rextx, lry, rextx + nodeWidth, lry, false);
                tempg.appendChild(nullPath);
            }
            if (!$.isNull(node.textInUp)) {
                space = inSpace;
                var linel = node.lLength ? parseInt(node.lLength) : levelSpace / 2;
                textInUp = me._createText(node.textInUp, {
                    x: rextx - space,
                    y: lry - fontSize / 2
                }, linel, "up");
                tempg.appendChild(textInUp);
            }
            if (!$.isNull(node.textInDown)) {
                space = inSpace;
                var linel = node.lLength ? parseInt(node.lLength) : levelSpace / 2;
                textInDown = me._createText(node.textInDown, {
                    x: rextx - space,
                    y: lry + fontSize
                }, linel, "down");
                tempg.appendChild(textInDown);
            }
            if (!$.isNull(node.textOutUp)) {
                var linel = node.rLength ? parseInt(node.rLength) : levelSpace / 2;
                space = linel < outSpace ? linel / 2 : outSpace;
                textOutUp = me._createText(node.textOutUp, {
                    x: rextx + nodeWidth + space,
                    y: lry - fontSize / 2
                },
                linel, "up");
                tempg.appendChild(textOutUp);
            }
            if (!$.isNull(node.textOutDown)) {
                var linel = node.rLength ? parseInt(node.rLength) : levelSpace / 2;
                space = linel < outSpace ? linel / 2 : outSpace;
                textOutDown = me._createText(node.textOutDown, {
                    x: rextx + nodeWidth + space,
                    y: lry + fontSize
                },
                linel, "down");
                tempg.appendChild(textOutDown);
            }
        },
        _createNode: function(node) {
            var me = this,
                tempg,
                rectg,
                rect,
                levelSpace = me.options.levelSpace,
                nodeWidth = me.options.nodeWidth,
                nodeHeight = me.options.nodeHeight,
                left = node.lpoint.x + levelSpace / 2,
                top = node.lpoint.y - nodeHeight / 2;

            tempg = me._createSVGElement("g");
            rectg = me._createSVGElement("g");
            rect = me._createSVGElement("rect");
            rect.setAttribute("x", left);
            rect.setAttribute("y", top);
            rect.setAttribute("width", nodeWidth);
            rect.setAttribute("height", nodeHeight);
            rect.setAttribute("rx", 10);
            //如果有多个颜色值，则使用渐变,现只支持线性渐变
            rect.setAttribute("fill", "url(#" + me.linearGradientId + ")");
            rectg.appendChild(rect);
            tempg.appendChild(rectg);

            //节点的点击事件
            if (node.clickable && "true" === node.clickable) {
                if (me.options.selectable) {
                    rectg.setAttribute("cursor", "pointer");
                }
                rectg.addEventListener("click", function(evt) {
                    //改变选中的节点的样式
                    if (me.options.selectable) {
                        if (!$.isNull(me.preClickRectId) && node.id !== me.preClickRectId) {
                            me.rects[me.preClickRectId].setAttribute("fill", "url(#" + me.linearGradientId + ")");
                            rect.setAttribute("fill", "url(#" + me.selectedlinearGradId + ")");
                        } else {
                            rect.setAttribute("fill", "url(#" + me.selectedlinearGradId + ")");
                        }
                    }
                    me.preClickRectId = node.id;
                    if (!$.isNull(me.eventMap.nodeClick)) {
                        var params = JSON.parse(JSON.stringify(node));
                        me.eventMap.nodeClick(evt, params);
                    }

                }, true);
            }

            //为node中的创建字符显示信息
            me._doNodeText(node, rectg, tempg);
            var start = {}, end = {}, lpath, rpath, isNeedArrow = false;
            if ((!$.isNull(node.from) && node.from.length > 0) || $.isNotNull(node.textInUp) || $.isNotNull(node.textInDown)) {
                var ll = levelSpace / 2;
                start.x = node.lpoint.x;
                start.y = node.lpoint.y;
                end.x = node.lpoint.x + ll;
                end.y = start.y;
                if (!$.isNull(node.text)) {
                    isNeedArrow = true;
                }
                lpath = me._createPath(start.x, start.y, end.x, end.y, isNeedArrow);
                tempg.appendChild(lpath);
            }
            if ((!$.isNull(node.to) && node.to.length > 0) || $.isNotNull(node.textOutUp) || $.isNotNull(node.textOutDown)) {
                var ll = levelSpace / 2;
                start.x = node.rpoint.x - ll;
                start.y = node.rpoint.y;
                end.x = node.rpoint.x;
                end.y = start.y;
                rpath = me._createPath(start.x, start.y, end.x, end.y);
                tempg.appendChild(rpath);
            }
            me.S.group.appendChild(tempg);
            //保存所有node的svg dom对象，key是节点的id
            me.nodes[node.id] = tempg;
            me.rects[node.id] = rect;
        },

        _createPath: function(x1, y1, x2, y2, arrow) {
            var path, pathStr, me = this,
                pArr = ["M", x1, y1, "L", x2, y2];
            pathStr = pArr.join(" ");
            path = me._createSVGElement("path");
            path.setAttribute("stroke", me.options.lineColor);
            path.setAttribute("stroke-width", 3);
            if (arrow) {
                path.setAttribute("marker-end", "url(#" + me.markerId + ")");
                pArr = ["M", x1, y1, "L", x2 - 8, y2];
                pathStr = pArr.join(" ");
            }
            path.setAttribute("d", pathStr);
            return path;
        },

        _layout: function() {
            var me = this,
                options = me.options,
                nodes = me.topoNodes;

            var xoffset = 0,
                temp,
                inhasInText = false;
            me.endOutOffset = 0;
            //只看第一层，即入口节点是否有输入流量
            for (var k = 0; k < nodes.length; k++) {
                if (k === 0) {
                    for (var h = 0; h < nodes[k].length; h++) {
                        temp = me._findById(nodes[k][h]);
                        if (temp.textInUp || temp.textInDown) {
                            inhasInText = true;
                            break;
                        }
                    }
                }
                if (k === nodes.length - 1) {
                    for (var g = 0; g < nodes[k].length; g++) {
                        temp = me._findById(nodes[k][g]);
                        if (temp.textOutUp || temp.textOutDown) {
                            me.endOutOffset = options.levelSpace / 2;
                            break;
                        }
                    }
                }
            }
            if (inhasInText) {
                xoffset = options.levelSpace / 2;
            }
            me.xoffset = xoffset;
            var ls = options.levelSpace;
            //nodes是二维数组，其中每个元素代表一列元素的id集合
            for (var i = 0; i < nodes.length; i++) {
                var item = nodes[i];
                var count = item.length;
                //沿着me.centerY将每一列数据分隔成三部分，top, middle, bottom
                var top = [],
                    middle = [],
                    bottom = [];
                var f = Math.floor(count / 2);
                var modifY = options.nodeSpace / 2 + options.nodeHeight / 2;
                var step = 0;
                if (count % 2 === 1) {
                    if (count === 1) {
                        middle.push(item[0]);
                    } else {
                        middle.push(item[f]);
                    }

                    modifY = 0;
                    step = 1;
                }
                for (var q = 0; q < f; q++) {
                    top.push(item[q]);
                }
                for (var q = f + step; q < count; q++) {
                    bottom.push(item[q]);
                }

                //对top, middle, bottom中的节点计算相应的x,y坐标值
                for (var z = 0; z < top.length; z++) {
                    var t = me._findById(top[z]);
                    var spc = modifY === 0 ? top.length - z : top.length - 1 - z;
                    var y = me.centerY - modifY - (options.nodeHeight + options.nodeSpace) * spc;
                    t.lpoint = {
                        x: xoffset + (ls + options.nodeWidth) * i,
                        y: y
                    };
                    t.rpoint = {
                        x: xoffset + (ls + options.nodeWidth) * (i + 1),
                        y: y
                    };
                }
                for (var s = 0; s < middle.length; s++) {
                    var t = me._findById(middle[s]);
                    var y = me.centerY;
                    t.lpoint = {
                        x: xoffset + (ls + options.nodeWidth) * i,
                        y: y
                    };
                    t.rpoint = {
                        x: xoffset + (ls + options.nodeWidth) * (i + 1),
                        y: y
                    };
                }
                for (var c = 0; c < bottom.length; c++) {
                    var t = me._findById(bottom[c]);
                    var spc = modifY === 0 ? c + 1 : c;
                    var y = me.centerY + modifY + (options.nodeHeight + options.nodeSpace) * spc;
                    t.lpoint = {
                        x: xoffset + (ls + options.nodeWidth) * i,
                        y: y
                    };
                    t.rpoint = {
                        x: xoffset + (ls + options.nodeWidth) * (i + 1),
                        y: y
                    };
                }
            }
            me._move();
            me._deal1toMore();
            me._dealMoreto1();
            for (var i = 0; i < me.options.data.length; i++) {
                me._createNode(me.options.data[i]);
            }
        },
        _move: function() {
            var me = this,
                options = me.options,
                temp,
                data = options.data;

            for (var i = 0; i < data.length; i++) {
                if (!$.isNull(data[i].to) && data[i].to.length > 0) {
                    temp = data[i].to;
                    var tolen = temp.length;
                    if (tolen === 1) {
                        var tonode = me._findById(temp[0].id);
                        //两个直接相连的点的y坐标值不相同时，对相应的点进行移动
                        if (tonode && tonode.from && tonode.from.length === 1 && data[i].id === tonode.from[0]) {
                            var movey = data[i].rpoint.y - tonode.lpoint.y;
                            if (movey === 0) {
                                continue;
                            } else {
                                tonode.lpoint.y = tonode.rpoint.y = data[i].rpoint.y;
                            }
                        }
                    }
                }
            }
        },
        _deal1toMore: function() {
            var me = this,
                options = me.options,
                temp,
                startNode,
                endNode,
                path,
                data = options.data;

            for (var i = 0; i < data.length; i++) {
                if (!$.isNull(data[i].to) && data[i].to.length > 0) {
                    temp = data[i].to;
                    var toLen = temp.length;
                    if (toLen > 1) {
                        //如果此节点的层级中有多个节点时
                        //从所有from节点中找出y坐标最大值和最小值，再将他们相同的连接点移动到他们的中间位置
                        var min = {
                            y: 100000
                        }, max = {
                            y: 0
                        };
                        for (var n = 0; n < toLen; n++) {
                            var tn = me._findById(temp[n].id);
                            //如果分叉出去的节点有多个from节点，说明分叉节点有多个输入
                            if (tn.from && tn.from.length > 1) {
                                continue;
                            }
                            if (tn.lpoint.y > max.y) {
                                max["id"] = tn;
                                max.y = tn.lpoint.y;
                            }
                            if (tn.lpoint.y < min.y) {
                                min["id"] = tn;
                                min.y = tn.lpoint.y;
                            }
                        }
                        startNode = min.id;
                        endNode = max.id;
                        //如果节点的y坐标在后继所有节点之外，这时不移动此节点，移动后面的节点
                        if (data[i].lpoint.y > endNode.lpoint.y) {
                            endNode.lpoint.y = endNode.rpoint.y = data[i].lpoint.y + (options.nodeSpace + options.nodeHeight) / 2;
                        } else if (data[i].lpoint.y < startNode.rpoint.y) {
                            var __y = data[i].lpoint.y - (options.nodeSpace + options.nodeHeight) / 2;
                            if (__y < data[i].lpoint.y) {
                                __y = data[i].lpoint.y;
                            }
                            startNode.lpoint.y = startNode.rpoint.y = __y;
                        }
                        //目标是不移动前面的节点，只移动后面的节点
                        if (startNode.id === endNode.id) {
                            var _curnodey = data[i].rpoint.y + 10;
                            startNode.lpoint.y = startNode.rpoint.y = _curnodey;
                            endNode.lpoint.y = endNode.rpoint.y = _curnodey;
                            //连接此节点到startnode
                            path = me._createPath(data[i].rpoint.x - options.levelSpace / 2, _curnodey,
                            endNode.lpoint.x, endNode.lpoint.y);
                        } else {
                            path = me._createPath(startNode.lpoint.x, startNode.lpoint.y,
                            endNode.lpoint.x, endNode.lpoint.y);
                        }
                        me.vpath.appendChild(path);
                    }
                }
            }
        },
        _dealMoreto1: function() {
            var me = this,
                options = me.options,
                temp,
                startNode,
                endNode,
                path,
                data = options.data;

            for (var i = 0; i < data.length; i++) {
                if (!$.isNull(data[i].from) && data[i].from.length > 0) {
                    temp = data[i].from;
                    var fromLen = temp.length;
                    if (fromLen > 1) {
                        //从所有from节点中找出y坐标最大值和最小值，再将他们相同的连接点移动到他们的中间位置
                        var min = {
                            y: 100000
                        }, max = {
                            y: 0
                        };
                        for (var m = 0; m < fromLen; m++) {
                            var tn = me._findById(temp[m]);
                            if (tn.rpoint.y > max.y) {
                                max["id"] = tn;
                                max.y = tn.rpoint.y;
                            }
                            if (tn.rpoint.y < min.y) {
                                min["id"] = tn;
                                min.y = tn.rpoint.y;
                            }
                        }
                        startNode = min.id;
                        endNode = max.id;
                        var _ty = (endNode.lpoint.y + startNode.lpoint.y) / 2;
                        data[i].lpoint.y = data[i].rpoint.y = _ty;
                        path = me._createPath(startNode.rpoint.x, startNode.rpoint.y,
                        endNode.rpoint.x, endNode.rpoint.y);
                        me.vpath.appendChild(path);
                    }
                }
            }
        },
        _findById: function(id) {
            if ($.isNull(id)) {
                return -1;
            }
            var me = this,
                data = me.options.data;
            for (var i = 0; i < data.length; i++) {
                if (id === data[i].id) {
                    return data[i];
                }
            }
            return -1;
        },
        _createBlankNode: function(id, to) {
            return {
                id: id,
                text: "",
                "textInUp": "",
                "textInDown": "",
                "textOutUp": "",
                "textOutDown": "",
                "clickable": "false",
                "to": [{
                    id: to,
                    text: ""
                }]
            };
        },
        _draw: function() {
            var me = this,
                options = me.options,
                data = options.data;
            if ($.isNull(data) || data.length <= 0) {
                return;
            }

            //根据数据的关系将数据分层，topoNodes是一个二维数组，它的元素就是每一层的node的id
            me.topoNodes = me._parseData(data);
            //将data中的数据顺序转化成topoNodes中出现的顺序
            var tempData = [];
            me.maxLevel = {
                count: 0,
                index: 0
            };
            for (var g = 0; g < me.topoNodes.length; g++) {
                for (var f = 0; f < me.topoNodes[g].length; f++) {
                    if (me.topoNodes[g].length > me.maxLevel.count) {
                        me.maxLevel.count = me.topoNodes[g].length;
                        me.maxLevel.index = g;
                    }
                    var tn = me._findById(me.topoNodes[g][f]);
                    if (tn !== -1) {
                        tn.level = g + 1;
                        tempData.push(tn);
                    } else {

                    }
                }
            }
            options.data = data = JSON.parse(JSON.stringify(tempData));

            me._parseFromNode(data);
            for (var i = 0; i < me.topoNodes.length; i++) {
                if (me.topoNodes[i].length > me.maxLevelNodes) {
                    me.maxLevelNodes = me.topoNodes[i].length;
                }
            }

            //布局从中间开始，先根据最大的列求出最大的x,y值，找到中间值，定义好y方向的offset
            me.svgHeight = (me.maxLevelNodes - 1) * options.nodeSpace + me.maxLevelNodes * options.nodeHeight;
            me.centerY = Math.floor(me.svgHeight / 2);


            me._layout();
            me.maxHeight = padding + (me.maxLevelNodes - 1) * options.nodeSpace + me.maxLevelNodes * options.nodeHeight + padding;
            me.maxWidth = padding + (me.topoNodes.length - 1) * options.levelSpace + me.topoNodes.length * options.nodeWidth + padding + me.xoffset + me.endOutOffset;
            me.S.group.setAttribute("transform", "translate(" + (padding - options.levelSpace / 2) + "," + padding + ")");
            var style = " width:" + me.maxWidth + "px; height: " + me.maxHeight + "px";
            me.S.svg.setAttribute("style", style);
            me.S.svg.setAttribute("version", "1.1");
        },

        _parseFromNode: function(data) {
            var temp,
            temp1;
            for (var i = 0; i < data.length; i++) {
                temp = data[i];
                //为每一个节点找到它相连的进入点
                temp.from = [];
                for (var j = 0; j < data.length; j++) {
                    temp1 = data[j].to;
                    if (temp.id === data[j].id || $.isNull(temp1)) {
                        continue;
                    }
                    for (var k = 0; k < temp1.length; k++) {
                        if (temp.id === temp1[k].id) {
                            temp.from.push(data[j].id);
                            break;
                        }
                    }
                }
            }
        },
        _parseData: function(data) {
            //将数据在这里进行分层处理，且只支持横向展示的布局
            var topoNodes = [],
                me = this,
                groupNodesId = [],
                tempNodes = [],
                hasNode = false,
                isEnd = false,
                i = 0,
                j = 0,
                k = 0,
                temp;
            //先找出所有的有进入的点
            for (i = 0; i < data.length; i++) {
                temp = data[i];
                if (!$.isNull(temp.to) && temp.to.length > 0) {
                    for (j = 0; j < temp.to.length; j++) {
                        tempNodes.push(temp.to[j]);
                    }
                }
            }

            //找出第一行的nodes， 即找出没有进入的点
            for (i = 0; i < data.length; i++) {
                temp = data[i];
                hasNode = false;
                for (j = 0; j < tempNodes.length; j++) {
                    if (temp.id === tempNodes[j].id) {
                        //找到有进入的点，没有进入的点就是第一行的点
                        hasNode = true;
                        break;
                    }
                }
                if (!hasNode) {
                    //第一行的点
                    groupNodesId.push(temp.id);
                }
            }

            if (groupNodesId.length > 0) {
                //将第一行的点添加到topoNodes中
                topoNodes.push(groupNodesId);
            } else {
                return [];
            }

            while (!isEnd) {
                var tempGroup = {};
                isEnd = true;
                for (i = 0; i < groupNodesId.length; i++) {
                    for (j = 0; j < data.length; j++) {
                        if (data[j].id === groupNodesId[i]) {
                            if (!$.isNull(data[j].to) && data[j].to.length > 0) {
                                isEnd = false;
                                for (k = 0; k < data[j].to.length; k++) {
                                    tempGroup[data[j].to[k].id] = data[j].to[k].id;
                                }
                            }
                        }
                    }
                }

                groupNodesId = [];
                for (var key in tempGroup) {
                    groupNodesId.push(key);
                }
                if (groupNodesId.length > 0) {
                    //将第一行的点添加到topoNodes中
                    topoNodes.push(groupNodesId);
                }
            }

            var graobj = {};
            for (var i = topoNodes.length - 1; i >= 0; i--) {
                var t = topoNodes[i];
                for (var j = 0; j < t.length; j++) {
                    if (!graobj[t[j]]) {
                        graobj[t[j]] = {
                            id: t[j],
                            level: i + 1
                        };
                    } else {
                        //找出这个点的前面连接的点，并修改前面点to中的这个点为空白节点的id
                        for (var n = 0; n < topoNodes[i - 1].length; n++) {
                            var qq = me._findById(topoNodes[i - 1][n]);
                            if (qq.to && qq.to.length > 0) {
                                for (var r = 0; r < qq.to.length; r++) {
                                    if (qq.to[r].id === t[j]) {
                                        qq.to[r].id = presuffix + topoUUID;
                                    }
                                }
                            }
                        }
                        for (var m = 0; m < graobj[t[j]].level - 1 - i; m++) {
                            var bnId = presuffix + topoUUID;
                            topoUUID++;
                            topoNodes[i + m].push(bnId);
                            //创建空白的节点
                            var toId = "";
                            if (m + 1 === graobj[t[j]].level - 1 - i) {
                                toId = t[j];
                            } else {
                                toId = presuffix + topoUUID;
                            }
                            var bn = me._createBlankNode(bnId, toId);
                            me.options.data.push(bn);
                        }
                        t.splice(j, 1);
                        j--;
                    }
                }
            }

            return topoNodes;
        }
    });

    // 拓扑图组件
    Sweet.chart.SimpleTopology = $.sweet.widgetChartSimpleTopology;

}(jQuery));


;
/**
 * @fileOverview  
 * <pre>
 * 图--表格形图表
 * 2013/8/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 表格图例
 * @name Sweet.chart.GridLegend
 * @class 
 * @extends Sweet.chart
 * @requires <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 */

(function($, undefined) {
    "use strict";

    var chartClass = "sweet-chart-gridlegend",
        titleClass = "title",
        markerClass = "marker",
        labelClass = "label",
        valueClass = "value";

    $.widget("sweet.widgetChartGridLegend", $.sweet.widgetChart, /** @lends Sweet.chart.GridLegend.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-gridlegend]:",
        eventNames: {},
        options: /** @lends Sweet.chart.GridLegend.prototype*/
        {
            /**
             * 组件数据
             * @type Array
             * @default []
             */
            data: [],
            /**
             * 数据键。形如：[{value: xxx, text: xxx, unit: xxx},...]
             * @type Array
             * @default []
             */
            dataKeys: [],
            /**
             * 垂直对齐方式： top/middle/bottom
             * @type String
             * @default "top"
             */
            verticalAlign: "top",
            /**
             * 是否从颜色序列中跳跃选择颜色
             * @type Boolean
             * @default true
             */
            skipColor: true
        },
        /**
         * @description 设置组件值
         * @param {Object} data 数据
         */
        setData: function(data) {
            var me = this;
            me.options.data = data;
            me._createItems();
            me._doLayout();
        },
        /**
         * @parivate
         * @description 创建js对象
         */
        _createJsChart: function() {
            // chartEl
            // -> div
            //   -> ul
            //     -> li
            //       -> label(unit)
            //       -> [span, label, value]]
            this.legendEl = $("<div>").addClass(chartClass).appendTo(this.chartEl);
            this.listEl = $("<ul>").appendTo(this.legendEl);

            // 创建内容
            this._createItems();
        },
        /**
         * 创建列表项
         * @private
         */
        _createItems: function() {
            var data = this.options.data;
            var item, marker, label, value;
            var labelKey, valueKey, color;

            // check data
            if (data.length === 0 || this.options.dataKeys.length === 0) {
                return;
            }

            // clear
            this.listEl.empty();

            // title
            if (this.options.dataKeys[1].unit) {
                item = $("<li>").addClass(titleClass).appendTo(this.listEl);
                item.text(this.options.dataKeys[1].unit);
            }

            labelKey = this.options.dataKeys[0].value;
            valueKey = this.options.dataKeys[1].value;

            // data
            for (var i = 0; i < data.length; i++) {
                item = $("<li>").appendTo(this.listEl);
                marker = $("<span>").addClass(markerClass).appendTo(item);
                label = $("<span>").addClass(labelClass).appendTo(item);
                value = $("<span>").addClass(valueClass).appendTo(item);

                color = this._getColor(data.length, i, this.options.skipColor);
                marker.css("background-color", color);
                label.text(data[i][labelKey]).attr("title", data[i][labelKey]);
                value.text(data[i][valueKey]);
            }
        },
        /**
         * @private
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var liEl, value, label, left, width, height, outerHeight;
            var me = this;

            if (!this.rendered || !this.listEl) {
                return;
            }

            // label宽度
            width = me.listEl.width();
            this.listEl.children().each(function(idx, li) {
                liEl = $(li);

                if (idx === 0) {
                    return;
                }

                label = liEl.children().eq(1);
                value = liEl.children().eq(2);
                left = left || label.position().left;

                label.width(width - left - value.width() - 5);
            });

            // 如果垂直居中，或下对齐，通过调整margin来实现
            if (this.options.verticalAlign === "middle") {
                height = this.listEl.height();
                outerHeight = this.legendEl.height();

                if (height < this.legendEl.height()) {
                    this.listEl.css("margin-top", (outerHeight - height) / 2 + "px");
                } else {
                    this.listEl.css("margin-top", 0);
                }
            } else if (this.options.verticalAlign === "bottom") {
                height = this.listEl.height();
                outerHeight = this.legendEl.height();

                if (height < this.legendEl.height()) {
                    this.listEl.css("margin-top", (outerHeight - height) + "px");
                } else {
                    this.listEl.css("margin-top", 0);
                }
            }
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            this.legendEl.remove();
            this._super();
        }
    });

    // 表格图表
    Sweet.chart.GridLegend = $.sweet.widgetChartGridLegend;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 图--瓦片图例
 * 2013/8/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    "use strict";

    var chartClass = "sweet-chart-tiles",
        titleClass = "title",
        labelClass = "label",
        valueClass = "value",
        unitClass = "unit",
        topClass = "top",
        bottomClass = "bottom",
        cornerClass = "corner";

    $.widget("sweet.widgetChartTiles", $.sweet.widgetChart, /** @lends Sweet.chart.Tiles.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-tiles]:",
        eventNames: {},
        options: /** @lends Sweet.chart.Tiles.prototype*/
        {
            /**
             * 标题
             * @type String
             * @default ""
             */
            title: "",
            /**
             * 组件数据
             * @type Object
             * @default {}
             */
            data: {},
            /**
             * 数据键,color是自定义颜色值(特别是超过9种颜色值时需要自己定义颜色值)。形如：[{value: xxx, text: xxx, unit: xxx, color:"#ededed"},...]
             * @type Array
             * @default []
             */
            dataKeys: [],
            /**
             * 垂直对齐方式： top/middle/bottom
             * @type String
             * @default "top"
             */
            verticalAlign: "middle",
            /**
             * 是否从颜色序列中跳跃选择颜色
             * @type Boolean
             * @default false
             */
            skipColor: false,
            /**
             * 最小字体
             * @type Number
             * @default 14
             */
            minFont: 14,
            /**
             * 最大字体
             * @type Number
             * @default 40
             */
            maxFont: 40
        },
        /**
         * @description 设置组件值
         */
        _updateData: function() {
            this._createItems();
            this._doLayout();
        },
        /**
         * 通过setData修改图的属性发生改变时调用
         * @private
         */
        _setChangeProperty: function() {
            this._createItems();
            this._doLayout();
        },
        _getCanvasObject: function() {
            var me = this,
                i = 0,
                id = me.options.id;
            //must rendered
            if (!me.rendered) {
                return null;
            }
            var ulEl = me.chartEl.find("ul");
            if (ulEl.length <= 0) {
                return null;
            }
            ulEl = $(ulEl[0]);
            var ulMarginTop = parseInt(ulEl.css("margin-top"));
            var h = me.chartEl.height(),
                w = me.chartEl.width(),
                ulH = ulEl.height(),
                ulW = ulEl.width(),
                canvH = ulH > h ? ulH : h,
                canvW = ulW > w ? ulW : w;
            //返回的canvas对象
            var canvs = $("<canvas>").attr({
                width: canvW,
                height: canvH
            });
            canvs = canvs[0];
            var ctx = canvs.getContext("2d"),
                liEls = ulEl.find("li"),
                x = 8,
                y = ulMarginTop;
            for (i = 0; i < liEls.length; i++) {
                var _t = $(liEls[i]),
                    _label = _t.find("." + labelClass),
                    _cornerEl = _t.find("." + cornerClass),
                    _cornerW = 20, //_cornerEl.width(),
                    _text = _label.text(),
                    _bgColor = _label.css("background-color"),
                    _textColor = _label.css("color"),
                    _width = _t.width(),
                    _height = _t.height();
                ctx.save();
                //画背景
                ctx.fillStyle = ctx.strokeStyle = _bgColor;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + _width, y);
                ctx.lineTo(x + _width - _cornerW, y + _height);
                ctx.lineTo(x, y + _height);
                ctx.closePath();
                ctx.fill();
                //画文字内容
                ctx.fillStyle = ctx.strokeStyle = _textColor;
                ctx.font = "12px Tahoma";
                var _txtcalc = me._calcText(ctx, _text, "12px Tahoma", _width - _cornerW - x);
                ctx.fillText(_txtcalc, x + 3, y + 15);
                ctx.restore();
                y += _height + 8;
            }
            return canvs;
        },
        _calcText: function(ctx, txt, font, width) {
            var suffix = "...",
                hasModifyed = false,
                result = txt;
            ctx.save();
            ctx.font = font;
            while (true) {
                var w = ctx.measureText(result).width;
                if (w > width) {
                    var index = Math.floor((width * result.length) / w);
                    result = result.substr(0, index);
                    hasModifyed = true;
                } else {
                    break;
                }
            }
            var afterCalcWidth = ctx.measureText(result).width;
            if (hasModifyed && afterCalcWidth < width) {
                result += suffix;
            }
            ctx.restore();

            return result;
        },
        /**
         * @parivate
         * @description 创建js对象
         */
        _createJsChart: function() {
            // chartEl
            // -> div
            //   -> title
            //   -> ul
            //     -> li
            //       -> value + unit
            //       -> text
            this.tilesEl = $("<div>").addClass(chartClass).appendTo(this.chartEl);
            this.listEl = $("<ul></ul>").appendTo(this.tilesEl);

            // 创建内容
            this._createItems();
        },
        /**
         * 创建列表项
         * @private
         */
        _createItems: function() {
            var data = this.options.data;
            var dataKeys = this.options.dataKeys;
            var item, unit, label, value, corner, top, bottom;
            var colorCount, labelText, valueKey, unitText, color;

            // check data
            if ($.isNull(data) || dataKeys.length === 0) {
                return;
            }

            // clear
            this.listEl.empty();

            // decide colors serial
            colorCount = dataKeys.length;

            // data
            for (var i = 0; i < dataKeys.length; i++) {
                labelText = dataKeys[i].text;
                valueKey = dataKeys[i].value;



                // data item
                item = $("<li>").appendTo(this.listEl);
                bottom = $("<div>").addClass(bottomClass).appendTo(item);

                label = $("<span>").addClass(labelClass).appendTo(bottom);
                corner = $("<div>").addClass(cornerClass).appendTo(bottom);

                // text
                label.text(labelText).attr("title", labelText);

                // style
                if (colorCount > 0 && colorCount <= this.maxPacket - 1) {
                    color = this._getColor(colorCount, i, this.options.skipColor);
                } else if (this.options.dataKeys[i].color) {
                    color = this.options.dataKeys[i].color;
                }
                label.css("background-color", color);
                corner.css("border-top-color", color);
            }
        },
        /**
         * @private
         * @description 组件宽度、高度发生变化后调用，进行页面重绘。
         */
        _doLayout: function() {
            var width, height, outerHeight, outerWidth, step;
            var me = this,
                font,
                ratio = 0.625,
                values,
                units,
                margin,
                minFont = this.options.minFont,
                maxFont = this.options.maxFont;

            if (!this.rendered || !this.listEl) {
                return;
            }

            function _getMaxWidth() {
                var m = 0,
                    w, divEl;

                me.listEl.find("." + topClass).each(function(i, div) {
                    divEl = $(div);
                    w = divEl.children("." + valueClass).outerWidth() + divEl.children("." + unitClass).outerWidth();
                    if (w > m) {
                        m = w;
                    }
                });

                return m;
            }

            // 动态调整Value的字体大小

            outerWidth = this.tilesEl.width();
            outerHeight = this.tilesEl.height();
            height = this.listEl.height();





            // 如果垂直居中，或下对齐，通过调整margin来实现
            if (this.options.verticalAlign === "middle") {
                height = this.listEl.height();
                outerHeight = this.tilesEl.height();

                if (height < this.tilesEl.height()) {
                    this.listEl.css("margin-top", (outerHeight - height) / 2 + "px");
                } else {
                    this.listEl.css("margin-top", 0);
                }
            } else if (this.options.verticalAlign === "bottom") {
                height = this.listEl.height();
                outerHeight = this.tilesEl.height();

                if (height < this.tilesEl.height()) {
                    this.listEl.css("margin-top", (outerHeight - height) + "px");
                } else {
                    this.listEl.css("margin-top", 0);
                }
            }
        },
        /**
         * @private
         * @description 组件销毁
         */
        _destroyWidget: function() {
            Sweet.Task.Delay.stop("sweet.chart.tiles.layout-" + this.options.id);
            this.tilesEl.remove();
            this._super();
        }
    });

    /**
     * 瓦片图例
     * @name Sweet.chart.Tiles
     * @class
     * @extends Sweet.chart
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.chart.js
     * </pre>
     */
    Sweet.chart.Tiles = $.sweet.widgetChartTiles;
}(jQuery));;
/**
 * @fileOverview 码流流程图
 * @date 2013/08/31
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 */

/**
 * 创建码流流程图
 * @name Sweet.chart.SequenceChart
 * @class 
 * @extends Sweet.chart
 * @requires  
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * jquery.sweet.widget.chart.js
 * </pre>
 * @example 
 * <pre>
 *  var data = [];
 *  sequenceChart = new Sweet.chart.SequenceChart({
 *      width : "100%",
 *      height : 600,
 *      data : data,
 *      renderTo : "sweet-sequenceChart"
 * });
 * </pre>
 */
(function($, undefined) {
    var flowDivClass = "SequenceChart-sequence",
        tipsDiv = "sweet-arrayindicator-infoDiv";
    $.widget("sweet.widgetChartSequenceChart", $.sweet.widgetChart, /** @lends Sweet.chart.SequenceChart.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-chart-sequence-chart]:",
        eventNames: /** @lends Sweet.chart.SequenceChart.prototype*/
        {
            /**
             * @event
             * @description 横线上的文字的点击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 此横线上的所有数据信息
             */
            click: "click点击事件"
        },
        options: /** @lends Sweet.chart.SequenceChart.prototype*/
        {
            /**
             * 节点的宽度
             * @type number
             * @default 160
             */
            columnWidth: 160,
            /**
             * 组件的宽度
             * @type number
             * @default 1280
             */
            width: 1280,
            /**
             * 组件的高度
             * @type number
             * @default 800
             */
            height: 800,
            /**
             * 码流图的数据
             * @type object
             * @default {}
             */
            data: {}
        },
        /**
         * @description 为码流图设置数据
         * @param {object} data 设置的数据对象, 如果设置为空对象：{}
         */
        setData: function(data) {
            if ($.isNull(data)) {
                return;
            }
            var me = this,
                options = me.options;
            me._initData();
            options.data = JSON.parse(JSON.stringify(data));
            me._dealNEInfo();
            me._setCanvasWH();
            me._createSequenceChart();
        },
        /**
         * @public
         * @description 码流图中的网元顺序发生改变时，调用此函数重绘码流图
         * @param {Array} neArr 顺序发生改变后的网元的名称集合，将以此顺序重绘图
         */
        sortChange: function(neArr) {
            var me = this;
            if ($.isNull(neArr) || neArr.length === 0 || neArr.length !== me.neInfo.length) {
                return;
            }
            me.neInfo = JSON.parse(JSON.stringify(neArr));
            me.neCount = me.neInfo.length;
            me._setCanvasWH();
            me._createSequenceChart();
        },
        _createJsChart: function() {
            var me = this,
                options = me.options;

            //canvas画布对象id
            me.flowCanvasId = options.id + "-canvas";
            me.flowEl = $("<div>").attr({
                id: options.id + "-flow"
            })
                .height(options.height).width(options.width)
                .addClass(flowDivClass).css({
                "overflow": "auto"
            });
            //创建canvas
            me.flowCanvasEl = $("<Canvas>").attr({
                id: me.flowCanvasId,
                width: options.width,
                height: options.height
            })
                .appendTo(me.flowEl);
            me.context = me.flowCanvasEl.get(0).getContext('2d');
            me._readyGo();
            me._bindEvent();
            //根据数据来判断是否需要往下画图
            if (!$.isNull(options.data) && !$.isNull(options.data.result) && options.data.result.length > 0) {
                //找到有多少个网元，计算网元所占有的宽度，以此来设置flowCanvasEl的宽度
                me._dealNEInfo();
                me._setCanvasWH();
                me._createSequenceChart();
            }
        },
        /**
         * @private
         * @param {Event} evt 事件对象
         * @param {Array} nodes 所有实线上的文字坐标等记录的集合
         * @returns {object} 返回鼠标是否在指定的node范围内
         */
        _isScope: function(evt, nodes) {
            var me = this,
                cx = 0,
                cy = 0,
                temp, i = 0;
            if ($.isFirefox()) {
                cx = evt.pageX - me.flowCanvasEl.offset().left;
                cy = evt.pageY - me.flowCanvasEl.offset().top;
            } else if ($.isChrome() || $.isIE()) {
                cx = evt.offsetX;
                cy = evt.offsetY;
            }
            //根据鼠标当前坐标是否在其相应的坐标范围内
            for (i = 0; i < nodes.length; i++) {
                temp = nodes[i];
                if (cx >= temp.left && cx <= temp.left + temp.width && cy >= temp.top && cy <= temp.top + temp.height) {
                    return {
                        isScope: true,
                        node: JSON.parse(JSON.stringify(temp))
                    };
                }
            }
            return false;
        },
        _bindEvent: function() {
            var me = this,
                ctx = me.context;
            //绑定点击事件
            me.flowCanvasEl.bind("click", function(evt) {
                //根据文字的坐标范围找到相应点击的文字信息
                var info = me._isScope(evt, me.textOnLineInfo);
                if (info && info.isScope) {
                    //说明在范围内，调用用户注册的click事件,同时需要改变字体样式
                    if (!$.isNull(me.eventMap.click) && $.isFunction(me.eventMap.click)) {
                        me.eventMap.click(evt, info.node.line);
                    }
                }
            });
            //绑定mousemove事件，改变鼠标移动上去的样式为手形,同时显示网元和线上文字的tips提示
            me.flowCanvasEl.bind("mousemove", function(evt) {
                var info = me._isScope(evt, me.textOnLineInfo);
                var neInfo = me._isScope(evt, me.netElementsInfo);
                if (!$.isNull(me.tipDiv)) {
                    me.tipDiv.remove();
                }
                if (info && info.isScope) {
                    //说明在范围内，改变鼠标样式为手形
                    me.flowCanvasEl.css("cursor", "pointer");
                    me.tipDiv = $("<div>").addClass(tipsDiv).appendTo("body");
                    $("<span>").html(info.node.line.name).appendTo(me.tipDiv);
                    me.tipDiv.position({
                        my: "left+5 bottom-10",
                        of: evt,
                        collision: "flipfit"
                    });
                } else if (neInfo && neInfo.isScope) {
                    //说明在范围内，改变鼠标样式为手形
                    me.tipDiv = $("<div>").addClass(tipsDiv).appendTo("body");
                    $("<span>").html(neInfo.node.neDesc).appendTo(me.tipDiv);
                    me.tipDiv.position({
                        my: "right+5 bottom-10",
                        of: evt,
                        collision: "flipfit"
                    });
                } else {
                    if (!$.isNull(me.tipDiv)) {
                        me.tipDiv.remove();
                    }
                    me.flowCanvasEl.css("cursor", "default");
                }
            });
            me.flowCanvasEl.bind("mouseout", function(evt) {
                if (!$.isNull(me.tipDiv)) {
                    me.tipDiv.remove();
                }
            });
        },
        _setCanvasWH: function() {
            var me = this,
                options = me.options,
                textWidth = 0,
                cWidth = 0,
                cHeight = 0,
                i = 0,
                count = me.neCount,
                colWidth = options.columnWidth,
                data = options.data,
                result = data.result ? data.result : [],
                len = result.length;

            me.timeTextMaxWidth = 0;
            for (i = 0; i < len; i++) {
                me.context.save();
                me.context.font = "12px Tahoma";
                textWidth = me.context.measureText(result[i].time).width;
                me.context.restore();
                //记录左边text最大的宽度
                if (textWidth > me.timeTextMaxWidth) {
                    me.timeTextMaxWidth = textWidth;
                }
            }
            if (me.timeTextMaxWidth > me.maxTextWidth) {
                //如果大于最大值，就使用最大值
                me.timeTextMaxWidth = me.maxTextWidth;
            }
            cWidth = me.leftMargin * 2 + me.timeTextMaxWidth + me.textToChart + ((count === 0 ? 1 : count) - 1) * colWidth;
            //30表示底部空出的部分
            cHeight = ((len === 0 ? 1 : len) - 1) * me.rowSpace + me.headerHeight + 30;
            me.flowCanvasEl.attr({
                width: cWidth,
                height: cHeight
            });
        },
        /**
         * @private
         * @description 解析网元信息，计算网元个数并将网元名称存储起来
         */
        _dealNEInfo: function() {
            var me = this,
                i = 0,
                temp,
                tempne = {},
                options = me.options,
                data = options.data,
                result = data.result ? data.result : [],
                len = result.length;

            me.neInfo = [];
            me.neCount = 0;
            for (i = 0; i < len; i++) {
                temp = result[i];
                if (me.neInfo.length === 0) {
                    me.neInfo.push(temp.srcname);
                    me.neInfo.push(temp.destname);
                    tempne[temp.srcname] = 1;
                    tempne[temp.destname] = 1;
                    me.neCount = 2;
                } else {
                    if ($.isNull(tempne[temp.srcname])) {
                        tempne[temp.srcname] = 1;
                        me.neInfo.push(temp.srcname);
                        me.neCount++;
                    }
                    if ($.isNull(tempne[temp.destname])) {
                        tempne[temp.destname] = 1;
                        me.neInfo.push(temp.destname);
                        me.neCount++;
                    }
                }
            }
        },
        _createSequenceChart: function() {
            var me = this,
                options = me.options,
                data = options.data,
                result = data.result ? data.result : [],
                len = result.length,
                i = 0,
                //文字的宽度
                textWidth = 0,
                x = me.leftMargin,
                y = 0;

            me.timeTextMaxWidth = 0;
            for (i = 0; i < len; i++) {
                //画左边的时间文字
                x = me.leftMargin;
                y = me.rowSpace * i + me.headerHeight;
                textWidth = me._createText(result[i].time, x, y, {
                    fillStyle: "#3c3c3c",
                    textAlign: "start",
                    maxTextWidth: me.maxTextWidth,
                    font: "12px Tahoma"
                });
                //记录左边text最大的宽度
                if (textWidth > me.timeTextMaxWidth) {
                    me.timeTextMaxWidth = textWidth;
                }
            }
            if (me.timeTextMaxWidth > me.maxTextWidth) {
                //如果大于最大值，就使用最大值
                me.timeTextMaxWidth = me.maxTextWidth;
            }

            me._createNEAndText();
            me._drawLineAndName();
        },
        _createNEAndText: function() {
            var me = this,
                options = me.options,
                neInfo = me.neInfo,
                i = 0,
                temp, left = 0,
                p1 = {},
                p2 = {},
                x = 0,
                y = 0,
                textWidth = 0,
                maxWidth = options.columnWidth;
            me.netElsXY = [];
            me.netElementsInfo = [];
            for (i = 0; i < neInfo.length; i++) {
                //网元名称
                temp = neInfo[i];
                x = me.leftMargin + me.timeTextMaxWidth + me.textToChart + i * options.columnWidth;
                y = Math.floor(me.headerHeight / 2);
                textWidth = me._createText(temp, x, y, {
                    maxTextWidth: maxWidth,
                    textAlign: "center",
                    font: "16px Tahoma"
                });
                if (textWidth > maxWidth) {
                    textWidth = maxWidth;
                }
                //记录每个网元的坐标信息和网元名称
                me.netElsXY.push({
                    name: temp,
                    x: x,
                    y: y
                });
                p1 = {
                    x: x,
                    y: me.headerHeight - 23
                };
                p2 = {
                    x: x,
                    y: (options.data.result.length - 1) * me.rowSpace + me.headerHeight
                };
                //网元下的竖直直线
                me._drawLine(p1, p2, "#d2d2d2", false);
                left = x - textWidth / 2;
                me.netElementsInfo.push({
                    //此行相关的信息集合
                    neDesc: temp,
                    //重绘时文字x的坐标
                    tx: x,
                    //重绘时文字y的坐标
                    ty: y,
                    //重绘时文字的最大值
                    maxWidth: maxWidth,
                    //判断范围时的top
                    top: y - 15,
                    //判断范围时的left
                    left: left,
                    //判断范围时txet的宽度
                    width: textWidth,
                    //判断范围时txet的高度
                    height: 15
                });
            }
        },
        _drawLineAndName: function() {
            var me = this,
                options = me.options,
                data = options.data,
                result = data.result ? data.result : [],
                len = result.length,
                //网元个数
                netLen = me.netElsXY.length,
                i = 0,
                temp,
                p1 = {}, p2 = {},
                src = {}, dest = {},
                color = "blue",
                x = 0,
                y = 0;
            me.textOnLineInfo = [];
            for (i = 0; i < len; i++) {
                temp = result[i];
                y = me.rowSpace * i + me.headerHeight - 4;
                //y-4是为了虚线画在文字的中间,找到第一个网元和最后一个网元，画出两者之间的虚线
                p1 = {
                    x: me.netElsXY[0].x,
                    y: y
                };
                p2 = {
                    x: me.netElsXY[netLen - 1].x,
                    y: y
                };
                me._drawDotLine(p1, p2, false, "#647796");

                //下面画实线，先设置坐标信息
                src.x = me._findByName(temp.srcname).x;
                dest.x = me._findByName(temp.destname).x;
                //修正箭头的位置
                if (src.x < dest.x) {
                    dest.x = dest.x - me.arrowHeight;
                } else {
                    dest.x = dest.x + me.arrowHeight;
                }
                src.y = dest.y = y;
                //取得颜色值
                color = me._getColor(temp);
                //画带箭头的实线
                me._drawLine(src, dest, color, true);
                //画实线上的文字
                var dirIndex = me._getDirectionSpaceIndex(temp);
                var maxWidth = dirIndex.space * options.columnWidth;
                var textColor = "#3c3c3c",
                    font = "12px Tahoma";
                if (temp.isErrorColor === "1") {
                    textColor = !$.isNull(temp.textColor) ? temp.textColor : "red";
                    font = "12px Tahoma solid";
                } else {
                    textColor = "#3c3c3c";
                }
                var tX = 0,
                    tY = y - 6,
                    textWidth = 0,
                    left = 0;
                if (dirIndex.direction === "left") {
                    tX = dest.x + maxWidth / 2;
                } else {
                    tX = src.x + maxWidth / 2;
                }
                textWidth = me._createText(temp.name, tX, tY, {
                    maxTextWidth: maxWidth,
                    fillStyle: textColor,
                    textAlign: "center",
                    font: font
                });
                if (textWidth > maxWidth) {
                    textWidth = maxWidth;
                }
                left = tX - textWidth / 2;
                //保存text的坐标、范围等信息，以便事件时使用到
                me.textOnLineInfo.push({
                    //此行相关的信息集合
                    line: temp,
                    //重绘时文字x的坐标
                    tx: tX,
                    //重绘时文字y的坐标
                    ty: tY,
                    //重绘时文字的最大值
                    maxWidth: maxWidth,
                    //判断范围时的top
                    top: tY - 10,
                    //判断范围时的left
                    left: left,
                    //判断范围时txet的宽度
                    width: textWidth,
                    //判断范围时txet的高度
                    height: 10
                });
            }
        },
        /**
         * @private
         * @param {object} node 实线信息对象
         * @returns {object} 返回当前实线的方向:向左或向右，以及两者之间的间隔个数
         */
        _getDirectionSpaceIndex: function(node) {
            var me = this,
                i = 0,
                sIndex = 0,
                eIndex = 0;
            for (i = 0; i < me.netElsXY.length; i++) {
                if (node.srcname === me.netElsXY[i].name) {
                    sIndex = i;
                }
                if (node.destname === me.netElsXY[i].name) {
                    eIndex = i;
                }
            }
            return {
                direction: eIndex - sIndex < 0 ? "left" : "right",
                space: Math.abs(sIndex - eIndex)
            };
        },
        /**
         * @private
         * @description 取得实线的颜色值
         * @param {object} node  实线的信息
         * @returns {String} 返回实线的颜色值
         */
        _getColor: function(node) {
            var me = this,
                i = 0,
                direction;
            //使用指定的颜色值
            if (node.isErrorColor === "1") {
                return node.color;
            } else if (node.isErrorColor === "0") {
                direction = me._getDirectionSpaceIndex(node).direction;
                //向左："#90cc19" 向右："#369cd8"
                return direction === "right" ? "#369cd8" : "#90cc19";
            }
            return "#000000";
        },
        _findByName: function(name) {
            var me = this,
                i = 0;
            for (i = 0; i < me.netElsXY.length; i++) {
                if (name === me.netElsXY[i].name) {
                    return me.netElsXY[i];
                }
            }
        },

        _createText: function(text, x, y, attr) {
            var me = this,
                textWidth = 0,
                tempText = text,
                tempLen = 0,
                ctx = me.context;
            if ($.isNull(attr)) {
                attr = {};
            }
            ctx.save();
            ctx.textAlign = attr.textAlign ? attr.textAlign : "start";
            ctx.fillStyle = attr.fillStyle ? attr.fillStyle : "#3c3c3c";
            ctx.font = attr.font ? attr.font : "12px Tahoma";
            ctx.translate(x, y);
            if ($.isNull(attr.maxTextWidth)) {
                ctx.fillText(tempText, 0, 0);
            } else {
                textWidth = ctx.measureText(text).width;
                if (textWidth > attr.maxTextWidth) {
                    tempLen = Math.ceil(text.length * attr.maxTextWidth / textWidth);
                    tempText = String(text).substr(0, tempLen - 4) + "...";
                }
                ctx.fillText(tempText, 0, 0, attr.maxTextWidth);
            }
            ctx.restore();
            return textWidth;
        },
        _initData: function() {
            var me = this;
            //最左边时间text的最大宽度
            me.timeTextMaxWidth = 0;
            //网元信息：名称，按此顺序进行排列
            me.neInfo = [];
            //网元个数
            me.neCount = 0;
            //网元的名称和坐标信息
            me.netElsXY = [];
            //实线上的文字相关信息(范围、坐标等)，主要用于文字的点击事件等使用
            me.textOnLineInfo = [];
            //网元信息的提示时使用的信息集合，ne是网元的缩写
            me.netElementsInfo = [];
        },
        _readyGo: function() {
            var me = this;
            me.eventMap = {};
            //距离左边的间距
            me.leftMargin = 30;
            //text允许的最大宽度
            me.maxTextWidth = 200;
            //时间text右边到第一个网元的间距
            me.textToChart = 24;
            //网元元素的所占的高度
            me.headerHeight = 60;
            //行间距，UI规范规定为26，加上字体高度大约是8
            me.rowSpace = 26 + 8;
            //箭头的高度
            me.arrowHeight = 6;
            me._initData();
            var CCD = window.CanvasRenderingContext2D && CanvasRenderingContext2D.prototype;
            if (CCD.lineTo) {
                CCD._dottedLine = function(x, y, x2, y2, dashArr) {
                    if (!dashArr) {
                        dashArr = [4, 2];
                    }
                    var me = this,
                        dx = (x2 - x),
                        dy = (y2 - y),
                        len = 0,
                        rotate = Math.atan2(dy, dx);
                    len = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
                    me.save();
                    me.translate(x, y);
                    me.moveTo(0, 0);
                    me.rotate(rotate);
                    var dc = dashArr.length,
                        di = 0,
                        draw = true;
                    x = 0;
                    while (len > x) {
                        x += dashArr[di++ % dc];
                        if (x > len) {
                            x = len;
                        }
                        if (draw) {
                            me.lineTo(x, 0);
                        } else {
                            me.moveTo(x, 0);
                        }
                        draw = !draw;
                    }
                    me.restore();
                };
            }
        },
        _drawDotLine: function(p1, p2, bArrow, color) {
            var me = this,
                ctx = me.context;
            //保持状态
            ctx.save();
            //是否需要画箭头
            if (bArrow) {
                me._drawArrow(ctx, p1, p2, color);
            }
            ctx.strokeStyle = color;
            ctx.lineWidth = 1;
            ctx.beginPath();
            //画虚线
            ctx._dottedLine(p1.x, p1.y, p2.x, p2.y);
            ctx.closePath();
            ctx.stroke();
            ctx.restore();
        },

        _drawLine: function(p1, p2, color, bArrow) {
            var me = this,
                lineWidth = 3,
                context = me.context;
            if (bArrow) {
                me._drawArrow(context, p1, p2, color);
            }
            context.save();
            context.lineWidth = lineWidth;
            context.strokeStyle = color;
            context.beginPath();
            context.moveTo(p1.x, p1.y);
            context.lineTo(p2.x, p2.y);
            context.stroke();
            context.closePath();
            context.restore();
        },

        _drawArrow: function(ctx, start, end, color) {
            var me = this,
                transX = 0,
                arrowHeight = me.arrowHeight;
            ctx.save();
            ctx.fillStyle = ctx.strokeStyle = color;
            if (start.x <= end.x) {
                transX = end.x + arrowHeight;
            } else {
                transX = end.x - arrowHeight;
            }
            ctx.translate(transX, end.y);
            if (end.y - start.y >= 0) {
                ctx.rotate(Math.atan((end.x - start.x) / (end.y - start.y)));
            } else {
                ctx.rotate(Math.PI + Math.atan((end.x - start.x) / (end.y - start.y)));
            }

            ctx.beginPath();
            ctx.lineTo(-arrowHeight, arrowHeight);
            ctx.lineTo(0, arrowHeight);
            ctx.lineTo(arrowHeight, arrowHeight);
            ctx.lineTo(0, 0);
            ctx.fill();
            ctx.closePath();
            ctx.restore();
        },

        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    me.eventMap.click = func;
                }
            });
        },

        _removeListener: function(eName) {
            var me = this;
            if ($.isNull(eName)) {
                me.handlers = {};
                me.eventMap = {};
            } else {
                if (eName === "click" && !$.isNull(me.eventMap.click)) {
                    delete me.eventMap.click;
                }
            }
        },
        _chartRender: function() {
            var me = this;
            if (me.rendered || $.isNull(me.flowEl)) {
                return;
            }

            me.flowEl.appendTo(me.chartEl);
        }
    });

    // 码流图组件
    Sweet.chart.SequenceChart = $.sweet.widgetChartSequenceChart;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 组件--鱼骨图
 * 2013.9.16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {

    var fboneStartClass = "sweet-chart-fishbone-head",
        fbonePointClass = "sweet-chart-fishbone-point",
        fboneEndClass = "sweet-chart-fishbone-end",
        fboneMidUpArrowClass = "sweet-chart-fishbone-middle-upArrow",
        fboneMidDownArrowClass = "sweet-chart-fishbone-middle-downArrow",
        fboneStartUpLabOutClass = "sweet-chart-fishbone-up-outLabel",
        fboneStartUpLabClass = "sweet-chart-fishbone--up-label",
        fboneStartDownLabClass = "sweet-chart-fishbone-down-label",
        upTabelEIClass = "sweet-chart-fishbone-upTable",
        downTabelEIClass = "sweet-chart-fishbone-downTable",
        fboneMajorClass = "sweet-chart-fishbone-midAll",
        fboneWidgetClass = "sweet-chart-fishbone-widget";

    $.widget("sweet.widgetFishbone", $.sweet.widgetChart, /** @lends Sweet.chart.Fishbone.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-fishbone]",
        // Fishbone组件公共配置参数
        options: /** @lends Sweet.chart.Fishbone.prototype*/
        {
            /**
             * @description Fishbone宽度
             * @type {String/Number}
             * @default "100%"
             */
            width: "100%",
            /**
             * @description Fishbone高度
             * @type {String/Number}
             * @default 500px
             */
            height: 500,
            /**
             * @description 鱼骨图数据
             * @param {Array}
             * @default null
             */
            data: null,
            /**
             * @description 鱼头部分下箭头说明
             * @param {Array}
             * @default null
             */
            desc: null,
            /**
             * @description 上下箭头的控件
             * @param {Array}
             * @default null
             */
            items: null
        },

        /**
         * @public
         * @description 设置鱼骨图数据
         * @param {Array} data 数据
         * data数据结构为[
         *                {value: "110515\n100.00%", "text": "CM Service\nRequest", data: Object},
         *                ...
         *              ]
         */
        setData: function(data) {
            if ($.isNull(data)) {
                return;
            }

            var me = this;
            //先删除原来的表格对象
            me._destroyWidget();

            if ($.isArray(data)) {
                me.options.data = data;
            }
            me.fishBoneEI.empty();

            //创建fishbone
            me._createFishWidget();
            //先dolayout给表格渲染的div设置宽度和高度，后面再调用表格渲染
            me._doLayout();
            //创建箭头所指的表格
            me._creatFishArrowTable();
        },
        /**
         * @private
         * 组件渲染
         * @param {String} id 宿主ID
         * @return {Boolean} true:创建成功 false:创建失败
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }

            me.chartEl.appendTo(me.renderEl);
            //创建箭头所指的表格
            me._creatFishArrowTable();
            me.rendered = true;
            return true;
        },

        /**
         * @private
         * @description 创建fishbone组件总入口
         */
        _createJsChart: function() {
            var me = this,
                opt = me.options;

            me.fishBoneEI = $("<div>").appendTo(me.chartEl)
                .width(opt.width).height(opt.height).addClass(fboneWidgetClass);

            //创建fishbone
            me._createFishWidget();

        },

        /**
         * @private
         * @description 创建fishbone
         */
        _createFishWidget: function() {
            var me = this,
                data = me.options.data;
            me.fboneMajor = $("<div>").appendTo(me.fishBoneEI).addClass(fboneMajorClass);

            //存放上面的table对象
            me.upTables = [];
            //存放下面的table对象
            me.downTables = [];
            if ($.isNull(data)) {
                //创建鱼头
                me._createFishHead();
                //创建鱼尾
                me._createFishEnd();
            } else {
                if ($.isArray(data)) {
                    //创建鱼头
                    me._createFishHead();

                    //创建鱼身
                    me._createFishMiddle();

                    //创建鱼尾
                    me._createFishEnd();
                }
            }
        },

        /**
         * @private
         * @description 创建鱼头
         */
        _createFishHead: function() {
            var me = this,
                fishHeadEI = me.fishHeadEI = $("<div>").addClass(fboneStartClass),
                headDownLabel,
                headUpLabel,
                fishHeadUpEI = me.fishHeadUpEI = $("<div>").appendTo(fishHeadEI).addClass(fboneStartUpLabOutClass),
                fishHeadUpLab = me.fishHeadUpLab = $("<div>").appendTo(fishHeadUpEI).addClass(fboneStartUpLabClass),
                fishHeadDownLab = me.fishHeadDownLab = $("<div>").appendTo(fishHeadEI).addClass(fboneStartDownLabClass);

            if ($.isNotNull(me.options.desc)) {
                headUpLabel = (me.options.desc)[0].replace(/\n/g, "<br>");
                headDownLabel = (me.options.desc)[1].replace(/\n/g, "<br>");
            }

            fishHeadUpLab.html(headUpLabel);
            fishHeadDownLab.html(headDownLabel);
            fishHeadEI.appendTo(me.fboneMajor);
        },

        /**
         * @private
         * @description 创建鱼身
         */
        _createFishMiddle: function() {
            var me = this,
                options = me.options,
                data = options.data || [],
                len = data.length,
                fishMiddleEI,
                fishMidPointEI,
                fishMidPointUpLabOutEI,
                fishMidPointUpLabEI,
                fishMidPointDownLabEI,
                upPointText,
                downPointText,
                tempData,
                tempWid;

            me.data = data;

            fishMiddleEI = me.fishMiddleEI = $("<div>").appendTo(me.fboneMajor);
            tempWid = 150;
            if ($.isNotNull(data) && 0 < len) {
                for (var i = 0; i < len; i++) {
                    tempData = data[i];
                    downPointText = tempData.value.replace(/\n/g, "<br>");
                    upPointText = tempData.text.replace(/\n/g, "<br>");

                    fishMidPointEI = me.fishMidPointEI = $("<div>").appendTo(fishMiddleEI).addClass(fbonePointClass);
                    fishMidPointUpLabOutEI = $("<div>").appendTo(fishMidPointEI).addClass(fboneStartUpLabOutClass);
                    fishMidPointUpLabEI = $("<div>").appendTo(fishMidPointUpLabOutEI).addClass(fboneStartUpLabClass);
                    fishMidPointDownLabEI = $("<div>").appendTo(fishMidPointEI).addClass(fboneStartDownLabClass);
                    fishMidPointUpLabEI.html(upPointText);
                    fishMidPointDownLabEI.html(downPointText);

                    if ($.isArray(tempData.data) && tempData.data.length > 0) {
                        var tdlen = tempData.data.length;
                        tempWid += (tdlen + 1) * 100;
                        var preid = options.id + "-chart";
                        for (var k = 0; k < tdlen; k++) {
                            var griddata = tempData.data[k].options.data;
                            var h = 30;
                            if ($.isFunction(tempData.data[k].options.contentDescriptionFunc)) {
                                h += 27;
                            }
                            if (griddata.data && griddata.data.length > 0) {
                                h += griddata.data.length * 28;
                            } else {
                                h += 30;
                            }

                            if (k % 2 === 0 && i % 2 === 0) {
                                var upArrowEl = $("<div>").appendTo(fishMiddleEI).addClass(fboneMidUpArrowClass);
                                var upChartEl = $("<div>").appendTo(upArrowEl);
                                upChartEl.realh = h;
                                me.upTables.push(upChartEl);
                                var id = preid + "-up-" + i + k;
                                tempData.data[k].fishRenderId = id;
                                upChartEl.addClass(upTabelEIClass).attr("id", id);
                            } else {
                                var downArrowEl = $("<div>").appendTo(fishMiddleEI).addClass(fboneMidDownArrowClass);
                                var downChartEl = $("<div>").appendTo(downArrowEl);
                                downChartEl.realh = h;
                                me.downTables.push(downChartEl);
                                var id = preid + "-down-" + i + k;
                                tempData.data[k].fishRenderId = id;
                                downChartEl.addClass(downTabelEIClass).attr("id", id);
                            }
                        }
                    } else {
                        if (i === len - 1) {
                            tempWid += 100;
                        } else {
                            tempWid += 200;
                            $("<div>").appendTo(fishMiddleEI).addClass("sweet-chart-fishbone-blank");
                        }
                    }
                }
            }
            fishMiddleEI.css("width", tempWid + 20);
        },

        /**
         * @private
         * @description 创建箭头布局
         */
        _creatFishArrowTable: function() {
            var me = this,
                options = me.options,
                data = options.data,
                len = data.length,
                temp;

            for (var i = 0; i < len; i++) {
                var temp = data[i].data;
                if (!temp) {
                    continue;
                }
                for (var j = 0; j < temp.length; j++) {
                    temp[j].render(temp[j].fishRenderId);
                }
            }
        },

        /**
         * @private
         * @description 创建鱼尾
         */
        _createFishEnd: function() {
            var me = this,
                fishEndEI = me.fishEndEI = $("<div>").addClass(fboneEndClass);

            fishEndEI.appendTo(me.fboneMajor);
        },

        /**
         * @private
         * @description 刷新布局
         */
        _doLayout: function() {
            var me = this,
                width = me.fishBoneEI.width(),
                height = me.fishBoneEI.height(),
                top = Math.floor((height - 100) / 2);

            //set the fish bone position
            me.fboneMajor.css({
                top: top
            });
            var padding = (width - me.fboneMajor.width()) / 2;
            if (padding < 0) {
                padding = 0;
            }
            me.fishBoneEI.css({
                "padding-left": padding
            });

            //代码中所有使用100的地方，100代表每一个图片的宽度，除了鱼头的图片宽度是50px
            //下面的10代表的是间隔，让图看起来不拥挤
            var padding = 10;
            var h = top - padding;
            for (var i = 0; i < me.upTables.length; i++) {
                var realh = me.upTables[i].realh;
                var tabh = h > realh ? realh : h;
                me.upTables[i].css("top", -tabh).css("height", tabh);
            }
            for (var i = 0; i < me.downTables.length; i++) {
                var realh = me.downTables[i].realh;
                var tabh = h > realh ? realh : h - 10;
                me.downTables[i].css("top", 100 + 10).css("height", tabh);
            }
        },
        _setHeight: function(h) {
            this.fishBoneEI.externalHeight(h);
        },
        _setWidth: function(w) {
            this.fishBoneEI.externalWidth(w);
        },
        _setWH: function(w, h) {
            this.fishBoneEI.externalWidth(w);
            this.fishBoneEI.externalHeight(h);
        },
        _getHeight: function() {
            return this.fishBoneEI.externalHeight();
        },
        _getWidth: function() {
            return this.fishBoneEI.externalWidth();
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this,
                options = me.options,
                data = options.data,
                len = data.length,
                temp;

            for (var i = 0; i < len; i++) {
                var temp = data[i].data;
                if (!temp) {
                    continue;
                }
                for (var j = 0; j < temp.length; j++) {
                    $.isFunction(temp[j].destroy) ? temp[j].destroy() : "";
                }
            }
        }
    });

    /**
     * @description 鱼骨对象
     * @name Sweet.chart.Fishbone
     * @class
     * @extends Sweet.chart
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建鱼骨：
     * var sweetFishbone= Sweet.chart.Fishbone({
     *     width: 350,
     *     height: 150
     * });
     */

    Sweet.chart.Fishbone = $.sweet.widgetFishbone;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 容器组件
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultContainerClass = "sweet-container";

    $.widget("sweet.widgetContainer", $.sweet.widget, /** @lends Sweet.container.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container]:",
        widgetClass: "sweet.widgetContainer", // 表明是布局类组件
        options: /** @lends Sweet.container.prototype*/
        {
            width: "auto",
            /**
             * 是否有fieldset
             * @type {Boolean} 是否有fieldset
             * @default false
             */
            fieldset: false,
            /**
             * fieldset标题
             * @type {String} fieldset标题
             * @default ""
             */
            fieldsetTitle: "",
            /**
             * fieldset右侧增加html内容
             * @type {String}
             * @default ""
             */
            fieldsetHTML: "",
            /**
             * 是否可折叠
             * @type {Boolean} 是否可折叠
             * @default true
             */
            collapsible: true,
            /**
             * 主体内容是否收起, 默认展开
             * @type {Boolean} 主体内容是否收起
             * @default false
             */
            collapse: false,
            /**
             * 点击fieldset标题时折叠、展开面板时的回调函数，参数flag表示是否展开
             * @type Function
             * @default null
             */
            toggle: null,
            /**
             * 容器外边距,其值为如100， 也可以是数组，如[200, 10, 100, 20],  分别对应：[top, right, bottom,left]
             * @type Number/Array
             * @default 0
             */
            margin: 0
        },
        /**
         * @description 组件隐藏
         */
        hide: function() {
            this.renderEl.hide();
            this.visible = false;
        },
        /**
         * @description 组件显示
         */
        show: function() {
            this.renderEl.show();
            this.visible = true;
            this.doLayout(true);
            this._layoutChildren(true);
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            if (this.fieldsetEl) {
                this.fieldsetEl.externalWidth(width);
            } else {
                this.containerEl.externalWidth(width);
            }
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            if (this.fieldsetEl) {
                this.fieldsetEl.externalHeight(height);
            } else {
                this.containerEl.externalHeight(height);
            }
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        _getWidth: function() {
            if (this.fieldsetEl) {
                return this.fieldsetEl.externalWidth();
            } else {
                return this.containerEl.externalWidth();
            }
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        _getHeight: function() {
            if (this.fieldsetEl) {
                return this.fieldsetEl.externalHeight();
            } else {
                return this.containerEl.externalHeight();
            }
        },
        /**
         * @description 渲染组件
         * @param {String} id 组件ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            if (me.fieldsetEl) {
                me.fieldsetEl.appendTo(me.renderEl);
            } else {
                me.containerEl.appendTo(me.renderEl);
            }
            me._widgetRender();
            me.rendered = true;
            return true;
        },
        /**
         * @description 子类渲染
         */
        _widgetRender: $.noop,
        /**
         * @description 点击fieldset标题，折叠或展开container区域
         * @param {Boolean} flag 展开(true)，或关闭(false)
         * @private
         */
        _toggleFieldSet: function(flag) {
            var me = this;

            var container = me.containerEl;
            var fieldset = me.fieldsetEl;
            var content = fieldset.children().first();
            var title = content.children().first();

            if (flag) {
                container.show();
                content.height(title.externalHeight() + me.containerHeight);
                fieldset.height(content.externalHeight());
                me.doLayout(true);
                me._layoutChildren(true);
            } else {
                container.hide();
                // 记录container高度
                me.containerHeight = container.externalHeight();
                content.height(title.outerHeight());
                fieldset.height(content.externalHeight());
            }

            // 回调
            if ($.isFunction(me.options.toggle)) {
                me.options.toggle(flag);
            }
        },
        /**
         * @private
         * @description 创建组件
         */
        _createSweetWidget: function() {
            var me = this;
            var options = this.options;
            var containerEl = this.containerEl = $("<div>");

            containerEl.addClass(defaultContainerClass);
            if ($.isNull(containerEl.attr("id"))) {
                containerEl.attr("id", options.id);
            }

            if (options.fieldset) {
                this._error("#" + this.options.id + " fileset option is deprecated!");

                var fieldsetElClass = "sweet-container-fieldset";
                var fieldsetContentElClass = "sweet-container-fieldset-content";
                var fieldsetTitleElClass = "sweet-container-fieldset-title";
                var fieldsetTitleCollapsibleClass = "sweet-container-fieldset-title-collapsible";
                var fieldsetTextElClass = "sweet-container-fieldset-text";
                var fieldsetPicElClass = "sweet-container-fieldset-pic";
                var fieldSetPicFoldClass = "sweet-container-fieldset-pic-fold";
                var fieldSetPicUnfoldClass = "sweet-container-fieldset-pic-unfold";
                var fieldSetHTMLClass = "sweet-container-fieldset-html";
                var fieldsetEl = me.fieldsetEl = $("<div>")
                    .addClass(fieldsetElClass + " " + options.widgetClass);
                var fieldsetContentEl = $("<div>").addClass(fieldsetContentElClass);
                var fieldsetTitleEl = $("<div>").addClass(fieldsetTitleElClass);
                var fieldsetTitleContentEl = $("<div>");
                var fieldsetTextEl = $("<em>").addClass(fieldsetTextElClass);
                var fieldsetPicEl = $("<a>").addClass(fieldsetPicElClass);
                var fieldsetHTMLEl = $("<div>").addClass(fieldSetHTMLClass);

                fieldsetTextEl.html(options.fieldsetTitle).appendTo(fieldsetTitleContentEl);
                // 是否可折叠
                if (options.collapsible) {
                    fieldsetTitleEl.addClass(fieldsetTitleCollapsibleClass);
                    fieldsetTitleContentEl.bind("click", function() {
                        if (fieldsetPicEl.hasClass(fieldSetPicFoldClass)) {
                            fieldsetPicEl.removeClass(fieldSetPicFoldClass).addClass(fieldSetPicUnfoldClass);
                            me._toggleFieldSet(true);
                        } else if (fieldsetPicEl.hasClass(fieldSetPicUnfoldClass)) {
                            fieldsetPicEl.removeClass(fieldSetPicUnfoldClass).addClass(fieldSetPicFoldClass);
                            me._toggleFieldSet(false);
                        }
                    });
                    fieldsetPicEl.appendTo(fieldsetTitleContentEl);
                    // 是否展开
                    if (options.collapse) {
                        fieldsetPicEl.addClass(fieldSetPicFoldClass);
                        containerEl.hide();
                    } else {
                        fieldsetPicEl.addClass(fieldSetPicUnfoldClass);
                    }
                }
                fieldsetHTMLEl.html(options.fieldsetHTML).appendTo(fieldsetTitleEl);
                fieldsetTitleContentEl.appendTo(fieldsetTitleEl);
                fieldsetTitleEl.appendTo(fieldsetContentEl);
                fieldsetContentEl.appendTo(fieldsetEl);
                containerEl.appendTo(fieldsetContentEl);

                me._setMargin(fieldsetEl);
                fieldsetEl.externalHeight(options.height).externalWidth(options.width);
            } else {
                me._setMargin(containerEl);
                containerEl.addClass(options.widgetClass)
                    .externalHeight(options.height)
                    .externalWidth(options.width);
            }
            // 创建容器
            me._createContainer();
        },
        /**
         * @private
         * @description 创建容器, 子类继承实现
         */
        _createContainer: $.noop,
        /**
         * @private
         * @description 设置元素margin
         * @param {Object} obj 将设置的目标元素
         */
        _setMargin: function(obj) {
            var options = this.options,
                margin = options.margin;
            var marginAttrs = ['padding-top', 'padding-right', 'padding-bottom', 'padding-left'];

            // 以padding实现
            if ($.isNumeric(margin) && 0 !== margin) {
                obj.css('padding', margin);
            } else if ($.isArray(margin)) {
                for (var i = 0; i < margin.length && i < marginAttrs.length; i++) {
                    if (0 !== margin[i]) {
                        obj.css(marginAttrs[i], margin[i]);
                    }
                }
            }
        },
        /**
         * @private
         * @description 子类继承实现。缺省的处理：销毁子组件、解除事件绑定、删除dom元素
         */
        _destroyWidget: function() {
            // 解除事件绑定，并删除Dom元素
            if (this.fieldsetEl) {
                this.fieldsetEl.find("*").unbind();
                this.fieldsetEl.remove();
            } else if (this.containerEl) {
                this.containerEl.find("*").unbind();
                this.containerEl.remove();
            }
        },
        /**
         * 递归刷新所有子组件布局
         * @param {Boolean} flag 强制刷新标志
         * @private
         */
        _layoutChildren: function(flag) {
            "use strict";
            var item;

            if ($.isArray(this.options.items)) {
                for (var i = 0; i < this.options.items.length; i++) {
                    item = this.options.items[i];

                    // 子组件
                    if ($.isFunction(item.doLayout)) {
                        item.doLayout(flag);
                    }

                    // 孙子组件
                    if ($.isFunction(item._layoutChildren)) {
                        item._layoutChildren(flag);
                    }
                }
            }
        }
    });
    /**
     * @description 容器布局类的基类，不能直接使用
     * @class
     * @extends Sweet.widget
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     */
    Sweet.container = $.sweet.widgetContainer;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 容器组件-面板
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultPanelTitleClass = "sweet-panel-title";
    var toolsContainerClass = "sweet-panel-tools";
    var panelTitleInfoClass = "sweet-panel-info";
    var toggleIconClass = "sweet-panel-toggle-icon";
    var titleLabelClass = "sweet-panel-title-label";
    var expandedClass = "expanded";
    var collapsedClass = "collapsed";

    $.widget("sweet.widgetContainerPanel", $.sweet.widgetContainer, /** @lends Sweet.container.Panel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-panel]:",
        type: "gridPanel",
        options: /** @lends Sweet.container.Panel.prototype*/
        {
            /**
             * 是否创建标题
             * @type Boolean
             * @default false
             */
            header: false,
            /**
             * panel标题文本
             * @type String
             * @default ""
             */
            title: "",
            /**
             * panel标题tip文本
             * @type String
             * @default null
             */
            titleTips: null,
            /**
             * 在标题栏右侧显示的组件列表
             * @type Array
             * @default []
             */
            tools: [],
            /**
             * 标题栏样式, 从1开始，奇数有背景，下一个偶数背景透明
             * @type Number
             * @default 1
             */
            headerStyle: 1,
            /**
             * 直接显示的HTML内容，不能与item同时配置
             * @type String
             * @default ""
             */
            html: "",
            /**
             * 子组件数组
             * @type Array
             * @default []
             */
            items: []
        },
        /**
         * 动态设置标题栏标题
         * @param {String} title 标题文本
         * @param {String} titleTips 标题提示文本,如果不设置则用历史TIP,如果设置为false则不提示
         */
        setTitle: function(title, titleTips) {
            // 在没有标题栏的情况下，设置标题无效
            if (!this.options.header) {
                return;
            }
            var titleEl = this.panelTitleEl.find("." + titleLabelClass);
            // 记录标题
            if ($.isNull(title)) {
                title = "";
            }
            titleEl.removeAttr("title");
            this.options.title = title;
            if (titleTips) {
                this.options.titleTips = titleTips;
            } else {
                if (false === titleTips) {
                    this.options.titleTips = null;
                }
            }
            if (this.options.titleTips) {
                if (true === this.options.titleTips || "true" === this.options.titleTips) {
                    // 更新文本
                    titleEl.text(title).attr("title", title);
                } else {
                    titleEl.text(title).attr("title", this.options.titleTips);
                }
            }
            // 更新文本
            titleEl.text(title);
        },
        /**
         * 获取内部所有Form类组件的值
         * @return {Object}
         */
        getFormData: function() {
            var me = this;
            var data = {};
            var name;
            var value;

            // 组件列表
            var widgets = me._getFormWidgets();
            $.each(widgets, function(i, widget) {
                if ($.isNull(widget.options.name)) {
                    me._info("Form widget " + widget.options.id + " has no 'name' attribute");
                    return;
                }

                name = widget.options.name;
                value = widget.getValue();

                data[name] = value;
            });

            return data;
        },
        /**
         * 设置内部Form组件的值
         * @param {Object} data 组件的值
         */
        setFormData: function(data) {
            var me = this;
            var name;
            var value;
            var widgets;

            // 组件列表
            widgets = me._getFormWidgets();
            $.each(widgets, function(i, widget) {
                name = widget.options.name;
                value = data[name];

                if (typeof value === "undefined") {
                    return;
                } else if ($.isFunction(widget.setValue)) {
                    try {
                        widget.setValue(value);
                    } catch (e) {
                        me._info("Widget " + widget.options.id + " setValue failed");
                    }
                }
            });

            return;
        },
        /**
         * @description 校验内部所有Form组件
         * @return {Boolean}
         */
        validateForm: function() {
            var me = this;
            var flag = true;
            var ret;

            var widgets = me._getFormWidgets();
            for (var i = 0; i < widgets.length; i++) {
                if ($.isFunction(widgets[i].check)) {
                    //disabled状态的组件不进行校验
                    if ($.isFunction(widgets[i].getDisabled) && widgets[i].getDisabled()) {
                        continue;
                    }
                    try {
                        ret = widgets[i].check();
                        if (ret === false) {
                            flag = false;
                        }
                    } catch (e) {
                        me._info("widget " + widgets[i].sweetWidgetName + " check throw exception.");
                    }
                }
            }

            return flag;
        },
        /**
         * @description 动态添加组件
         * @param {Object/Array} items 组件对象或组件对象数组
         */
        addItems: function(items) {
            var me = this;
            var tempItems;

            // 如果之前是渲染的HTML，则不允许动态增加Items
            if (me.options.html !== "" && me.options.items.length === 0) {
                me._error("Cannot add items while initialized by HTML");
                return;
            }

            // 检查输入参数
            if ($.isArray(items)) {
                tempItems = items;
            } else if ("object" === typeof items) {
                tempItems = [];
                tempItems.push(items);
            } else {
                me._error("Unsupport data type: " + typeof items);
                return;
            }

            // 如果还没有渲染，缓存item，待渲染后再添加
            if (!me.rendered) {
                if ($.isNull(me._itemBufferBeforeRender)) {
                    me._itemBufferBeforeRender = [];
                }
                me._itemBufferBeforeRender = me._itemBufferBeforeRender.concat(items);
                return;
            }

            // 调用子类实现
            me._addItems(tempItems);
            me._doLayout();
        },
        /**
         * @description 动态添加组件，子类继承实现
         * @private
         */
        _addItems: $.noop,
        /**
         * @description 动态删除组件
         * @param items
         */
        removeItems: function(items) {
            var me = this;
            var tempItems;

            // 检查输入参数
            if (typeof items === "undefined") {
                tempItems = null;
            } else if ($.isArray(items)) {
                tempItems = items;
            } else {
                tempItems = [];
                tempItems.push(items);
            }
            //清空缓存
            if (tempItems === null && me._itemBufferBeforeRender) {
                me._itemBufferBeforeRender = null;
            }
            // 调用子类实现
            if (tempItems === null) {
                me._removeItems();
            } else {
                me._removeItems(tempItems);
            }

            me._doLayout();
        },
        /**
         * @description 动态删除组件，子类继承实现
         * @private
         */
        _removeItems: $.noop,
        /**
         * 显示Item
         * @param {String} item 子组件id
         */
        showItem: function(item) {
            "use strict";
            this._showItem(item);
        },
        /**
         * @description 显示子组件，子类继承实现
         * @private
         */
        _showItem: $.noop,
        /**
         * 隐藏Item
         * @param {String} item 子组件id
         */
        hideItem: function(item) {
            "use strict";
            this._hideItem(item);
        },
        /**
         * @description 隐藏子组件，子类继承实现
         * @private
         */
        _hideItem: $.noop,
        /**
         * @description 设置content的HTML内容
         * @param {String} html HTML内容
         */
        setHTML: function(html) {
            // 仅在当前Items不为空时，才允许设置HTML
            if (this.options.items.length === 0) {
                this.panelContentEl.html(html);
            }
        },
        /**
         * 折叠面板，只显示标题栏
         */
        collapse: function() {
            // 隐藏content
            this.containerHeight = this.containerEl.externalHeight();
            this.panelContentEl.hide();
            this.containerEl.externalHeight(this.panelTitleEl.externalHeight());

            // 调整标题栏样式
            var spanEl = this.panelTitleEl.find("span." + toggleIconClass);
            spanEl.removeClass(expandedClass).addClass(collapsedClass);

            this._expanded = false;

            // 回调
            if ($.isFunction(this.options.toggle)) {
                this.options.toggle(false);
            }
        },
        /**
         * 展开面板
         */
        expand: function() {
            // 展开content
            this.panelContentEl.show();
            this.containerEl.externalHeight(this.containerHeight);

            // 调整标题栏样式
            var spanEl = this.panelTitleEl.find("span." + toggleIconClass);
            spanEl.removeClass(collapsedClass).addClass(expandedClass);

            this._expanded = true;

            // 刷新布局
            this.doLayout(true);
            this._layoutChildren(true);

            // 回调
            if ($.isFunction(this.options.toggle)) {
                this.options.toggle(true);
            }
        },
        /**
         * @private
         * @description 创建容器
         */
        _createContainer: function() {
            var me = this,
                options = this.options;
            // 创建面板标题
            if (options.header) {
                me._createPanelTitle();
            }
            // 创建面板内容
            me._createPanelContent();

            // 有Items配置时，不处理HTML配置
            if (options.items.length === 0 && options.html !== "") {
                me.panelContentEl.html(options.html);
            }

            // 冻结子组件，避免在创建时自动调用doLayout
            this._freezeChildren(true);
        },
        /**
         * @description 创建标题栏自定义工具
         * @private
         */
        _createPanelTools: function() {
            var tools = this.options.tools;

            if ($.isNull(tools) || tools.length === 0) {
                return;
            }

            // 创建水平容器
            this.panelToolsEl = $("<div>");
            this.panelToolsEl.attr("id", this.options.id + "-tools")
                .addClass(toolsContainerClass)
                .appendTo(this.panelTitleEl);
        },
        /**
         * @description 渲染标题栏工具
         * @private
         */
        _renderPanelTools: function() {
            if (this.panelToolsContainer || $.isNull(this.panelToolsEl)) {
                return;
            }

            // 创建容器
            this.panelToolsContainer = new Sweet.panel.HPanel({
                itemExtend: false,
                align: "right",
                verticalAlign: "bottom",
                items: this.options.tools,
                renderTo: this.panelToolsEl.attr("id"),
                width: "auto",
                height: "100%",
                margin: [0, 5, 0, 0]
            });
        },
        /**
         * @description 刷新工具布局
         * @private
         */
        _layoutPanelTools: function() {
            if ($.isNull(this.panelToolsContainer) || $.isNull(this.panelToolsEl)) {
                return;
            }

            // 刷新布局
            this.panelToolsContainer.doLayout();
        },
        /**
         * @private
         * @description 创建面板标题
         */
        _createPanelTitle: function() {
            var me = this;

            // 不允许同时配置Fieldset和Panel的Label，前者优先级更高
            if (me.options.fieldset) {
                return;
            }

            var options = me.options;
            var titleClass = defaultPanelTitleClass + " title-style-" + this.options.headerStyle;
            var panelTitleEl = me.panelTitleEl = $("<div>").addClass(titleClass);

            // 创建工具栏（先创建工具栏，使其z-index小于标题文本）
            this._createPanelTools();

            // 创建标题
            var infoEl = $("<div>").addClass(panelTitleInfoClass).appendTo(panelTitleEl);

            // 展开折叠按钮
            if (options.collapsible) {
                var spanEl = $("<span>").addClass(toggleIconClass).appendTo(infoEl).append($("<i>"));
                spanEl.addClass(expandedClass);

                // 绑定事件
                spanEl.bind("click", {
                    self: me
                }, function() {
                    var span = $(this);

                    if (span.hasClass(expandedClass)) {
                        me.collapse();
                    } else {
                        me.expand();
                    }
                });
            }
            if (this.options.titleTips) {
                if (true === this.options.titleTips || "true" === this.options.titleTips) {
                    // 更新文本
                    $("<label>").html(this.options.title).attr("title", this.options.title).addClass(titleLabelClass).appendTo(infoEl);
                } else {
                    $("<label>").html(this.options.title).attr("title", this.options.titleTips).addClass(titleLabelClass).appendTo(infoEl);
                }
            } else {
                // 标题文本
                $("<label>").html(this.options.title).addClass(titleLabelClass).appendTo(infoEl);
            }
        },
        /**
         * @private
         * @description 创建布局，子类继承实现
         */
        _createPanelContent: $.noop,
        /**
         * @description 渲染组件，只处理panel公共内容
         * @private
         */
        _widgetRender: function() {
            if (this.panelTitleEl) {
                this.panelTitleEl.appendTo(this.containerEl);
            }
            this.panelContentEl.appendTo(this.containerEl);

            // 渲染tools
            this._renderPanelTools();

            // 折叠面板
            if (this.options.collapse) {
                this.collapse();
            }
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            if (this.panelToolsContainer) {
                this.panelToolsContainer.destroy();
            }

            this._super();
        },
        /**
         * @description 刷新布局，子类继承实现，并调用super
         * @private
         */
        _doLayout: function() {
            var me = this;
            var contentWidth;
            var contentHeight;
            var items;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 渲染缓存的子组件
            if ($.isArray(me._itemBufferBeforeRender)) {
                items = me._itemBufferBeforeRender;
                me._itemBufferBeforeRender = null;
                me.addItems(items);
            }

            // 刷新工具栏布局
            this._layoutPanelTools();

            // 修正Content区域高度
            if (!$.isNull(me.panelTitleEl)) {
                contentWidth = me.containerEl.width();
                contentHeight = me.containerEl.height() - me.panelTitleEl.externalHeight();
            } else if (!$.isNull(me.fieldsetEl)) {
                var fsContentEl = me.fieldsetEl.children("div").first();
                var fsTitleEl = fsContentEl.children("div").first();

                fsContentEl.externalHeight(me.fieldsetEl.height());
                me.containerEl.externalWidth(fsContentEl.width());
                me.containerEl.externalHeight(fsContentEl.height() - fsTitleEl.externalHeight());

                contentWidth = me.containerEl.width();
                contentHeight = me.containerEl.height();
            } else {
                contentWidth = me.containerEl.width();
                contentHeight = me.containerEl.height();
            }

            // 修正折叠高度
            if (this._expanded === false) {
                this.containerEl.externalHeight(this.panelTitleEl.externalHeight());
            }

            // 设置Content区域大小
            if (me.panelContentEl && !me.panelContentEl.is(":hidden")) {
                me.panelContentEl.externalWidth(contentWidth);
                me.panelContentEl.externalHeight(contentHeight);
            }

            // 解除对子组件的冻结
            this._freezeChildren(false);
        },
        /**
         * @description 递归获取内部所有Form类的Widgets对象
         * @return {Array} 对象数组
         * @private
         */
        _getFormWidgets: function() {
            var me = this;
            var widgets = [];
            var item;

            // 获取所有子组件
            me.panelContentEl.find("*").each(function(i, dom) {
                if ($.isNull(dom.id)) {
                    return;
                }

                // 确保是Sweet组件
                item = Sweet._widgets[dom.id];
                if ($.isNull(item)) {
                    return;
                }

                // 确保是Form组件
                if (item.widgetClass !== "sweet.widgetForm") {
                    return;
                }

                widgets.push(item);
            });

            return widgets;
        },
        /**
         * 冻结子组件，不允许执行doLayout
         * @param {Boolean} flag 标志
         * @private
         */
        _freezeChildren: function(flag) {
            "use strict";

            if (flag && this.__childrenIsFrozen) {
                return;
            } else if (!flag && !this.__childrenIsFrozen) {
                return;
            } else {
                this.__childrenIsFrozen = flag;
            }

            if (!$.isArray(this.options.items)) {
                return;
            }

            var item;
            for (var i = 0; i < this.options.items.length; i++) {
                item = this.options.items[i];
                if (item && $.isFunction(item._freeze)) {
                    item._freeze(flag);
                }
            }
        }
    });
    /**
     * @description 所有Panel的基类，不能直接使用
     * @class
     * @extends Sweet.container
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * </pre>
     */
    Sweet.container.Panel = $.sweet.widgetContainerPanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-表格布局容器
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultPanelContentClass = "sweet-panel-content",
        defaultGridPanelClass = "sweet-panel-grid",
        defaultGridTableClass = "sweet-panel-grid-table",
        gridIdPrefix = "sweet-grid-panel-",
        uuid = 1000;

    $.widget("sweet.widgetContainerGridpanel", $.sweet.widgetContainerPanel,
    /** @lends Sweet.panel.GridPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-gridpanel]:",
        type: "gridPanel",
        options: /** @lends Sweet.panel.GridPanel.prototype*/
        {
            /**
             * 表格行、列数配置
             * @type Object
             * @default {rows: 1, columns: 1}
             */
            layoutOptions: {
                rows: 1,
                columns: 1
            },
            /**
             * 子组件间距
             * @type Number
             * @default 5
             */
            padding: 5,
            /**
             * 扩展子组件，适应布局的宽、高
             * @type Boolean
             * @default true
             */
            itemExtend: true
        },
        /**
         * @description 查询当前布局中的行数
         * @returns {Number} 行数
         */
        getRowCount: function() {
            return this.options.layoutOptions.rows;
        },
        /**
         * @description 查询当前布局中的列数
         * @returns {Number} 列数
         */
        getColumnCount: function() {
            return this.options.layoutOptions.columns;
        },
        /**
         * @description 添加一行
         * @param {Array} items 一组子组件
         * @param {Function} callback 参数为回调函数，有效时为异步处理
         */
        addRow: function(items, callback) {
            var me = this;
            var count = 0;
            var i, item;
            var async = $.isFunction(callback);

            if (!$.isArray(items) || items.length === 0) {
                return;
            }

            function __add() {
                if ($.isArray(items[0])) {
                    if (!async) {
                        for (i = 0; i < items.length; i++) {
                            me._addRow(items[i]);
                            me._doLayout(false, items[i].length);
                        }
                    } else {
                        item = items[count++];
                        me._addRow(item);
                        me._doLayout(false, item.length);

                        if (count < items.length) {
                            window.setTimeout(__add, 5);
                            return;
                        }
                    }
                } else {
                    me._addRow(items);
                    me._doLayout();
                }

                // 异步处理的回调处理
                if (async) {
                    callback();
                }
            }

            if (async) {
                window.setTimeout(__add, 5);
            } else {
                __add();
            }
        },
        /**
         * @description 添加一行
         * @param {Array} items 一组子组件
         */
        _addRow: function(items) {
            var me = this;
            var count;
            var i;
            var colCount = me.getColumnCount();
            var item;

            if (!$.isArray(items)) {
                return;
            }

            // 检查个数是否OK
            count = 0;
            for (i = 0; i < items.length; i++) {
                item = items[i];

                // 检查item类型
                if ($.isPlainObject(item) && $.isNull(item.options)) {
                    item.options = $.objCopy(item);
                }

                // 如果指定了colspan属性，按colspan属性计算列数
                if ($.isNull(item.options.colSpan)) {
                    item.options.colSpan = 1;
                }
                count += item.options.colSpan;
            }

            if (count !== colCount) {
                me._error("Items count is incorrect!");
                return;
            }

            // 按行添加
            var trEl = $("<tr>").appendTo(me.tableEl.children().first());
            var tdEl;
            var tdId;

            for (i = 0; i < items.length; i++) {
                item = items[i];

                // 添加TD
                tdEl = me._addTd(item.options.colSpan, null);
                tdEl.appendTo(trEl);
                tdId = tdEl.attr("id");

                // 渲染
                if (me.rendered) {
                    me._renderItem(item, tdId);
                }

                // 记录映射关系
                item.__gridContainerId = tdId;

                // 保存items
                me.options.items.push(item);
            }

            // 修正行数
            me.options.layoutOptions.rows++;
        },
        /**
         * @description 删除指定的行
         * @param {Number/Array} items 一个或一组行号（从0开始的索引），为空或null时，表示删除所有行
         * @param {Function} callback 参数为回调函数，有效时为异步处理
         */
        removeRow: function(items, callback) {
            var me = this;
            var i, j;
            var index;
            var item;
            var trEl, trElList;
            var async = $.isFunction(callback);

            // 如果输入参数为空，表示删除所有内容
            if (typeof items === 'undefined' || items === null) {
                items = [];

                for (i = 0; i < me.options.layoutOptions.rows; i++) {
                    items.push(i);
                }
            }

            if ($.isNumeric(items)) {
                items = [items];
            }

            if (!$.isArray(items)) {
                return;
            }

            // 删除item
            function __removeItem(col, td) {
                // 查找item
                for (j = 0; j < me.options.items.length; j++) {
                    item = me.options.items[j];

                    if (item.__gridContainerId === td.id) {
                        break;
                    }
                }

                if (j >= me.options.items.length) {
                    me._error("TD#" + td.id + " contains none item!");
                    return;
                }

                // 销毁item
                if ($.isFunction(item.destroy)) {
                    item.destroy();
                }

                // 从items中删除
                me.options.items.splice(j, 1);
            }

            trElList = me.tableEl.find(">tbody>tr");

            function __remove(index) {
                // 找到行
                trEl = trElList.eq(index);

                // 找到并删除对应的item
                trEl.children().each(__removeItem);

                // 删除行元素
                trEl.remove();

                // 修正行数
                me.options.layoutOptions.rows--;
            }

            // 找到指定的行并删除
            items.sort(function(a, b) {
                return b - a;
            });

            if (!async) {
                for (i = 0; i < items.length; i++) {
                    index = items[i];
                    __remove(index);
                }

                // 重新布局
                me._doLayout();
            } else {
                i = 0;

                function __removeAsync() {
                    index = items[i++];
                    __remove(index);

                    if (i >= items.length) {
                        me._doLayout();
                        callback();
                    } else {
                        window.setTimeout(__removeAsync, 5);
                    }
                }
                window.setTimeout(__removeAsync, 5);
            }
        },
        /**
         * @private
         * @descripition 重新计算绘制表格布局
         * @param {Boolean} force 是否强制刷新 
         * @param {Number} count 想要刷新的新增的item个数
         */
        _doLayout: function(force, count) {
            var me = this;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            var options = me.options;
            var rows = options.layoutOptions.rows;
            var columns = options.layoutOptions.columns;
            me.containerWidth = me.containerEl.width();
            me.containerHeight = me.containerEl.height();
            count = $.type(count) === "number" ? count : 0;

            // 修正内层容器大小
            me.gridPanel.externalWidth("100%").externalHeight("100%");
            var gridWidth = me.gridPanel.width();
            var gridHeight = me.gridPanel.height();

            // 表格的大小
            me.tableEl.width("auto").height("auto");

            // 修正子组件大小
            var paddingWidth = options.padding * (columns - 1);
            var paddingHeight = options.padding * (rows - 1);
            var width = me.averageWidth = Math.floor((gridWidth - paddingWidth) / columns);
            var height = me.averageHeight = Math.floor((gridHeight - paddingHeight) / rows);
            var w;
            var h;
            var tdId;

            $.each(options.items, function(index, obj) {
                // 扩展子组件。注：itemExtend为true时，不支持colSpan/rowSpan
                if (me.options.itemExtend === true) {
                    obj.setWH(width, height);
                    return;
                }

                // 如果指定了刷新的item个数，只刷新最后count个item
                if (count > 0 && index + count < options.items.length) {
                    return;
                }

                // 由于可能存在colSpan/rowSpan，需要重新计算间隔
                // 约束：每行、每列，只支持一个item携带colSpan/rowSpan属性大于1
                tdId = obj.__gridContainerId;
                columns = $("#" + tdId).parent().children().length;
                rows = me.tableEl.find(">tbody>tr").length - obj.options.rowSpan;

                paddingWidth = options.padding * (columns - 1);
                paddingHeight = options.padding * (rows - 1);

                // 如果指定大小为百分比，需要重新计算
                w = obj._initConfig.width;
                if ($.type(w) === "string" && /\d+%/.test(w)) {
                    w = parseInt(w, 10);
                    w = Math.floor((gridWidth - paddingWidth) * w / 100);
                }

                h = obj._initConfig.height;
                if ($.type(h) === "string" && /\d+%/.test(h)) {
                    h = parseInt(h, 10);
                    h = Math.floor(gridHeight * h / 100);
                }
                obj.setWH(w, h);
            });

            // 设置子组件间隔
            var paddingTop, paddingLeft;
            me.tableEl.find(">tbody>tr").each(function(row, tr) {
                $(tr).children().each(function(col, td) {
                    // 行间距
                    if (row > 0) {
                        paddingTop = me.options.padding;
                    } else {
                        paddingTop = 0;
                    }

                    // 列间距
                    if (col > 0) {
                        paddingLeft = me.options.padding;
                    } else {
                        paddingLeft = 0;
                    }

                    // 应用到TD
                    $(td).css({
                        "padding-top": paddingTop,
                        "padding-left": paddingLeft
                    });
                });
            });

            // table大小超出gridPanel的处理
            var tableWidth = me.tableEl.externalWidth();
            var tableHeight = me.tableEl.externalHeight();

            if (tableWidth > gridWidth) {
                if (me.panelContentEl.css('overflow-x') !== "auto") {
                    me.panelContentEl.css('overflow-x', "auto");
                    me._doLayout();
                }
            } else {
                me.panelContentEl.css('overflow-x', "hidden");
            }

            if (tableHeight > gridHeight) {
                if (me.panelContentEl.css('overflow-y') !== "auto") {
                    me.panelContentEl.css('overflow-y', "auto");
                    me._doLayout();
                }
            } else {
                me.panelContentEl.css('overflow-y', "hidden");
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                this._super();
                var options = me.options;

                // 将组件渲染到表格中
                $.each(options.items, function(index, item) {
                    me._renderItem(item, item.__gridContainerId);
                });
            }
        },
        /**
         * @private
         * @description 创建表格布局
         */
        _createPanelContent: function() {
            var me = this;
            var options = me.options;
            var rows = options.layoutOptions.rows;
            var columns = options.layoutOptions.columns;
            var gridPanel;
            var tableEl;
            var trEl;
            var tdEl;
            var index;
            var item;
            var rowSpanInfo = [];
            var rowSpan;
            var i;
            var j;

            // 一级容器
            me.panelContentEl = $("<div>").addClass(defaultPanelContentClass);

            // 二级容器，放置Table
            gridPanel = me.gridPanel = $("<div>");

            // 布局表格
            tableEl = me.tableEl = $("<table>");

            // 循环生成表格布局
            index = 0;
            for (i = 0; i < rows; i++) {
                trEl = $("<tr>");

                j = 0;
                rowSpan = rowSpanInfo.length;

                while (j < columns - rowSpan) {
                    if (index >= options.items.length) {
                        break;
                    }

                    // 取对应的item，判断其colspan
                    item = options.items[index];
                    if ($.isPlainObject(item) && $.isNull(item.options)) {
                        item.options = $.objCopy(item);
                    }

                    if ($.isNull(item.options.colSpan)) {
                        item.options.colSpan = 1;
                    }

                    if ($.isNull(item.options.rowSpan)) {
                        item.options.rowSpan = 1;
                    }

                    // 创建td
                    tdEl = me._addTd(item.options.colSpan, item.options.rowSpan);
                    tdEl.appendTo(trEl);
                    item.__gridContainerId = tdEl.attr("id");

                    // items列表索引
                    index++;

                    // 处理rowSpan
                    if (item.options.rowSpan > 1) {
                        rowSpanInfo.push(item.options.rowSpan);
                    }

                    // 下一个单元格
                    j += item.options.colSpan;
                }

                trEl.appendTo(tableEl);

                // 一行结束后，rowSpanInfo出栈
                for (var x = rowSpanInfo.length - 1; x >= 0; x--) {
                    rowSpanInfo[x] -= 1;

                    if (rowSpanInfo[x] === 0) {
                        rowSpanInfo.splice(x, 1);
                    }
                }
            }

            // 设置样式
            tableEl.addClass(defaultGridTableClass).appendTo(gridPanel);
            gridPanel.addClass(defaultGridPanelClass).appendTo(me.panelContentEl);
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this.removeRow();
            this._super();
        },

        /**
         * @description 创建TD元素，附加到TR中，做为子组件的容器
         * @param {Number} colspan 合并列数
         * @param {Number} rowspan 合并行数
         * @returns {string} TD元素的ID
         * @private
         */
        _addTd: function(colspan, rowspan) {
            var me = this;
            var tdId;
            var tdEl;

            tdId = gridIdPrefix + me.options.id + "-" + (++uuid);
            tdEl = $("<td>").attr("id", tdId);

            if (!$.isNull(colspan)) {
                tdEl.attr("colspan", colspan);
            }

            if (!$.isNull(rowspan)) {
                tdEl.attr("rowspan", rowspan);
            }

            return tdEl;
        },
        /**
         * @description 渲染item到指定id的容器中
         * @param {Object} item 子组件对象
         * @param {String} id 子组件容器id
         * @private
         */
        _renderItem: function(item, id) {
            if ($.isFunction(item.render)) {
                item.render(id);
            } else if (!$.isNull(item.html)) {
                $("#" + id).html(item.html);
            } else {
                this._error("item is invalid:" + item);
            }
        },
        /**
         * @description 动态添加组件
         * @param {Object/Array} items 组件对象或组件对象数组
         */
        _addItems: function(items) {
            if ($.isNull(items)) {
                return;
            }
            var me = this,
                options = me.options,
                columns = options.layoutOptions.columns,
                rows,
                trEl,
                tdEl,
                tdId,
                itemsParentEl = [],
                item;

            // 循环生成表格布局
            rows = Math.ceil(items.length / columns);
            for (var i = 0; i < rows; i++) {
                trEl = $("<tr>");
                for (var j = 0; j < columns; j++) {
                    tdEl = me._addTd(null, null);
                    tdEl.appendTo(trEl);
                    itemsParentEl.push({
                        "id": tdId,
                        "parentEl": tdEl
                    });
                }
                trEl.appendTo(me.tableEl);
            }

            me.options.layoutOptions.rows += rows;
            me.options.items = me.options.items.concat(items);

            // 将组件渲染到容器内
            $.each(itemsParentEl, function(index, obj) {
                if (index < items.length) {
                    item = items[index];
                    item.render(obj.id);

                    // 记录容器id
                    item.__gridContainerId = obj.id;
                }
            });
        },
        /**
         * @description 从布局动态删除子组件
         * @private
         */
        _removeItems: function() {
            this._error("GridPanel._removeItems() is not supported, please use removeRow() instead.");
        }
    });

    /**
     * @description 表格布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建表格布局容器：
     * var sweetGridPanel = Sweet.panel.GridPanel({});
     */
    Sweet.panel.GridPanel = $.sweet.widgetContainerGridpanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-手风琴布局容器
 * 2013/2/25
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    'use strict';

    var defaultContentClass = "sweet-panel-content";
    var defaultPanelClass = "sweet-panel-accordionpanel";
    var activeClass = "accordion-active";
    var expandedClass = "accordion-expanded";

    $.widget("sweet.widgetContainerAccordionpanel", $.sweet.widgetContainerPanel,
    /** @lends Sweet.panel.AccordionPanel.prototype*/
    {
        version: "1.0",
        sweetWidgetName: "[widget-container-accordionpanel]:",
        type: "accordionPanel",
        options: /** @lends Sweet.panel.AccordionPanel.prototype*/
        {},
        panelContentEl: null, // 布局容器
        maxAreaHeight: 0, // 内容区最大允许高度
        /**
         * 获取活动可用的最大高度
         * @private
         */
        _getAreaHeight: function() {
            var me = this;
            var headersHeight = 0;
            var maxAreaHeight = 0;

            // 计算所有标题栏高度和
            $.each(me.panelContentEl.children("h3"), function(index, obj) {
                headersHeight += $(obj).externalHeight();
            });

            // 区域可用最大高度
            maxAreaHeight = me.panelContentEl.height() - headersHeight;
            if (maxAreaHeight < 0) {
                maxAreaHeight = 0;
            }

            return maxAreaHeight;
        },
        /**
         * @private
         * @descripition 重新计算布局
         */
        _doLayout: function() {
            var me = this;
            var items = me.options.items;
            var maxHeight = 0;
            var maxWidth = 0;
            var i = 0;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            this._super();

            // 内容区域最大可用高度
            maxHeight = me._getAreaHeight();
            maxWidth = me.panelContentEl.width();

            // 布局
            for (i = 0; i < items.length; i++) {
                var id = me.options.id + "-content-" + i;
                var area = $("#" + id);

                // 先调整容器宽度
                area.externalWidth(maxWidth);
                area.css("overflow-x", "auto");

                // 再调整容器高度
                area.externalHeight(maxHeight);
                area.css("overflow-y", "auto");

                // 调用子组件的doLayout
                try {
                    items[i].doLayout();
                } catch (e) {}
            }
        },
        /**
         * 渲染一个内部组件
         * @param {Number} index 子组件索引
         */
        __renderItem: function(index) {
            if (index < 0 || index >= this.options.items.length) {
                return;
            }

            var id = this._contentIdPrefix + index;
            var item = this.options.items[index];

            // item is removed
            if (item === null) {
                return;
            }
            // item is html
            else if ($.isPlainObject(item) && !$.isNull(item.html)) {
                $("#" + id).html(item.html);
            }
            // item is sweet object
            else {
                item.render(id);
            }
        },
        /**
         * 创建一个子组件的容器
         * @param {Number} index 子组件索引
         */
        __createItemArea: function(index) {
            if (index < 0 || index >= this.options.items.length) {
                return;
            }

            var me = this;
            var options = me.options;
            var panel = me.panelContentEl;
            var items = options.items;
            var headerEl = null;
            var contentEl = null;
            var title = "";
            var item = items[index];

            // 取标题
            if (item === null) {
                return;
            } else if ($.isPlainObject(item)) {
                title = item.title;
            } else {
                title = item.options.title;
            }

            // 创建标题
            headerEl = $("<h3>").text(title);
            headerEl.attr("id", this._headerIdPrefix + index).prepend("<i>").appendTo(panel);

            // 创建内容容器
            contentEl = $("<div>");
            contentEl.attr("id", this._contentIdPrefix + index);
            contentEl.appendTo(panel);

            // 设置第一个内容为活动状态
            if (index === 0) {
                headerEl.addClass(activeClass);
                contentEl.addClass(expandedClass);
            } else {
                contentEl.hide();
            }

            // 设置展开、折叠功能
            headerEl.click(me._headerClicked);
        },
        /**
         * 
         */
        __removeItem: function(index) {
            if (index < 0 || index >= this.options.items.length) {
                return;
            }

            var me = this;
            var options = me.options;
            var item = options.items[index];
            var id = "";

            // 防止重复删除
            if (item === null) {
                return;
            }

            // 销毁子组件
            try {
                item.destroy();
            } catch (e) {} finally {
                options.items[index] = null;
            }

            // 删除标题
            id = "#" + this._headerIdPrefix + index;
            $(id).unbind().remove();

            // 删除内容容器
            id = "#" + this._contentIdPrefix + index;
            $(id).remove();
        },
        /**
         * 添加项目
         * @param {Object} item 子组件
         */
        __addItem: function(item) {
            if (item === null) {
                return;
            }

            var index = this.options.items.length;
            this.options.items.push(item);

            // 创建容器
            this.__createItemArea(index);

            // 渲染
            this.__renderItem(index);

            // layout
            this._doLayout();
        },
        /**
         * @private
         * @description 渲染布局和内部对象
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                this._super();
                var items = me.options.items;

                // 将组件附着到容器内
                $.each(items, function(index) {
                    me.__renderItem(index);
                });
            }
        },
        /**
         * @private
         * @description 点击标题栏时，展开/折叠区域
         * @param {Event} event jQuery点击事件对象
         */
        _headerClicked: function(event) {
            var active = null;
            var headerKey = "header";
            var contentKey = "content";

            // 当前标题
            var target = event.currentTarget;

            // 点击了展开的标题
            if (target.className.indexOf(activeClass) >= 0) {
                $("#" + target.id.replace(headerKey, contentKey)).slideUp(200);
                $(target).removeClass(activeClass);
            }
            // 点击了折叠的标题
            else {
                // 折叠已经打开的区域
                active = $(target).parent().children("." + activeClass);
                if (active.length > 0) {
                    active = active[0];
                    $("#" + active.id.replace(headerKey, contentKey)).slideUp(200);
                    $(active).removeClass(activeClass);
                }

                // 展开当前区域
                $("#" + target.id.replace(headerKey, contentKey)).slideDown(200);
                $(target).addClass(activeClass);
            }
        },
        /**
         * @private
         * @description 创建布局
         */
        _createPanelContent: function() {
            var me = this;
            var options = me.options;
            var panel = me.panelContentEl = $("<div>");
            var items = options.items;
            var i = 0;

            // header/content的id前缀
            this._headerIdPrefix = options.id + "-header-";
            this._contentIdPrefix = options.id + "-content-";

            // 创建所有内容
            for (i = 0; i < items.length; i++) {
                me.__createItemArea(i);
            }

            // 设置panel样式名
            panel.addClass(defaultContentClass).addClass(defaultPanelClass);
        },
        /**
         * @description 动态添加组件
         * @param {Object/Array} items 组件对象或组件对象数组
         */
        _addItems: function(items) {
            var me = this;
            var i;

            if ($.isNull(items)) {
                return;
            }

            // 循环添加
            for (i = 0; i < items.length; i++) {
                me.__addItem(items[i]);
            }
        },
        /**
         * 删除项目
         * @param {Array} items 可见的子组件的索引
         */
        _removeItems: function(items) {
            var me = this;
            var i = 0;
            var j = 0;
            var id;
            var count;

            // 如果输入参数为空，删除所有
            if ($.isNull(items)) {
                // 删除所有
                for (i = me.options.items.length - 1; i >= 0; i--) {
                    me.__removeItem(i);
                }
                return;
            }

            // 删除指定索引的Tab
            items.sort();
            for (i = items.length - 1; i >= 0; i--) {
                id = items[i];
                if (id >= me.options.items.length) {
                    return;
                }

                // 查找对应的实际索引
                count = -1;
                for (j = 0; j < me.options.items.length; j++) {
                    // 已删除子组件不计算索引
                    if (me.options.items[j] === null) {
                        continue;
                    }

                    count += 1;
                    if (count === id) {
                        break;
                    }
                }
                this.__removeItem(j);
            }
        },

        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this._removeItems();
            this._super();
        }
    });

    /**
     * @description Accordion布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建Accordion布局容器：
     * var sweetAccordionPanel = Sweet.panel.AccordionPanel();
     */
    Sweet.panel.AccordionPanel = $.sweet.widgetContainerAccordionpanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-Border布局容器
 * 2013/2/21
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    'use strict';
    var defaultContentClass = "sweet-panel-content",
        defaultPanelClass = "sweet-panel-borderpanel",
        helperNSClass = "sweet-panel-borderpanel-helper-ns",
        helperWEClass = "sweet-panel-borderpanel-helper-we";
    var jumperClass = "jumper",
        collapsedClass = "collapsed",
        resizeNSClass = "resize-ns",
        resizeWEClass = "resize-we";
    var NORTH = "north",
        CENTER = "center",
        SOUTH = "south",
        WEST = "west",
        EAST = "east";
    var portions = [CENTER, NORTH, SOUTH, WEST, EAST];
    var resizeBarWidth = 11;

    $.widget("sweet.widgetContainerBorderpanel", $.sweet.widgetContainerPanel, /** @lends Sweet.panel.BorderPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-borderpanel]:",
        type: "borderPanel",
        options: /** @lends Sweet.panel.BorderPanel.prototype*/
        {
            /**
             * 子组件间的间隔距离，如果设置了resizable，则固定为11px
             * @type Number
             * @default 5
             */
            padding: 5,
            /**
             * 拖动改变大小时，是否实时调整内部子组件大小
             * @type Boolean
             * @default false
             */
            rtSizing: false,
            /**
             * 各区间隐藏模式,支持两种visibility和display,默认为display:none
             * @type Boolean
             * @default true
             */
            hiddenModel: true,
            items: null
        },
        /**
         * @description 设置指定方位子组件的大小
         * @param {String} portion 方位 [north/center/south/west/east]
         * @param {Number} width 宽度
         * @param {Number} height 高度
         */
        setItemSize: function(portion, width, height) {
            if (!$.inArray(portion, portions)) {
                return;
            }

            if (!$.isNull(width)) {
                this.initSize[portion].width = width;
            }
            if (!$.isNull(height)) {
                this.initSize[portion].height = height;
            }

            this._doLayout();
            return;
        },
        _getCanvasObject: function() {
            var me = this,
                result = null,
                opt = me.options,
                len = opt.items ? opt.items.length : 0;
            if (len === 1) {
                result = opt.items[0].getCanvasObject();
            } else if (len > 1) {
                //因为会出横向滚动条，所以要拿table的宽度
                var containerEl = me.renderEl,
                    h = containerEl.height(),
                    w = containerEl.width();
                result = $("<canvas>").attr({
                    width: w,
                    height: h
                });
                result = result[0];
                //将容器中的组件按flowpanel来进行布局并整合到result这个canvas上
                var padding = opt.padding,
                    x = 0,
                    y = 0,
                    resultc = result.getContext("2d");
                var scn = [NORTH, CENTER, SOUTH],
                    wce = [WEST, CENTER, EAST];
                //先在北南向寻找布局
                for (var i = 0; i < scn.length; i++) {
                    var portion = scn[i],
                        item = me._getItemByPortion(portion);
                    if ($.isNull(item)) {
                        continue;
                    }
                    //如果中间有item，则必须在这个方向上还有其它的item才算，否则此item可能是其它方向上的
                    if (portion === CENTER) {
                        var nextPortion = scn[i + 1],
                            nextItem = me._getItemByPortion(nextPortion),
                            prePortion = scn[i - 1],
                            preItem = me._getItemByPortion(prePortion);
                        if ($.isNull(nextItem) && $.isNull(preItem)) {
                            continue;
                        }
                    }
                    //确定item后进行，根据方向画在一个canvas上
                    var itw = item.getWidth(),
                        ith = item.getHeight(),
                        itemCanvs;
                    if ($.isNotNull(itemCanvs) && $.isFunction(itemCanvs.getContext)) {
                        var imgc = itemCanvs.getContext("2d"),
                            imgd = imgc.getImageData(0, 0, itw, ith);
                        //将每一个canvs放在result上，这里要计算坐标位置
                        resultc.putImageData(imgd, x, y);
                        y += ith + (i === len - 1 ? 0 : padding);
                    }
                }
                //再在东西向寻找布局
                for (var i = 0; i < wce.length; i++) {
                    var portion = wce[i],
                        item = me._getItemByPortion(portion);
                    if ($.isNull(item)) {
                        continue;
                    }
                    //如果中间有item，则必须在这个方向上还有其它的item才算，否则此item可能是其它方向上的
                    if (portion === CENTER) {
                        var nextPortion = wce[i + 1],
                            nextItem = me._getItemByPortion(nextPortion),
                            prePortion = wce[i - 1],
                            preItem = me._getItemByPortion(prePortion);
                        if ($.isNull(nextItem) && $.isNull(preItem)) {
                            continue;
                        }
                    }
                    //确定item后进行，根据方向画在一个canvas上
                    var itw = item.getWidth(),
                        ith = item.getHeight(),
                        itemCanvs;
                    if ($.isNotNull(itemCanvs) && $.isFunction(itemCanvs.getContext)) {
                        var imgc = itemCanvs.getContext("2d"),
                            imgd = imgc.getImageData(0, 0, itw, ith);
                        //将每一个canvs放在result上，这里要计算坐标位置
                        resultc.putImageData(imgd, x, y);
                        y += itw + (i === len - 1 ? 0 : padding);
                    }
                }
            }
            return result;
        },
        /**
         * @description 有resizable时，触发此button的点击事件
         */
        resizeBtnClick: function() {
            var me = this;
            if (me.handleEl) {
                me.handleEl.click();
            }
        },
        /**
         * @private
         * @description 根据portion从items数组中取得对象
         * @param {String} portion 位置名称
         */
        _getItemByPortion: function(portion) {
            var items = this.options.items;
            var obj = null;
            var objPortion = null;

            if ($.isNull(portion)) {
                return null;
            }

            // 按portion查找
            for (var i = 0; i < items.length; i++) {
                obj = items[i];
                if (obj === null) {
                    continue;
                }

                objPortion = this._getItemPortion(obj);

                if (objPortion === null) {
                    continue;
                }

                if (objPortion === portion) {
                    return obj;
                }
            }
            return null;
        },
        /**
         * @private
         * @description 根据portion获取区域对象
         * @param {String} portion 区域名称
         * @returns {Object} 区域对象
         */
        _getAreaByPortion: function(portion) {
            var me = this;
            var id = "#" + me.options.id + "-portion-" + portion;
            return $(id);
        },
        /**
         * @private
         * @description 根据portion获取区域对象间隔或调整把手
         * @param {String} portion 区域名称
         * @returns {Object} Gap对象
         */
        _getGapByPortion: function(portion) {
            var me = this;
            var id = "#" + me.options.id + "-gap-" + portion;
            return $(id);
        },
        /**
         * @private
         * @description 获取Item的方位信息
         * @param {Object} item 项目对象
         * @returns {String} 方位名称
         */
        _getItemPortion: function(item) {
            if (item === null) {
                return null;
            }

            if ($.isPlainObject(item)) {
                if (item.portion) {
                    return item.portion;
                } else {
                    return CENTER;
                }
            } else {
                if (item.options.portion) {
                    return item.options.portion;
                } else {
                    return CENTER;
                }
            }
        },
        /**
         * @private
         * @description 如果item是PlainObject，把属性设置到item的options中
         * @param {Object} item 项目
         */
        _buildItemOptions: function(item) {
            if (!$.isPlainObject(item) || item.hasOwnProperty("options")) {
                return;
            }

            var temp = {};
            var key = null;

            for (key in item) {
                if (item.hasOwnProperty(key)) {
                    temp[key] = item[key];
                }
            }

            item.options = temp;
        },
        /**
         * @private
         * @descripition 重新计算布局
         */
        _doLayout: function() {
            var me = this;
            var initSize = me.initSize;
            var item = null;
            var area = null;
            var gap = null;
            var width = 0,
                height = 0;
            var gapWidth, gapHeight;
            var centerWidth = 0,
                centerHeight = 0;
            var totalGapWidth = 0,
                totalGapHeight = 0;
            var padding = me.options.padding;
            var rHeight = 0;

            var indexBuf = [];
            var containerWidth, containerHeight;
            var portion = "";
            var i = 0;

            // 渲染前禁止进入
            if (!me.rendered || me.options.items.length === 0) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            this._super();

            // 可用区域大小
            containerWidth = centerWidth = me.panelContentEl.width();
            containerHeight = centerHeight = me.panelContentEl.height();

            // 计算Gap大小
            for (i = 0; i < portions.length; i++) {
                portion = portions[i];
                item = me._getItemByPortion(portion);
                if (item === null) {
                    continue;
                }

                if (portion === NORTH || portion === SOUTH) {
                    gapHeight = (item.options && item.options.resizable) ? resizeBarWidth : padding;
                    totalGapHeight += gapHeight;
                } else if (portion === WEST || portion === EAST) {
                    gapWidth = (item.options && item.options.resizable) ? resizeBarWidth : padding;
                    totalGapWidth += gapWidth;
                }
            }

            // 首次布局，记录内部元素的初始配置宽高
            function _calculateInitSize() {
                for (i = 0; i < portions.length; i++) {
                    portion = portions[i];
                    item = me._getItemByPortion(portion);
                    if ($.isNull(initSize[portion])) {
                        if (item === null) {
                            initSize[portion] = {
                                width: 0,
                                height: 0
                            };
                        } else {
                            initSize[portion] = {
                                width: item.options.width,
                                height: item.options.height
                            };
                        }
                    }
                }
            }
            _calculateInitSize();

            // North/South区域，宽度设置为auto，高度为内部对象的高度
            function _layoutNS() {
                indexBuf = [NORTH, SOUTH];
                for (i = 0; i < indexBuf.length; i++) {
                    portion = indexBuf[i];
                    item = me._getItemByPortion(portion);
                    area = me._getAreaByPortion(portion);
                    gap = me._getGapByPortion(portion);
                    if (item !== null) {
                        width = containerWidth;
                        height = me.initSize[portion].height;
                        if (typeof height === 'string' && height.match(/\d+%/)) {
                            height = Math.round((containerHeight - totalGapHeight) * parseInt(height, 10) / 100);
                        }
                        if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                            area.css({
                                visibility: ""
                            });
                        }
                        area.width(width).height(height).show();

                        gapWidth = width;
                        gapHeight = (item.options && item.options.resizable) ? resizeBarWidth : padding;
                        gap.width(gapWidth).height(gapHeight).show();

                        if (!$.isPlainObject(item)) {
                            item.setWH(width, height);
                            rHeight = item.getHeight();
                            if (rHeight !== height && height !== 0) {
                                height = rHeight;
                                area.height(height);
                            }
                        }
                        // 如果高度为0,设置为隐藏
                        if (height === 0) {
                            if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                                area.css({
                                    visibility: "hidden"
                                });
                            } else {
                                area.hide();
                            }
                        }
                        centerHeight = centerHeight - height - gapHeight;
                    } else {

                        if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                            area.width(width).height(0).css({
                                visibility: "hidden"
                            });
                        } else {
                            area.width(width).height(0).hide();
                        }
                        gap.width(width).height(0).hide();
                    }
                }
            }
            _layoutNS();

            // Middel容器高度
            item = me.panelContentEl.children("div[class=portion-middle]");
            item.width(containerWidth);
            item.height(centerHeight);

            // West/East区域，宽度为内部对象的宽度，高度设置为100%
            function _layoutWE() {
                indexBuf = [WEST, EAST];
                for (i = 0; i < indexBuf.length; i++) {
                    portion = indexBuf[i];
                    item = me._getItemByPortion(portion);
                    area = me._getAreaByPortion(portion);
                    gap = me._getGapByPortion(portion);
                    if (item !== null) {
                        width = initSize[portion].width;
                        height = centerHeight;
                        if (typeof width === 'string' && width.match(/\d+%/)) {
                            width = Math.round((containerWidth - totalGapWidth) * parseInt(width, 10) / 100);
                        }
                        if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                            area.css({
                                visibility: ""
                            });
                        }
                        area.width(width).height(height).show();

                        gapWidth = (item.options && item.options.resizable) ? resizeBarWidth : padding;
                        gapHeight = height;
                        gap.width(gapWidth).height(gapHeight).show();

                        if (!$.isPlainObject(item)) {
                            item.setWH(width, height);
                        }
                        // 折叠、展开按钮，垂直居中
                        if (gap.children().length > 0) {
                            var handleEl = gap.children().first();
                            var margin = Math.round((gap.height() - handleEl.height()) / 2);
                            handleEl.css("margin-top", margin + "px");
                        }
                        // 如果宽度为0,设置为隐藏
                        if (width === 0) {
                            if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                                area.css({
                                    visibility: "hidden"
                                });
                            } else {
                                area.hide();
                            }
                        }
                        centerWidth = centerWidth - width - gapWidth;
                    } else {
                        if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                            area.width(0).height(height).css({
                                visibility: "hidden"
                            });
                        } else {
                            area.width(0).height(height).hide();
                        }
                        gap.width(0).height(padding).hide();
                    }
                }
            }
            _layoutWE();

            // Center区域，占满剩下的区域
            item = me._getItemByPortion(CENTER);
            area = me._getAreaByPortion(CENTER);
            if (item !== null) {
                area.width(centerWidth).height(centerHeight);
                if (!$.isPlainObject(item)) {
                    item.setWidth(centerWidth);
                    item.setHeight(centerHeight);
                }
            } else {
                me._error("Center portion is required!");
            }
        },
        /**
         * @private
         * @description 取得指定方位区域的最大尺寸
         * @param {String} portion 方位名称
         * @returns {Object} 宽、高
         */
        _getMaxSize: function(portion) {
            var me = this;

            // 先从配置中取
            var item = me._getItemByPortion(portion);
            var maxWidth = item.options.maxWidth || item.maxWidth || 0;
            var maxHeight = item.options.maxHeight || item.maxHeight || 0;

            // 如果配置中没有，按挤压完中间区域计算
            if (maxWidth === 0 && (portion === WEST || portion === EAST)) {
                maxWidth = me._getAreaByPortion(portion).width() + me._getAreaByPortion(CENTER).width();
            }
            if (maxHeight === 0 && (portion === NORTH || portion === SOUTH)) {
                maxHeight = me._getAreaByPortion(portion).height() + me._getAreaByPortion(CENTER).height();
            }

            return {
                width: maxWidth,
                height: maxHeight
            };
        },
        /**
         * @private
         * @description 取得指定方位区域的最小尺寸
         * @param {String} portion 方位名称
         * @returns {Object} 宽、高
         */
        _getMinSize: function(portion) {
            var me = this;

            // 从配置中取，如果没有配置，缺省为0
            var item = me._getItemByPortion(portion);
            var minWidth = item.options.minWidth || item.minWidth || 0;
            var minHeight = item.options.minHeight || item.minHeight || 0;

            return {
                width: minWidth,
                height: minHeight
            };
        },
        /**
         * @private
         * @description 调整大小
         * @param {String} portion 方位名称
         */
        _resizable: function(portion) {
            var me = this;
            var gap = null;
            var item = null;
            var area = null;
            var handle = null;
            var startX = 0;
            var startY = 0;
            var startWidth = 0;
            var startHeight = 0;
            var dragging = false;
            var maxSize = null;
            var minSize = null;
            var helper = null;
            var attrOldSize = "oldSize";

            gap = me._getGapByPortion(portion);
            item = me._getItemByPortion(portion);
            area = me._getAreaByPortion(portion);
            if (gap === null || portion === CENTER) {
                return;
            }

            // 鼠标按下，启动拖动
            function _mouseDown(event) {
                // 点击jumper时，不按拖动处理
                if ($(event.target).hasClass(jumperClass)) {
                    return false;
                }

                startX = event.pageX;
                startY = event.pageY;
                startWidth = area.width();
                startHeight = area.height();
                maxSize = me._getMaxSize(portion);
                minSize = me._getMinSize(portion);
                dragging = true;

                $(document).bind("mousemove", _mouseMove);
                $(document).bind("mouseup", _mouseUp);

                if (me.options.rtSizing === false) {
                    helper = $("<div>").appendTo(me.panelContentEl);
                    helper.css('z-index', -1);
                    helper.css({
                        left: gap.position().left,
                        top: gap.position().top
                    });
                    helper.width(gap.width()).height(gap.height());

                    if (portion === NORTH || portion === SOUTH) {
                        helper.addClass(helperNSClass);
                    } else {
                        helper.addClass(helperWEClass);
                    }
                }

                event.preventDefault();
            }

            // 鼠标抬起，停止拖动
            function _mouseUp() {
                if (dragging === true) {
                    dragging = false;
                    $(document).unbind("mousemove", _mouseMove);
                    $(document).unbind("mouseup", _mouseUp);
                }

                if (me.options.rtSizing === false) {
                    helper.remove();
                    me._doLayout();
                }
            }

            // 鼠标移动，调整大小
            function _mouseMove(event) {
                if (!dragging) {
                    return;
                }

                var offsetX = event.pageX - startX;
                var offsetY = event.pageY - startY;
                var width = 0;
                var height = 0;

                // 重新计算可变区域大小
                if (portion === NORTH) {
                    height = startHeight + offsetY;
                    height = height > maxSize.height ? maxSize.height : height;
                    height = height < minSize.height ? minSize.height : height;
                    me.initSize[portion].height = height;
                }

                if (portion === SOUTH) {
                    height = startHeight - offsetY;
                    height = height > maxSize.height ? maxSize.height : height;
                    height = height < minSize.height ? minSize.height : height;
                    me.initSize[portion].height = height;
                }

                if (portion === WEST) {
                    width = startWidth + offsetX;
                    width = width > maxSize.width ? maxSize.width : width;
                    width = width < minSize.width ? minSize.width : width;
                    me.initSize[portion].width = width;
                }

                if (portion === EAST) {
                    width = startWidth - offsetX;
                    width = width > maxSize.width ? maxSize.width : width;
                    width = width < minSize.width ? minSize.width : width;
                    me.initSize[portion].width = width;
                }

                // 重置折叠、展开按钮
                area.attr(attrOldSize, null);
                handle.removeClass(collapsedClass);

                // 如果不需要实时调整大小，只调整helper的位置
                if (me.options.rtSizing === false) {
                    if (helper.css("z-index") === "-1") {
                        helper.css('z-index', $.getMaxZIndex());
                    }

                    if (portion === NORTH) {
                        helper.css("top", gap.position().top + (height - startHeight));
                    } else if (portion === SOUTH) {
                        helper.css("top", gap.position().top - (height - startHeight));
                    } else if (portion === WEST) {
                        helper.css("left", gap.position().left + (width - startWidth));
                    } else if (portion === EAST) {
                        helper.css("left", gap.position().left - (width - startWidth));
                    }
                } else {
                    // 刷新布局
                    me._doLayout();
                }
                event.preventDefault();
            }

            // 折叠/展开 Portion
            function _expand() {
                var oldSize = area.attr(attrOldSize);

                if (portion === NORTH || portion === SOUTH) {
                    // 如果没有设置标志，则执行折叠
                    if ($.isNull(oldSize)) {
                        area.attr(attrOldSize, area.height());
                        handle.addClass(collapsedClass);
                        me.initSize[portion].height = 0;
                    } else {
                        // 否则，执行展开
                        area.attr(attrOldSize, null);
                        handle.removeClass(collapsedClass);
                        me.initSize[portion].height = parseInt(oldSize, 10);
                    }
                } else {
                    // 如果没有设置标志，则执行折叠
                    if ($.isNull(oldSize)) {
                        area.attr(attrOldSize, area.width());
                        handle.addClass(collapsedClass);
                        me.initSize[portion].width = 0;
                    } else {
                        // 否则，执行展开
                        area.attr(attrOldSize, null);
                        handle.removeClass(collapsedClass);
                        me.initSize[portion].width = parseInt(oldSize, 10);
                    }
                }

                // 刷新布局
                me._doLayout();
            }

            // 是否需要调整大小
            if (item !== null && item.options.resizable === true) {
                // 创建折叠/展开按钮
                handle = $("<div>").addClass(jumperClass).appendTo(gap);
                me.handleEl = handle;

                // 点击按钮，或双击拖动条，折叠或展开区域
                handle.bind("click", _expand);
                gap.bind("dblclick", _expand);

                // 鼠标在GAP上按下，开始拖动调整大小
                gap.bind("mousedown", _mouseDown);

                if (portion === NORTH || portion === SOUTH) {
                    gap.addClass(resizeNSClass);
                }

                if (portion === WEST || portion === EAST) {
                    gap.addClass(resizeWEClass);
                }
            } else {
                handle = gap.children().first();
                if (handle.length > 0) {
                    handle.unbind();
                }
                gap.unbind();
                gap.empty();
                gap.removeClass(resizeWEClass).removeClass(resizeNSClass);
            }
        },
        /**
         * @private
         * @description 渲染一个项目到指定方位
         * @param {Object} item 待渲染的项目
         * @param {String} portion 方位名称
         */
        _renderItem: function(item, portion) {
            var me = this;
            var area = null;
            var gap = null;

            area = me._getAreaByPortion(portion);
            gap = me._getGapByPortion(portion);

            if (item === null) {
                return;
            }

            // 渲染
            if ($.isFunction(item.render)) {
                item.render(area.attr('id'));
            } else if (!$.isNull(item.html)) {
                area.html(item.html);
            }

            // 显示间隔
            if (gap !== null) {
                gap.show();
            }

            // 调整尺寸的处理
            me._resizable(portion);
        },
        /**
         * @private
         * @description 新增一个项目到指定方位
         * @param {Object} item 待增加的项目
         */
        _addItem: function(item) {
            if (item === null) {
                return false;
            }

            var me = this;
            me._buildItemOptions(item);
            var portion = me._getItemPortion(item);

            var area = me._getAreaByPortion(portion);
            var gap = me._getGapByPortion(portion);
            if (area) {
                area.show();
            }
            if (gap) {
                gap.show();
            }

            // 检查有没有重复
            if (me._getItemByPortion(portion) !== null) {
                return false;
            } else {
                me.initSize[portion] = {
                    width: item.options.width,
                    height: item.options.height
                };
                me.options.items.push(item);
                me._renderItem(item, portion);
            }

            // 刷新布局
            me._doLayout();

            return true;
        },
        /**
         * @private
         * @description 删除指定方位的组件
         * @param {String} portion 方位
         */
        _removeItem: function(portion) {
            var me = this;
            var area = null;
            var gap = null;
            var item = null;
            var i = 0;

            area = me._getAreaByPortion(portion);
            gap = me._getGapByPortion(portion);
            item = me._getItemByPortion(portion);

            if (item === null) {
                return false;
            }

            // 销毁组件
            try {
                // 找出下标
                for (i = 0; i < me.options.items.length; i++) {
                    if (me.options.items[i] === item) {
                        break;
                    }
                }

                // 销毁
                if ($.isFunction(item.destroy)) {
                    item.destroy();
                }

                // 从列表删除
                me.options.items.splice(i, 1);
            } catch (e) {}

            // 调整大小
            area.empty();
            if (false === me.options.hiddenModel || "false" === me.options.hiddenModel) {
                area.css({
                    visibility: ""
                });
            }
            area.width(0).height(0).hide();
            gap.width(0).height(0).hide();
            me.initSize[portion].width = 0;
            me.initSize[portion].height = 0;

            me._doLayout();

            // 调整尺寸的处理
            me._resizable(portion);

            return true;
        },
        /**
         * @private
         * @description 渲染布局和内部对象
         */
        _widgetRender: function() {
            var me = this;
            var item = null;
            var portion = "";
            var i = 0;

            if (!me.containerEl) {
                return;
            }

            this._super();

            // 将组件附着到容器内
            for (i = 0; i < portions.length; i++) {
                portion = portions[i];
                item = me._getItemByPortion(portion);
                me._buildItemOptions(item);
                me._renderItem(item, portion);
            }
        },
        /**
         * @private
         * @description 创建Border布局
         */
        _createPanelContent: function() {
            var me = this;
            var options = me.options;
            var borderPanel = me.panelContentEl = $("<div>");
            var portionIdPrefix = options.id + "-portion-";
            var gapIdPrefix = options.id + "-gap-";
            var portionEl = null;
            var portionClassPrefix = "portion-";
            var gapClassPrefix = "gap-";

            me.initSize = {};

            if (options.items == null) {
                options.items = [];
            }

            // ===================================================
            // 第一行
            // North
            $("<div>").attr("id", portionIdPrefix + NORTH)
                .addClass(portionClassPrefix + NORTH)
                .appendTo(borderPanel);

            // 间隔条
            $("<div>").attr("id", gapIdPrefix + NORTH)
                .addClass(gapClassPrefix + NORTH)
                .hide()
                .appendTo(borderPanel);

            // ===================================================
            // 第二行
            portionEl = $("<div>").attr("id", portionIdPrefix + "middle")
                .addClass(portionClassPrefix + "middle")
                .appendTo(borderPanel);

            // West
            $("<div>").attr("id", portionIdPrefix + WEST)
                .addClass(portionClassPrefix + WEST)
                .appendTo(portionEl);

            // 间隔条
            $("<div>").attr("id", gapIdPrefix + WEST)
                .addClass(gapClassPrefix + WEST)
                .hide()
                .appendTo(portionEl);

            // Center
            $("<div>").attr("id", portionIdPrefix + CENTER)
                .addClass(portionClassPrefix + CENTER)
                .appendTo(portionEl);

            // 间隔条
            $("<div>").attr("id", gapIdPrefix + EAST)
                .addClass(gapClassPrefix + EAST)
                .hide()
                .appendTo(portionEl);

            // East
            $("<div>").attr("id", portionIdPrefix + EAST)
                .addClass(portionClassPrefix + EAST)
                .appendTo(portionEl);

            // ===================================================
            // 第三行
            // 间隔条
            $("<div>").attr("id", gapIdPrefix + SOUTH)
                .addClass(gapClassPrefix + SOUTH)
                .hide()
                .appendTo(borderPanel);

            // South
            $("<div>").attr("id", portionIdPrefix + SOUTH)
                .addClass(portionClassPrefix + SOUTH)
                .appendTo(borderPanel);

            // 初始大小全部设置为0
            borderPanel.find("div").width(0).height(0);

            // 设置样式
            borderPanel.addClass(defaultContentClass).addClass(defaultPanelClass);
        },
        /**
         * @description 动态添加组件
         * @param {Object/Array} items 组件对象或组件对象数组
         */
        _addItems: function(items) {
            var me = this;
            var i;

            if ($.isNull(items)) {
                return;
            }

            // 循环添加
            for (i = 0; i < items.length; i++) {
                me._addItem(items[i]);
            }
        },
        /**
         * @description 删除内容
         * @param items
         * @private
         */
        _removeItems: function(items) {
            var me = this;

            // 如果输入参数为空，删除所有内容
            if ($.isNull(items)) {
                me._removeItem(NORTH);
                me._removeItem(SOUTH);
                me._removeItem(WEST);
                me._removeItem(EAST);
                me._removeItem(CENTER);
                return;
            }

            // 按指定索引删除
            for (var i = 0; i < items.length; i++) {
                me._removeItem(items[i]);
            }
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this._removeItems();
            this._super();
        }
    });

    /**
     * @description Border布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建Border布局容器：
     * var sweetBorderPanel = Sweet.panel.BorderPanel({
     *      items : [
     *          item_center, // width/height自动计算
     *          item_north,  // width为自动计算
     *          item_south,  // width为自动计算
     *          item_west,   // height为自动计算
     *          item_east    // height为自动计算
     *      ]
     * });
     * 注：item通过辅助属性portion来指定位置
     */
    Sweet.panel.BorderPanel = $.sweet.widgetContainerBorderpanel;
}(jQuery));;
/*
 * @fileOverview tabpanel组件
 * @date 2012/12/18
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * 
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *  jquery.sweet.widget.js
 *  jquery.sweet.widget.container.js
 *
 * @history
 */
(function($, undefined) {
    'use strict';

    var defaultPanelContentClass = "sweet-panel-content";
    var tabPanelClass = "sweet-tabpanel";
    var tabHeaderClass = "tab-navigator";
    var tabCardClass = "tab-card";
    var tabCardSlideClass = "tab-card-slide";
    var tabContentClass = "tab-content";
    var tabLeftClass = "tab-left";
    var tabRightClass = "tab-right";
    var tabListClass = "tab-list";
    var tabCloseClass = "tab-list-close-button";
    var tabSeperatorClass = "tab-list-seperator";
    var tabAllClass = "tab-all";
    var tabAllListClass = "sweet-tabpanel-all-list";
    var activeClass = "active";
    var hoverClass = "hover";
    var invisibleClass = "invisible";

    var selectorLIVisible = "li[visible!=false]",
        selectorLIInvisible = "li[visible=false]";

    var TAB_SYSTEM = 1;
    var TAB_LEFT = 10; // 索引大于等于10,标签在左侧
    var MAX_TITLE_LENGTH = 25; // 标签文本最大长度

    $.widget("sweet.widgetContainerTabpanel", $.sweet.widgetContainerPanel,
    /**@lends Sweet.panel.TabPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-tabpanel]:",
        eventNames: /**@lends Sweet.panel.TabPanel.prototype*/
        {
            /**
             * @event
             * @description Tab标签切换
             * @param {Object} tab1 前一个tab对象
             * @param {Object} tab2 当前tab对象
             */
            tabchanged: "Tab标签切换",
            tabclosed: "Tab标签关闭"
        },
        options: /**@lends Sweet.panel.TabPanel.prototype*/
        {
            /**
             * 是否可关闭
             * @type Boolean
             * @default false
             */
            closable: false,
            /**
             * 活动面板ID
             * @type Number
             * @default 0
             */
            activeTab: 0,
            /**
             * 样式序号，1~4
             * @type Number
             * @default 1
             */
            style: TAB_SYSTEM,
            /**
             * 子组件列表
             * @type Array
             * @default []
             */
            items: [],
            /**
             * 监听事件列表。不建议使用，请以addListener代替
             * @type Array
             * @default []
             * @deprecated
             */
            listeners: [],
            /**
             * 容器是否需要style为11时的背景，如果不需要11风格下的背景则设置为"none"
             * @type string
             * @default "yes"
             */
            bgColor: "yes"
        },
        /**
         * @description 设置活动面板
         * @param {Number} id 面板序号
         */
        setActiveTab: function(id) {
            var item;
            var i;

            // 激活面板
            if ($.type(id) === 'string') {
                for (i = 0; i < this.options.items.length; i++) {
                    item = this.options.items[i];
                    if ((item.options && item.options.id === id) || (item.id && item.id === id)) {
                        this._activeTab(i);
                        break;
                    }
                }
            } else if ($.type(id) === 'number') {
                this._activeTab(id);
            } else {
                this._error('target id is invalide[' + id + ']');
            }
        },

        /**
         * @description 返回活动面板序号
         * @return {Number} 返回活动面板序号
         */
        getActiveTab: function() {
            return this.options.activeTab;
        },
        /**
         * @description 获取item
         * @param {Number/String} id 索引或id
         * @returns {Object}
         */
        getItem: function(id) {
            var item;
            var i;

            // 根据id查找
            if ($.type(id) === 'string') {
                for (i = 0; i < this.options.items.length; i++) {
                    item = this.options.items[i];
                    if ((item.options && item.options.id === id) || (item.id && item.id === id)) {
                        return item;
                    }
                }
                return null;
            }
            // 根据序号查找
            else if ($.type(id) === 'number') {
                if (id < 0 || id >= this.options.items.length) {
                    return null;
                } else {
                    return this.options.items[id];
                }
            }

            return null;
        },
        /**
         * 添加Tab项。废弃，不再对外公开
         * @param {Object} item 待添加的项目
         * @deprecated
         * @private
         */
        addTab: function(item) {
            var me = this;
            var options = me.options;

            if (item === null) {
                return;
            }

            // 添加
            me.options.items.push(item);
            me._addTab(item);

            // 激活
            me._activeTab(options.items.length - 1);
        },
        /**
         * @private
         * @descripition 重新计算布局
         */
        _doLayout: function() {
            var me = this;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            if (me.tabListEl === null) {
                return;
            }

            // 调整tabList，计算是否显示滑动按钮
            if (me.options.style < TAB_LEFT) {
                me._tablistLayoutHorizontal();
            } else {
                me._tablistLayoutVertical();
            }

            // 调用内部组件的layout
            var item = me.options.items[me.options.activeTab];
            if (!$.isNull(item) && $.isFunction(item.doLayout)) {
                item.doLayout();
            }
        },
        /**
         * @description 刷新Tab标签布局，自动计算是否需要显示滑动按钮。只适用于水平的Tab排布
         * @private
         */
        _tablistLayoutHorizontal: function() {
            var me = this;
            var tabListWidth = 0;
            var extra = 5;
            var panelWidth = me.panelContentEl.width() - extra;
            var width = 0;
            var buttonVisible = false;

            // 计算标签总长度
            me.tabListEl.find("li").each(function(index, item) {
                tabListWidth += $(item).externalWidth();
            });

            // 检查当前按钮是否可见
            if (!me.tabLeftEl.hasClass(invisibleClass)) {
                buttonVisible = true;
            }

            // 如果长度超过可视范围，显示滑动按钮
            if (tabListWidth > panelWidth && !buttonVisible) {
                me.tabLeftEl.removeClass(invisibleClass);
                me.tabRightEl.removeClass(invisibleClass);
                me.tabAllEl.removeClass(invisibleClass);

                // 确保激活的Tab完全可见
                var tab = me.getActiveTab();
                if (tab === me.options.items.length - 1) {
                    me._activeTab(tab);
                }
            }
            // 否则隐藏滑动按钮
            else if (tabListWidth <= panelWidth && buttonVisible) {
                me.tabLeftEl.addClass(invisibleClass);
                me.tabRightEl.addClass(invisibleClass);
                me.tabAllEl.addClass(invisibleClass);

                // 滑动标签，确保全部可见
                me._scrollList("right", 65535);
            }

            // 改变按钮状态后，重新计算列表宽度
            width = panelWidth - me.tabLeftEl.externalWidth();
            width -= me.tabRightEl.externalWidth();
            width -= me.tabAllEl.externalWidth();

            // 标签宽度
            me.tabListEl.externalWidth(width);

        },
        /**
         * @description 刷新Tab标签布局，自动计算是否需要显示滑动按钮。只适用于垂直的Tab排布
         * @private
         */
        _tablistLayoutVertical: function() {
            var me = this;
            var tabListHeight = 0;
            var panelHeight = me.panelContentEl.height();
            var width, height;
            var buttonVisible = false;
            var cardEl;
            var scrollDiv = me.tabListEl.children("div").first();

            // 计算标签总高度
            me.tabListEl.find("li").each(function(index, item) {
                tabListHeight += $(item).externalHeight();
            });

            // 检查当前按钮是否可见
            if (!me.tabLeftEl.hasClass(invisibleClass)) {
                buttonVisible = true;
            }

            // 如果高度超过可视范围，显示滑动按钮
            if (tabListHeight > panelHeight) {
                me.tabLeftEl.removeClass(invisibleClass);
                me.tabRightEl.removeClass(invisibleClass);

                // 不需要滚动的时候，也要隐藏按钮
                if (scrollDiv.position().top >= 0) {
                    me.tabLeftEl.addClass(invisibleClass);
                }
                if (scrollDiv.position().top + tabListHeight <= panelHeight) {
                    me.tabRightEl.addClass(invisibleClass);
                }

                // 确保激活的Tab完全可见
                var tab = me.getActiveTab();
                if (tab === me.options.items.length - 1) {
                    me._activeTab(tab);
                }
            }
            // 否则隐藏滑动按钮
            else if (tabListHeight <= panelHeight) {
                me.tabLeftEl.addClass(invisibleClass);
                me.tabRightEl.addClass(invisibleClass);

                // 滑动标签，确保全部可见
                me._scrollList("right", 65535);
            }

            // 修正滑动容器的高度
            width = me.cardPanelEl.width();
            height = me.cardPanelEl.height();
            me.cardSlideEl.width(width).height(height * me.options.items.length);

            // 显示所有内容
            me.cardSlideEl.children().each(function(index, card) {
                cardEl = $(card);
                cardEl.externalWidth(width).externalHeight(height).show();

                // style10,预先渲染所有内容
                if (cardEl.children().length === 0) {
                    me._renderItem(me.options.items[index], cardEl.attr('id'));
                }

                // 刷新子组件布局
                if ($.isFunction(me.options.items[index].doLayout)) {
                    me.options.items[index].doLayout();
                }
            });

        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var options = this.options;
            var self = this;

            if (!self.containerEl) {
                return;
            }

            this._super();

            // 注册事件
            $.each(options.listeners, function(eventName, callback) {
                self.addListener(eventName, callback);
            });

            // 渲染标签头
            $.each(options.items, function(index, item) {
                self._addTab(item);
            });

            // 激活默认面板
            if ($.isNull(this.options.activeTab)) {
                this._activeTab(0);
            } else {
                this._activeTab(this.options.activeTab);
            }
        },

        /**
         * @private
         * @description 创建tab布局
         */
        _createPanelContent: function() {
            var self = this;

            // 初始化属性
            this.tabLeftEl = null;
            this.tabRightEl = null;
            this.tabListEl = null;
            this.tabAllEl = null;
            this.tabHeaderEl = null;
            this.cardPanelEl = null;
            this.tabMenuEl = null;
            this.tabItemId = 100;

            var panelContentEl = self.panelContentEl = $("<div>");
            var ds = "<div><span></span></div>";
            var tabLeftEl = this.tabLeftEl = $(ds);
            var tabRightEl = this.tabRightEl = $(ds);
            var tabListEl = this.tabListEl = $("<div><div><ul></ul></div></div>");
            var tabAllEl = this.tabAllEl = $(ds);
            var tabHeadEl = this.tabHeaderEl = $("<div>");
            var tabCardEl = this.cardPanelEl = $("<div>");
            var tabCardSlideEl = this.cardSlideEl = null;

            // 创建左侧滚动按钮
            tabLeftEl.addClass(tabLeftClass)
                .bind("mousedown", function() {
                self.leftPushing = true;
                self.rightPushing = false;
                self._onLeftClick();
            })
                .bind("mouseup mouseleave", function() {
                self.leftPushing = false;
            })
                .appendTo(tabHeadEl);

            // 创建Tab标签列表
            tabListEl.addClass(tabListClass).appendTo(tabHeadEl);
            tabListEl.children("div").css("left", "0px");

            // 注册鼠标滚轮事件监听
            tabListEl.attr("id", this.options.id + "-tab-list");
            tabListEl.onMouseWheel(tabListEl.get(0), function(event, data) {
                self._wheelScrollList(event, data);
                return false;
            });

            // 创建所有Tab列表按钮
            tabAllEl.addClass(tabAllClass)
                .bind("click", {
                'self': self
            }, self._onAllClick)
                .appendTo(tabHeadEl);

            // 创建右侧滚动按钮
            tabRightEl.addClass(tabRightClass)
                .bind("mousedown", function() {
                self.leftPushing = false;
                self.rightPushing = true;
                self._onRightClick();
            })
                .bind("mouseup mouseleave", function() {
                self.rightPushing = false;
            })
                .appendTo(tabHeadEl);

            // 加到DOM树中
            tabHeadEl.addClass(tabHeaderClass).appendTo(panelContentEl);

            // 创建组件Card容器
            tabCardEl.addClass(tabCardClass).appendTo(panelContentEl);
            if (self.options.style === 11 && self.options.bgColor === "none") {
                panelContentEl.addClass(defaultPanelContentClass)
                    .addClass(tabPanelClass + "-" + self.options.style)
                    .addClass(tabPanelClass + "-bg-color-" + 12);
            } else {
                panelContentEl.addClass(defaultPanelContentClass)
                    .addClass(tabPanelClass + "-" + self.options.style)
                    .addClass(tabPanelClass + "-bg-color-" + self.options.style);
            }

            if (this.options.style >= TAB_LEFT) {
                tabCardSlideEl = this.cardSlideEl = $("<div>");
                tabCardSlideEl.addClass(tabCardSlideClass).appendTo(tabCardEl);
                this.tabListSliderEl = this.tabAllEl;

                tabLeftEl.detach().appendTo(panelContentEl);
                tabRightEl.detach().appendTo(panelContentEl);
                tabAllEl.unbind();
            }
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            // 删除所有标签和子组件
            this._removeItems();

            // 解除事件绑定
            if (this.tabLeftEl) {
                this.tabLeftEl.unbind();
            }
            if (this.tabRightEl) {
                this.tabRightEl.unbind();
            }
            if (this.tabAllEl) {
                this.tabAllEl.unbind();
            }

            this._super();
        },
        /**
         * @description 渲染项目到指定ID的容器中
         * @param {Object} item 子项目
         * @param {String} id 容器的ID
         * @return {Boolean} 是否渲染成功
         * @private
         */
        _renderItem: function(item, id) {
            // 渲染
            if (item.render) {
                item.render(id);
            } else if (!$.isNull(item.url)) {
                var html = '<iframe frameborder="0" style="width:100%; height:100%;" src="' + item.url + '" allowtransparency="true"></iframe>';

                $("#" + id).css("overflow", "hidden").html(html);
            } else if (!$.isNull(item.html)) {
                $("#" + id).html(item.html);
            } else {
                this._error("Invalid item object in tab, " + id);
                return false;
            }

            return true;
        },
        /**
         * @description 激活指定面板
         * @param {Number} id 面板序号
         * @private
         */
        _activeTab: function(id) {
            if ($.isNull(id)) {
                this._error("_activeTab(): id is invalid[" + id + "]");
                return;
            }

            if (id < 0 || id >= this.options.items.length) {
                return;
            }

            var me = this;
            var options = this.options;
            var elId = "#" + me.tabListEl.find("li").eq(id).attr("id");
            var tabListEl = me.tabListEl.children("div").first();
            var targetId = $(elId).attr("target");
            var contentId = null;
            var liEl = null;
            var count = 0;
            var pId = null;

            // 第一次激活时，渲染内容
            if ($("#" + targetId).children().length === 0) {
                me._renderItem(options.items[id], targetId);
            }

            // 去激活其它Tab
            this.tabListEl.find("li").each(function(index, item) {
                if (!$(item).hasClass(activeClass)) {
                    return;
                }

                // 记录原来激活的Tab的索引
                pId = index;

                // 修改样式
                $(item).removeClass(activeClass);
                contentId = $(item).attr("target");

                if (options.style < TAB_LEFT) {
                    $("#" + contentId).css('left', -10000);
                }
            });

            // 激活点击的Tab
            options.activeTab = id;
            liEl = $(elId);

            if (options.style >= TAB_LEFT) {
                me.tabListSliderEl.stop().animate({
                    "top": $(elId).position().top + tabListEl.position().top
                }, 100, function() {
                    liEl.addClass(activeClass);
                });
            } else {
                liEl.addClass(activeClass);
            }

            // 如果激活的标签不可见，要向右滚动列表直到可见
            if (liEl.attr("visible") === "false") {
                if (options.style < TAB_LEFT) {
                    $("#" + targetId).css('left', "");
                } else {
                    this._switchCard(targetId, 'slide');
                }

                while (liEl.attr("visible") === "false") {
                    count++;
                    liEl = liEl.next();
                }

                me._scrollList("right", count);
            } else if (options.style < TAB_LEFT) {
                $("#" + targetId).css('left', "");

                // 如果标签在右侧不可见范围内，要向左移动列表，直到完全可见
                var offset = liEl.position().left + $.externalSize(liEl).width + me.tabListEl.children("div").first().position().left - me.tabListEl.width();
                var movedOffset = 0;

                if (offset > 0 && me.tabListEl.width() > 0 && me.tabLeftEl.is(":visible")) {
                    liEl = me.tabListEl.find(selectorLIVisible).first();
                    while (movedOffset < offset) {
                        movedOffset += $.externalSize(liEl).width;
                        count++;
                        liEl = liEl.next();
                    }

                    me._scrollList("left", count);
                }
            } else if (options.style >= TAB_LEFT) {
                this._switchCard(targetId, 'slide');
            }

            // 显示后，调用子组件doLayout
            if ($.isFunction(options.items[id].doLayout)) {
                options.items[id].doLayout(true);
            }

            // 记录当前激活的tab索引
            me.options.activeTab = id;

            // 事件处理
            if (pId !== id) {
                me._onTabChange(pId, id);
            }
        },
        /**
         * 添加一个Tab项
         * @param {Object} item 待添加的项目
         * @return {Number} 添加后的索引
         * @private
         */
        _addTab: function(item) {
            var self = this;
            var options = this.options;
            var areaEl = $("<div>");
            var liEl = null;
            var spanEl1 = null;
            var spanEl2 = null;
            var title = "";
            var index = self.tabItemId++;

            // 获取title
            if ($.isPlainObject(item) && $.isNull(item.options)) {
                item.options = $.objClone(item);
            }
            title = item.options.title;

            // 创建tab标签
            liEl = $("<li unselectable='on'></li>");
            spanEl1 = $("<span>").addClass(tabCloseClass);
            spanEl2 = $("<span>").addClass(tabSeperatorClass);

            liEl.text(title.length > MAX_TITLE_LENGTH ? title.substr(0, MAX_TITLE_LENGTH - 3) + "..." : title)
                .attr("id", options.id + "-tab-" + index)
                .attr("target", options.id + "-content-" + index)
                .attr("title", title)
                .bind("click", {
                "self": self
            }, self._onTabClick)
                .hover(

            function() {
                if ($(this).hasClass(activeClass) === false) {
                    $(this).addClass(hoverClass);
                }
            },

            function() {
                $(this).removeClass(hoverClass);
            })
                .appendTo(self.tabListEl.find("ul"));

            // 水平标签不显示提示
            if (options.style >= 10) {
                liEl.attr("title", null);
            }

            // 渲染按钮
            spanEl1.appendTo(liEl);
            spanEl2.appendTo(liEl);

            // 目前只支持顶部tab标签显示关闭按钮
            if (options.style < TAB_LEFT) {
                if (options.closable === true) {
                    spanEl1.bind("click", {
                        "self": self
                    }, self._onTabClose);
                    liEl.bind("contextmenu", {
                        self: self
                    }, self._onTabContextMenu);
                } else {
                    spanEl1.hide();
                }
            }

            // 创建组件容器
            areaEl.attr("id", options.id + "-content-" + index)
                .addClass(tabContentClass)
                .appendTo(this.cardSlideEl || this.cardPanelEl);

            // 隐藏方式不同
            if (options.style < 10) {
                areaEl.css('left', -10000);
            }

            return index;
        },
        /**
         * 关闭一个标签
         * @param {Number} id 要关闭的标签的索引
         */
        _closeTab: function(id) {
            var self = this;
            var isActive = false;
            var liEl = null;
            var target = null;
            var index = id;

            // 取得标签对象
            liEl = self.tabListEl.find("li").eq(index);
            if (liEl.length === 0) {
                return;
            }
            target = liEl.attr("target");

            // 判断是否激活态的标签
            if (liEl.hasClass(activeClass)) {
                isActive = true;
            }

            function __close() {
                // 删除tab标签、options.items中的对象、内容容器
                liEl.remove();
                try {
                    var item = self.options.items[index];
                    self.options.items.splice(index, 1);
                    if ($.isFunction(item.destroy)) {
                        item.destroy();
                    }
                } catch (e) {}
                $("#" + target).remove();

                // 如果关闭的标签是激活态，或只剩一个标签，需要激活下一个标签
                if (isActive || self.options.items.length === 1) {
                    if (self.options.items.length <= index) {
                        index--;

                        // 找到非隐藏状态的下一个
                        while (index >= 0 && self.tabListEl.find("li").hasClass(invisibleClass)) {
                            index--;
                        }
                        if (index < 0) {
                            self.tabListEl.find("li").each(function(idx, obj) {
                                if (index >= 0) {
                                    return;
                                }
                                if (!$(obj).hasClass(invisibleClass)) {
                                    index = idx;
                                }
                            });
                        }
                    }
                    if (index >= 0) {
                        self._activeTab(index);
                    }
                }

                // 调整tabList，计算是否显示滑动按钮
                if (self.options.style < TAB_LEFT) {
                    self._tablistLayoutHorizontal();
                } else {
                    self._tablistLayoutVertical();
                }

            }

            if (!$.isNull(this.handlers) && !$.isNull(this.handlers['tabclosed'])) {
                this.handlers['tabclosed'].call(this.treeEl, new Event('tabclosed'), self.options.items[index]);
            }

            // 启动动画
            if (index < self.options.items.length - 1 && self.options.items.length > 1) {
                liEl.animate({
                    "width": "0px",
                    "opacity": 0
                }, {
                    duration: 200,
                    complete: __close
                });
            } else {
                // 如果是最右侧的标签，不需要动画效果
                __close();
            }
        },
        /**
         * 鼠标滚轮事件，滚动tab标签
         * @param {Object} event 滚轮事件对象
         * @param {Object} data 事件数据，其中delta表示滚动方向和偏移
         * @private
         */
        _wheelScrollList: function(event, data) {
            var delta = data.delta;

            if (delta > 0) {
                if (this.tabLeftEl.hasClass(invisibleClass) === false) {
                    this._onLeftClick();
                }
            } else {
                if (this.tabRightEl.hasClass(invisibleClass) === false) {
                    this._onRightClick();
                }
            }
        },
        /**
         * 移动标签列表
         * @param {String} dir 方向
         * @param {Number} count 移动tab个数
         * @private
         */
        _scrollList: function(dir, count) {
            var self = this;
            var listEl = null;
            var liEl = null;
            var offsetX = 0;
            var offsetY = 0;
            var tabEl = null;
            var i = 0;
            var factor = -1;

            // 待移动的容器
            listEl = self.tabListEl.children("div").first();

            // 设置可见性
            if (dir === "left") {
                tabEl = listEl.find(selectorLIVisible).first();
                while (tabEl.length !== 0 && i < count) {
                    tabEl.attr("visible", "false");
                    tabEl = tabEl.next();
                    i++;
                }
            } else {
                tabEl = listEl.find(selectorLIInvisible).last();
                while (tabEl.length !== 0 && i < count) {
                    tabEl.attr("visible", "true");
                    tabEl = tabEl.prev();
                    i++;
                }
            }

            // 计算列表新的偏移
            liEl = listEl.find(selectorLIVisible).first();
            if (liEl.length > 0) {
                if (this.options.style < TAB_LEFT) {
                    offsetX = liEl.position().left;
                    offsetX = offsetX * factor;
                } else {
                    offsetY = liEl.position().top;
                    offsetY = offsetY * factor;
                }

                // 以Slide动画效果移动容器
                listEl.stop().animate({
                    "left": offsetX + "px",
                    "top": offsetY + "px"
                }, {
                    duration: 200,
                    complete: function() {
                        // 左侧标签需要动态调整按钮状态
                        if (self.options.style >= 10) {
                            self._tablistLayoutVertical();
                        }

                        // 如果按住按钮，持续滚动
                        if (self.leftPushing) {
                            self._onLeftClick();
                        } else if (self.rightPushing) {
                            self._onRightClick();
                        }
                    }
                });

                // 左侧标签，激活的标签的背景跟随移动
                if (self.options.style >= TAB_LEFT) {
                    if (listEl.find("li." + activeClass).length > 0) {
                        this.tabListSliderEl.stop().animate({
                            "top": listEl.find("li." + activeClass).first().position().top + offsetY
                        }, 200);
                    }
                }
            }
        },
        /**
         * @description 切换容器区
         * @param {String} domId 容器的ID
         * @param {String} animation 切换效果
         * @private
         */
        _switchCard: function(domId, animation) {
            var offsetY = 0;

            var target = $("#" + domId);

            // 滑动效果
            if (animation === 'slide') {
                if (this.cardSlideEl === null) {
                    return;
                }

                offsetY = target.position().top;

                // 滑动
                this.cardSlideEl.animate({
                    'top': -offsetY
                }, {
                    duration: 300,
                    easing: "easeOutCirc"
                });
            } else {
                this._error("animation effect is not supported: " + animation);
                return;
            }

            return;
        },
        /**
         * @private
         * @desc 切换tab页
         */
        _onTabClick: function(event) {
            var self = event.data.self,
                me = $(this);

            // 取序号
            var id = 0;
            var elId = me.attr("id");
            self.tabListEl.find("li").each(function(index, item) {
                if ($(item).attr("id") === elId) {
                    id = index;
                }
            });

            // 激活tab
            self._activeTab(id);
        },
        /**
         * 点击左箭头，向右滚动
         * @private
         */
        _onLeftClick: function() {
            var self = this;

            if (self.tabListEl.find(selectorLIInvisible).length > 0) {
                self._scrollList("right", 1);
            }
        },
        /**
         * 点击右箭头，向左滚动
         * @private
         */
        _onRightClick: function() {
            var self = this;
            var visibleWidth = 0;
            var visibleHeight = 0;

            // 计算可见宽度
            self.tabListEl.find(selectorLIVisible).each(function(index, item) {
                visibleWidth += $(item).externalWidth();
                visibleHeight += $(item).externalHeight();
            });

            // 动画隐藏第一个可见元素
            if ((self.options.style < TAB_LEFT && visibleWidth > self.tabListEl.width()) || (self.options.style >= TAB_LEFT && visibleHeight > self.tabListEl.height())) {
                self._scrollList("left", 1);
            }
        },
        /**
         * 显示所有标签列表
         * @param event
         * @private
         */
        _onAllClick: function(event) {
            var self = event.data.self;
            var htmlDiv = "<div><ul></ul></div>";
            var htmlLi = "<li>";
            var menuEl = $(htmlDiv);
            var srcItem = self.tabAllEl;
            var liEl = null;
            var left = 0;
            var top = 0;

            // 添加项目
            self.tabListEl.find("li").each(function(index, item) {
                if ($(item).hasClass(invisibleClass)) {
                    return;
                }

                liEl = $(htmlLi).text($(item).text())
                    .attr("target", item.id)
                    .attr("index", index)
                    .appendTo(menuEl.children("ul"));

                if ($(item).hasClass(activeClass)) {
                    liEl.addClass(activeClass);
                }
            });

            // 样式处理，渲染到页面
            menuEl.addClass(tabAllListClass).appendTo("body");

            // 放置到合适位置
            left = srcItem.offset().left + srcItem.outerWidth() - menuEl.outerWidth();
            top = self.cardPanelEl.offset().top - 5;
            menuEl.css("top", top + "px").css("left", left + "px");

            function itemClicked(event) {
                var target = event.target;

                // 点击菜单背景，不需处理
                if (target === menuEl[0] || target === menuEl.children("ul")[0]) {
                    return;
                }

                // 如果点击菜单项，转到对应的tab页
                menuEl.find("li").each(function(index, item) {
                    if (item === target) {
                        self._activeTab(parseInt($(item).attr("index"), 10));
                    }
                });

                // 关闭菜单
                menuEl.remove();
                $("body").unbind("click", itemClicked);
            }

            // 事件处理
            $("body").bind("click", {
                self: self
            }, itemClicked);

            // 停止冒泡，避免itemClicked立即被调用
            return false;
        },
        /**
         * Tab标签上点击右键弹出上下文菜单
         * @param event
         * @private
         */
        _onTabContextMenu: function(event) {
            var self = event.data.self;
            var liEl = $(event.currentTarget);
            var id = liEl.attr("id");
            var index = -1;
            var tabCount = 0;
            var menuId = self.options.id + "-tab-contextmenu";

            // 确定tab索引
            self.tabListEl.find("li").each(function(idx, item) {
                if ($(item).attr("id") === id) {
                    index = idx;
                }
                tabCount++;
            });

            if (index < 0) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();

            // 操作函数
            // 关闭当前标签
            function __closeCurrent() {
                self._closeTab(index);
            }

            // 关闭其它标签
            function __closeOthers() {
                self._activeTab(index);
                var liList = self.tabListEl.find("li");

                for (index = liList.length - 1; index >= 0; index--) {
                    if ($(liList.get(index)).attr("id") !== id) {
                        self._closeTab(index);
                    }
                }

                // 滚动列表到最开始
                self._scrollList("right", 65535);
            }

            // 关闭所有标签
            function __closeAll() {
                self._activeTab(0);
                var liList = self.tabListEl.find("li");

                // 从右侧关闭
                for (index = liList.length - 1; index >= 0; index--) {
                    self._closeTab(index);
                }

                // 滚动列表到最开始
                self._scrollList("right", 65535);
            }

            // 显示菜单
            var menuItems = [{
                "value": "1",
                "text": Sweet.core.i18n.tab.menu.closeCurrent
            }];

            if (tabCount > 1) {
                menuItems.push({
                    "value": "2",
                    "text": Sweet.core.i18n.tab.menu.closeOthers
                });
                menuItems.push({
                    "value": "3",
                    "text": Sweet.core.i18n.tab.menu.closeAll
                });
            }

            if (!$.isNull(self.tabMenuEl)) {
                try {
                    self.tabMenuEl.destroy();
                } catch (e) {}
            }
            if ($("#" + menuId).length === 0) {
                $("<div>").attr("id", menuId).appendTo("body");
            }

            self.tabMenuEl = new Sweet.menu.Menu({
                renderTo: menuId,
                X: event.clientX,
                Y: event.clientY,
                items: menuItems,
                itemClick: function(evt, data) {
                    if (data.value === "1") {
                        __closeCurrent();
                    } else if (data.value === "2") {
                        __closeOthers();
                    } else if (data.value === "3") {
                        __closeAll();
                    }
                }
            });

            return false;
        },
        /**
         * @private
         * @desc 关闭tab页
         */
        _onTabClose: function(event) {
            var self = event.data.self;

            // 阻止事件冒泡
            event.stopPropagation();

            var liEl = $(event.currentTarget).parent();
            var index = 0;

            // 取得序号
            self.tabListEl.find("li").each(function(i, item) {
                if ($(item).attr("id") === liEl.attr("id")) {
                    index = i;
                }
            });
            // 关闭
            self._closeTab(index);
            return;
        },
        /**
         * 子类实现标准的添加子组件接口
         * @param {Object/Array} items 子组件（列表）
         * @private
         */
        _addItems: function(items) {
            var me = this;
            var i;
            var j;
            var id;
            var item;

            // 添加
            for (i = 0; i < items.length; i++) {
                // 取新增item的id，考虑自定义对象的情况
                if ($.isPlainObject(items[i])) {
                    id = items[i].id;
                } else {
                    id = items[i].options.id;
                }

                // 如果item.options.id重复，取得重复的索引
                for (j = 0; j < me.options.items.length; j++) {
                    item = me.options.items[j];
                    if (item.options.id === id) {
                        break;
                    }
                }

                // 如果发现重复的ID，只需要激活重复的tab页
                if (j < me.options.items.length) {
                    me._activeTab(j);
                } else {
                    me.options.items = me.options.items.concat(items[i]);
                    me._addTab(items[i]);

                    // 激活新增的第一个
                    if (i === 0) {
                        me._activeTab(me.options.items.length - 1);
                    }
                }
            }
        },
        /**
         * @description 动态删除指定索引的tab
         * @param {Array} items 索引
         * @private
         */
        _removeItems: function(items) {
            var me = this;
            var id;
            var i;

            // 如果输入参数为空，删除所有
            if ($.type(items) === "undefined") {
                // 删除所有
                for (i = me.options.items.length - 1; i >= 0; i--) {
                    me._closeTab(i);
                }
                return;
            }

            // 删除指定索引的Tab
            items.sort();
            for (i = items.length - 1; i >= 0; i--) {
                id = items[i];
                if (id >= me.options.items.length) {
                    return;
                }
                this._closeTab(id);
            }
        },
        /**
         * @description tab标签切换事件
         * @param {Number} ptab 切换前的Tab索引
         * @param {Number} tab 切换后的Tab索引
         * @private
         */
        _onTabChange: function(ptab, tab) {
            var me = this;
            var tab1 = null;
            var tab2 = null;
            var tabs = me.options.items;
            var liEl = null;
            var iframe = null;

            if ($.type(ptab) === 'number' && ptab >= 0 && ptab < tabs.length) {
                tab1 = tabs[ptab];
            }
            if ($.type(tab) === 'number' && tab >= 0 && tab < tabs.length) {
                tab2 = tabs[tab];
            }

            // 如果内部是iframe，调用缺省的接口，通知iframe激活或去激活
            if (tab1 !== null && tab1.url) {
                liEl = me.tabListEl.find("li").eq(ptab);
                iframe = $("#" + liEl.attr("target")).children("iframe");
                if (iframe.length > 0) {
                    try {
                        iframe.get(0).contentWindow.tabDeactivated();
                    } catch (e) {}
                }
            }
            if (tab2 !== null && tab2.url) {
                liEl = me.tabListEl.find("li").eq(tab);
                iframe = $("#" + liEl.attr("target")).children("iframe");
                if (iframe.length > 0) {
                    try {
                        iframe.get(0).contentWindow.tabActivated();
                    } catch (e) {}
                }
            }

            // 处理注册的事件回调
            if ($.isNull(me.handlers)) {
                return;
            }

            if ($.isFunction(me.handlers.tabchanged)) {
                me.handlers.tabchanged(tab1, tab2);
            }
        },
        /**
         * @description 绑定注册的事件到Dom
         * @private
         */
        _addListener: function() {
            // 目前只有一个tabchange事件，不需要绑定到具体的Dom对象
        },
        /**
         * @description 解除已绑定的事件
         * @param eventName
         * @private
         */
        _removeListener: function(eventName) {
            eventName = eventName;
            // 目前只有一个tabchange事件，不需要绑定到具体的Dom对象
        },
        /**
         * @description 显示标签
         * @param {String/Number} id 子组件ID
         * @private
         */
        _showItem: function(id) {
            var index = -1;

            // 根据id查找
            if ($.type(id) === 'string') {
                index = this._getIndexById(id);
            } else if ($.type(id) === "number") {
                index = id;
            } else {
                $.error("hideItem指定的参数不正确");
                return;
            }

            if (index < 0 || index >= this.options.items.length) {
                return;
            }

            // 显示
            this.tabListEl.find("li").eq(index).removeClass("invisible");
        },
        /**
         * @description 隐藏标签
         * @param {String/Number} id 子组件ID
         * @private
         */
        _hideItem: function(id) {
            var index = -1;

            // 根据id查找
            if ($.type(id) === 'string') {
                index = this._getIndexById(id);
            } else if ($.type(id) === "number") {
                index = id;
            } else {
                $.error("hideItem指定的参数不正确");
                return;
            }

            if (index < 0 || index >= this.options.items.length) {
                return;
            }

            // 如果要隐藏的tab是激活状态，激活其它tab
            if (index === this.getActiveTab()) {
                if (index > 0) {
                    this.setActiveTab(index - 1);
                } else {
                    this.setActiveTab(index + 1);
                }
            }

            // 隐藏
            this.tabListEl.find("li").eq(index).addClass("invisible");
        },
        /**
         * @description 根据子组件ID，取得索引
         * @param {String} id 组件id
         * @private
         */
        _getIndexById: function(id) {
            var i, item;

            for (i = 0; i < this.options.items.length; i++) {
                item = this.options.items[i];
                if ((item.options && item.options.id === id) || (item.id && item.id === id)) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * @event
         * @description Tab标签切换事件
         * @name Sweet.panel.TabPanel#tabchanged
         * @param {Object} ptab 切换前的tab对象
         * @param {Object} ntab 切换后的tab对象
         */
        tabchanged: function(ptab, ntab) {
            $.log(ptab + "," + ntab);
        }
    });

    /**
     * @description Tab布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建Tab布局容器：
     * var sweetTabPanel = Sweet.panel.TabPanel({
     * });
     */
    Sweet.panel.TabPanel = $.sweet.widgetContainerTabpanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-水平布局容器
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultPanelContentClass = "sweet-panel-content",
        defaultGridPanelClass = "sweet-h-panel",
        defaultGridTableClass = "sweet-h-panel-table",
        uuid = 1000;
    var gridIdPrefix = "sweet-h-panel-";

    $.widget("sweet.widgetContainerHpanel", $.sweet.widgetContainerPanel, /** @lends Sweet.panel.HPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-Hpanel]:",
        type: "HPanel",
        options: /** @lends Sweet.panel.HPanel.prototype*/
        {
            /**
             * 子组件间距
             * @type Number
             * @default 5(px)
             */
            padding: 5,
            /**
             * 扩展子组件，按个数均分布局的宽度，扩展适应布局的高度
             * @type Boolean
             * @default true
             */
            itemExtend: true,
            /**
             * 水平对齐方式
             * @type String
             * @default "left"
             */
            align: Sweet.constants.align.LEFT,
            /**
             * 垂直对齐方式
             * @type String
             * @default "top"
             */
            verticalAlign: Sweet.constants.align.TOP,
            /**
             * 超出范围后的处理方式, hidden/auto
             * @type String
             * @default "hidden"
             */
            overflow: Sweet.constants.overflow.HIDDEN
        },
        _getCanvasObject: function() {
            var me = this,
                result = null,
                opt = me.options,
                len = opt.items ? opt.items.length : 0;
            if (len === 1) {
                result = opt.items[0].getCanvasObject();
            } else if (len > 1) {
                //因为会出横向滚动条，所以要拿table的宽度
                var tableEl = me.renderEl.find("." + defaultGridTableClass),
                    h = tableEl.height(),
                    w = tableEl.width();
                result = $("<canvas>").attr({
                    width: w,
                    height: h
                });
                result = result[0];
                //将容器中的组件按flowpanel来进行布局并整合到result这个canvas上
                var padding = opt.padding,
                    x = 0,
                    y = 0,
                    resultc = result.getContext("2d");
                for (var i = 0; i < len; i++) {
                    var item = opt.items[i],
                        itw = item.getWidth(),
                        ith = item.getHeight(),
                        itemCanvs;
                    itemCanvs = item.getCanvasObject();
                    if ($.isNotNull(itemCanvs) && $.isFunction(itemCanvs.getContext)) {
                        var imgc = itemCanvs.getContext("2d"),
                            imgd = imgc.getImageData(0, 0, itw, ith);
                        //将每一个canvs放在result上，这里要计算坐标位置
                        resultc.putImageData(imgd, x, y);
                        x += itw + (i === len - 1 ? 0 : padding);
                    }
                }
            }
            return result;
        },
        /**
         * @private
         * @descripition 重新计算绘制水平布局
         */
        _doLayout: function() {
            var me = this;
            var options = me.options;
            var columns = options.items.length;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            // 如果折叠或隐藏，不需要处理子组件
            if (me.panelContentEl.is(":hidden")) {
                return;
            }

            // 修正内层容器大小
            var panelWidth = me.panelContentEl.width();
            var panelHeight = me.panelContentEl.height();

            me.gridPanel.externalWidth(panelWidth).externalHeight(panelHeight);
            var gridWidth = me.gridPanel.width();
            var gridHeight = me.gridPanel.height();
            var paddingWidth = (columns - 1) * options.padding;

            // 重新设置子组件大小
            var width = Math.floor((gridWidth - paddingWidth) / columns);
            var height = gridHeight;
            var w;
            var h;

            $.each(options.items, function(index, obj) {
                // 均分子组件，直接设置组件大小
                if (options.itemExtend) {
                    obj.setWH(width, height);
                    return;
                }

                // 如果组件大小为百分比，需要特殊处理
                w = obj._initConfig.width;
                if ($.type(w) === "string" && /\d+%/.test(w)) {
                    w = parseInt(w, 10);
                    w = Math.floor((gridWidth - paddingWidth) * w / 100);
                }

                h = obj._initConfig.height;
                if ($.type(h) === "string" && /\d+%/.test(h)) {
                    h = parseInt(h, 10);
                    h = Math.floor(gridHeight * h / 100);
                }
                obj.setWH(w, h);
            });

            // 子容器间隔
            me.itemsParentEl.children().each(function(index, td) {
                if (index === 0) {
                    $(td).css("padding-left", 0);
                } else {
                    $(td).css("padding-left", me.options.padding);
                }
            });

            // 对齐的处理
            var tableEl = me.gridPanel.children().first();
            if (options.itemExtend === false) {
                // 水平对齐，通过调整Table的位置来实现
                tableEl.width("auto");
                w = tableEl.externalWidth();

                if (options.overflow !== Sweet.constants.overflow.HIDDEN && w > gridWidth) {
                    tableEl.css("margin-left", 0);
                } else if (options.align === Sweet.constants.align.LEFT) {
                    tableEl.css("margin-left", 0);
                } else if (options.align === Sweet.constants.align.RIGHT) {
                    tableEl.css({
                        "position": "absolute",
                        "right": "0"
                    });
                    me.containerEl.css("float", "right"); // 避免BorderPanel中无法居右
                } else if (options.align === Sweet.constants.align.CENTER) {
                    tableEl.css("margin-left", Math.floor((gridWidth - w) / 2));
                    me.containerEl.css("margin", "0 auto"); // 避免BorderPanel中无法居中
                }

                // 垂直对齐，通过设置td的垂直对齐实现
                if (options.verticalAlign === Sweet.constants.align.TOP || options.verticalAlign === Sweet.constants.align.BOTTOM || options.verticalAlign === Sweet.constants.align.MIDDLE) {
                    me.itemsParentEl.children().css("vertical-align", options.verticalAlign);
                }
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;

            if (me.containerEl) {
                this._super();

                var options = me.options,
                    item,
                    items = options.items;

                // 将组件附着到容器内
                me.itemsParentEl.children().each(function(index, obj) {
                    if (index < items.length) {
                        item = items[index];
                        me._renderItem(item, obj.id);
                    }
                });
            }
        },
        /**
         * @private
         * @description 创建水平布局
         */
        _createPanelContent: function() {
            var me = this;
            var options = me.options;
            var columns = options.items.length;
            var gridPanel;
            var tableEl = $("<table>");
            var trEl;
            var tdId;
            me.itemsParentEl = $();

            // 主容器
            me.panelContentEl = $("<div>").addClass(defaultPanelContentClass);

            // 二层容器（内部放一个Table）
            gridPanel = me.gridPanel = $("<div>");
            if (options.overflow !== Sweet.constants.overflow.HIDDEN) {
                gridPanel.css("overflow-x", options.overflow);
            }

            // 循环生成表格布局
            me.itemsParentEl = trEl = $("<tr>");
            for (var j = 0; j < columns; j++) {
                tdId = me._addArea();
            }
            trEl.appendTo(tableEl);

            // 组装起来
            tableEl.addClass(defaultGridTableClass).appendTo(gridPanel);
            gridPanel.addClass(defaultGridPanelClass).appendTo(me.panelContentEl);
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this._removeItems();
            this._super();
        },
        /**
         * @description 创建TD元素，附加到TR中，做为子组件的容器
         * @returns {string} TD元素的ID
         * @private
         */
        _addArea: function() {
            var me = this;
            var tdEl;
            var tdId;

            tdId = gridIdPrefix + me.options.id + "-" + (++uuid);
            tdEl = $("<td>").attr("id", tdId).appendTo(me.itemsParentEl);

            return tdId;
        },
        /**
         * @description 渲染item到指定id的容器中
         * @param {Object} item 子组件对象
         * @param {String} id 子组件容器id
         * @private
         */
        _renderItem: function(item, id) {
            if ($.isFunction(item.render)) {
                item.render(id);
            } else if (!$.isNull(item.html)) {
                $("#" + id).html(item.html);

                // 构造虚拟接口，后续和真实组件对象统一操作
                item.setWH = $.noop;
                item._initConfig = $.objCopy(item);
            } else {
                this._error("item is invalid:" + item);
            }
        },
        /**
         * @description 删除指定索引的item
         * @param {Number} index 索引
         * @private
         */
        _removeItem: function(index) {
            var me = this;
            var item;
            var area;

            if (index < 0 || index >= me.options.items.length) {
                return;
            }

            area = me.itemsParentEl.children().eq(index);
            item = me.options.items[index];

            // 从items列表中删除
            if ($.isFunction(item.destroy)) {
                item.destroy();
            }
            me.options.items.splice(index, 1);

            // 删除子容器
            area.remove();
        },
        /**
         * @description 向布局动态添加子组件
         * @param {Object/Array} items 待添加的子组件
         * @private
         */
        _addItems: function(items) {
            if (!$.isArray(items)) {
                return 0;
            }

            var me = this;
            var item;
            var tdId;
            var i;

            // 渲染所有内容
            for (i = 0; i < items.length; i++) {
                item = items[i];
                if (!$.isNull(item)) {
                    tdId = me._addArea();
                    me._renderItem(item, tdId);

                    // 保存到items中
                    me.options.items.push(item);
                }
            }
        },
        /**
         * @description 从布局动态删除子组件
         * @param {Object/Array} items 待删除的子组件索引
         * @private
         */
        _removeItems: function(items) {
            var me = this;
            var i;
            var index;

            // 如果没有输入参数，删除所有内容
            if (typeof items === 'undefined') {
                items = [];
                for (i = 0; i < me.options.items.length; i++) {
                    items.push(i);
                }
            }

            // 按指定索引删除
            items.sort();
            for (i = items.length - 1; i >= 0; i--) {
                index = items[i];
                me._removeItem(index);
            }
        }
    });

    /**
     * @description 水平布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建水平布局容器：
     * var sweetHPanel = Sweet.panel.HPanel();
     */
    Sweet.panel.HPanel = $.sweet.widgetContainerHpanel;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 容器组件-垂直布局容器
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($) {
    'use strict';

    var defaultPanelContentClass = "sweet-panel-content";
    var defaultItemPanelClass = "sweet-v-panel-item-panel";
    var uuid = 1000;
    var idPrefix = "sweet-v-panel-item-";

    $.widget("sweet.widgetContainerVpanel", $.sweet.widgetContainerPanel, /** @lends Sweet.panel.VPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-Vpanel]:",
        type: "VPanel",
        options: /** @lends Sweet.panel.VPanel.prototype*/
        {
            /**
             * 组件间垂直间距
             * @type {Number} 组件间垂直间距
             * @default 默认5px
             */
            padding: 5
        },
        /**
         * @description 将指定id(此id是组件的配置项中的id属性值)的item移动到VPanel的顶端
         * @param {String} id 需要移动的item的id
         * @public
         */
        moveItemByIdToHeader: function(id) {
            var me = this,
                opt = me.options,
                items = opt.items;
            if ($.isNull(items) || items.length <= 0 || $.isNull(id)) {
                return;
            }

            var itemPanels = me.gridPanelEl.children("div");
            if ($.isNull(itemPanels) || itemPanels.length <= 1) {
                return;
            }
            var headerItemDom = itemPanels.get(0);
            $.each(itemPanels, function(index, obj) {
                var cur = $(itemPanels[index]);
                var it = cur.children("div");
                if (it.length > 0 && $(it[0]).attr("id") === id) {
                    cur.insertBefore(headerItemDom);
                    //同时要调整options.items中的顺序
                    var curItem = null;
                    for (var i = 0; i < items.length; i++) {
                        if (id == items[i].options.id) {
                            curItem = items[i];
                            items.splice(i, 1);
                            break;
                        }
                    }
                    if ($.isNotNull(curItem)) {
                        items.unshift(curItem);
                        me._doLayout();
                    }

                    return true;
                }
            });
        },
        _getCanvasObject: function() {
            var me = this,
                result = null,
                opt = me.options,
                len = opt.items ? opt.items.length : 0;
            if (len === 1) {
                result = opt.items[0].getCanvasObject();
            } else if (len > 1) {
                //因为会出横向滚动条，所以要拿table的宽度
                var vdEl = me.renderEl.find("." + defaultPanelContentClass),
                    containerEl = vdEl.children(),
                    h = containerEl.height(),
                    w = containerEl.width();
                result = $("<canvas>").attr({
                    width: w,
                    height: h
                });
                result = result[0];
                //将容器中的组件按flowpanel来进行布局并整合到result这个canvas上
                var padding = opt.padding,
                    x = 0,
                    y = 0,
                    resultc = result.getContext("2d");
                for (var i = 0; i < len; i++) {
                    var item = opt.items[i],
                        itw = item.getWidth(),
                        ith = item.getHeight(),
                        itemCanvs;
                    itemCanvs = item.getCanvasObject();
                    if ($.isNotNull(itemCanvs) && $.isFunction(itemCanvs.getContext)) {
                        var imgc = itemCanvs.getContext("2d"),
                            imgd = imgc.getImageData(0, 0, itw, ith);
                        //将每一个canvs放在result上，这里要计算坐标位置
                        resultc.putImageData(imgd, x, y);
                        y += ith + (i === len - 1 ? 0 : padding);
                    }
                }
            }
            return result;
        },
        /**
         * @private
         * @descripition 重新计算绘制垂直布局
         */
        _doLayout: function() {
            var me = this;
            var options = me.options;
            var panelWidth;
            var panelHeight;
            var obj;
            var area;
            var width;
            var height;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            // 如果折叠或隐藏，不需要处理子组件
            if (me.panelContentEl.is(":hidden")) {
                return;
            }

            me.gridPanelEl.width("100%").height("auto");
            panelWidth = me.gridPanelEl.width();
            panelHeight = me.panelContentEl.height();

            // 修正容器大小
            var itemPanels = me.gridPanelEl.children("div");
            var maxHeight = 0;
            var maxWidth = 0;

            $.each(itemPanels, function(index, item) {
                obj = options.items[index];
                if (obj) {
                    area = $(item);

                    // 添加间距
                    if (index > 0 && me.options.padding) {
                        area.css("padding-top", me.options.padding);
                    } else {
                        area.css("padding-top", "0px");
                    }

                    // 宽度固定
                    area.externalWidth(panelWidth);

                    // 高度设定，为百分比特殊处理
                    height = obj._initConfig.height;
                    if ($.type(height) === "string" && /\d+%/.test(height)) {
                        height = parseInt(height, 10);
                        height = Math.floor(panelHeight * height / 100);

                        obj.setHeight(height);
                        area.height(height);
                    }

                    // 子组件刷新，子组件的高度需要自行设置
                    if ($.isFunction(obj.doLayout)) {
                        obj.doLayout();
                    }

                    // 记录高度
                    maxHeight += area.externalHeight();
                    width = area.externalWidth();
                    if (width > maxWidth) {
                        maxWidth = width;
                    }
                }

            });

            // 修正容器尺寸
            panelHeight = me.panelContentEl.height();
            if (me.options.height === "auto") {
                me._setHeight(me.getHeight() + maxHeight - panelHeight);
                me.panelContentEl.externalHeight(maxHeight);
            } else {
                // 如果子组件超过容器范围，出现滚动条
                panelWidth = me.panelContentEl.width();
                panelHeight = me.panelContentEl.height();
                if (maxHeight > panelHeight) {
                    if (me.panelContentEl.css("overflow-y") !== "auto") {
                        me.panelContentEl.css("overflow-y", "auto");
                        me._doLayout();
                    }
                } else {
                    me.panelContentEl.css("overflow-y", "hidden");
                }

                if (maxWidth > panelWidth) {
                    if (me.panelContentEl.css("overflow-x") !== "auto") {
                        me.panelContentEl.css("overflow-x", "auto");
                        me._doLayout();
                    }
                } else {
                    me.panelContentEl.css("overflow-x", "hidden");
                }

                // 自定义滚动条
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                this._super();
                var options = me.options,
                    items = options.items;

                // 将组件附着到容器内
                var itemPanels = me.gridPanelEl.children("div");
                $.each(itemPanels, function(index, obj) {
                    me._renderItem(items[index], obj.id);
                });
            }
        },
        /**
         * @private
         * @description 创建垂直布局
         */
        _createPanelContent: function() {
            var me = this;
            var options = me.options;
            var rows = options.items.length;
            me.panelContentEl = $("<div>").addClass(defaultPanelContentClass);
            me.gridPanelEl = $("<div>").appendTo(me.panelContentEl);

            // 循环生成垂直布局
            for (var i = 0; i < rows; i++) {
                me._addItemPanel();
            }
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            // 删除所有子组件
            this._removeItems();

            this._super();
        },
        /**
         * @description 创建一个子组件的容器
         * @returns {string} 创建的容器的id
         * @private
         */
        _addItemPanel: function() {
            var me = this;

            var rowId = idPrefix + me.options.id + "-" + (++uuid);
            var itemPanelEl = $("<div>").attr("id", rowId).addClass(defaultItemPanelClass);
            itemPanelEl.appendTo(me.gridPanelEl);

            return rowId;
        },
        /**
         * @description 把items渲染到指定id的容器内
         * @param {Object} item 子组件
         * @param {String} id 容器的id
         * @private
         */
        _renderItem: function(item, id) {
            var panel = $("#" + id);
            if (panel.length === 0) {
                return;
            }

            if ($.isPlainObject(item)) {
                item.options = $.objCopy(item);
                item._initConfig = $.objCopy(item);

                if (typeof item.html === "string") {
                    panel.html(item.html);
                }
            } else {
                try {
                    item.render(id);
                } catch (e) {}
            }
        },
        /**
         * @description 向布局动态添加子组件
         * @param {Object/Array} items 待添加的子组件
         * @private
         */
        _addItems: function(items) {
            if ($.isNull(items)) {
                return;
            }

            var me = this;
            var options = me.options;
            var id;

            // 保存到列表
            options.items = options.items.concat(items);

            // 添加到布局中
            for (var i = 0; i < items.length; i++) {
                id = me._addItemPanel();
                me._renderItem(items[i], id);
            }
        },
        /**
         * @description 从布局动态删除子组件
         * @param {Object/Array} items 待删除的子组件索引
         * @private
         */
        _removeItems: function(items) {
            var me = this;
            var allAreas = me.gridPanelEl.children("div");
            var item;
            var area;
            var id;

            // 如果输入参数为空，删除所有内容
            if ($.isNull(items)) {
                $.each(me.options.items, function(index, item) {
                    if ($.isFunction(item.destroy)) {
                        item.destroy();
                    }
                });
                me.options.items = [];
                me.gridPanelEl.empty();

                return;
            }

            // 按指定索引删除
            items.sort();
            for (var i = items.length - 1; i >= 0; i--) {
                id = items[i];
                if (id >= me.options.items.length) {
                    continue;
                }

                area = allAreas.eq(id);
                item = me.options.items[id];

                // 销毁
                if ($.isFunction(item.destroy)) {
                    item.destroy();
                }

                me.options.items.splice(id, 1);
                area.remove();
            }
        }
    });

    /**
     * @description 垂直布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建表格布局容器：
     * var sweetHPanel = Sweet.panel.VPanel({
     * });
     */
    Sweet.panel.VPanel = $.sweet.widgetContainerVpanel;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 容器组件-portal
 * 2013/2/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var uuid = 0,
        sweetPortalColumnClass = "sweet-portal-column",
        sweetPortalPlaceHolderClass = "sweet-portal-place-holder",
        sweetProtalBlockClass = "sweet-portal-column-block";

    $.widget("sweet.widgetContainerPortal", $.sweet.widgetContainer, /** @lends Sweet.container.Portal.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-portal]:",
        type: "Portal",
        options: /** @lends Sweet.container.Portal.prototype*/
        {
            /**
             * 列数设置
             * @type {Number}
             * @default 1
             */
            columns: 1,
            /**
             * 容器内组件
             * @type {Array}
             */
            items: []
        },
        eventNames: {
            "ds_node_minimize": "子组件最小化事件",
            "ds_node_maximize": "子组件最大化事件",
            "ds_node_close": "子组件关闭事件"
        },
        _addEventHandler: function() {
            var me = this;
            $(me.containerEl).on('ds_node_minimize', function() {}).on('ds_node_maximize', function() {}).on('ds_node_close', function() {});
        },
        /**
         * @private
         * @description 重绘组件
         */
        _doLayout: function() {
            var me = this;
            //渲染前禁止进入
            if (!me.rendered) {
                return;
            }
            var options = me.options,
                columns = options.columns,
                widgetWidth,
                contentWidth,
                contentHeight,
                maxHeight = 0,
                maxWidth = 0;

            contentWidth = me.containerEl.width();
            contentHeight = me.containerEl.height();
            widgetWidth = Math.floor((contentWidth - 6 * columns - 20) / columns);

            $.each(me.columnEls, function(index, obj) {
                obj.css({
                    "padding": '5px',
                    "width": widgetWidth
                });
                if (obj.externalHeight() > maxHeight) {
                    maxHeight = obj.externalHeight();
                }
                maxWidth += obj.externalWidth();
            });

            $.each(me.widgets, function(index, obj) {
                obj.widgetContainer.css({
                    'margin-bottom': '5px',
                    'width': '100%',
                    'height': '300px'
                });
            });

            if (maxHeight > contentHeight) {
                me.containerEl.css("overflow-y", "auto");
            } else {
                me.containerEl.css("overflow-y", "hidden");
            }

            if (maxWidth > contentWidth) {
                me.containerEl.css("overflow-x", "auto");
            } else {
                me.containerEl.css("overflow-x", "hidden");
            }

        },
        /**
         * @private
         * @description 组件渲染
         */
        _widgetRender: function() {
            var me = this;

            for (var i = 0; i < me.columnEls.length; i++) {
                me.columnEls[i].appendTo(me.containerEl);
            }

            $("." + sweetPortalColumnClass).sortable({
                connectWith: "." + sweetPortalColumnClass,
                placeholder: sweetPortalPlaceHolderClass,
                forcePlaceholderSize: true,
                forceHelperSize: true
            });

            $("." + sweetPortalColumnClass).disableSelection();
            me._renderItems();
            me._addEventHandler();
        },
        /**
         * @private
         * @description 创建Portal容器
         */
        _createContainer: function() {
            var me = this,
                options = me.options,
                items = options.items;
            me.items = items;
            me._createColumnEls();
            me._createItems(items);
        },
        //column容器需要优先创建
        _createColumnEls: function() {
            var me = this,
                options = me.options,
                columns = options.columns,
                columnEl,
                columnEls = [];

            //保证最少存在一个column
            if (columns <= 0) {
                columns = 1;
            }
            for (var i = 0; i < columns; i++) {
                columnEl = $("<div>").addClass(sweetPortalColumnClass);
                columnEls.push(columnEl);
            }
            me.columnEls = columnEls;
        },
        _createItems: function(items) {
            if ($.isNull(items)) {
                return;
            }
            var me = this,
                options = me.options,
                columnEl,
                columnEls = me.columnEls,
                columnLength = me.columnEls.length,
                itemLength = items.length,
                widget,
                widgets = [],
                nodeList = [],
                xIndex = -1;

            options.items = options.items.concat(items);
            for (var i = 0; i < itemLength; i++) {
                //需要考虑到指定columnIndex与rowIndex的情况
                widget = items[i];
                if (widget.options.hasOwnProperty('columnIndex')) {
                    xIndex = widget.options.columnIndex;
                }
                //如果不存在xIndex或yIndex，按照顺序摆放
                //避免xIndex数据不合法的情况，在这里做校验
                if (-1 === xIndex) {
                    xIndex = i % columnLength;
                } else {
                    xIndex = xIndex >= columnLength ? columnLength - 1 : xIndex;
                }
                //nodeList用于临时保存节点
                if (!nodeList[xIndex]) {
                    nodeList[xIndex] = [];
                }
                nodeList[xIndex].push(widget);
            }
            //如果存在下标不连续的情况，需要下标前移
            for (var j = 0; j < columnLength; j++) {
                //避免出现列中不存在元素的情况
                if (!nodeList[j]) {
                    continue;
                }
                //默认使用的排序方法
                nodeList[j].sort(me._blockSortFunction);
                columnEl = columnEls[j];
                for (var k = 0; k < nodeList[j].length; k++) {
                    var item = {};
                    item.id = 'sweet-container-portal-' + uuid++;
                    item.widgetContainer = $('<div>').addClass(sweetProtalBlockClass);
                    item.widgetContainer.attr('id', item.id);
                    item.widget = nodeList[j][k];
                    columnEl.append(item.widgetContainer);
                    widgets.push(item);
                }
            }
            me.widgets = widgets;
        },
        addItems: function(items) {
            this.items = items;
            this._createItems(items);
            this._renderItems();
        },
        /**
         * 有可能替换排序规则，作为方法开放
         * 默认排序方法：
         *  如果子组件存在columnIndex和rowIndex,按照rowIndex进行排序
         *  xIndex有可能出现异常数据，导致同一个column中存在不同columnIndex的元素，把columnIndex大的放置在后方
         */
        _blockSortFunction: function(obj1, obj2) {
            var result = 0;
            //处理数据不完整的情况
            if (obj1.options.hasOwnProperty('rowIndex') && obj1.options.hasOwnProperty('columnIndex') && obj2.options.hasOwnProperty('rowIndex') && obj2.options.hasOwnProperty('columnIndex')) {
                var obj1Row = obj1.options.rowIndex,
                    obj1Column = obj1.options.columnIndex,
                    obj2Row = obj2.options.rowIndex,
                    obj2Column = obj2.options.columnIndex;

                //先比较Column
                if (obj1Column === obj2Column) {
                    if (obj1Row > obj2Row) {
                        return 1;
                    } else if (obj1Row < obj2Row) {
                        return -1;
                    }
                } else {
                    if (obj1Column > obj2Column) {
                        return 1;
                    } else if (obj1Column < obj2Column) {
                        return -1;
                    }
                }
            }
            return result;
        },
        _renderItems: function() {
            var me = this;
            $.each(me.widgets, function(index, obj) {
                obj.widget.render(obj.id);
            });
        }
    });

    /**
     * @description portal容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * </pre>
     * @example
     * 创建向导布局容器：
     * var sweetHPanel = Sweet.container.Portal({
     * });
     */
    Sweet.container.Portal = $.sweet.widgetContainerPortal;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 容器组件-向导布局容器
 * 2013/2/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var leftElSelectedClass = "sweet-wizard-left-selected",
        rightElClass = "sweet-wizard-right",
        rightElSelectedClass = "sweet-wizard-right-selected",
        stepElClass = "sweet-wizard-step-unselected",
        stepElSelectedClass = "sweet-wizard-step-selected",
        lineElClass = "unselected",
        lineElSelectedClass = "selected",
        textSpanClass = "sweet-wizard-text-unselected",
        textSpanSelectedClass = "sweet-wizard-text-selected",
        suffixBottom = "-wizard-bottom",
        suffixContent = "-wizard-content",
        compactClass = "sweet-wizard-compact",
        // 按钮类型 1：上一步 2：下一步 3：完成 4: 保存
        buttonType = [1, 2, 3, 4];

    $.widget("sweet.widgetContainerWizardpanel", $.sweet.widgetContainerPanel,
    /** @lends Sweet.container.WizardPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-wizardpanel]:",
        type: "WizardPanel",
        eventNames: /** @lends Sweet.container.WizardPanel.prototype*/
        {
            /**
             * @event
             * @description 点击上一步事件
             */
            prevClick: "上一步事件",
            /**
             * @event
             * @description 点击下一步事件
             */
            nextClick: "下一步事件",
            /**
             * @event
             * @description 点击完成事件
             */
            doneClick: "完成事件",
            /**
             * @event
             * @description 点击保存事件
             */
            saveClick: "保存事件"
        },
        options: /** @lends Sweet.container.WizardPanel.prototype*/
        {
            /**
             * 注册监听，包含上一步、下一步、完成按钮点击事件
             * @type {Object}
             */
            listeners: null,
            /**
             * 导航面板填充内容，格式为[{header: 'example', item: Object}]
             * @type {Array}
             */
            items: [],
            /**
             * @description 是否显示title的tip提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * @description 在地市汇聚特性中加入保存按钮，需要配置此属性为true才有效，默认无
             * @type boolean
             * @default false
             */
            saveBtn: false,
            /**
             * 当点击按钮后的回调函数
             * @type Function
             * @default null
             */
            afterShow: null,
            /**
             * 是否以简化方式显示步骤名称。这种方式下可以减少步骤名占用的空间
             * @type Boolean
             * @default false
             */
            compact: false
        },
        /**
         * @public
         * @description 设置当前步骤
         * @param {Number} step 步骤编号
         */
        setCurrentStep: function(step) {
            if ($.isNull(step) || step < 0 || step > this.maxStep) {
                return;
            }

            if (step === this.currentStep) {
                return;
            }

            // 模拟点击。注：不会触发合法性校验
            while (this.currentStep !== step) {
                if (this.currentStep > step) {
                    this._onPrevClick(this);
                } else {
                    this._onNextClick(this);
                }
            }

            // 刷新按钮状态
            this._refreshButtonStatus();
        },
        /**
         * @public
         * @description 返回保存按钮对象
         * @returns {Object} savebutton 返回保存按钮
         */
        getSaveButton: function() {
            var me = this;
            //地市汇聚特性需要添加保存按钮
            if (me.options.saveBtn && me.saveButtonEl) {
                return me.saveButtonEl;
            }
            return null;
        },
        /**
         * @private
         * @descripition 重新计算绘制向导布局
         */
        _doLayout: function() {
            var me = this;
            var remainWidth;
            var lineWidth;
            var textElLeft;
            var textElWidth;
            var textSapnElWidth;
            var contentHeight;
            var textHeight;
            var item;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            var options = me.options;
            var length = options.items.length;
            var containerWidth = me.panelContentEl.width();
            var containerHeight = me.panelContentEl.height();
            var leftElWidth = me.leftEl.width();
            var rightElWidth = me.rightEl.width();
            var picSpanWidth = me.wizardEl.find("li > span").width();
            var wizardHeight = me.wizardEl.height();
            var bottomHeight = me.bottomEl.height();

            // 计算直线条宽度
            remainWidth = containerWidth - leftElWidth - rightElWidth - picSpanWidth * length;
            lineWidth = remainWidth / (2 * (length + 1));
            me.wizardEl.find("." + lineElClass).externalWidth(lineWidth);
            me.wizardEl.find("." + lineElSelectedClass).externalWidth(lineWidth);

            // 计算导航文本描述宽度
            textElLeft = leftElWidth + lineWidth;
            textElWidth = containerWidth - leftElWidth - rightElWidth - 2 * lineWidth + 2;
            textSapnElWidth = 2 * lineWidth + picSpanWidth;
            me.textEl.css("left", textElLeft)
                .externalWidth(textElWidth)
                .children()
                .externalWidth(textSapnElWidth);

            // 计算内容区宽度、高度
            textHeight = options.compact === true ? 0 : me.textEl.height();
            contentHeight = containerHeight - wizardHeight - textHeight - bottomHeight - 10;
            me.contentEl.externalWidth(containerWidth).externalHeight(contentHeight);

            // 内容区域子容器
            me.contentEl.children("div").each(function(index, item) {
                $(item).externalWidth(me.contentEl.width()).externalHeight(me.contentEl.height());
            });

            // 计算底部按钮区宽度
            me.bottomEl.externalWidth(containerWidth);

            // 刷新子组件布局（对于宽高设置为绝对值的子组件，这里的调用是必需的）
            for (var i = 0; i < this.options.items.length; i++) {
                item = this.options.items[i].item;
                if (!$.isNull(item) && $.isFunction(item.doLayout)) {
                    item.doLayout();
                }
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this,
                id, contentId, options = me.options,
                items = options.items,
                length = items.length;
            if (me.containerEl) {
                id = me.bottomEl.attr("id");
                me.panelContentEl.appendTo(me.containerEl);
                me.doneButtonEl.render(id);
                me.nextButtonEl.render(id);
                me.prevButtonEl.render(id);
                if (options.saveBtn && me.saveButtonEl) {
                    me.saveButtonEl.render(id);
                }
                for (var i = 0; i < length; i++) {
                    contentId = me.contentEls[i].attr("id");
                    items[i].item.render(contentId);
                }
                me._selectedStepAndText(me.currentStep);

                // 刷新按钮状态
                me._refreshButtonStatus();
            }
        },
        /**
         * @private
         * @description 创建向导布局
         */
        _createPanelContent: function() {
            var me = this,
                options = me.options,
                items = options.items,
                length = items.length,
                panelContentEl = me.panelContentEl = $("<div>"),
                wizardElClass = "sweet-wizard",
                ulElClass = "sweet-wizard-step",
                textElClass = "sweet-wizard-text",
                contentElClass = "sweet-wizard-content",
                contentElInnerClass = "sweet-wizard-content-inner",
                bottomElClass = "sweet-wizard-bottom",
                wizardEl = me.wizardEl = $("<div>"),
                leftEl = me.leftEl = $("<span>"),
                rightEl = me.rightEl = $("<span>"),
                ulEl = $("<ul>"),
                stepEl,
                stepEls = {},
                textEl = me.textEl = $("<div>"),
                textSpanEl,
                textSpanEls = {},
                contentEl = me.contentEl = $("<div>"),
                contentEls = {},
                bottomEl = me.bottomEl = $("<div>").attr("id", options.id + suffixBottom);

            // 如果是简化模式，设置额外的类名
            if (options.compact === true) {
                panelContentEl.addClass(compactClass);
            }

            leftEl.addClass(leftElSelectedClass).appendTo(wizardEl);
            $("<li>").addClass(lineElSelectedClass).appendTo(ulEl);
            for (var i = 0; i < length; i++) {
                $("<li>").addClass(lineElClass).appendTo(ulEl);
                stepEl = me._createStepEl(i + 1);
                stepEl.appendTo(ulEl);
                $("<li>").addClass(lineElClass).appendTo(ulEl);
                textSpanEl = $("<span>").addClass(textSpanClass).appendTo(textEl).html(items[i].header);
                if (options.tip) {
                    textSpanEl.attr("title", items[i].header);
                }
                // 导航图
                stepEls[i] = stepEl;
                // 导航文字
                textSpanEls[i] = textSpanEl;
                // 导航内容
                contentEls[i] = $("<div>").attr("id", options.id + "-" + i + "-" + suffixContent)
                    .addClass(contentElInnerClass)
                    .hide()
                    .appendTo(contentEl);
            }
            $("<li>").addClass(lineElClass).appendTo(ulEl);
            ulEl.addClass(ulElClass).appendTo(wizardEl);
            rightEl.addClass(rightElClass).appendTo(wizardEl);
            // 向导条
            wizardEl.addClass(wizardElClass).appendTo(panelContentEl);
            // 向导文字描述
            textEl.addClass(textElClass).appendTo(panelContentEl);
            // 内容
            contentEl.addClass(contentElClass).appendTo(panelContentEl);
            // 底部按钮
            bottomEl.addClass(bottomElClass).appendTo(panelContentEl);

            me.prevButtonEl = new Sweet.form.Button({
                width: 80,
                height: 35,
                value: {
                    value: "prev",
                    text: Sweet.core.i18n.container.prev
                },
                click: function() {
                    me._onClick(me, buttonType[0]);
                }
            });
            me.nextButtonEl = new Sweet.form.Button({
                width: 80,
                height: 35,
                value: {
                    value: "next",
                    text: Sweet.core.i18n.container.next
                },
                click: function() {
                    me._onClick(me, buttonType[1]);
                }
            });
            me.doneButtonEl = new Sweet.form.Button({
                width: 80,
                height: 35,
                value: {
                    value: "done",
                    text: Sweet.core.i18n.container.done
                },
                disabled: true,
                click: function() {
                    me._onClick(me, buttonType[2]);
                }
            });
            //地市汇聚特性需要添加保存按钮
            if (me.options.saveBtn) {
                me.saveButtonEl = new Sweet.form.Button({
                    width: 80,
                    height: 35,
                    value: {
                        value: "save",
                        text: Sweet.core.i18n.container.save
                    },
                    click: function() {
                        me._onClick(me, buttonType[3]);
                    }
                });
            }

            me.stepEls = stepEls;
            me.textSpanEls = textSpanEls;
            me.contentEls = contentEls;
            // 默认0，也就是第一步
            me.currentStep = 0;
            me.maxStep = length - 1;
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            // 删除所有标签和子组件
            var item;
            for (var i = 0; i < this.options.items.length; i++) {
                item = this.options.items[i];
                if ($.isFunction(item.destroy)) {
                    try {
                        item.destroy();
                    } catch (e) {
                        this._error(e);
                    }
                }
            }
            this.options.items = [];

            this._super();
        },
        /**
         * @private
         * @description 创建步骤展示标签
         * @param {Number/String} step 步骤
         */
        _createStepEl: function(step) {
            var liEl = $("<li>"),
                spanEl = $("<span>").html(step);
            spanEl.addClass(stepElClass).appendTo(liEl);
            return liEl;
        },
        /**
         * @private
         * @description 注册按钮监听事件
         * @param {Object} me 导航组件对象
         * @param {Number} type 按钮类别，1：上一步 2：下一步 3：完成
         */
        _onClick: function(me, type) {
            var options = me.options,
                eventType;
            // 处理绑定事件和注册监听
            if (buttonType[0] === type) {
                eventType = "prevClick";
            } else if (buttonType[1] === type) {
                eventType = "nextClick";
            } else if (buttonType[2] === type) {
                eventType = "doneClick";
            } else if (buttonType[3] === type) {
                eventType = "saveClick";
            } else {
                me._error("Unsupport type. Not equal 1 or 2 or 3. Type=" + type);
                return;
            }

            // 判断回调结果
            var result1 = true,
                result2 = true;
            if (options.listeners && "function" === typeof options.listeners[eventType]) {
                result1 = options.listeners[eventType].call(this, [me.currentStep + 1, me.maxStep + 1]);
            }
            if (me.handlers && "function" === typeof me.handlers[eventType]) {
                result2 = me.handlers[eventType].call(this, [me.currentStep + 1, me.maxStep + 1]);
            }
            if (!result1 || !result2) {
                return;
            }

            if (buttonType[0] === type) {
                me._onPrevClick(me);
            } else if (buttonType[1] === type) {
                me._onNextClick(me);
                if (options.afterShow && $.isFunction(options.afterShow)) {
                    options.afterShow([me.currentStep + 1, me.maxStep + 1]);
                }
            } else if (buttonType[2] === type) {
                me._onDoneClick(me);
            }
        },
        /**
         * @private
         * @description 点击下一步按钮时触发
         * @param {Object} me 导航组件对象
         */
        _onPrevClick: function(me) {
            // 判断是否是第一步
            if (0 === me.currentStep) {
                return;
            }
            me._unSelectedStepAndText(me.currentStep);
            me.currentStep -= 1;

            // 刷新按钮状态
            me._refreshButtonStatus();
        },
        /**
         * @private
         * @description 点击下一步按钮时触发
         * @param {Object} me 导航组件对象
         */
        _onNextClick: function(me) {
            // 判断是否是最后一步
            if (me.currentStep === me.maxStep) {
                return;
            }
            me.currentStep += 1;
            me._selectedStepAndText(me.currentStep);

            // 刷新按钮状态
            me._refreshButtonStatus();
        },
        /**
         * @private
         * @description 导航条、文字选中
         * @param {Number} num 序号
         */
        _selectedStepAndText: function(num) {
            var me = this,
                stepEl,
                textSpanEl;

            stepEl = me.stepEls[num];
            textSpanEl = me.textSpanEls[num];
            stepEl.prev().removeClass(lineElClass).addClass(lineElSelectedClass);
            stepEl.children().removeClass(stepElClass).addClass(stepElSelectedClass);
            stepEl.next().removeClass(lineElClass).addClass(lineElSelectedClass);
            textSpanEl.removeClass(textSpanClass).addClass(textSpanSelectedClass);

            if (0 !== num) {
                me.contentEls[num - 1].hide();
            }
            me.contentEls[num].show();
            me.options.items[num].item.show();

            // 如果是最后一步
            if (me.currentStep === me.maxStep) {
                stepEl.next().next().removeClass(lineElClass).addClass(lineElSelectedClass);
                me.rightEl.removeClass(rightElClass).addClass(rightElSelectedClass);
            }
        },
        /**
         * @private
         * @description 导航条、文字去选中
         * @param {Number} num 序号
         */
        _unSelectedStepAndText: function(num) {
            var me = this,
                stepEl,
                textSpanEl;
            stepEl = me.stepEls[num];
            textSpanEl = me.textSpanEls[num];
            stepEl.prev().removeClass(lineElSelectedClass).addClass(lineElClass);
            stepEl.children().removeClass(stepElSelectedClass).addClass(stepElClass);
            stepEl.next().removeClass(lineElSelectedClass).addClass(lineElClass);
            textSpanEl.removeClass(textSpanSelectedClass).addClass(textSpanClass);
            me.contentEls[num].hide();
            if (num > 0) {
                me.contentEls[num - 1].show();
                me.options.items[num - 1].item.show();
            }

            // 如果是最后一步
            if (me.currentStep === me.maxStep) {
                stepEl.next().next().removeClass(lineElSelectedClass).addClass(lineElClass);
                me.rightEl.removeClass(rightElSelectedClass).addClass(rightElClass);
            }
        },
        /**
         * @description 根据当前步骤号，刷新按钮状态
         * @private
         */
        _refreshButtonStatus: function() {
            var me = this;
            var step = me.currentStep;

            // 缺省值
            me.prevButtonEl.setDisabled(false);
            me.nextButtonEl.setDisabled(false);
            me.doneButtonEl.setDisabled(false);

            // 第一页
            if (step === 0) {
                me.prevButtonEl.setDisabled(true);
                me.doneButtonEl.setDisabled(true);
            }

            // 最后一页
            else if (step === me.maxStep) {
                me.nextButtonEl.setDisabled(true);
            }

            // 中间页
            else {
                me.doneButtonEl.setDisabled(true);
            }
        },
        /**
         * @event
         * @description 上一步事件
         * @name Sweet.panel.WizardPanel#prevClick
         * @param {Array} step 步骤信息[current, max]
         */
        prevClick: function(step) {
            $.log(step);
        },
        /**
         * @event
         * @description 下一步事件
         * @name Sweet.panel.WizardPanel#nextClick
         * @param {Array} step 步骤信息[current, max]
         */
        nextClick: function(step) {
            $.log(step);
        },
        /**
         * @event
         * @description 完成事件
         * @name Sweet.panel.WizardPanel#doneClick
         * @param {Array} step 步骤信息[current, max]
         */
        doneClick: function(step) {
            $.log(step);
        }
    });

    /**
     * @description 向导布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建向导布局容器：
     * var sweetHPanel = Sweet.container.WizardPanel({
     * });
     */
    Sweet.panel.WizardPanel = $.sweet.widgetContainerWizardpanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-流式布局容器
 * 2013/2/27
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultPanelContentClass = "sweet-panel-flow",
        defaultPanelContentLiClass = "sweet-panel-flow-li",
        defaultPanelContentLeftClass = "sweet-panel-flow-left",
        defaultPanelContentRightClass = "sweet-panel-flow-right",
        uuid = 1000;
    var FlowIdPrefix = "sweet-panel-flow-";

    $.widget("sweet.widgetContainerFlowpanel", $.sweet.widgetContainerPanel,
    /** @lends Sweet.panel.FlowPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-flowpanel]:",
        type: "FlowPanel",
        options: /** @lends Sweet.panel.FlowPanel.prototype*/
        {
            /**
             * 组件对齐方式。[left/right]
             * @param {String}
             * @default left
             */
            align: Sweet.constants.align.LEFT,
            /**
             * 组件垂直对齐方式 [top/middle/bottom]
             * @type String
             * @default "middle"
             */
            verticalAlign: Sweet.constants.align.TOP,
            /**
             * 子组件间距
             * @type Number
             * @default 5(px)
             */
            padding: 5,
            /**
             * 组件高度。为"auto"时，高度适应子组件高度
             * @type Number/String
             * @default "auto"
             */
            height: "auto"
        },
        _getCanvasObject: function() {
            var me = this,
                result = null,
                opt = me.options,
                len = opt.items ? opt.items.length : 0;
            if (len === 1) {
                result = opt.items[0].getCanvasObject();
            } else if (len > 1) {
                var h = me.renderEl.height(),
                    w = me.renderEl.width();
                result = $("<canvas>").attr({
                    width: w,
                    height: h
                });
                result = result[0];
                //将容器中的组件按flowpanel来进行布局并整合到result这个canvas上
                var padding = opt.padding,
                    x = 0,
                    y = 0,
                    resultc = result.getContext("2d");
                for (var i = 0; i < len; i++) {
                    var item = opt.items[i],
                        itw = item.getWidth(),
                        ith = item.getHeight(),
                        itemCanvs;
                    itemCanvs = item.getCanvasObject();
                    if ($.isNotNull(itemCanvs) && $.isFunction(itemCanvs.getContext)) {
                        var imgc = itemCanvs.getContext("2d"),
                            imgd = imgc.getImageData(0, 0, itw, ith);
                        //flowpanel中，大于容器宽度后，另起一行
                        if (x > w) {
                            x = 0;
                            y = padding + ith;
                        }
                        //将每一个canvs放在result上，这里要计算坐标位置
                        resultc.putImageData(imgd, x, y, itw, ith);
                        x += itw;
                    }
                }
            }
            return result;
        },
        /**
         * @private
         * @descripition 重新计算流式布局
         */
        _doLayout: function() {
            var me = this,
                childElHeight = 0,
                paddingTop,
                allLiEl;
            var width;
            var height;
            var liEl;
            var panelWidth;
            var panelHeight;
            var ulEl;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            this._super();

            // 如果折叠或隐藏，不需要处理子组件
            if (me.panelContentEl.is(":hidden")) {
                return;
            }

            // 如果没有子组件，不再处理
            if (!me.itemsParentEl || me.options.items.length === 0) {
                return;
            }
            allLiEl = me.panelContentEl.find(">ul>li");
            if (allLiEl.length === 0) {
                return;
            }

            // 如果容器宽度为0,当前不显示，不需要处理
            if (me.panelContentEl.width() === 0) {
                return;
            }

            // 当前Panel大小
            panelWidth = me.panelContentEl.width();
            panelHeight = me.panelContentEl.height();

            // 初始化子组件的上Padding
            allLiEl.each(function(index, item) {
                liEl = $(item);
                liEl.css("padding", 0);

                // 如果子组件的大小设置为百分比，要应用到Li节点上
                width = me.options.items[index]._initConfig.width;
                height = me.options.items[index]._initConfig.height;
                if ($.type(width) === "string" && /\d+%/.test(width)) {
                    width = parseInt(width, 10);
                    width = Math.floor(width * panelWidth / 100);
                }

                if ($.type(height) === "string" && /\d+%/.test(height)) {
                    height = parseInt(height, 10);
                    height = Math.floor(height * panelHeight / 100);
                }
                me.options.items[index].setWH(width, height);

                // 添加间距
                if (width !== panelWidth && index !== allLiEl.length - 1) {
                    liEl.css("padding-right", me.options.padding);
                }
            });

            // 开始处理可见的子组件
            allLiEl = me.panelContentEl.find(">ul>li:visible");
            if (allLiEl.length === 0) {
                return;
            }
            var top = allLiEl.first().position().top;

            // 折行的子组件设置padding-top
            allLiEl.each(function(index, item) {
                if ($(item).position().top !== top) {
                    // 换行后，设置配置的Padding
                    $(item).css("padding-top", me.options.padding);
                }
            });

            // 设置Padding后，重新计算子组件高度
            ulEl = me.panelContentEl.find(">ul");
            childElHeight = ulEl.height();

            // 子组件高度已经超过FlowPanel的可用区域，调整容器高度为实际高度
            var containerHeight = me.panelContentEl.height();
            if (childElHeight !== containerHeight && me.options.height === "auto") {
                me._setHeight(me.getHeight() + childElHeight - containerHeight);
                me._super();
            } else if (childElHeight < containerHeight && me.options.height !== "auto") {
                // 容器高度足够，子组件对齐
                if (me.options.verticalAlign === Sweet.constants.align.MIDDLE) {
                    paddingTop = Math.floor((containerHeight - childElHeight) / 2);
                } else if (me.options.verticalAlign === Sweet.constants.align.BOTTOM) {
                    paddingTop = containerHeight - childElHeight;
                } else {
                    paddingTop = 0;
                }
                ulEl.css("padding-top", paddingTop);
            }
        },
        /**
         * 动态添加项目
         * @param items
         * @private
         */
        _addItems: function(items) {
            var me = this;
            var options = me.options;
            var itemsParentEl = me.itemsParentEl;
            var tempId = "";
            var liEl = null;
            var ulEl = me.panelContentEl.children("ul");
            var item;

            // 记录到列表中
            me.options.items = me.options.items.concat(items);

            // 创建容器并插入流式布局
            for (var i = 0; i < items.length; i++) {
                item = items[i];

                // 如果是PlainObject，转一下结构，便于后续统一处理
                if ($.isPlainObject(item) && $.isNull(item.options)) {
                    item.options = $.objClone(item);
                }

                tempId = FlowIdPrefix + options.id + "-" + (++uuid);
                liEl = $("<li>").attr("id", tempId)
                    .addClass(defaultPanelContentLiClass)
                    .appendTo(ulEl);
                itemsParentEl.push({
                    "id": tempId,
                    "parentEl": liEl
                });

                // 渲染
                item.render(tempId);
            }
        },
        /**
         * @description 从布局动态删除子组件
         * @param {Object/Array} items 待删除的子组件索引
         * @private
         */
        _removeItems: function(items) {
            var me = this;
            var i;
            var item;
            var liEl;
            var ulEl;
            var index;

            ulEl = me.panelContentEl.children("ul");

            // 如果输入为空，表示删除所有组件。构建一个全索引
            if ($.type(items) === 'undefined') {
                items = [];
                for (i = 0; i < me.options.items.length; i++) {
                    items.push(i);
                }
            }

            // 删除内容
            items.sort();
            for (i = items.length - 1; i >= 0; i--) {
                index = items[i];

                item = me.options.items[index];
                liEl = ulEl.children().eq(index);

                // 销毁子组件
                if (item && $.isFunction(item.destroy)) {
                    item.destroy();
                }
                me.options.items.splice(index, 1);

                // 删除子容器
                liEl.remove();
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                this._super();

                var options = me.options,
                    item,
                    items = options.items;

                // 将组件附着到容器内
                $.each(me.itemsParentEl, function(index, obj) {
                    item = items[index];

                    // 如果是PlainObject，转一下结构，便于后续统一处理
                    if ($.isPlainObject(item) && $.isNull(item.options)) {
                        item.options = $.objClone(item);
                    }

                    item.render(obj.id);
                });
            }
        },
        /**
         * @private
         * @description 创建流式布局
         */
        _createPanelContent: function() {
            var me = this,
                options = me.options,
                length = options.items.length,
                panelContentEl = me.panelContentEl = $("<div>").addClass(defaultPanelContentClass),
                ulEl = $("<ul>"),
                liEl,
                itemsParentEl = [],
                alignClass;

            if (Sweet.constants.align.LEFT === options.align) {
                alignClass = defaultPanelContentLeftClass;
            } else if (Sweet.constants.align.RIGHT === options.align) {
                alignClass = defaultPanelContentRightClass;
            } else {
                alignClass = defaultPanelContentLeftClass;
            }

            // 循环生成流式布局
            for (var i = 0, tempId; i < length; i++) {
                tempId = FlowIdPrefix + options.id + "-" + (++uuid);
                liEl = $("<li>").attr("id", tempId)
                    .addClass(defaultPanelContentLiClass)
                    .appendTo(ulEl);
                itemsParentEl[i] = {
                    "id": tempId,
                    "parentEl": liEl
                };
            }
            ulEl.addClass(alignClass).appendTo(panelContentEl);
            me.itemsParentEl = itemsParentEl;
        },

        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this._removeItems();
            this._super();
        }
    });

    /**
     * @description 流式布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建流式布局容器：
     * var sweetHPanel = Sweet.panel.FlowPanel();
     */
    Sweet.panel.FlowPanel = $.sweet.widgetContainerFlowpanel;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-Grid portal
 * 2013/4/10
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    'use strict';

    var contentClass = 'sweet-grid-portal-content';
    var containerClass = 'widget-container';
    var containerDraggingClass = 'container-dragging';
    var containerEmptyClass = 'container-empty';
    var containerFixedClass = 'container-fixed';
    var placeHolderClass = 'widget-placeholder';
    var detectValidClass = 'detect-valid';
    var detectInvalidClass = 'detect-invalid';
    var lockedClass = 'sweet-grid-portal-locked';
    var draggableClass = 'sweet-draggable';

    var attrRow = '_row';
    var attrCol = '_col';
    var attrRowSpan = '_row_span';
    var attrColSpan = '_col_span';
    var uuid = 1000;

    var MAX_COLS = 24;
    var MAX_ROWS = 24;

    var GOLDEN_RATIO = 0.9; // 强制单个Widget宽高比为黄金分割比率

    $.widget("sweet.widgetContainerGridPortal", $.sweet.widgetContainer,
    /** @lends Sweet.container.GridPortal.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-portal]:",
        eventNames: /** @lends Sweet.container.GridPortal.prototype*/
        {
            /**
             * @event
             * @description widget布局位置发生变化，现在暂时还没有实现
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            widgetlayoutchanged: "widget布局位置发生变化"
        },
        type: "Portal",
        options: /** @lends Sweet.container.GridPortal.prototype*/
        {
            /**
             * 布局行数
             * @type Number
             * @default 3
             */
            rows: 3,
            /**
             * 布局列数
             * @type Number
             * @default 3
             */
            columns: 3,
            /**
             * widget间距
             * @type Number
             * @default 5
             */
            padding: 5,
            /**
             * 内部widgets数组
             * @type Array
             * @default []
             */
            items: null,
            /**
             * widget标题栏样式，用于获取可拖动区域
             * @type String
             * @default 'sweet-widget-panel-title'
             */
            widgetTitleClass: 'sweet-widget-panel-title',
            /**
             * 布局发生变化后，调用回调函数
             * @type Function
             * @default null
             */
            widgetLayoutChanged: null,
            /**
             * 是否适应当前布局大小，缩放widget，防止出现滚动条
             * @type Boolean
             * @default false
             */
            fitMode: false,
            /**
             * 是否允许编辑（区别在于拖动的处理、空区域的显示方式）
             * @type Boolean
             * @default false
             */
            editable: false
        },
        /**
         * @description 设置组件是否可编辑
         * @param {Boolean} editable: true/false
         */
        setEditable: function(editable) {
            if (editable !== true) {
                this.contentEl.addClass(lockedClass);
                this.contentEl.find("." + this.options.widgetTitleClass).removeClass(draggableClass);
            } else {
                this.contentEl.removeClass(lockedClass);
                this.contentEl.find("." + this.options.widgetTitleClass).addClass(draggableClass);
            }

            this.options.editable = editable;
        },
        /**
         * 修改item的大小
         * @param {Number} row item的行号
         * @param {Number} col item的列号
         * @param {Number} rowSpan 修改后的高度
         * @param {Number} colSpan 修改后的宽度
         * @param {Boolean} test   是否仅做测试，而不实际执行修改
         * @returns {Boolean} 是否成功
         */
        changeWidgetSize: function(row, col, rowSpan, colSpan, test) {
            var area, widget, areaInfo;
            var emptyArea;
            var i, j;

            // 检查参数合法性
            if (rowSpan <= 0 || rowSpan > this.options.rows || colSpan <= 0 || colSpan > this.options.columns) {
                return false;
            }

            // 找到要修改的widget对象
            area = this._getAreaByPosition(row, col);
            widget = this._getWidgetByPosition(row, col);
            if (area === null || widget === null) {
                return false;
            }

            // 检查新扩展的区域是否可用
            // 只在需要扩展尺寸时才需要检查，如果是减小尺寸，直接操作就可以
            areaInfo = this._getAreaAttr(area);
            if (rowSpan > areaInfo.rowSpan || colSpan > areaInfo.colSpan) {
                for (i = areaInfo.row; i < areaInfo.row + rowSpan; i++) {
                    for (j = areaInfo.col; j < areaInfo.col + colSpan; j++) {
                        if (i >= areaInfo.row + areaInfo.rowSpan || j >= areaInfo.col + areaInfo.colSpan) {
                            if (this._detectByPosition(i, j) !== 0) {
                                return false;
                            }
                        }
                    }
                }
            }

            // 如果只是测试，直接返回结果
            if (test === true) {
                return true;
            }

            // 如果减小，要把释放的区域填上空白块；如果增大，要删除覆盖区域的空白块（在doLayout中做的）
            if (rowSpan < areaInfo.rowSpan || colSpan < areaInfo.colSpan) {
                for (i = areaInfo.row; i < areaInfo.row + areaInfo.rowSpan; i++) {
                    for (j = areaInfo.col; j < areaInfo.col + areaInfo.colSpan; j++) {
                        if (i >= areaInfo.row + rowSpan || j >= areaInfo.col + colSpan) {
                            emptyArea = this._createAreaByPosition(i, j, 1, 1);
                            if (emptyArea) {
                                emptyArea.appendTo(this.contentEl);
                            }
                        }
                    }
                }
            }

            // 修改大小
            widget.options.rowSpan = rowSpan;
            widget.options.colSpan = colSpan;
            area.attr("_row_span", rowSpan);
            area.attr("_col_span", colSpan);

            // 刷新布局
            this._doLayout();

            // 成功
            return true;
        },
        /**
         * 修改布局的行列数
         * @param {Number} rows 行数
         * @param {Number} cols 列数
         */
        changeLayout: function(rows, cols) {
            var row, col;
            var orgRows, orgCols;
            var area;

            // 不允许删除所有区域，或超过最大行数、列数
            if (rows === 0 || rows > MAX_ROWS || cols === 0 || cols > MAX_COLS) {
                return false;
            } else {
                rows = rows || this.options.rows;
                cols = cols || this.options.columns;
            }

            // 如果要删除区域，需要确保要删除的区域上没有内容；否则不允许修改
            if (rows < this.options.rows) {
                for (row = rows; row < this.options.rows; row++) {
                    for (col = 0; col < this.options.columns; col++) {
                        if (this._detectByPosition(row, col) !== 0) {
                            return false;
                        }
                    }
                }
            }
            if (cols < this.options.columns) {
                for (row = 0; row < this.options.rows; row++) {
                    for (col = cols; col < this.options.columns; col++) {
                        if (this._detectByPosition(row, col) !== 0) {
                            return false;
                        }
                    }
                }
            }

            // 可以删除区域，执行实际删除动作
            if (rows < this.options.rows) {
                for (row = rows; row < this.options.rows; row++) {
                    for (col = 0; col < this.options.columns; col++) {
                        area = this._getAreaByPosition(row, col);
                        if (area) {
                            area.remove();
                        }
                    }
                }

                this.options.rows = rows;
            }
            if (cols < this.options.columns) {
                for (row = 0; row < this.options.rows; row++) {
                    for (col = cols; col < this.options.columns; col++) {
                        area = this._getAreaByPosition(row, col);
                        if (area) {
                            area.remove();
                        }
                    }
                }

                this.options.columns = cols;
            }

            // 如果是要增加区域，添加空白区域
            if (rows > this.options.rows) {
                // 为了后续调用私有函数，要先修改组件配置
                orgRows = this.options.rows;
                this.options.rows = rows;

                for (row = orgRows; row < this.options.rows; row++) {
                    for (col = 0; col < this.options.columns; col++) {
                        area = this._createAreaByPosition(row, col);
                        if (area) {
                            area.appendTo(this.contentEl);
                        }
                    }
                }
            }
            if (cols > this.options.columns) {
                // 为了后续调用私有函数，要先修改组件配置
                orgCols = this.options.columns;
                this.options.columns = cols;

                for (row = 0; row < this.options.rows; row++) {
                    for (col = orgCols; col < this.options.columns; col++) {
                        area = this._createAreaByPosition(row, col);
                        if (area) {
                            area.appendTo(this.contentEl);
                        }
                    }
                }
            }

            // 强制刷新布局
            this._doLayout();
            return true;
        },
        /**
         * description 添加Widget
         * @param {Object} widget Widget对象
         * @returns {boolean} 是否成功
         */
        addWidget: function(widget) {
            var me = this;

            if ($.type(widget) !== 'object') {
                return false;
            }

            // 渲染对象到容器
            if (me._renderWidget(widget) === null) {
                return false;
            }

            // 加入列表
            me.options.items.push(widget);

            // 刷新布局
            me._doLayout();
            return true;
        },
        /**
         * description 删除Widget
         * @param {Object/String/Number} widget Widget对象，或Widget对象的id，或Widget对象的行号
         * @param {Number} col Widget对象的列号，仅在widget参数为数字时有效
         * @returns {boolean} 是否成功
         */
        removeWidget: function(widget, col) {
            var me = this;
            var widgetObj = null;
            var row;
            var areaEl;
            var index;
            var item;
            var areaInfo;

            var items = me.options.items;

            // 如果输入参数是字符串，按id处理
            if ($.type(widget) === 'string') {
                $.each(me.options.items, function(index, item) {
                    if (item.options.id === widget) {
                        widgetObj = item;
                    }
                });
            }
            // 如果是数字，按照行、列处理
            else if ($.isNumeric(widget) && $.isNumeric(col)) {
                widgetObj = me._getWidgetByPosition(widget, col);
            }
            // 如果是对象，直接做为Widget对象处理
            else if ($.type(widget) === 'object') {
                widgetObj = widget;
            }

            if ($.isNull(widgetObj)) {
                return false;
            }

            areaEl = me._getAreaByWidget(widgetObj);
            if ($.isNull(areaEl)) {
                return false;
            }
            areaInfo = me._getAreaAttr(areaEl);

            // 删除Widget对象
            index = -1;
            for (var i = items.length - 1; i >= 0; i--) {
                item = items[i];

                if (item === widgetObj) {
                    if ($.isFunction(item.destroy())) {
                        item.destroy();
                    }

                    items.splice(i, 1);
                    break;
                }
            }

            // 删除容器
            areaEl.remove();

            // 重新创建空容器
            for (row = areaInfo.row; row < areaInfo.row + areaInfo.rowSpan; row++) {
                for (col = areaInfo.col; col < areaInfo.col + areaInfo.colSpan; col++) {
                    areaEl = me._createAreaByPosition(row, col);
                    if (areaEl) {
                        areaEl.addClass(containerEmptyClass).appendTo(me.contentEl);
                    }
                }
            }

            // 刷新布局
            me._doLayout();

            return true;
        },
        /**
         * @description 检查指定目标位置是否可以放置
         * @param {Number} x 水平偏移，为undefined时，取消测试操作
         * @param {Number} y 垂直偏移
         * @param {Number} rowSpan 行数
         * @param {Number} colSpan 列数
         * @returns {Object} 当前行列信息
         * @private
         */
        detectPlace: function(x, y, rowSpan, colSpan) {
            var me = this;
            var indicator;
            var widget;
            var ret = null;

            // 取消测试操作
            if ($.type(x) === 'undefined') {
                if (me.__detectIndicator) {
                    if ($.isFunction(me.__detectIndicator.remove)) {
                        me.__detectIndicator.remove();
                    }
                    me.__detectIndicator = null;
                }

                return null;
            } else {
                if (!me.__detectIndicator) {
                    me.__detectIndicator = $("<div>").appendTo(me.contentEl);
                }
                indicator = me.__detectIndicator;
            }

            // 检查是否在有效的Area上
            var areaEl = me._getAreaByPoint(x - me.contentEl.offset().left, y - me.contentEl.offset().top);
            if ($.isNull(areaEl)) {
                me.__detectIndicator.hide();
                return null;
            }

            var areaInfo = me._getAreaAttr(areaEl);

            // 判断是否可以放置
            ret = {
                'row': areaInfo.row,
                'col': areaInfo.col
            };
            if (areaInfo.row + rowSpan > me.options.rows) {
                ret = null;
                rowSpan = me.options.rows - areaInfo.row;
            }
            if (areaInfo.col + colSpan > me.options.columns) {
                ret = null;
                colSpan = me.options.columns - areaInfo.col;
            }

            // 检查是否会覆盖已有内容
            for (var i = areaInfo.row; i < areaInfo.row + rowSpan && ret !== null; i++) {
                for (var j = areaInfo.col; j < areaInfo.col + colSpan && ret !== null; j++) {
                    areaEl = me._getAreaByPosition(i, j);
                    if (areaEl === null) {
                        ret = null;
                        break;
                    } else {
                        widget = me._getWidgetByArea(areaEl);
                        if (widget !== null) {
                            ret = null;
                            break;
                        }
                    }
                }
            }

            // 显示蒙板
            var cellSize = me._getCellSize();
            var width = cellSize.width * colSpan + me.options.padding * (colSpan - 1);
            var height = cellSize.height * rowSpan + me.options.padding * (rowSpan - 1);

            if (ret === null) {
                indicator.addClass(detectInvalidClass).removeClass(detectValidClass);
            } else {
                indicator.removeClass(detectInvalidClass).addClass(detectValidClass);
            }

            indicator.show()
                .css('left', areaInfo.left)
                .css('top', areaInfo.top)
                .externalWidth(width)
                .externalHeight(height);

            return ret;
        },
        /**
         * @description 设置布局模式
         * @param flag
         */
        setFitMode: function(flag) {
            if (flag === this.options.fitMode) {
                return;
            } else {
                this.options.fitMode = flag;
                this._doLayout();
            }
        },
        /**
         * @private
         * @description 重绘组件
         */
        _doLayout: function() {
            var me = this;
            var options = me.options;
            var widgetWidth, widgetHeight;
            var areaWidth, areaHeight;
            var row, col;
            var rowSpan, colSpan;
            var width, height;
            var left, top;
            var contentWidth, contentHeight;
            var widget;
            var areaEl;
            var areaInfo;
            var i, j, fontSize;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 缺省widget大小
            width = this._getCellSize().width;
            height = this._getCellSize().height;

            // 计算内部容器的大小
            contentWidth = width * options.columns + options.padding * (options.columns - 1);
            contentHeight = height * options.rows + options.padding * (options.rows - 1);
            me.contentEl.width(contentWidth);
            me.contentEl.height(contentHeight);

            // fit模式下，居中显示内容
            if (options.fitMode === true) {
                if (contentWidth < me.containerEl.width()) {
                    me.contentEl.css('left', Math.floor((me.containerEl.width() - contentWidth) / 2));
                }
                if (contentHeight < me.containerEl.height()) {
                    me.contentEl.css('top', Math.floor((me.containerEl.height() - contentHeight) / 2));
                }
            } else {
                this.contentEl.css('left', 0);
            }

            // 计算缺省大小
            me.contentEl.children().each(function(index, div) {
                areaEl = $(div);

                // 只处理widget容器
                if (!areaEl.hasClass(containerClass)) {
                    return;
                }

                // 取得行号
                areaInfo = me._getAreaAttr(areaEl);
                row = areaInfo.row;
                col = areaInfo.col;
                rowSpan = areaInfo.rowSpan;
                colSpan = areaInfo.colSpan;

                // 计算widget容器的大小和位置
                areaWidth = width * colSpan + (colSpan - 1) * options.padding;
                areaHeight = height * rowSpan + (rowSpan - 1) * options.padding;
                left = (width + options.padding) * col;
                top = (height + options.padding) * row;

                // 设置widget容器的高度、宽度
                areaEl.externalWidth(areaWidth).externalHeight(areaHeight);
                areaEl.css({
                    "top": top,
                    "left": left
                });

                // 修正widget的大小
                widget = me._getWidgetByArea(areaEl);
                if (!$.isNull(widget)) {
                    areaEl.removeClass(containerEmptyClass);

                    widgetWidth = areaEl.width();
                    widgetHeight = areaEl.height();
                    widget.setWH(widgetWidth, widgetHeight);

                    // 固定位置的widget，添加专用样式
                    if (widget.options.fixed === true) {
                        if (!areaEl.hasClass(containerFixedClass)) {
                            areaEl.addClass(containerFixedClass);
                        }
                    } else {
                        areaEl.removeClass(containerFixedClass);
                    }
                } else {
                    if (!areaEl.hasClass(containerEmptyClass)) {
                        areaEl.addClass(containerEmptyClass);
                    }
                }

                // 如果一个Widget占用两个以上单位位置，相邻被占用的位置的子容器要删除掉
                for (i = row; i < row + rowSpan; i++) {
                    for (j = col; j < col + colSpan; j++) {
                        // 跳过自己
                        if (i === row && j === col) {
                            continue;
                        }

                        areaEl = me._getAreaByPosition(i, j);
                        if (areaEl) {
                            areaEl.remove();
                        }
                    }
                }
            });

            fontSize = Math.floor(height * 0.7);
            fontSize = fontSize > 200 ? 200 : fontSize;

            // 空白位置，显示一个加号
            me.contentEl.children("." + containerEmptyClass)
                .text("+")
                .css({
                "font-size": fontSize + "px",
                "line-height": height + "px"
            });

            // 滚动条
            me.containerEl.scrollPanel('vertical', {
                contentClass: contentClass
            });
        },
        /**
         * @private
         * @description 组件渲染
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                var options = me.options;
                var items = options.items;

                // 容器附着到外层容器中
                me.contentEl.appendTo(me.containerEl);

                // 将组件渲染到容器内
                $.each(items, function(index, widget) {
                    me._renderWidget(widget);
                });

                // 允许拖动
                me._widgetDrag();
            }
        },
        /**
         * @private
         * @description 创建Portal容器
         */
        _createContainer: function() {
            var me = this;

            if (!me.options.items) {
                me.options.items = [];
            }

            // 修正最大规格
            if (me.options.rows > MAX_ROWS) {
                me.options.rows = MAX_ROWS;
            }
            if (me.options.columns > MAX_COLS) {
                me.options.columns = MAX_COLS;
            }

            var rows = me.options.rows;
            var columns = me.options.columns;
            var i, j;
            var divEl;

            // 容器
            me.contentEl = $("<div>").addClass(contentClass);
            if (me.options.editable !== true) {
                this.contentEl.addClass(lockedClass);
            } else {
                this.contentEl.removeClass(lockedClass);
            }

            // widget容器
            for (i = 0; i < rows; i++) {
                for (j = 0; j < columns; j++) {
                    divEl = me._createAreaByPosition(i, j);
                    divEl.appendTo(me.contentEl);
                }
            }
        },
        /**
         * @description 根据行、列号创建一个容器
         * @param {Number} row 行号
         * @param {Number} col 列号
         * @param {Number} rowSpan 行合并
         * @param {Number} colSpan 列合并
         * @returns {Object} 创建的容器对象
         * @private
         */
        _createAreaByPosition: function(row, col, rowSpan, colSpan) {
            var me = this;
            var divEl;

            // 如果指定的宽高不空，按1来处理
            if ($.type(rowSpan) === 'undefined') {
                rowSpan = 1;
            }
            if ($.type(colSpan) === 'undefined') {
                colSpan = 1;
            }

            // 检查参数合法性
            if (row < 0 || row >= me.options.rows || col < 0 || col >= me.options.columns || row + rowSpan > me.rows || col + colSpan > me.options.columns) {
                me._error("expected area cannot be created");
                return null;
            }

            // 避免重复创建
            if (this._getAreaByPosition(row, col) !== null) {
                return null;
            }

            // 创建Div
            divEl = $("<div>");
            divEl.attr(attrRow, row)
                .attr(attrCol, col)
                .attr(attrRowSpan, 1)
                .attr(attrColSpan, 1)
                .attr("id", me.options.id + "-" + (++uuid))
                .addClass(containerClass);

            return divEl;
        },
        /**
         * @description Widget拖放的处理，位置改变后，会触发widgetlayoutchanged事件
         * @private
         */
        _widgetDrag: function() {
            var me = this;
            var widget = null;
            var area = null;
            var draggingBar = null;
            var dragTargetClass = me.options.widgetTitleClass;
            var rx, ry;
            var contentWidth, contentHeight;
            var areaWidth, areaHeight;
            var areaOrgLeft, areaOrgTop;
            var contentOffset;
            var placeHolder = null;
            var moveTimer = -1;
            var animateDuration = 100;
            var endingDuration = 100;
            var animating = false;
            var lastTarget = null;

            if (!me.contentEl) {
                me._error("failed to start monitor dragging");
                return;
            }

            // 监听拖动
            me.contentEl.sweetDrag(
            // Drag Start
            function(event) {
                // 检查当前是否可编辑
                if (!me.options.editable) {
                    return false;
                }

                // 判断当前想要拖动的Dom元素是否为可拖动
                var elem = event.target;
                var elemEl = $(elem);
                if (!elemEl.hasClass(dragTargetClass)) {
                    return false;
                }

                // 找到对应的area和widget，保存到变量中
                me.contentEl.children().each(function(index, div) {
                    if ($.contains(div, elem)) {
                        area = $(div);
                    }
                });

                if (area === null) {
                    return false;
                } else {
                    widget = me._getWidgetByArea(area);
                }

                // 固定位置类型的widget，不允许拖动
                if (widget && widget.options.fixed === true) {
                    area = null;
                    widget = null;
                    return false;
                }

                // 记录初始位置
                areaOrgLeft = parseInt(area.css("left"), 10) || 0;
                areaOrgTop = parseInt(area.css("top"), 10) || 0;
                rx = event.pageX - areaOrgLeft;
                ry = event.pageY - areaOrgTop;

                // 初始化变量
                contentWidth = me.contentEl.width();
                contentHeight = me.contentEl.height();
                areaWidth = area.externalWidth();
                areaHeight = area.externalHeight();
                contentOffset = me.contentEl.offset();

                // 创建占位框
                var areaInfo = me._getAreaAttr(area);
                var zIndex = $.getMaxZIndex();
                placeHolder = $("<div>").addClass(placeHolderClass);
                placeHolder.appendTo(me.contentEl)
                    .css("left", areaInfo.left)
                    .css('top', areaInfo.top)
                    .css('z-index', zIndex)
                    .externalWidth(areaWidth)
                    .externalHeight(areaHeight);

                placeHolder.attr(attrRow, areaInfo.row)
                    .attr(attrCol, areaInfo.col)
                    .attr(attrRowSpan, areaInfo.rowSpan)
                    .attr(attrColSpan, areaInfo.colSpan);


                // 调整area样式：半透明、鼠标开关为move
                area.addClass(containerDraggingClass);
                elemEl.css('cursor', 'move');

                draggingBar = elemEl;

                // 变动标志
                me.__widgetLayoutChanged = false;

                return null;
            },
            // Drag End
            function() {
                // 变量area/widget为空的话，则没有内容正在被拖动
                if (area === null || widget === null) {
                    return false;
                }

                // 计算正确位置
                var pt = me._calculateAreaPoint(area);

                // 动画方式，拖动的区域归位
                area.animate({
                    'left': pt.left + 'px',
                    'top': pt.top + 'px'
                }, {
                    'duration': endingDuration,
                    'complete': function() {
                        // 刷新布局
                        me._doLayout();

                        // 触发布局变化事件
                        if (me.__widgetLayoutChanged) {
                            me._widgetLayoutChanged();
                        }
                    }
                });

                // 清理
                if (placeHolder) {
                    placeHolder.remove();
                }

                draggingBar.css('cursor', '');
                draggingBar = null;
                area.removeClass(containerDraggingClass);

                widget = null;
                area = null;
                placeHolder = null;
                lastTarget = null;
            },
            // Drag Moving...
            function(event) {
                // 变量area/widget为空的话，则没有内容正在被拖动
                if (area === null || widget === null) {
                    return false;
                }

                // 计算widget的新位置
                var offsetX = event.pageX - rx;
                var offsetY = event.pageY - ry;

                // 修正位置：不允许超出组件容器的范围
                if (offsetX < 0) {
                    offsetX = 0;
                }
                if (offsetY < 0) {
                    offsetY = 0;
                }

                if (offsetX + areaWidth > contentWidth) {
                    offsetX = contentWidth - areaWidth;
                }
                if (offsetY + areaHeight > contentHeight) {
                    offsetY = contentHeight - areaHeight;
                }

                // 更新Widget位置
                area.css({
                    "left": offsetX,
                    "top": offsetY
                });

                // 如果正在执行widget位置交换的动画，不需要再进行处理
                if (animating) {
                    return false;
                }

                // 获取当前鼠标所在位置下的area
                var x = event.pageX - contentOffset.left;
                var y = event.pageY - contentOffset.top;
                var target = me._getAreaByPoint(x, y);

                // 如果目标为空，取消操作
                if (target === null) {
                    if (moveTimer >= 0) {
                        window.clearTimeout(moveTimer);
                        moveTimer = -1;
                    }

                    return false;
                }

                // 如果在同一区域上移动鼠标，直接返回；否则启动延迟定时器，准备进行位置交换动画
                if (lastTarget === target.attr('id')) {
                    return false;
                } else {
                    lastTarget = target.attr('id');

                    // 延迟100毫秒
                    if (moveTimer >= 0) {
                        window.clearTimeout(moveTimer);
                        moveTimer = -1;
                    }
                }

                // 鼠标移动进入某可交换的位置后，延迟50毫秒再执行交换动作
                moveTimer = window.setTimeout(function() {
                    // 重置定时器
                    moveTimer = -1;

                    // 移动widget
                    // 先尝试进行相邻位置的切换，若失败，再尝试进行第二种方式的交换（非相邻，或跨列）
                    if (me._adjustPositionHandover(area, target, false, animateDuration) === false) {
                        if (me._adjustPositionExchange(area, target, false, animateDuration) === false) {
                            return;
                        }
                    }
                    lastTarget = null;

                    // 置位布局变化标志，用于在拖动结束后，判断是否触发布局变化事件
                    me.__widgetLayoutChanged = true;

                    if (!placeHolder) {
                        return;
                    }

                    // 移动占位框到目标区域
                    var holderLeft;
                    var holderTop;
                    var holderWidth;
                    var holderHeight;

                    var point = me._calculateAreaPoint(area);
                    holderLeft = point.left;
                    holderTop = point.top;
                    holderWidth = areaWidth;
                    holderHeight = areaHeight;

                    // 移动占位框到目标位置
                    // 注：此动画的持续时长与交换动作的执行时长是相同的
                    placeHolder.animate({
                        'left': holderLeft + 'px',
                        'top': holderTop + 'px',
                        'width': holderWidth + 'px',
                        'height': holderHeight + 'px'
                    }, {
                        'duration': animateDuration,
                        'complete': function() {
                            if (placeHolder) {
                                placeHolder.externalWidth(holderWidth);
                                placeHolder.externalHeight(holderHeight);
                            }
                        }
                    });

                    // 设置动画执行标志，并在一段时间后清除
                    animating = true;
                    window.setTimeout(function() {
                        animating = false;
                    }, Math.ceil(animateDuration * 1.5));

                }, 50);

                return false;
            });
        },
        /**
         * @description Widget调整，交换方式，要求源和目标区组大小相同
         * @param {Object} srcArea 正在拖动的Widget容器
         * @param {Object} targetArea 目标Widget容器
         * @param {Boolean} test 只做测试，还是执行实际的修改位置操作
         * @param {Number} delay 执行修改位置操作时，动画时长
         * @returns {boolean} 是否可放置到目标位置
         * @private
         */
        _adjustPositionExchange: function(srcArea, targetArea, test, delay) {
            var me = this;
            var options = me.options;
            var area, widget;
            var areaInfo;
            var endRow, endCol;
            var offsetX, offsetY;
            var row, col, size = 0;

            if ($.isNull(srcArea) || $.isNull(targetArea)) {
                return false;
            }

            // 区域基本信息
            var srcInfo = me._getAreaAttr(srcArea);
            var targetInfo = me._getAreaAttr(targetArea);

            // 条件：源和目标不能相同
            if (srcInfo.row === targetInfo.row && srcInfo.col === targetInfo.col) {
                return false;
            }

            // 条件：目标有足够的位置放置源
            if (targetInfo.col + srcInfo.colSpan > options.columns || targetInfo.row + srcInfo.rowSpan > options.rows) {
                return false;
            }

            // 计算目标区域面积
            endRow = targetInfo.row + srcInfo.rowSpan;
            endCol = targetInfo.col + srcInfo.colSpan;

            for (row = targetInfo.row; row < endRow; row++) {
                for (col = targetInfo.col; col < endCol; col++) {
                    area = me._getAreaByPosition(row, col);
                    areaInfo = me._getAreaAttr(area);
                    widget = me._getWidgetByArea(area);

                    if (area === null || areaInfo === null) {
                        continue;
                    }

                    // 条件：目标所在位置不能有固定区域
                    if (widget && widget.options.fixed === true) {
                        return false;
                    }

                    // 条件：如果目标区域内有Area超出范围，不能放置
                    if (areaInfo.col + areaInfo.colSpan > endCol || areaInfo.row + areaInfo.rowSpan > endRow) {
                        return false;
                    }

                    // 累计面积
                    size += areaInfo.colSpan * areaInfo.rowSpan;
                }
            }

            // 条件：目标区域应该是一个完整区域
            if (size !== srcInfo.rowSpan * srcInfo.colSpan) {
                return false;
            }

            // 如果只进行测试，此处可以返回了
            if (test) {
                return true;
            }

            // 移动目标到源位置
            offsetX = srcInfo.col - targetInfo.col;
            offsetY = srcInfo.row - targetInfo.row;

            for (row = targetInfo.row; row < endRow; row++) {
                for (col = targetInfo.col; col < endCol; col++) {
                    area = me._getAreaByPosition(row, col);
                    areaInfo = me._getAreaAttr(area);

                    if (area === null || areaInfo === null) {
                        continue;
                    }

                    // 如果只是测试，不执行实际操作
                    if (!test) {
                        areaInfo.row += offsetY;
                        areaInfo.col += offsetX;
                        me._setAreaPosition(area, areaInfo.row, areaInfo.col, delay);
                    }
                }
            }

            // 移动源到目标位置
            if (!test) {
                srcInfo.row -= offsetY;
                srcInfo.col -= offsetX;
                me._setAreaPosition(srcArea, srcInfo.row, srcInfo.col, null);
            }

            // 操作成功，返回true
            return true;
        },
        /**
         * @description Widget调整，交换方式，要求源和目标相邻
         * @param {Object} srcArea 正在拖动的Widget容器
         * @param {Object} targetArea 目标Widget容器
         * @param {Boolean} test 只做测试，还是执行实际的修改位置操作
         * @param {Number} delay 执行修改位置操作时，动画时长
         * @returns {boolean} 是否可放置到目标位置
         * @private
         */
        _adjustPositionHandover: function(srcArea, targetArea, test, delay) {
            /* 屏蔽代码行数过多告警，不宜再拆 */
            /* jshint maxstatements:100 */
            var widget;
            var targetArea2, targetInfo2;
            var exTargetAreaList, exTargetInfoList;
            var i, width, height;

            if ($.isNull(srcArea) || $.isNull(targetArea)) {
                return false;
            }

            // 区域基本信息
            var srcInfo = this._getAreaAttr(srcArea);
            var targetInfo = this._getAreaAttr(targetArea);

            // 条件：源和目标不能相同
            if (srcInfo.row === targetInfo.row && srcInfo.col === targetInfo.col) {
                return false;
            }

            // 条件：目标不能为固定Widget
            widget = this._getWidgetByArea(targetArea);
            if (widget && widget.options.fixed === true) {
                return false;
            }

            // 条件：不同行且不同列
            if (srcInfo.col !== targetInfo.col && srcInfo.row !== targetInfo.row) {
                return false;
            }

            // 同列情况的判断
            if (srcInfo.col === targetInfo.col) {
                exTargetAreaList = [];
                exTargetInfoList = [];
                width = targetInfo.colSpan;

                // 条件：同列，但是宽度不同
                if (srcInfo.colSpan !== targetInfo.colSpan) {
                    // 查找同行其它位置
                    for (i = targetInfo.col + targetInfo.colSpan; i < targetInfo.col + srcInfo.colSpan; i++) {
                        targetArea2 = this._getAreaByPosition(targetInfo.row, i);
                        targetInfo2 = this._getAreaAttr(targetArea2);

                        if (targetArea2 === null) {
                            continue;
                        }

                        // 条件：目标行所有area高度相同，行号相同
                        if (targetInfo2.row !== targetInfo.row || targetInfo2.rowSpan !== targetInfo.rowSpan) {
                            return false;
                        }

                        // 保存起来
                        exTargetAreaList.push(targetArea2);
                        exTargetInfoList.push(targetInfo2);
                        width += targetInfo2.colSpan;
                    }

                    // 条件：两行宽度不能对齐
                    if (width !== srcInfo.colSpan) {
                        return false;
                    }
                }

                // 条件：同列，但是不相邻
                if (srcInfo.row + srcInfo.rowSpan !== targetInfo.row && targetInfo.row + targetInfo.rowSpan !== srcInfo.row) {
                    return false;
                }

                // 交换位置
                if (!test) {
                    if (srcInfo.row > targetInfo.row) {
                        srcInfo.row = targetInfo.row;
                        targetInfo.row = srcInfo.row + srcInfo.rowSpan;
                    } else {
                        targetInfo.row = srcInfo.row;
                        srcInfo.row = targetInfo.row + targetInfo.rowSpan;
                    }

                    this._setAreaPosition(srcArea, srcInfo.row, srcInfo.col, null);
                    this._setAreaPosition(targetArea, targetInfo.row, targetInfo.col, delay);

                    // 一换多的处理
                    if (exTargetAreaList.length > 0) {
                        for (i = 0; i < exTargetAreaList.length; i++) {
                            targetArea2 = exTargetAreaList[i];
                            targetInfo2 = exTargetInfoList[i];

                            targetInfo2.row = targetInfo.row;
                            this._setAreaPosition(targetArea2, targetInfo2.row, targetInfo2.col, delay);
                        }
                    }
                }
            }

            // 同行情况的判断
            if (srcInfo.row === targetInfo.row) {
                exTargetAreaList = [];
                exTargetInfoList = [];
                height = targetInfo.rowSpan;

                // 条件：同行，但是高度不同
                if (srcInfo.rowSpan !== targetInfo.rowSpan) {
                    // 查找同列其它位置
                    for (i = targetInfo.row + targetInfo.rowSpan; i < targetInfo.row + srcInfo.rowSpan; i++) {
                        targetArea2 = this._getAreaByPosition(i, targetInfo.col);
                        targetInfo2 = this._getAreaAttr(targetArea2);

                        if (targetArea2 === null) {
                            continue;
                        }

                        // 条件：目标行所有area宽度相同，列号相同
                        if (targetInfo2.col !== targetInfo.col || targetInfo2.colSpan !== targetInfo.colSpan) {
                            return false;
                        }
                        // 保存起来
                        exTargetAreaList.push(targetArea2);
                        exTargetInfoList.push(targetInfo2);
                        height += targetInfo2.rowSpan;
                    }

                    // 条件：两列高度不能对齐
                    if (height !== srcInfo.rowSpan) {
                        return false;
                    }
                }

                // 条件：同行，但是不相邻
                if (srcInfo.col + srcInfo.colSpan !== targetInfo.col && targetInfo.col + targetInfo.colSpan !== srcInfo.col) {
                    return false;
                }

                // 交换位置
                if (!test) {
                    if (srcInfo.col > targetInfo.col) {
                        srcInfo.col = targetInfo.col;
                        targetInfo.col = srcInfo.col + srcInfo.colSpan;
                    } else {
                        targetInfo.col = srcInfo.col;
                        srcInfo.col = targetInfo.col + targetInfo.colSpan;
                    }

                    this._setAreaPosition(srcArea, srcInfo.row, srcInfo.col, null);
                    this._setAreaPosition(targetArea, targetInfo.row, targetInfo.col, delay);

                    // 一换多的处理
                    if (exTargetAreaList.length > 0) {
                        for (i = 0; i < exTargetAreaList.length; i++) {
                            targetArea2 = exTargetAreaList[i];
                            targetInfo2 = exTargetInfoList[i];

                            targetInfo2.col = targetInfo.col;
                            this._setAreaPosition(targetArea2, targetInfo2.row, targetInfo2.col, delay);
                        }
                    }
                }
            }

            // 返回成功
            return true;
        },
        /**
         * @description 设置容器新位置
         * @param {Object} areaEl 容器对象
         * @param {Number} row 新行号
         * @param {Number} col 新列号
         * @param {Number} delay 动画持续时长
         * @private
         */
        _setAreaPosition: function(areaEl, row, col, delay) {
            var me = this;
            var widget;
            var point;

            // 设置区域位置
            areaEl.attr(attrRow, row).attr(attrCol, col);

            if (delay !== null) {
                point = me._calculateAreaPoint(areaEl);
                areaEl.animate({
                    'left': point.left,
                    'top': point.top
                }, {
                    duration: delay
                });
            }

            // 调整widget属性
            widget = me._getWidgetByArea(areaEl);
            if (widget) {
                widget.options.row = row;
                widget.options.column = col;
            }
        },
        /**
         * @description 计算容器在组件父容器中的偏移
         * @param {Object} areaEl 容器对象
         * @returns {Object} 偏移量,{left, top}
         * @private
         */
        _calculateAreaPoint: function(areaEl) {
            var me = this;
            var options = me.options;

            if ($.isNull(areaEl)) {
                return null;
            }

            var columns = options.columns;
            var rows = options.rows;
            var contentWidth = me.contentEl.width();
            var contentHeight = me.contentEl.height();
            var width = Math.floor((contentWidth - (columns - 1) * options.padding) / columns);
            var height = Math.floor((contentHeight - (rows - 1) * options.padding) / rows);
            var areaInfo = me._getAreaAttr(areaEl);

            var left = areaInfo.col * (width + options.padding);
            var top = areaInfo.row * (height + options.padding);

            return {
                'left': left,
                'top': top
            };
        },
        /**
         * @description 获取容器对象的一些属性
         * @param {Object} areaEl 容器对象
         * @returns {Object} row/col/rowSpan/colSpan/left/top/width/height
         * @private
         */
        _getAreaAttr: function(areaEl) {
            if ($.isNull(areaEl)) {
                return null;
            }

            var row = parseInt(areaEl.attr(attrRow), 10);
            var col = parseInt(areaEl.attr(attrCol), 10);
            var rowSpan = parseInt(areaEl.attr(attrRowSpan), 10);
            var colSpan = parseInt(areaEl.attr(attrColSpan), 10);
            var left = parseInt(areaEl.css('left'), 10) || 0;
            var top = parseInt(areaEl.css('top'), 10) || 0;
            var width = areaEl.externalWidth();
            var height = areaEl.externalHeight();


            return {
                'row': row,
                'col': col,
                'rowSpan': rowSpan,
                'colSpan': colSpan,
                'left': left,
                'top': top,
                'width': width,
                'height': height
            };
        },
        /**
         * @description 根据实际像素偏移位置，获得对应的容器对象
         * @param {Number} x 在组件容器中的X轴偏移
         * @param {Number} y 在组件容器中的Y轴偏移
         * @returns {Object} 容器对象
         * @private
         */
        _getAreaByPoint: function(x, y) {
            var me = this;
            var divEl;
            var areaEl = null;
            var pos;

            // 根据座标得到Widget容器对象
            me.contentEl.children().each(function(index, div) {
                divEl = $(div);
                pos = divEl.position();

                if (divEl.hasClass(containerDraggingClass) || !divEl.hasClass(containerClass)) {
                    return null;
                }

                if (x >= pos.left && x <= pos.left + divEl.externalWidth() && y >= pos.top && y <= pos.top + divEl.externalHeight()) {
                    areaEl = $(div);
                }
            });

            return areaEl;
        },
        /**
         * @description 根据行号、列号取得容器对象
         * @param {Number} row 行号
         * @param {Number} col 列号
         * @returns {Object} 容器对象
         * @private
         */
        _getAreaByPosition: function(row, col) {
            var me = this;
            var divEl;
            var areaEl = null;

            // 根据行号、列号得到Widget容器对象
            me.contentEl.children().each(function(index, div) {
                divEl = $(div);

                if (!divEl.hasClass(containerClass)) {
                    return null;
                }

                if (divEl.attr(attrRow) === row + '' && divEl.attr(attrCol) === col + '') {
                    areaEl = $(div);
                }
            });

            return areaEl;
        },
        /**
         * @description 根据Widget对象，取得容器对象
         * @param {Object} widget widget对象
         * @returns {Object} 容器对象
         * @private
         */
        _getAreaByWidget: function(widget) {
            var me = this;
            if ($.isNull(widget)) {
                return null;
            }

            var row = widget.options.row + '';
            var col = widget.options.column + '';
            var divEl;
            var areaEl = null;

            // 根据行号、列号得到Widget容器对象
            me.contentEl.children().each(function(index, div) {
                divEl = $(div);

                if (divEl.attr(attrRow) === row && divEl.attr(attrCol) === col) {
                    areaEl = $(div);
                }
            });

            return areaEl;
        },
        /**
         * @description 根据行号、列号取得Widget对象
         * @param {Number} row 行号
         * @param {Number} col 列号
         * @returns {Object} Widget对象
         * @private
         */
        _getWidgetByPosition: function(row, col) {
            var me = this;
            var item;

            // 根据行、列号查找widget
            for (var i = 0; i < me.options.items.length; i++) {
                item = me.options.items[i];
                if (item.options && item.options.row === row && item.options.column === col) {
                    return item;
                }
            }

            return null;
        },
        /**
         * @description 根据容器对象，取得Widget对象
         * @param {Object} divEl 容器对象
         * @returns {Object} Widget对象
         * @private
         */
        _getWidgetByArea: function(divEl) {
            var me = this;
            var item;

            if ($.isNull(divEl)) {
                return null;
            }

            // 取容器的id
            var id = divEl.attr('id');

            // 根据id查找widget
            for (var i = 0; i < me.options.items.length; i++) {
                item = me.options.items[i];
                if (item.options && item.options.renderTo === id) {
                    return item;
                }
            }

            return null;
        },
        /**
         * 测试指定目标位置的情况
         * @param {Number} row 行号
         * @param {Number} col 列号
         * @returns {Number} 目标类型。0：空白，1：widget，2：widget（非起始位置），-1：超出组件区域
         * @private
         */
        _detectByPosition: function(row, col) {
            // 超出范围
            if (row < 0 || row >= this.options.rows || col < 0 || col >= this.options.columns) {
                return -1;
            }

            // 取区域
            var area = this._getAreaByPosition(row, col);
            var widget = this._getWidgetByArea(area);

            // 有widget
            if (area && widget) {
                return 1;
            }

            // 空白
            if (area) {
                return 0;
            }

            // 否则为widget的非起始位置（遮挡区域）
            return 2;
        },
        /**
         * @description 渲染Widget对象
         * @param {Object} widget 待渲染的Widget对象
         * @returns {String} 渲染后的容器的id，失败则返回null
         * @private
         */
        _renderWidget: function(widget) {
            var me = this;
            var id = null;

            if ($.isNull(widget)) {
                return null;
            }

            // 修正
            if ($.isNull(widget.options.rowSpan)) {
                widget.options.rowSpan = 1;
            }
            if ($.isNull(widget.options.colSpan)) {
                widget.options.colSpan = 1;
            }

            // 取得渲染区域
            var area = me._getAreaByWidget(widget);
            if (area === null) {
                me._error("widget position is invalid");
                return null;
            }

            id = area.attr("id");
            if ($.isNull(id)) {
                return null;
            }

            // remove empty sign
            area.text("").css({
                "font-size": "",
                "line-height": ""
            });

            // 渲染
            if ($.isFunction(widget.render)) {
                area.attr(attrRowSpan, widget.options.rowSpan)
                    .attr(attrColSpan, widget.options.colSpan)
                    .show();
                widget.render(id);

                // 设置拖动区域鼠标状态
                if (me.options.editable) {
                    area.find("." + me.options.widgetTitleClass).addClass(draggableClass);
                }
            } else {
                return null;
            }

            return id;
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            var row, col;
            // 销毁子组件
            for (row = 0; row < this.options.rows; row++) {
                for (col = 0; col < this.options.columns; col++) {
                    this.removeWidget(row, col);
                }
            }

            this._super();
        },

        /**
         * @description 获取当前主容器下，各个1*1格子的大小
         * @returns {Object} {width: *, height: *}
         * @private
         */
        _getCellSize: function() {
            var me = this;
            var width, height;

            var options = me.options;
            var columns = options.columns;
            var rows = options.rows;

            var borderWidth = me.contentEl.externalWidth() - me.contentEl.width();
            var borderHeight = me.contentEl.externalHeight() - me.contentEl.height();
            var contentWidth = me.containerEl.width() - borderWidth;
            var contentHeight = me.containerEl.height() - borderHeight;

            if (this.options.fitMode === false) {
                // 正常模式
                width = Math.floor((contentWidth - (columns - 1) * options.padding) / columns);
                height = Math.floor(width * GOLDEN_RATIO);
            } else {
                // fit模式
                if (contentWidth * GOLDEN_RATIO > contentHeight) {
                    // 高度不足，以高度为准进行计算
                    height = Math.floor((contentHeight - (rows - 1) * options.padding) / rows);
                    width = Math.floor(height / GOLDEN_RATIO);
                } else {
                    // 宽度不足，以宽度为谁进行计算
                    width = Math.floor((contentWidth - (columns - 1) * options.padding) / columns);
                    height = Math.floor(width * GOLDEN_RATIO);
                }
            }

            return {
                width: width,
                height: height
            };
        },
        /**
         * @description widget布局改变后，执行回调函数
         * @private
         */
        _widgetLayoutChanged: function() {
            var me = this;

            if (me.handlers && $.isFunction(me.handlers.widgetlayoutchanged)) {
                me.handlers.widgetlayoutchanged();
            }

            if ($.isFunction(me.options.widgetLayoutChanged)) {
                me.options.widgetLayoutChanged();
            }
        },
        /**
         * @event
         * @description 布局变化事件
         * @name Sweet.portal.GridPortal#widgetlayoutchanged
         */
        widgetlayoutchanged: function() {
            $.noop();
        }
    });

    /**
     * @description grid portal容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * </pre>
     * @example
     * 创建向导布局容器：
     * var sweetHPanel = Sweet.container.GridPortal();
     */
    Sweet.portal.GridPortal = $.sweet.widgetContainerGridPortal;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-Widget列表布局容器
 * 2013/2/4
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    "use strict";

    var defaultContentClass = "sweet-panel-content",
        containerClass = "sweet-widgetlist-container",
        contentClass = "sweet-widgetlist-panel",
        scrollLeftClass = "sweet-widgetlist-scroll-left",
        scrollRightClass = "sweet-widgetlist-scroll-right",
        scrollDisabledClass = "sweet-widgetlist-scroll-disabled",
        widgetListClass = "sweet-widgetlist-list",
        widgetItemClass = "sweet-widgetlist-item",
        itemDraggingClass = "sweet-widgetlist-item-dragging",
        itemInfoClass = "sweet-widgetlist-item-info",
        itemNameClass = "sweet-widgetlist-item-name",
        itemDetailClass = "sweet-widgetlist-item-detail",
        idPrefix = "list-item-",
        flatClass = "sweet-widgetlist-flat",
        uuid = 1000;
    var scrollAnimationDuration = 500;

    $.widget("sweet.widgetContainerWidgetlist", $.sweet.widgetContainerPanel,
    /** @lends Sweet.panel.WidgetList.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-widgetlist]:",
        type: "WidgetList",
        eventNames: /** @lends Sweet.panel.WidgetList.prototype*/
        {
            /**
             * @event
             * @description 开始拖动事件
             */
            drag: "开始拖动",
            /**
             * @event
             * @description 正在拖动事件
             */
            dragging: "正在拖动",
            /**
             * @event
             * @description 拖动结束事件
             */
            drop: "拖动结束"
        },
        options: /** @lends Sweet.panel.WidgetList.prototype*/
        {
            /**
             * 布局行数。暂时只支持2行
             * @type Number
             * @default 2
             */
            rows: 2,
            /**
             * 子组件间距
             * @type Number
             * @default 8
             */
            padding: 8,
            /**
             * 子组件宽度
             * @type Number
             * @default 180
             */
            cellWidth: 180,
            /**
             * 是否扁平样式
             * @type Boolean
             * @default false
             */
            flat: false
        },
        /**
         * @private
         * @descripition 重新计算绘制表格布局
         */
        _doLayout: function() {
            var me = this;

            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            me._super();

            var options = me.options;
            var rows = options.rows;
            var padding = options.padding;

            me.widgetList.externalHeight(me.panelContentEl.height());
            var listHeight = me.widgetList.height();

            var width = options.cellWidth;
            var height = Math.floor((listHeight - padding * (rows - 1)) / rows);
            var offsetX;
            var area;

            // 瀑布式排列
            offsetX = 0;
            var items = [];
            var deal = {};

            // 所有待排列item放到队列中
            $.each(options.items, function(index, obj) {
                if (obj.colSpan <= 0) {
                    obj.colSpan = 1;
                }
                if (obj.rowSpan <= 0) {
                    obj.rowSpan = 1;
                }
                items.push(obj);
            });

            /**
             * @private
             * @param {Number} type 类型
             * @param {Array} exclude 排序列表
             * @returns {Object} 取得的item
             */
            function getItem(type, exclude) {
                var obj;
                var excludeList = [];

                if (!$.isArray(exclude)) {
                    excludeList.push(exclude);
                } else {
                    excludeList = exclude;
                }

                // 按顺序找
                for (var i = 0; i < items.length; i++) {
                    obj = items[i];

                    // 跳过已经摆放好的widget
                    if (typeof(deal[obj.__containerId]) !== 'undefined') {
                        continue;
                    }

                    // 跳过不想找到的对象
                    if ($.inArray(obj, excludeList) >= 0) {
                        continue;
                    }

                    // 区域类型
                    // 1:1x1, 2:2x1, 3:1x2, 4:2x2
                    if (type === 1 && obj.colSpan === 1 && obj.rowSpan === 1) {
                        return obj;
                    } else if (type === 2 && obj.colSpan === 1 && obj.rowSpan === 2) {
                        return obj;
                    } else if (type === 3 && obj.colSpan === 2 && obj.rowSpan === 1) {
                        return obj;
                    } else if (type === 4 && obj.colSpan === 2 && obj.rowSpan === 2) {
                        return obj;
                    }
                }

                return null;
            }

            var obj;
            var index = 0;
            var count = 0;
            var item1, item2, item3, item4, item5;

            /**
             * 开始摆放，容器的高度是2,宽度无限。目标是瀑布式排列，中间不存在空洞
             * 算法：
             * 1：从队列中按顺序取一个未摆放的item，并直接摆放在最后位置
             * 2：如果item的高度是2（2x2或2x1),不会导致出现空洞，继续按顺序取下一个未摆放的item
             * 3：如果item高度是1（1x2或1x1）,为防止出现空洞，则
             * 3.1：如果item宽度为2（1x2）
             *        如果队列中有相同类型的未摆放item，放在同一列（无空洞）
             *        否则，如果队列中有两个1x1的未摆放item，取两个放在第二行（无空洞）
             *        否则：如果队列中有一个1x1的未摆放item，取一个放在第二行（出现空洞）
             *        否则：出现空洞
             *        转步骤1继续处理
             * 3.2：如果item宽度为1（1x1）
             *        如果队列中有未摆放的1x1、1x2的item，各取一个，1x1的放在右侧，1x2的放在第二行（无空洞）
             *        否则，如果列表中只有未摆放的1x1的item，取出一个，放在第二行（无空洞）
             *        否则，如果列表中只有未摆放的1x2的item，取出一个，放在第二行（出现空洞）
             *        否则：出现空洞
             *        转步骤1继续处理
             */

            /**
             * 2*2，直接摆放
             * @private
             */
            function _place2x2() {
                area = $('#' + obj.__containerId);
                area.externalWidth(width * 2 + padding).externalHeight(height * 2 + padding);
                area.css({
                    'left': offsetX,
                    'top': 0
                });

                deal[obj.__containerId] = obj;
                offsetX += (width + padding) * 2;
                count++;
            }

            /**
             * 2*1，直接摆放
             * @private
             */
            function _place2x1() {
                area = $('#' + obj.__containerId);
                area.externalWidth(width).externalHeight(height * 2 + padding);
                area.css({
                    'left': offsetX,
                    'top': 0
                });

                deal[obj.__containerId] = obj;
                offsetX += width + padding;
                count++;
            }

            /**
             * 1*2
             * 尽量两个相同的摆放在同一列
             * 否则，尽量找两个1*1的摆放在第二行
             * @private
             */
            function _place1x2() {
                item1 = getItem(3, obj);
                item2 = getItem(1);
                item3 = getItem(1, item2);
                item4 = getItem(2);
                item5 = getItem(4);

                if ((item1 === null && (item2 === null || item3 === null)) && (item4 !== null || item5 !== null)) {
                    items.push(obj);
                    return;
                }

                // 第一行
                area = $('#' + obj.__containerId);
                area.externalWidth(width * 2 + padding).externalHeight(height);
                area.css({
                    'left': offsetX,
                    'top': 0
                });
                deal[obj.__containerId] = obj;
                count++;

                item1 = getItem(3, obj);
                if (item1 !== null) {
                    // 第二行
                    area = $('#' + item1.__containerId);
                    area.externalWidth(width * 2 + padding).externalHeight(height);
                    area.css({
                        'left': offsetX,
                        'top': height + padding
                    });

                    deal[item1.__containerId] = item1;
                    count++;
                } else {
                    item1 = getItem(1, obj);
                    item2 = getItem(1, [item1, obj]);

                    // 第二行有两个1*1
                    if (item1 !== null && item2 !== null) {
                        // 左下
                        area = $('#' + item1.__containerId);
                        area.externalWidth(width).externalHeight(height);
                        area.css({
                            'left': offsetX,
                            'top': height + padding
                        });

                        // 右下
                        area = $('#' + item2.__containerId);
                        area.externalWidth(width).externalHeight(height);
                        area.css({
                            'left': offsetX + width + padding,
                            'top': height + padding
                        });

                        deal[item1.__containerId] = item1;
                        deal[item2.__containerId] = item2;
                        count += 2;
                    } else if (item1 || item2 !== null) {
                        // 第二行只能摆放一个
                        item1 = item1 || item2;

                        area = $('#' + item1.__containerId);
                        area.externalWidth(width).externalHeight(height);
                        area.css({
                            'left': offsetX,
                            'top': height + padding
                        });

                        deal[item1.__containerId] = item1;
                        count++;
                    }
                }

                // 必须向右偏移2位置
                offsetX += (width + padding) * 2;
            }

            /**
             * 1*1
             * 尽量摆放成：第一行 1*1 1*1；第二行 2*1
             * 否则分成两行摆放
             * @private
             */
            function _place1x1() {
                item1 = getItem(1, obj);
                item2 = getItem(3);
                item3 = getItem(2);
                item4 = getItem(4);

                // 如果摆放导致不整齐，且有x*2的item，先放它
                if (((item1 === null && item2 !== null) || (item1 === null && item2 === null)) && (item3 || item4) !== null) {
                    items.push(obj);
                    return;
                }

                // 左上
                area = $('#' + obj.__containerId);
                area.externalWidth(width).externalHeight(height);
                area.css({
                    'left': offsetX,
                    'top': 0
                });
                deal[obj.__containerId] = obj;
                count++;

                if (item1 !== null && item2 !== null) {
                    // 右上
                    area = $('#' + item1.__containerId);
                    area.externalWidth(width).externalHeight(height);
                    area.css({
                        'left': offsetX + width + padding,
                        'top': 0
                    });

                    // 下方
                    area = $('#' + item2.__containerId);
                    area.externalWidth(width * 2 + padding).externalHeight(height);
                    area.css({
                        'left': offsetX,
                        'top': height + padding
                    });

                    deal[item1.__containerId] = item1;
                    deal[item2.__containerId] = item2;
                    count += 2;
                    offsetX += (width + padding) * 2;
                } else if (item1 !== null) {
                    // 下方
                    area = $('#' + item1.__containerId);
                    area.externalWidth(width).externalHeight(height);
                    area.css({
                        'left': offsetX,
                        'top': height + padding
                    });

                    deal[item1.__containerId] = item1;
                    count++;
                    offsetX += width + padding;
                } else if (item2 !== null) {
                    // 下方
                    area = $('#' + item2.__containerId);
                    area.externalWidth(width * 2 + padding).externalHeight(height);
                    area.css({
                        'left': offsetX,
                        'top': height + padding
                    });

                    deal[item2.__containerId] = item2;
                    count++;
                    offsetX += (width + padding) * 2;
                } else {
                    offsetX += width + padding;
                }
            }

            // 从队列中取item处理
            while (true) {
                if (count >= options.items.length) {
                    break;
                }
                obj = items[index];

                // 可能前面已经处理过，不重复处理
                if (typeof(deal[obj.__containerId]) !== 'undefined') {
                    index++;
                    continue;
                }

                // 取一个item，在界面上摆放
                if (obj.colSpan === 2 && obj.rowSpan === 2) {
                    // 2*2，直接摆放
                    _place2x2();
                } else if (obj.colSpan === 1 && obj.rowSpan === 2) {
                    // 2*1，直接摆放
                    _place2x1();
                } else if (obj.colSpan === 2 && obj.rowSpan === 1) {
                    // 1*2
                    // 尽量两个相同的摆放在同一列
                    // 否则，尽量找两个1*1的摆放在第二行
                    _place1x2();
                } else if (obj.colSpan === 1 && obj.rowSpan === 1) {
                    // 1*1
                    // 尽量摆放成：第一行 1*1 1*1；第二行 2*1
                    // 否则分成两行摆放
                    _place1x1();
                }

                // 下一个
                index++;
            }

            // 根据内容，修正容器宽度
            this.widgetList.externalWidth(offsetX);

            // 更新滚动按钮状态
            this._updateScrollButton();

            // 调整图片位置
        },
        /**
         * @description 调整item中的图片位置，使其居中
         * @private
         */
        _layoutImage: function() {
            var _this = this;
            var image, area;
            var delay = false;

            // 水平居中通过margin-left/margin-right设置为auto来实现
            // 这里只需要计算垂直偏移，并设置margin-top，使图片垂直居中
            $.each(this.options.items, function(index, item) {
                if (delay) {
                    return;
                }

                // 取得图片对象
                area = $('#' + item.__containerId);
                image = area.find(">img").first();
                if ($.isNull(image)) {
                    return;
                }

                // 计算偏移
                if (image.height() > 0) {
                    image.css("margin-top", Math.floor((area.height() - image.height()) / 2));
                } else {
                    // 如果取不到高度，需要延迟一段时间再重新执行
                    delay = true;
                }
            });

            // 延迟执行
            if (delay) {
                window.setTimeout(function() {
                    _this._layoutImage();
                }, 200);
            }
        },
        /**
         * @description 更新滚动按钮状态
         * @private
         */
        _updateScrollButton: function() {
            var me = this;
            var listWidth = me.widgetList.externalWidth();
            var containerWidth = me.panelContentEl.width();
            var left;

            if (listWidth > containerWidth) {
                me.scrollLeft.show();
                me.scrollRight.show();

                // 根据已存在的偏移，切换滚动按钮显示状态
                left = this.widgetList.position().left;
                if (left >= 0) {
                    me.scrollLeft.addClass(scrollDisabledClass);
                } else {
                    me.scrollLeft.removeClass(scrollDisabledClass);
                }

                if (left + listWidth <= containerWidth) {
                    me.scrollRight.addClass(scrollDisabledClass);
                } else {
                    me.scrollRight.removeClass(scrollDisabledClass);
                }
            } else {
                me.scrollLeft.hide();
                me.scrollRight.hide();
                this.widgetList.css('left', 0);
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;
            if (me.containerEl) {
                if (me.panelTitleEl) {
                    me.panelTitleEl.appendTo(me.containerEl);
                }
                me.containerEl.addClass(containerClass);
                me.panelContentEl.appendTo(me.containerEl);
                me.scrollLeft.appendTo(me.containerEl);
                me.scrollRight.appendTo(me.containerEl);

                if (me.options.flat) {
                    me.containerEl.addClass(flatClass);
                }

                // 将组件渲染到布局中
                $.each(me.options.items, function(index, item) {
                    me._renderItem(item);
                });

                // 配置滚动按钮事件
                me._addEvents();
            }
        },
        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            // 删除所有子组件
            this._removeItems();

            // 解除事件绑定
            this.scrollLeft.unbind();
            this.scrollRight.unbind();
            this.widgetList.draggable('destroy');

            this._super();
        },
        /**
         * @description 配置事件
         * @private
         */
        _addEvents: function() {
            var me = this;

            var leftPushing = false;
            var rightPushing = false;
            var scrolling = false;

            // 事件：向左滚动
            function _scrollLeft() {
                me.widgetList.stop(false, true);

                var pos = me.widgetList.position().left;
                var offset = pos + (me.options.cellWidth + me.options.padding) * 2;

                if (pos >= 0) {
                    return false;
                }
                if (offset >= 0) {
                    offset = 0;
                }

                scrolling = true;
                me.widgetList.animate({
                    'left': offset
                }, {
                    duration: scrollAnimationDuration,
                    easing: "easeOutCirc",
                    complete: function() {
                        scrolling = false;

                        // 更新滚动按钮状态
                        me._updateScrollButton();

                        // 持续滚动
                        if (leftPushing && me.scrollLeft.is(":visible")) {
                            _scrollLeft();
                        }
                    }
                });

                return true;
            }

            // 事件：向右滚动
            function _scrollRight() {
                me.widgetList.stop(false, true);

                var contentWidth = me.panelContentEl.width();
                var pos = me.widgetList.position().left;
                var width = me.widgetList.externalWidth();
                var offset = pos - (me.options.cellWidth + me.options.padding) * 2;

                if (width + pos <= contentWidth) {
                    return false;
                }

                scrolling = true;
                me.widgetList.animate({
                    'left': offset
                }, {
                    duration: scrollAnimationDuration,
                    complete: function() {
                        scrolling = false;

                        // 更新滚动按钮状态
                        me._updateScrollButton();

                        // 持续滚动
                        if (rightPushing && me.scrollRight.is(":visible")) {
                            _scrollRight();
                        }
                    }
                });

                return true;
            }

            // 事件绑定
            me.scrollLeft.unbind()
                .bind('mousedown', function() {
                leftPushing = true;
                rightPushing = false;
                _scrollLeft();
            })
                .bind('mouseup mouseleave', function() {
                leftPushing = false;
            });

            me.scrollRight.unbind()
                .bind('mousedown', function() {
                leftPushing = false;
                rightPushing = true;
                _scrollRight();
            })
                .bind('mouseup mouseleave', function() {
                rightPushing = false;
            });

            // 滚轮事件
            me.containerEl.onMouseWheel(me.containerEl.get(0), function(event, data) {
                var delta = data.delta;

                // delta大于0,向左滚动；否则向右滚动
                if (delta > 0) {
                    _scrollLeft();
                } else {
                    _scrollRight();
                }

                return false;
            });
        },
        /**
         * @description 绑定外部关注的事件
         * @private
         */
        _addListener: function() {
            if (this.__dragRegistered) {
                return;
            } else {
                this.__dragRegistered = true;
            }

            var me = this;
            var widget = null;

            // 事件：拖动
            this.widgetList.draggable({
                containment: 'body',
                appendTo: 'body',
                distance: 5,
                cursorAt: {
                    left: 0,
                    top: 0
                },
                helper: function(event) {
                    var target = event.target;
                    var obj = null;
                    var helper = null;
                    var id = '';

                    // 找到拖动的widget
                    me.widgetList.children().each(function(index, div) {
                        if ($.isNull(div)) {
                            return;
                        }

                        if (target.id === div.id || $.contains(div, target)) {
                            obj = $(div);
                        }
                    });

                    // 如果尝试拖动Widget，创建一个helper
                    if (obj) {
                        helper = obj.clone();
                        helper.addClass(itemDraggingClass);
                        if (me.options.flat) {
                            helper.addClass(flatClass);
                        }
                        me.widgetList.draggable('option', 'cursorAt', {
                            left: helper.width() / 2,
                            top: helper.height() / 2
                        });

                        // 找到对应的item
                        id = obj.attr('id');
                        for (var i = 0; i < me.options.items.length; i++) {
                            if (me.options.items[i].__containerId === id) {
                                widget = me.options.items[i];
                                break;
                            }
                        }
                    } else {
                        widget = null;
                        helper = null;
                    }

                    return helper;
                },
                start: function(event) {
                    me._trigger('drag', event, widget);
                },
                stop: function(event) {
                    me._trigger('drop', event, widget);
                },
                drag: function(event) {
                    me._trigger('dragging', event, widget);
                }
            });
        },
        /**
         * @description 触发事件
         * @param {String} eventName 事件名
         * @param {Object} event 事件对象
         * @param {Object} args 参数
         * @private
         */
        _trigger: function(eventName, event, args) {
            if ($.isNull(this.handlers)) {
                return;
            }

            // 查找回调函数
            var fn = this.handlers[eventName];
            if (!$.isFunction(fn)) {
                return;
            }

            // 执行回调
            fn(event, args);
        },
        /**
         * @private
         * @description 创建布局
         */
        _createPanelContent: function() {
            var me = this;
            var widgetList;

            // 一级容器
            me.panelContentEl = $("<div>").addClass(contentClass).addClass(defaultContentClass);

            // 二级容器，放置Table
            widgetList = me.widgetList = $("<div>");

            // 设置样式
            widgetList.addClass(widgetListClass).appendTo(me.panelContentEl);

            // 滚动按钮
            me.scrollLeft = $("<div>").addClass(scrollLeftClass);
            me.scrollRight = $("<div>").addClass(scrollRightClass);
        },
        /**
         * @description 渲染item到容器中
         * @param {Object} item 子组件对象
         * @private
         */
        _renderItem: function(item) {
            if ($.isNull(item)) {
                return;
            }

            var tip = "<" + item.name + ">";
            if (!$.isNull(item.desc)) {
                tip += "<br>" + item.desc;
            }

            var id = idPrefix + (++uuid);
            var area = $("<div>");
            area.attr('id', id).addClass(widgetItemClass).appendTo(this.widgetList);

            var image = $("<img>");
            image.attr('src', item.imagePath).appendTo(area);

            var info = $("<div>");
            info.attr("title", tip).addClass(itemInfoClass).appendTo(area);

            var name = $("<span>");
            name.html(item.name).addClass(itemNameClass).appendTo(info);

            var desc = $("<span>");
            desc.html(item.desc).addClass(itemDetailClass).appendTo(info);

            item.__containerId = id;
        },
        /**
         * @description 动态添加组件
         * @param {Object/Array} items 组件对象或组件对象数组
         */
        _addItems: function(items) {
            var item;

            for (var i = 0; i < items.length; i++) {
                item = items[i];
                this.options.items.push(item);
                this._renderItem(item);
            }
        },
        /**
         * @description 从布局动态删除子组件
         * @param {Array} items 待删除的子组件索引
         * @private
         */
        _removeItems: function(items) {
            var id;
            var item;

            if ($.isNull(items)) {
                this.options.items = [];
                this.widgetList.empty();
            } else {
                items.sort();
                for (var i = items.length - 1; i >= 0; i--) {
                    for (var j = 0; j < this.options.items.length; j++) {
                        id = items[i];
                        item = this.options.items[j];

                        if (($.type(id) === "string" && id === item.name) || ($.type(id) === "number" && id === j)) {
                            this.widgetList.find("#" + item.__containerId).remove();
                            this.options.items.splice(j, 1);
                            break;
                        }
                    }
                }
            }
        },
        /**
         * @event
         * @description 开始拖动事件
         * @name Sweet.panel.WidgetList#drag
         * @param {Object} event 事件对象
         * @param {Object} widget 拖动的item对象
         */
        drag: function(event, widget) {
            $.log(event + "," + widget);
        },
        /**
         * @event
         * @description 正在拖动事件
         * @name Sweet.panel.WidgetList#dragging
         * @param {Object} event 事件对象
         * @param {Object} widget 拖动的item对象
         */
        dragging: function(event, widget) {
            $.log(event + "," + widget);
        },
        /**
         * @event
         * @description 拖动结束事件
         * @name Sweet.panel.WidgetList#drop
         * @param {Object} event 事件对象
         * @param {Object} widget 拖动的item对象
         */
        drop: function(event, widget) {
            $.log(event + "," + widget);
        }
    });

    /**
     * @description Widget列表布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建布局容器：
     * var sweetWidgetList = Sweet.panel.WidgetList();
     */
    Sweet.panel.WidgetList = $.sweet.widgetContainerWidgetlist;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 面板上的日期组件
 * 2012/12/12
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var defaultDateClass = "sweet-container-date",
        defaultDateTitleClass = "sweet-container-date-title",
        defaultDateTitleNumClass = "sweet-container-date-title-num",
        defaultDateTitleMonthClass = "sweet-container-date-title-month",
        defaultDateContentClass = "sweet-container-date-content",
        defaultDateContentWeekClass = "sweet-container-content-week",
        defaultDateContentNumListClass = "sweet-container-content-num sweet-container-content-num-others";

    $.widget("sweet.widgetContainerDate", $.sweet.widgetContainer, /** @lends Sweet.panel.Date.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-date]:",
        months: $.objClone(Sweet.constants.MONTHS),
        eventNames: /** @lends Sweet.panel.Date.prototype*/
        {
            /**
             * @event
             * @description 日期点击事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            "click": "日期点击事件",
            /**
             * @event
             * @description 日期变化时触发
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            change: "日期变化时触发"
        },
        options: {
            /**
             * 年
             * @type number
             * @default 2012
             */
            year: 2012,
            /**
             * 月份,默认一月, 1到12的值
             * @type number
             * @default 1
             */
            month: 1
        },
        /**
         * @private
         * @description 设置日期
         * @param {Array} arrVal 待设置日期, 为数组格式. 例如["2012-12-8", "2012-12-9", "2012-12-10"]
         */
        _setValue: function(arrVal) {
            if (!(arrVal instanceof Array)) {
                $.error("setValue(): The input argument must be an array type!");
                return;
            }

            var me = this,
                emEl, arr, options = this.options,
                defaultClassName = defaultClassName,
                year = options.year,
                month = options.month;
            $.each(arrVal, function(index, value) {
                arr = value.split("-");
                if ((year === $.string.toNumber(arr[0])) && (month === $.string.toNumber(arr[1]))) {
                    emEl = me.dateEmEl[$.string.toNumber(arr[2])];
                    // 判断日期是否被选中
                    if (!emEl.hasClass(defaultClassName)) {
                        emEl.click();
                    }
                }
            });
        },
        /**
         * @private
         * @description 获取选中日期值
         * @return 返回日期数组 ["2012-12-8", "2012-12-9", "2012-12-10"]
         */
        _getValue: function() {
            var value = [];
            for (var key in this.value) {
                value.push(this.value[key]);
            }
            this._info("getValue(): " + value);
            return value;
        },
        /**
         * @private
         * @description 日期组件渲染
         */
        _widgetRender: function() {
            if (this.containerEl) {
                this.dateEl.appendTo(this.containerEl);
            }
        },
        /**
         * @private
         * @description 创建日期面板
         */
        _createContainer: function() {
            var me = this,
                dateEl = me.dateEl = $("<div>"),
                options = me.options;
            // 初始化对象, 保存日期
            me.value = {};
            me.length = 0;
            // 判断是否闰年
            if ($.date.isLeapYear(options.year)) {
                me.months[1] = 29;
            } else {
                // 不为闰年，应该恢复2月份天数为28天。问题单号：DTS2013072606986 
                me.months[1] = 28;
            }
            me._createDateTitle();
            me._createDateContent();
            dateEl.addClass(defaultDateClass + " " + options.widgetClass);
        },
        /**
         * @private
         * @description 创建日期标题
         */
        _createDateTitle: function() {
            var dateTitleEl = this.dateTitleEl = $("<div>"),
                options = this.options,
                numEmEl = $("<em>"),
                monthEmEl = $("<em>");
            numEmEl.html(options.month).addClass(defaultDateTitleNumClass).appendTo(dateTitleEl);
            monthEmEl.html(Sweet.core.i18n.month[options.month - 1]).addClass(defaultDateTitleMonthClass)
                .appendTo(dateTitleEl);
            dateTitleEl.addClass(defaultDateTitleClass).appendTo(this.dateEl);
        },
        /**
         * @private
         * @description 创建日期标题
         */
        _createDateContent: function() {
            var me = this,
                dateContentEl = this.dateContentEl = $("<div>"),
                options = this.options,
                months = this.months,
                weekEl = $("<div>"),
                ulEl = $("<ul>"),
                liEl,
                emEl,
                dateEmEl = this.dateEmEl = {},
                date = new Date(options.year, options.month - 1, 1),
                day = date.getDay(),
                days = months[options.month - 1],
                rows = Math.ceil((day + days) / 7),
                numCount = 0;
            weekEl.html("<em>" + Sweet.core.i18n.week[6] +
                "</em><em>" + Sweet.core.i18n.week[0] +
                "</em><em>" + Sweet.core.i18n.week[1] +
                "</em><em>" + Sweet.core.i18n.week[2] +
                "</em><em>" + Sweet.core.i18n.week[3] +
                "</em><em>" + Sweet.core.i18n.week[4] +
                "</em><em>" + Sweet.core.i18n.week[5] +
                "</em>")
                .addClass(defaultDateContentWeekClass).appendTo(dateContentEl);
            // 处理日期
            for (var i = 0; i < rows; i++) {
                liEl = $("<li>");
                if (0 === i) {
                    for (var j = 0; j < 7; j++) {
                        emEl = $("<em>");
                        if (j < day) {
                            emEl.html("&nbsp;").appendTo(liEl);
                        } else {
                            emEl.text(++numCount)
                                .addClass("num")
                                .bind("click", {
                                self: me
                            }, this._dateNumClick)
                                .appendTo(liEl);
                            if (0 === j || 6 === j) {
                                emEl.addClass("rest");
                            }
                            dateEmEl[numCount] = emEl;
                        }
                    }
                } else if (i === rows - 1) {
                    for (var m = 0; m < 7; m++) {
                        emEl = $("<em>");
                        if (numCount >= days) {
                            emEl.html("&nbsp;").appendTo(liEl);
                        } else {
                            emEl.text(++numCount)
                                .addClass("num")
                                .bind("click", {
                                self: me
                            }, this._dateNumClick)
                                .appendTo(liEl);
                            if (0 === m || 6 === m) {
                                emEl.addClass("rest");
                            }
                            dateEmEl[numCount] = emEl;
                        }
                    }
                } else {
                    for (var n = 0; n < 7; n++) {
                        emEl = $("<em>");
                        emEl.text(++numCount)
                            .addClass("num")
                            .bind("click", {
                            self: me
                        }, this._dateNumClick)
                            .appendTo(liEl);
                        if (0 === n || 6 === n) {
                            emEl.addClass("rest");
                        }
                        dateEmEl[numCount] = emEl;
                    }
                }
                liEl.addClass(defaultDateContentNumListClass).appendTo(dateContentEl);
            }
            dateContentEl.addClass(defaultDateContentClass).appendTo(this.dateEl);
        },
        /**
         * @private
         * @description 日期数字绑定事件
         * @param {Object} event 日期数字对象
         */
        _dateNumClick: function(event) {
            var me = $(this),
                self = event.data.self,
                options = self.options,
                oldLength = self.length,
                defaultClassName = "current",
                day = me.text(),
                date = options.year + "-" + options.month + "-" + day,
                selected = false;

            if (me.hasClass(defaultClassName)) {
                selected = false;
                me.removeClass(defaultClassName);
                delete self.value[day];
                self.length--;
                self._info("_dateNumClick() Pop: " + date);
            } else {
                selected = true;
                me.addClass(defaultClassName);
                self.value[day] = date;
                self.length++;
                self._info("_dateNumClick() Push: " + date);
            }

            // 触发click监听
            self._triggerHandler(event, "click", {
                "value": date,
                "selected": selected
            });

            // 触发change事件
            if (oldLength !== self.length) {
                self._triggerHandler(event, "change", {
                    "value": self.value
                });
            }
        },
        /**
         * @private
         * @description 触发注册的事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据对象
         */
        _triggerHandler: function(e, eName, data) {
            var me = this;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    func.call(null, e, data);
                }
            });
        }
    });

    /**
     * @description 日期面板
     * @class
     * @extends Sweet.container
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * </pre>
     * @example
     * 创建日期面板：
     */
    Sweet.panel.Date = $.sweet.widgetContainerDate;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 容器组件-Card布局容器
 * 2014/3/3
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var contentClass = "sweet-panel-card",
        cardClass = "sweet-panel-card-item",
        cascadCardClass = "sweet-panel-card-cascad",
        visibleClass = "sweet-panel-card-visible",
        invisibleClass = "sweet-panel-card-invisible",
        maskClass = "sweet-panel-card-mask",
        uuid = 1000;

    $.widget("sweet.widgetContainerCard", $.sweet.widgetContainerPanel, /* @lends Sweet.panel.CardPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-container-cardpanel]:",
        type: "FlowPanel",
        options: /** @lends Sweet.panel.CardPanel.prototype*/
        {
            /**
             * Card切换方式。default:普通方式，cascad:层叠方式
             * @type String
             * @default "default"
             */
            style: "default",
            /**
             * 层叠切换方式下，上层的Card相对下层的Card的偏移
             * @type Number
             * @default 100
             */
            cardIndent: 100,
            /**
             * 子组件数组。注：在层叠显示方式下，须严格按照显示先后顺序保存子组件
             * @type Array
             * @default []
             */
            items: null
        },
        /**
         * 切换到指定序号的Card。非层叠方式下，先自动隐藏当前显示的Card，再显示指定的Card
         * @param index Card的序号，从0开始
         */
        showCard: function(index) {
            var items = this.options.items;
            if (index < 0 || !$.isArray(items) || index >= items.length) {
                return;
            }

            var style = this.options.style;
            var cards = this.panelContentEl.children("div." + cardClass);
            var card;
            var width, offset, count;

            // 不同切换方式，分开处理
            if (style === "default") {
                // 隐藏
                cards.removeClass(visibleClass).addClass(invisibleClass);

                // 显示指定的
                $(cards.get(index)).removeClass(invisibleClass).addClass(visibleClass);
            } else if (style === "cascad") {
                card = $(cards.get(index));
                count = this.panelContentEl.children("div." + cascadCardClass).length;

                // 如果目标Card已经可见，隐藏其后的可见Card
                if (card.hasClass(visibleClass)) {
                    for (var i = cards.length - 1; i > index; i--) {
                        card = $(cards.get(i));
                        if (card.hasClass(cascadCardClass)) {
                            this.hideCard();
                        }
                    }
                }
                // 如果目标Card不可见，显示出来
                else {
                    // 处理偏移
                    offset = (count + 1) * this.options.cardIndent;
                    width = this.panelContentEl.width();

                    // 从右侧滑入
                    card.css({
                        left: width + "px",
                        right: 0 - (width - offset) + "px"
                    });
                    card.addClass(cascadCardClass).removeClass(invisibleClass).addClass(visibleClass);
                    card.animate({
                        left: offset + "px",
                        right: "0px"
                    }, 200);
                }

                // 可见Card超过一个，增加遮罩
                count = this.panelContentEl.children("div." + cascadCardClass).length;
                if (count > 0) {
                    this.maskEl.detach();
                    card.before(this.maskEl);
                }
            }

            // 刷新切换到最前的子组件
            var item = items[index];
            if ($.isFunction(item.doLayout)) {
                item.doLayout();
            }
        },
        /**
         * 在层叠方式下可用，隐藏最上层的Card
         */
        hideCard: function() {
            var me = this;
            var cards, card, preCard;
            var width, offset;

            if (this.options.style !== "cascad") {
                return;
            }

            var count = this.panelContentEl.children("div." + cascadCardClass).length;
            if (count < 1) {
                this.maskEl.detach();
                return;
            }

            // 隐藏最后一个可见的Card
            width = this.panelContentEl.width();
            offset = count * this.options.cardIndent;
            cards = $(this.panelContentEl.children("div." + cascadCardClass));
            card = cards.last();

            card.removeClass(cascadCardClass);
            card.animate({
                left: width + "px",
                right: 0 - (width - offset) + "px"
            }, 200, function() {
                card.removeClass(visibleClass).addClass(invisibleClass);
            });

            // 移动遮罩
            this.maskEl.detach();
            if (count > 1) {
                preCard = $(cards.get(cards.length - 2));
                preCard.addClass(cascadCardClass).before(this.maskEl);
            }
        },
        /**
         * @private
         * @descripition 重新计算流式布局
         */
        _doLayout: function() {
            var me = this;
            var panelWidth;
            var panelHeight;
            var item;

            // 渲染前不处理
            if (!me.rendered) {
                return;
            }

            // 调用父类的_doLayout，调整panelContentEl的大小
            this._super();

            // 如果折叠或隐藏，不需要处理子组件
            if (me.panelContentEl.is(":hidden")) {
                return;
            }

            // 如果没有子组件，不再处理
            if (me.options.items.length === 0) {
                return;
            }

            // 如果容器大小为0，不需要处理
            if (me.panelContentEl.width() < 1 || me.panelContentEl.height < 1) {
                return;
            }

            // 当前Panel大小
            panelWidth = me.panelContentEl.width();
            panelHeight = me.panelContentEl.height();

            // 调用子组件的dolayout
            for (var i = 0; i < me.options.items.length; i++) {
                item = me.options.items[i];
                if ($.isFunction(item.doLayout)) {
                    item.doLayout();
                }
            }
        },
        /**
         * 动态添加项目
         * @param items
         * @private
         */
        _addItems: function(items) {
            var options = this.options;
            var item;

            // 记录到列表中
            options.items = options.items.concat(items);

            // 创建容器并插入
            for (var i = 0; i < items.length; i++) {
                item = items[i];
                me._renderItem(item, this._addCard());
            }
        },
        /**
         * @description 添加一个card容器
         * @returns {string}
         * @private
         */
        _addCard: function() {
            var me = this;
            var id = me.options.id + "-card-" + (uuid++);
            var cardEl = $("<div></div>");

            cardEl.attr("id", id).addClass(cardClass).appendTo(me.panelContentEl);

            // 缺省显示第一个
            if (me.panelContentEl.children("." + cardClass).length > 1) {
                cardEl.addClass(invisibleClass);
            } else {
                cardEl.addClass(visibleClass);
            }
            return id;
        },
        /**
         * 渲染一个子组件
         * @param item
         * @param id
         * @private
         */
        _renderItem: function(item, id) {
            if ($.isFunction(item.render)) {
                item.render(id);
            } else if (!$.isNull(item.html)) {
                $("#" + id).html(item.html);
                item.options = $.extend({}, item.options, item);
            } else {
                this._error("item is invalid:" + item);
            }
        },
        /**
         * @description 从布局动态删除子组件
         * @param {Object/Array} items 待删除的子组件索引
         * @private
         */
        _removeItems: function(items) {
            var me = this;
            var i;
            var item;
            var card;
            var cards;
            var index;

            cards = me.panelContentEl.children("div." + cardClass);

            // 如果输入为空，表示删除所有组件。构建一个全索引
            if ($.type(items) === 'undefined') {
                items = [];
                for (i = 0; i < me.options.items.length; i++) {
                    items.push(i);
                }
            }

            // 删除内容
            items.sort();
            for (i = items.length - 1; i >= 0; i--) {
                index = items[i];

                item = me.options.items[index];
                card = cards.children().eq(index);

                // 销毁子组件
                if (item && $.isFunction(item.destroy)) {
                    item.destroy();
                }
                me.options.items.splice(index, 1);

                // 删除子容器
                card.remove();
            }
        },
        /**
         * @private
         * @description 面板渲染
         */
        _widgetRender: function() {
            var me = this;

            if (me.containerEl) {
                this._super();

                // 将组件附着到容器内
                $.each(me.options.items, function(index, item) {
                    me._renderItem(item, me._addCard());
                });
            }
        },
        /**
         * @private
         * @description 创建流式布局
         */
        _createPanelContent: function() {
            this.maskEl = $("<div></div>").addClass(maskClass);
            this.panelContentEl = $("<div>").addClass(contentClass);

            if (this.options.items === null) {
                this.options.items = [];
            }
        },

        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            this._removeItems();
            this._super();
        }
    });

    /**
     * @description 流式布局容器
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.container.Panel
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * </pre>
     * @example
     * 创建流式布局容器：
     * var sweetHPanel = Sweet.panel.FlowPanel();
     */
    Sweet.panel.CardPanel = $.sweet.widgetContainerCard;
}(jQuery));

;
/**
 * @fileOverview
 * <pre>
 * 类组件--计算器组件
 * 2013/2/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    /**
     * 保存组件对象
     */
    /*var buttonValue = ["Max", "Min", "Avg", "Sum", "Count", "7", "8", "9", "+",
        "(", "4", "5", "6", "-", ")", "1", "2", "3", "*", "&lt;", "0",
            "Del", ".", "/", "&gt;"],*/
    // 业务需求，暂时屏蔽聚合函数; 去掉 "&lt;","&gt;"
    var buttonValue = ["7", "8", "9", "+",
        "(", "4", "5", "6", "-", ")", "1", "2", "3", "*", "Del", "0",
        ".", "/"],
        defaultInputEmptyDivClass = "sweet-calculator-textarea-input-emptyDiv";
    var consEnum = {
        NCZERO: 0,
        NCONE: 1,
        NCTWO: 2,
        NCTHREE: 3,
        WIDTH: 40,
        THEIGHT: 7,
        TPERCENTAGE: 0.1,
        TAHEIGHT: 8,
        TAWIDTH: 8,
        TAPERCENTAGE: 0.43,
        BHEIGHT: 10,
        BPERCENTAGE: 0.47
    };

    $.widget("sweet.widgetCalculator", $.sweet.widget, /** @lends Sweet.Calculator.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-calculator]:",
        type: "calculator",
        eventNames: /** @lends Sweet.Calculator.prototype*/
        {
            /**
             * @event
             * @description 删除事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            clear: "删除事件"
        },
        // calculator组件公共配置参数
        options: /** @lends Sweet.Calculator.prototype*/
        {
            /**
             * @description 组件默认宽度
             * @type {String/Number}
             * @default 480px
             */
            width: 480,

            /**
             * @description 组件默认高度
             * @type {String/Number}
             * @default 300px
             */
            height: 300
        },

        /**
         * @description 可从外部拖动添加公式
         * @param {Object} value 组件值
         */
        addFormula: function(obj) {
            if ($.isNull(obj)) {
                return;
            }
            var me = this,
                objText = obj.text,
                $t = $(me.formElement)[0],
                myText = "[" + obj.text + "]";

            if (objText in me.objMap) {
                me.objMap[objText] = obj;
            } else {
                me.objMap[objText] = obj;
                me.objMap.length++;
            }
            if ($t.selectionStart || consEnum.NCZERO === $t.selectionStart) {
                var startPos = $t.selectionStart,
                    endPos = $t.selectionEnd,
                    restoreTop = $t.scrollTop;
                $t.value = $t.value.substring(0, startPos) + myText + $t.value.substring(endPos, $t.value.length);
                if (restoreTop > consEnum.NCZERO) {
                    $t.scrollTop = restoreTop;
                }
                $t.focus();
                $t.selectionStart = startPos + myText.length;
                $t.selectionEnd = startPos + myText.length;
            } else {
                $t.value += myText;
                $t.focus();
            }
        },

        /**
         * @description 取得文本域
         * @return {object} textAreaObj
         */
        getTextAreaObj: function() {
            var me = this,
                textAreaObj = me.formElement;
            return textAreaObj;
        },

        /**
         * @description 可删除从外部拖动添加的公式
         * @param {array} obj 要删除的拖入的对象数组         
         */
        deleteFormula: function(array) {
            var me = this,
                text = me.formElement.val(),
                name,
                names,
                val = "",
                flag,
                delArray = [],
                valTest = text;
            if ($.isNull(array)) {
                return;
            }
            // 循环找出源数据中不存在了的拖动数据
            for (name in me.objMap) {
                if ($.isNotNull(me.objMap[name].value)) {
                    for (var i = 0; i < array.length; i++) {
                        flag = false;
                        if (me.objMap[name].value === array[i].value) {
                            flag = true;
                        }
                        if (!(flag === true)) {
                            delArray.push(array[i]);
                            delete me.objMap[array[i].text];
                            me.objMap.length--;
                        }
                    }
                }
            }
            for (var j = 0; j < delArray.length; j++) {
                names = $.regExp.escape("[" + delArray[j].text + "]");
                var reg = new RegExp(names, "g");
                val = valTest.replace(reg, "");
                valTest = val;
            }
            me.formElement.val(valTest);
        },
        /**
         * @descriptio 设置计算器默认公式
         * @param {Object} obj 组件值
         */
        setDefaultFormula: function(obj) {
            if ($.isNull(obj)) {
                return;
            }
            var me = this,
                myText = obj.text,
                $t = $(me.formElement)[0];
            var reg = /\[([^\[])*\]/g;
            var tempObj = {}, tempName, nameObj = [];
            if (reg.test(myText)) {
                nameObj = myText.match(reg);
                var keyObj = obj.value.match(reg);
                for (var i = 0; i < nameObj.length; i++) {
                    tempName = nameObj[i];
                    tempObj[tempName] = {
                        "value": keyObj[i],
                        "text": nameObj[i]
                    };
                }
            } else {
                tempObj = obj;
            }

            me.objMap = tempObj;

            if ($t.selectionStart || consEnum.NCZERO === $t.selectionStart) {
                var startPos = $t.selectionStart,
                    endPos = $t.selectionEnd,
                    restoreTop = $t.scrollTop;
                $t.value = $t.value.substring(0, startPos) + myText + $t.value.substring(endPos, $t.value.length);
                if (restoreTop > consEnum.NCZERO) {
                    $t.scrollTop = restoreTop;
                }
                $t.focus();
                $t.selectionStart = startPos + myText.length;
                $t.selectionEnd = startPos + myText.length;
            }
        },

        /**
         * @private
         * @description 获取组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this,
                text = me.formElement.val(),
                name,
                names,
                re,
                val = "",
                reg,
                valTest = text,
                tempReg = /\[([^\[])*\]/g;

            // 循环替换
            for (name in me.objMap) {
                if ($.isNotNull(me.objMap[name].value)) {
                    if (!tempReg.test(name) && !tempReg.test(me.objMap[name].value)) {
                        names = $.regExp.escape("[" + name + "]");
                        reg = new RegExp(names, "g");
                        val = valTest.replace(reg, "[" + me.objMap[name].value + "]");
                    } else {
                        //针对初始设置过公式值的取法
                        names = name;
                        val = valTest.replace(names, me.objMap[name].value);
                    }

                    valTest = val;
                }
            }
            return {
                value: ($.isNotNull($.trim(val))) ? val : text,
                text: text,
                data: me.objMap
            };
        },
        /**
         * @private
         * @description 获取拖入组件的值
         * @return {Array} 返回值
         */
        getAddedFormula: function() {
            var me = this,
                addedObjArr = [];
            // 循环替换
            for (var name in me.objMap) {
                if ("length" !== name) {
                    addedObjArr.push(me.objMap[name]);
                }
            }
            return addedObjArr;
        },

        /**
         * @private
         * @description 重绘组件
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                width = options.width,
                height = options.height,
                calculatorEl = me.calculatorEl;
            calculatorEl.width(width);
            calculatorEl.height(height);
        },

        /**
         * @private
         * @description 创建Calculator组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                options = me.options,
                calculatorClass = "sweet-calculator",
                calculatorEl = me.calculatorEl = $("<div>");

            // 定义objMap，用来存储从外部拖进来的数据对象
            var objMap;
            objMap = me.objMap = {};
            me.objMap.length = consEnum.NCZERO;
            calculatorEl.addClass(options.widgetClass + " " + calculatorClass)
                .attr("id", options.id)
                .width(options.width)
                .height(options.height);

            // 创建calculator组件
            me._createCalculatorWidget();

            // 设置为空时显示的字符
            me._setEmptyText(false);
        },

        /**
         * @private
         * @description 创建Calculator组件
         */
        _createCalculatorWidget: function() {
            var me = this,
                options = me.options,
                contentEl;
            contentEl = me.contentEl = $("<div>").appendTo(me.calculatorEl)
                .addClass("sweet-calculator-module")
                .addClass(options.widgetClass)
                .width(options.width)
                .height(options.height);
            me._createTitleContent();
            me._createTextAreaContent();
            me._createButtonContent();
            me._setEmptyText(false);
        },

        /**
         * @private
         * @description 创建Calculator组件标题部分内部布局
         */
        _createTitleContent: function() {
            var me = this,
                options = me.options,
                titleClearPicEl,
                titleEmEl,
                titleSpanEl,
                titleDivEl;
            titleDivEl = $("<div>").appendTo(me.contentEl)
                .width(options.width)
                .height((options.height) * consEnum.TPERCENTAGE - consEnum.THEIGHT)
                .addClass("sweet-calculator_title");
            titleEmEl = $("<em>").text(Sweet.core.i18n.calculator.title)
                .css({
                height: "100%"
            })
                .appendTo(titleDivEl);
            titleSpanEl = $("<span>").css({
                height: "100%"
            })
                .appendTo(titleDivEl);
            titleClearPicEl = $("<a>").attr("title", Sweet.core.i18n.calculator.button)
                .bind("click", {
                "me": me
            }, function() {
                me.formElement.val("");
                me.objMap = {};
                me.objMap.length = consEnum.NCZERO;
                me._setEmptyText(false);
                me._triggerHandler(null, "clear", me.getAddedFormula());
            })
                .addClass("sweet-calculator-clearPic")
                .appendTo(titleSpanEl);
        },

        /**
         * @private
         * @description 创建Calculator组件文本域部分
         */
        _createTextAreaContent: function() {
            var me = this,
                options = me.options,
                textAreaClass = "sweet-calculator_textarea",
                formElement = me.formElement = $("<textarea>"),
                width = options.width,
                height = (options.height) * consEnum.TAPERCENTAGE,
                formDiv1El = me.formDiv1El = $("<div>").width(width)
                    .height(height)
                    .addClass("sweet-calculator_textarea_input")
                    .appendTo(me.contentEl),
                formDiv2El = me.formDiv2El = $("<div>").width(width)
                    .height(height).appendTo(formDiv1El),
                value = $.nullToString(options.value);
            me.formElement.focus(function() {
                me._setEmptyText(true);
            });
            me.formElement.blur(function() {
                me._setEmptyText(false);
            });
            formElement.width(options.width - consEnum.TAWIDTH)
                .height((options.height) * consEnum.TAPERCENTAGE - consEnum.TAHEIGHT)
                .keydown(function() {
                return false;
            })
                .addClass(textAreaClass).val(value);
            formElement.appendTo(formDiv2El);
        },

        /**
         * @private
         * @description 创建Calculator组件按钮部分的布局
         * @return {Object} 返回按钮对象
         */
        _createButtonContent: function() {
            var me = this,
                options = me.options,
                buttonAEl = this.buttonAEl,
                buttonLiEl,
                buttonUlEl,
                buttonDivEl = $("<div>").appendTo(me.contentEl)
                    .width(options.width)
                    .height((options.height) * consEnum.BPERCENTAGE - consEnum.BHEIGHT)
                    .addClass("sweet-calculator_button_div");
            var buttonWidth = options.width * 0.12;
            var buttonHeight = ((options.height) * consEnum.BPERCENTAGE - consEnum.BHEIGHT) * 0.25;
            // 循环创建按钮
            for (var i = 0; i < buttonValue.length; i++) {
                if (14 === i) {
                    buttonAEl = $("<button>").val(buttonValue[i])
                        .bind("click", {
                        "me": me
                    }, me._onClick)
                        .text(buttonValue[i])
                        .addClass("sweet-calculator_btn")
                        .addClass("sweet-calculator_delBtn")
                        .css({
                        width: buttonWidth,
                        height: buttonHeight * 1.8
                    })
                        .css({
                        top: options.height * (consEnum.TPERCENTAGE + consEnum.TAPERCENTAGE) + buttonHeight * 2 + 10
                    });
                } else {
                    if (consEnum.NCZERO === i % 5) {
                        buttonLiEl = $("<li>").css({
                            height: "100%",
                            width: (10 <= i) ? (buttonWidth + 13) * 4 : (buttonWidth + 13) * 5
                        });
                        buttonUlEl = $("<ul>").css({
                            height: buttonHeight,
                            width: (10 <= i) ? (buttonWidth + 13) * 4 : (buttonWidth + 13) * 5
                        });
                        buttonLiEl.appendTo(buttonUlEl);
                        buttonUlEl.appendTo(buttonDivEl);
                    }
                    buttonAEl = $("<button>").val(buttonValue[i])
                        .bind("click", {
                        "me": me
                    }, me._onClick)
                        .text(buttonValue[i])
                        .addClass("sweet-calculator_btn")
                        .css({
                        width: buttonWidth,
                        height: buttonHeight * 0.8
                    });
                    if (15 === i) {
                        var width = options.width * 0.24 + 13;
                        buttonAEl.css({
                            width: width
                        });
                    }
                }
                buttonAEl.appendTo(buttonLiEl);
            }
            return buttonDivEl;
        },

        /**
         * @private
         * @description insertAtCursor()函数用来实现根据光标位置插入值 
         * @param {Object} me 计算器组件对象
         * @param {String} myValue 所点击计算器按钮的值
         * @param {Object} formElement 文本域对象
         * @param {Number} startPos/endPos 起始/结束位置
         */
        _insertAtCursor: function(me, myValue, formElement, startPos, endPos) {
            me._setEmptyText(true);
            if (formElement.selectionStart || consEnum.NCZERO === formElement.selectionStart) {
                // 在加入数据之前获得滚动条的高度
                var restoreTop = formElement.scrollTop;
                formElement.value = formElement.value.substring(0, startPos) + myValue + formElement.value.substring(endPos, formElement.value.length);
                if (restoreTop > consEnum.NCZERO) { // 如果滚动条高度大于0
                    formElement.scrollTop = restoreTop; // 返回
                }
                me.formElement.focus(); // 输入元素textara获取焦点
                formElement.selectionStart = startPos + myValue.length;
                formElement.selectionEnd = startPos + myValue.length;
            } else { // 在输入元素textarea没有定位光标的情况
                formElement.value += myValue;
                formElement.focus();
            }
        },

        /**
         * @private
         * @description iSelectField()函数用来实现删除元素后光标定位
         * @param {Object} formElement 文本域对象
         * @param {Number} start, end 起始/结束位置
         */
        _iSelectField: function(formElement, start, end) {
            // end未定义，则为设置光标位置
            if (arguments[2] === undefined) {
                end = start;
            }
            formElement.selectionStart = start;
            formElement.selectionEnd = end;
            formElement.focus();
        },

        /**
         * @private
         * @description countSubst()函数用来实现检索substr在str中出现的次数
         * @param {String} str 源字符串
         * @param {String} substr 目标字符串
         */
        _countSubstr: function(me, str, substr) {
            var count,
            reg,
            names = $.regExp.escape("[" + substr + "]");
            reg = new RegExp(names, "g");
            if (str.match(reg) === null) {
                count = consEnum.NCZERO;
            } else {
                count = str.match(reg).length;
            }
            //return count;
            if (!count) {
                delete me.objMap[substr];
                me.objMap.length--;
            }
        },

        /**
         * @private
         * @description 操作错误时的提示信息
         */
        _error: function() {
            Sweet.Dialog.error({
                width: 330,
                height: 130,
                message: Sweet.core.i18n.calculator.tip
            });
        },

        /**
         * @private
         * @description 点击清零按钮
         * @param {Object} me 计算器组件对象
         * @param {Object} formElement 文本域对象
         * @param {Number} startPos 起始位置
         */
        _onClickDel: function(me, formElement, startPos) {
            var disp, last;
            //当光标所在位置位于文本域最开始时点击清零无操作
            if (startPos) {
                var v = $(me.formElement).val(),
                    text;

                // 取当前光标所在位置之前的所有内容
                disp = me.formElement.val().substring(0, startPos);

                //取光标前一个字符
                last = disp.substring(disp.length - consEnum.NCONE, disp.length);

                //判断文本域当前内容是否为空
                if (v === "") {
                    me._setEmptyText(false);
                }

                /**
                 * @description 使用if语句判断如果当前光标之前的内容是不是一个指标，如果是删除整个指标，否则只删除一个字符
                 */
                if (last === "]") {
                    // 如果光标前一个字符为"]"，找到与其匹配的"["，删除所有括起来的内容
                    text = disp.substring(disp.lastIndexOf("[") + consEnum.NCONE, startPos - consEnum.NCONE);
                    $(formElement).val(v.substring(0, disp.lastIndexOf("[")) + v.substring(startPos, v.length));
                    me._iSelectField(formElement, startPos - text.length - consEnum.NCTWO);
                    me._countSubstr(me, $(formElement).val(), text);
                } else if (last === "[") {
                    // 如果光标前一个字符为"["，找到与其匹配的"]"，删除所有括起来的内容
                    var disp1 = v.substring(startPos, v.length);
                    text = disp1.substring(0, disp1.indexOf("]"));
                    $(formElement).val(v.substring(0, startPos - consEnum.NCONE) + v.substring(startPos + text.length + consEnum.NCONE, v.length));
                    me._iSelectField(formElement, startPos - consEnum.NCONE);
                    me._countSubstr(me, $(formElement).val(), text);
                } else {
                    if (disp.lastIndexOf("[") > disp.lastIndexOf("]")) {
                        // 如果光标的位置在一个完整的"["和"]"之间，找到匹配的"[]",删除所有括起来的内容
                        var disp2 = v.substring(disp.lastIndexOf("["), v.length);
                        text = disp2.substring(consEnum.NCONE, disp2.indexOf("]"));
                        $(formElement).val(v.substring(0, disp.lastIndexOf("[")) + v.substring(disp.lastIndexOf("[") + text.length + consEnum.NCTWO, v.length));
                        me._iSelectField(formElement, disp.lastIndexOf("["));
                        me._countSubstr(me, $(formElement).val(), text);
                    } else {
                        $(formElement).val(v.slice(0, startPos - consEnum.NCONE) + v.slice(startPos));
                        me._iSelectField(formElement, startPos - consEnum.NCONE);
                    }
                }
            }
        },

        /**
         * @private
         * @description 文本域不为空点击非清零按钮时进行简单校验
         * @param {Object} me 计算器组件对象
         * @param {Object} formElement 文本域对象
         * @param {String} string 所点击计算器按钮的值
         * @param {String} last/lastThree 光标前最后一个/三个字符
         * @param {Number} startPos/endPos 起始/结束位置
         */
        _onClickOther: function(string, last, lastThree, startPos, endPos) {
            var me = this,
                formElement = $(me.formElement)[0];
            if (lastThree === "Max" || lastThree === "Min" || lastThree === "Avg" || lastThree === "Sum" || lastThree === "unt") {
                if (string === '(') {
                    me._insertAtCursor(me, string, formElement, startPos, endPos);
                } else {
                    me._error();
                }
            } else {
                if (last === "(") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === ">" || string === "<" || string === '.') {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else if (last === ")") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === ">" || string === "<" || string === ")") {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    } else {
                        me._error();
                    }
                } else if (last === ">" || last === "<") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === "." || string === ")" || string === ">" || string === "<") {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else if (last === ".") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === "." || string === "(" || string === ")" || string === "<" || string === ">") {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else if (last === "+" || last === "-" || last === "*") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === '.' || string === "<" || string === ">" || string === ")") {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else if (last === "/") {
                    if (string === "+" || string === "-" || string === "*" || string === "/" || string === "." || string === "<" || string === ">" || string === ")" || string === '0') {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else if (last === "0" || last === "1" || last === "2" || last === "3" || last === "4" || last === "5" || last === "6" || last === "7" || last === "8" || last === "9") {
                    if (string === "(") {
                        me._error();
                    } else {
                        me._insertAtCursor(me, string, formElement, startPos, endPos);
                    }
                } else {
                    me._insertAtCursor(me, string, formElement, startPos, endPos);
                }
            }
        },

        /**
         * @private
         * @description 创建按钮单击事件
         * @param {Object} event 事件
         */
        _onClick: function(event) {
            var button = this,
                me = event.data.me,
                string = $(button).val(),
                startPos, endPos, disp, last, lastThree,
                formElement = $(me.formElement)[0]; // 将jQuery对象转换为DOM元素
            startPos = formElement.selectionStart; // 得到光标前的位置
            endPos = formElement.selectionEnd; // 得到光标后的位置
            disp = formElement.value.substring(0, startPos); // 起始到光标所在位置的字符串
            last = disp.substring(disp.length - consEnum.NCONE, disp.length); // 光标之前最后一个字符
            lastThree = disp.substring(disp.length - consEnum.NCTHREE, disp.length); // 光标前3个字符

            /**
             * @description 点击按钮时进行简单校验
             */
            if (string === "Del") { // 点击清零按钮
                me._onClickDel(me, formElement, startPos);
                me._triggerHandler(null, "clear", me.getAddedFormula());
            } else { // 点击其他按钮
                string = $.htmlInversEscape(string);
                // 文本域初始值为空时
                if (me.formElement.val() === null) {
                    formElement.focus();
                    if (string === ")") {
                        me._error();
                    } else {
                        if (string === "+" || string === "-" || string === "*" || string === "/" || string === "." || string === ">" || string === "<") {
                            me._error();
                        } else {
                            me.formElement.val(string);
                        }
                    }
                }
                // 文本域初始值不为空时
                else {
                    me._onClickOther(string, last, lastThree, startPos, endPos);
                }
            }
        },

        /**
         * @private
         * @description 清空
         */
        clear: function() {
            var me = this;
            me.formElement.val("");
            me.objMap = {};
            me.objMap.length = consEnum.NCZERO;
            me._setEmptyText(false);
            me._triggerHandler(null, "clear", me.getAddedFormula());
        },
        /**
         * @private
         * 文本域为空时设置显示的字符
         * @param {Boolean} isFocus 是否由获得焦点事件触发
         */
        _setEmptyText: function(isFocus) {
            var me = this,
                emptyText = Sweet.core.i18n.calculator.emptyText;
            if (!me.formElement) {
                return;
            }

            // 文本框为空时，显示配置的为空字符
            var val = me.formElement.val();
            if (!me.emptyDiv) {
                var emptyDiv = me.emptyDiv = $("<div>").addClass(defaultInputEmptyDivClass)
                    .appendTo(me.formDiv2El.css("position", "absolute"));
                emptyDiv.bind("click", function() {
                    $(this).hide();
                    me.formElement.focus();
                });

                // 如果有默认值，就隐藏为空的字符
                if (val) {
                    me.emptyDiv.hide();
                }
            }
            if (isFocus) {
                if ("block" === me.emptyDiv.css("display")) {
                    me.emptyDiv.hide();
                }
            } else {
                if (val === "") {
                    me.emptyDiv.show();
                }
            }
        },


        /**
         * @private
         * @description 校验规则
         */
        _validate: function() {},

        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.calculatorEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },

        /**
         * @private
         * @description 销毁calculator组件
         */
        _destroyWidget: function() {
            if (this.renderEl) {
                this.renderEl.remove();
            }
        },
        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });

            return result;
        }
    });

    /**
     * 创建计算器组件
     * @name Sweet.Calculator
     * @class
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     * sweetCalculator =new Sweet.Calculator({
     *      width: 480,
     *      height: 300,
     *      value: "1",
     *      widgetClass: "sweet-calculator-module-bg",
     *      renderTo: "calc"
     * });
     * </pre>
     */
    Sweet.Calculator = $.sweet.widgetCalculator;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 组件--积分卡
 * 2013.2.1
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * 保存组件对象
     * 
     */
    var carouselComponent = "sweet-bxCarousel-component",
        itemDespCls = "sweet-bxCarousel-item-desp",
        itemDespTextCls = "sweet-bxCarousel-item-desp-text",
        // 可视窗口
        carouselVisibleWin = "sweet-bxCarousel-visibleWin",
        // 左右移动箭头背景透明
        ArrorPreDivGrayCls = "sweet-bxCarousel-ArrowPreDiv-gray",
        // 左右移动箭头透明
        carouselArrowGrayCls = "sweet-bxCarousel-arrow-gray",

        // ------kpi积分卡------
        // 左右移动箭头背景
        leftArrorPreDivCls = "sweet-bxCarousel-leftArrow-preDiv",
        rightArrorPreDivCls = "sweet-bxCarousel-rightArrow-preDiv",
        upArrorPreDivCls = "sweet-bxCarousel-upArrow-preDiv",
        downArrorPreDivCls = "sweet-bxCarousel-downArrow-preDiv",
        // 左右移动箭头
        carouselLeftArrow = "sweet-bxCarousel-arrow-left",
        carouselRightArrow = "sweet-bxCarousel-arrow-right",
        carouselUpArrow = "sweet-bxCarousel-arrow-up",
        carouselDownArrow = "sweet-bxCarousel-arrow-down",
        // li
        carouselLi = "sweet-bxCarousel-li",
        carouselLiActive = "sweet-bxCarousel-li-active",
        carouselLiChild = "sweet-bxCarousel-liChild",
        carouselLiChildActive = "sweet-bxCarousel-liChild-active",
        carouselLiGrendChildLeft = "sweet-bxCarousel-liGrendChild-left",
        carouselLiGrendChildRight = "sweet-bxCarousel-liGrendChild-right",
        // 指标图片
        arrowRedDown = "sweet-bxCarousel-arrow-down-red",
        arrowRedUp = "sweet-bxCarousel-arrow-up-red",
        arrowYellowDown = "sweet-bxCarousel-arrow-down-yel",
        arrowYellowUp = "sweet-bxCarousel-arrow-up-yel",
        arrowGreenDown = "sweet-bxCarousel-arrow-down-green",
        arrowGreenUp = "sweet-bxCarousel-arrow-up-green",
        carouselLiEmLeft = "sweet-bxCarousel-liEm-left",

        // ------图片卡------
        // 左右移动箭头背景
        leftArrorPreDivImgCls = "sweet-bxCarousel-leftArrow-preDiv-img",
        rightArrorPreDivImgCls = "sweet-bxCarousel-rightArrow-preDiv-img",
        upArrorPreDivImgCls = "sweet-bxCarousel-upArrow-preDiv-img",
        downArrorPreDivImgCls = "sweet-bxCarousel-downArrow-preDiv-img",
        // li
        carouselLiUser = "sweet-bxCarousel-li-userImage",
        carouselUserDefindPic = "sweet-bxCarousel-liEm-userDefindPic",
        carouselUserPicUnselect = "sweet-bxCarousel-userDefindPic-unSelect",
        carouselUserPicSelect = "sweet-bxCarousel-userDefindPic-select",
        carouselUserDefindPicTick = "sweet-bxCarousel-userDefindPic-tick",
        // 左右移动箭头
        carouselUserDefindArrorLeftCls = "sweet-bxCarousel-arrow-left-image",
        carouselUserDefindArrorRightCls = "sweet-bxCarousel-arrow-right-image",
        carouselUserDefindArrorUpCls = "sweet-bxCarousel-arrow-up-image",
        carouselUserDefindArrorDownCls = "sweet-bxCarousel-arrow-down-image",
        liWidth, liHeight,
        timerLeft, timerRight,
        scrollParams = {
            "interval": 1,
            "speed": 1,
            "acceleration": 0
        };

    $.widget("sweet.widgetBxCarousel", $.sweet.widget, /** @lends Sweet.BxCarousel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-bxCarousel]",
        type: "bxCarousel",
        eventNames: /** @lends Sweet.BxCarousel.prototype*/
        {
            /**
             * @event
             * @description 点击图片事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "点击图片事件",
            /**
             * @event
             * @description 选项的change事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            change: "选项的change事件"
        },
        options: /** @lends Sweet.BxCarousel.prototype*/
        {
            /**
             * 基础数据
             * @type Object
             * @default null
             */
            data: null,
            /**
             * 是否竖排放
             * @type Boolean
             * @default false
             */
            vertical: false,
            /**
             * 横排布局时，是否需要选择图片后显示相应的图片说明
             * @type Boolean
             * @default false
             */
            isItemSelectDesp: false
        },
        /**
         * 重新设置基础数据
         * @param {object} 组件data值
         */
        setData: function(data) {
            var me = this;
            me.preKey = "";
            me.ulEl.text("");
            me._creatUL(data);
            me._doLayout();
        },
        /**
         * 组件渲染
         * @private
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.carouselEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.carouselEl.externalWidth(width);
        },

        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.carouselEl.externalWidth();
        },

        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.carouselEl.externalHeight();
        },

        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        },

        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.carouselEl.externalHeight(height);
        },

        /**
         * 组件重绘
         * @private
         */
        _doLayout: function() {
            var me = this,
                options = me.options;
            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }
            liWidth = me.visibleWin.children("ul").children("li:eq(0)").outerWidth(true) || 0;
            liHeight = me.visibleWin.children("ul").children("li:eq(0)").outerHeight(true) || 0;
            me._initArrow();
            // 水平放置
            if (!options.vertical) {
                me._doLayoutH();
            }
            // 垂直放置
            else {
                me._doLayoutV();
            }
        },

        /**
         * @private
         * @description 横向布局
         */
        _doLayoutH: function() {
            var me = this,
                options = me.options,
                carouseWidth = options.width,
                carouseHeight = options.height,
                visibleWinWidth = carouseWidth,
                visibleWinHeight = carouseHeight,
                ulWidth, ulHeight,
                x1, x2, y1, y2;

            me.ulEl.css("left", "0px");
            // 有数据
            if (liWidth) {
                carouseHeight = liHeight;
                itemDespH = me._selectedItemDespEl ? me._selectedItemDespEl.height() : 0;
                me.carouselEl.width(carouseWidth).height(carouseHeight + itemDespH);
                visibleWinWidth = me.carouselEl.width();
                visibleWinHeight = liHeight;
                me.visibleWin.css("float", "left").width(visibleWinWidth).height(visibleWinHeight);
                // 计算宽度
                ulWidth = me.dataObj.length * liWidth + 2;
                me.ulEl.width(ulWidth);

                // kpi积分卡与图片积分卡的箭头样式不同，需分类处理
                if (!me.image) {
                    // 箭头背景样式
                    me.leftArrowPreDivEl.height(me.carouselEl.externalHeight())
                        .addClass(leftArrorPreDivCls);
                    me.rightArrowPreDivEl.height(me.carouselEl.externalHeight())
                        .addClass(rightArrorPreDivCls);

                    // 上下箭头左右居中
                    var arrowTop = (liHeight - me.leftArrowA.height()) / 2;
                    me.leftArrowA.height(me.carouselEl.externalHeight());
                    me.rightArrowA.height(me.carouselEl.externalHeight());
                } else {
                    me.visibleWin.css({
                        "margin-left": "3px",
                        "margin-right": "3px"
                    })
                        .width(visibleWinWidth - 6);
                    // 箭头背景样式
                    me.leftArrowPreDivEl.removeClass(leftArrorPreDivCls).addClass(leftArrorPreDivImgCls);
                    me.rightArrowPreDivEl.removeClass(rightArrorPreDivCls).addClass(rightArrorPreDivImgCls);
                    // 箭头样式
                    me.leftArrowA.removeClass(carouselLeftArrow)
                        .addClass(carouselUserDefindArrorLeftCls);
                    me.rightArrowA.removeClass(carouselRightArrow)
                        .addClass(carouselUserDefindArrorRightCls);
                }

                // 可视窗口大于ul时，隐藏箭头
                if (me.visibleWin.width() >= me.ulEl.width()) {
                    me._hideArrors();
                    if (me.draggable) {
                        me.ulEl.draggable("destroy");
                        me.draggable = false;
                    }
                } else {
                    // 动态设定z-index
                    me._setArrayZindex();

                    // 计算拖动范围
                    x1 = me.visibleWin.offset().left - (parseFloat(me.ulEl.width()) - parseFloat(me.visibleWin.width()));
                    x2 = me.visibleWin.offset().left;
                    y1 = me.visibleWin.offset().top;
                    y2 = y1 + liHeight;
                    if (me.draggable) {
                        me.ulEl.draggable("destroy");
                        me.draggable = false;
                    }
                    me.ulEl.draggable({
                        axis: "x",
                        cursor: "move",
                        stop: function(event, ui) {
                            me._changeArrow();
                        }
                    });
                    me.draggable = true;
                }
            }
            // 没有数据
            else {
                me.carouselEl.width(me.leftArrowA.outerWidth(true) * 2 + 10).height(98);
            }
        },

        /**
         * @private
         * @description 竖向布局
         */
        _doLayoutV: function() {
            var me = this,
                options = me.options,
                carouseWidth = options.width,
                carouseHeight = options.height,
                visibleWinWidth = carouseWidth,
                visibleWinHeight = carouseHeight,
                ulWidth, ulHeight,
                x1, x2, y1, y2;
            // 有数据
            var marginArrow;
            me.ulEl.css("top", "0px");
            if (liWidth) {
                carouseWidth = liWidth;
                // 组件大小
                me.carouselEl.width(carouseWidth).height(carouseHeight);
                visibleWinWidth = liWidth;
                visibleWinHeight = me.carouselEl.height();
                // 可视区大小
                me.visibleWin.width(visibleWinWidth).height(visibleWinHeight);
                // ul大小
                ulWidth = liWidth;
                me.ulEl.width(ulWidth);

                // kpi积分卡与图片积分卡的箭头样式不同，需分类处理
                if (!me.image) {
                    // 箭头背景样式
                    me.leftArrowPreDivEl.width(me.carouselEl.externalWidth())
                        .addClass(upArrorPreDivCls);
                    me.rightArrowPreDivEl.width(me.carouselEl.externalWidth())
                        .addClass(downArrorPreDivCls);

                    // 上下箭头左右居中
                    marginArrow = (ulWidth - me.leftArrowA.width()) / 2;
                    me.leftArrowA.width(me.carouselEl.externalWidth());
                    me.rightArrowA.width(me.carouselEl.externalWidth());
                } else {
                    me.visibleWin.css({
                        "margin-top": "3px",
                        "margin-bottom": "3px"
                    })
                        .height(visibleWinHeight - 6);
                    // 箭头背景样式
                    me.leftArrowPreDivEl.removeClass(upArrorPreDivCls).addClass(upArrorPreDivImgCls);
                    me.rightArrowPreDivEl.removeClass(downArrorPreDivCls).addClass(downArrorPreDivImgCls);
                    // 箭头样式
                    me.leftArrowA.removeClass(carouselUpArrow)
                        .addClass(carouselUserDefindArrorUpCls);
                    me.rightArrowA.removeClass(carouselDownArrow)
                        .addClass(carouselUserDefindArrorDownCls);
                }

                // 可视窗口大于ul时，隐藏箭头
                if (me.visibleWin.height() > me.ulEl.height()) {
                    me._hideArrors();
                    if (me.draggable) {
                        me.ulEl.draggable("destroy");
                        me.draggable = false;
                    }
                } else {
                    // 动态设定z-index
                    me._setArrayZindex();

                    // 计算拖动范围
                    ulHeight = me.ulEl.height();
                    x1 = me.ulEl.offset().left;
                    x2 = x1 + liWidth;
                    y1 = me.visibleWin.offset().top - (parseFloat(me.ulEl.height()) - parseFloat(me.visibleWin.height()));
                    y2 = me.visibleWin.offset().top;
                    // 拖动
                    if (me.draggable) {
                        me.ulEl.draggable("destroy");
                        me.draggable = false;
                    }
                    me.ulEl.draggable({
                        axis: "y",
                        cursor: "move",
                        stop: function(event, ui) {
                            me._changeArrow();
                        }
                    });
                    me.draggable = true;
                }
            }
            // 没有数据
            else {
                me.visibleWin.height(50);
                me.carouselEl.width(201).height(me.leftArrowA.outerHeight(true) * 2 + 10);
            }
        },

        /**
         * @private
         * @description 箭头初始化
         */
        _initArrow: function() {
            var me = this,
                options = me.options,
                arrow1Cls = (options.vertical ? carouselUpArrow : carouselLeftArrow),
                arrow2Cls = (options.vertical ? carouselDownArrow : carouselRightArrow);

            me.leftArrowParentDiv.hide();
            me.leftArrowPreDivEl.removeClass().addClass(ArrorPreDivGrayCls);
            me.leftArrowA.removeClass().addClass(arrow1Cls + " " + carouselArrowGrayCls);
            me.rightArrowParentDiv.hide();
            me.rightArrowPreDivEl.removeClass();
            me.rightArrowA.removeClass().addClass(arrow2Cls);
        },

        /**
         * @private
         * @description 隐藏箭头
         */
        _hideArrors: function() {
            var me = this;
            me.leftArrowA.addClass(carouselArrowGrayCls);
            me.rightArrowA.addClass(carouselArrowGrayCls);
            me.leftArrowPreDivEl.addClass(ArrorPreDivGrayCls);
            me.rightArrowPreDivEl.addClass(ArrorPreDivGrayCls);
        },

        /**
         * @private
         * @description 动态设定z-index
         */
        _setArrayZindex: function() {
            var me = this,
                maxIndex = $.getMaxZIndex(me.leftArrowPreDivEl.css("z-index"));
            me.leftArrowPreDivEl.css({
                "z-index": maxIndex
            });
            me.rightArrowPreDivEl.css({
                "z-index": maxIndex
            });
            maxIndex = maxIndex + 10;
            me.leftArrowA.css({
                "z-index": maxIndex
            });
            me.rightArrowA.css({
                "z-index": maxIndex
            });
        },

        /**
         * @private
         * @description 创建form组件总入口
         */
        _createSweetWidget: function() {
            var me = this,
                opt = me.options,
                carouselEl = me.carouselEl = $("<div>").addClass(carouselComponent);
            carouselEl.attr("id", me.options.id);

            me.eventMap = {}; //记录事件的处理回调，现在只有change事件
            me.preKey = ""; //记录当前选择的选项的key值
            // 生成左/上箭头
            me._createLeftArrow();
            // 生成可是窗口
            var visibleWin = me.visibleWin = $("<div>").addClass(carouselVisibleWin)
                .appendTo(me.carouselEl),
                ulEl = me.ulEl = $("<ul>").appendTo(visibleWin);
            me._creatUL();
            //创建文字说明框
            if (opt.isItemSelectDesp && !opt.vertical) {
                me._selectedItemDespEl = $("<div>").attr("id", opt.id + "-item-desp")
                    .addClass(itemDespCls).appendTo(carouselEl);

                me._despEl = $("<div>").attr("id", opt.id + "-item-desp-text")
                    .addClass(itemDespTextCls).appendTo(me._selectedItemDespEl);
            }

            // 生成右/下箭头
            me._createRightArrow();
        },
        /**
         * @private
         * @description 创建左箭头
         */
        _createLeftArrow: function() {
            var me = this,
                options = me.options,
                leftArrowParentDiv = me.leftArrowParentDiv = $("<div>").hide().appendTo(me.carouselEl),
                leftArrowPreDivEl = me.leftArrowPreDivEl = $("<div>").addClass(ArrorPreDivGrayCls)
                    .appendTo(me.leftArrowParentDiv),
                arrow1Cls = (options.vertical ? carouselUpArrow : carouselLeftArrow);

            var leftArrowA = me.leftArrowA = $("<a>").addClass(arrow1Cls + " " + carouselArrowGrayCls)
                .appendTo(me.leftArrowParentDiv);
        },
        /**
         * @private
         * @description 创建右箭头
         */
        _createRightArrow: function() {
            var me = this,
                options = me.options,
                rightArrowParentDiv = me.rightArrowParentDiv = $("<div>").hide().appendTo(me.carouselEl),
                rightArrowPreDivEl = me.rightArrowPreDivEl = $("<div>").appendTo(rightArrowParentDiv),
                arrow2Cls = (options.vertical ? carouselDownArrow : carouselRightArrow);

            var rightArrowA = me.rightArrowA = $("<a>").addClass(arrow2Cls)
                .appendTo(rightArrowParentDiv);
        },
        /**
         * @private
         * @description 创建ul
         * @param {object} 数据
         */
        _creatUL: function(data0) {
            var me = this,
                options = me.options,
                // 保存$("<li>")对象的数组
                dataObj = me.dataObj = {},
                liArrarObj = me.liArrarObj = {},
                // 缓存数据
                data = data0 || options.data;
            if (!data) {
                return;
            }
            dataObj.length = 0;
            liArrarObj.length = 0;
            me.image = true;
            $.each(data, function(index, obj) {
                me.image = (me.image && obj.image);
                var liEl = $("<li>").appendTo(me.ulEl),
                    liChildEl = $("<div>").attr("value", obj.value).appendTo(liEl);
                var paramObj;
                // 自动生成图片
                if (!obj.image) {
                    liEl.addClass(carouselLi);
                    liChildEl.addClass(carouselLiChild);
                    var arrowImage = me._getArrowImage(obj),
                        leftChar = me._getCharacterColor(obj).left,
                        rightChar = me._getCharacterColor(obj).right,
                        liGrandchildElLeft = $("<div>").addClass(carouselLiGrendChildLeft)
                            .appendTo(liChildEl),
                        spanDomLeft = $("<span>").addClass(arrowImage)
                            .appendTo(liGrandchildElLeft),
                        emDomLeft = $("<em>").html(obj.offset)
                            .addClass(carouselLiEmLeft)
                            .appendTo(liGrandchildElLeft),
                        liGrandchildElRight = $("<div>").addClass(carouselLiGrendChildRight)
                            .appendTo(liChildEl),
                        spanDomRight = $("<span>").html(obj.value)
                            .appendTo(liGrandchildElRight),
                        emDomRight = $("<em>").html(obj.text)
                            .appendTo(liGrandchildElRight);
                    emDomLeft.css("color", leftChar);
                    spanDomRight.css("color", rightChar);
                    paramObj = liEl;
                }
                // 外部给定图片路径
                else {
                    liEl.addClass(carouselLiUser);
                    liChildEl.addClass(carouselUserPicUnselect);
                    var aEl = $("<a>").css("background-image", "url(" + obj.imagePath + ")")
                        .addClass(carouselUserDefindPic)
                        .appendTo(liChildEl),
                        selectImageEl = $("<a>").appendTo(liChildEl);
                    paramObj = liChildEl;
                }
                // 添加点击事件
                liChildEl.bind("click", {
                    "me": me,
                    "obj": paramObj,
                    "image": obj.image,
                    "key": obj.value,
                    "desp": obj.desp
                },
                me._clickImage);
                // 保存数据
                dataObj[obj.value] = obj;
                dataObj.length++;
                // 保存li对象
                liArrarObj[obj.value] = liEl;
                liArrarObj.length++;
            });
        },
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this;
            // 可视窗口事件
            me.visibleWin.bind("mouseover", function() {
                if (!me.leftArrowPreDivEl.hasClass(ArrorPreDivGrayCls)) {
                    me.leftArrowParentDiv.show();
                }
                if (!me.rightArrowPreDivEl.hasClass(ArrorPreDivGrayCls)) {
                    me.rightArrowParentDiv.show();
                }
            });
            me.visibleWin.bind("mouseout", function() {
                me.leftArrowParentDiv.hide();
                me.rightArrowParentDiv.hide();
            });
            // 左箭头事件
            me.leftArrowA.bind("mousedown", function() {
                me._clickLeftArrow();
            });
            me.leftArrowA.bind("mouseup", function() {
                clearInterval(timerLeft);
            });
            me.leftArrowA.bind("mouseover", function() {
                me.leftArrowParentDiv.show();
                me.rightArrowParentDiv.show();
            });
            me.leftArrowA.bind("mouseout", function() {
                me.leftArrowParentDiv.hide();
                me.rightArrowParentDiv.hide();
                clearInterval(timerLeft);
            });
            // 右箭头事件
            me.rightArrowA.bind("mousedown", function() {
                me._clickRightArrow();
            });
            me.rightArrowA.bind("mouseup", function() {
                clearInterval(timerRight);
            });
            me.rightArrowA.bind("mouseover", function() {
                me.leftArrowParentDiv.show();
                me.rightArrowParentDiv.show();
            });
            me.rightArrowA.bind("mouseout", function() {
                me.leftArrowParentDiv.hide();
                me.rightArrowParentDiv.hide();
                clearInterval(timerRight);
            });
            // 鼠标滚轮滚动事件
            me.ulEl.attr("id", this.options.id + "-ul-id");
            me.ulEl.onMouseWheel(me.ulEl.get(0), function(event, data) {
                if (data.delta > 0) {
                    me._mouseWheelLeft(50);
                } else {
                    me._mouseWheelRight(50);
                }
                return false;
            });
        },
        /**
         * @private
         * @description 外部图片的点击事件
         * @param {object} event事件
         */
        _clickImage: function(event) {
            var me = event.data.me,
                obj = event.data.obj,
                image = event.data.image ? true : false,
                desp = event.data.desp,
                key = event.data.key;
            me._setActiveItemCSS(image, obj, me, key); //改变被选中选项的样式



            //优先调用addListener的click事件
            if (me.eventMap && me.eventMap.click) {
                me.eventMap.click.call(this, me.dataObj[key]);
            } else {
                me._trigger("click", me, me.dataObj[key]);
            }
            //触发change事件，仅在这一次选择的选项与上一次记录的不一样时才触发
            if (me.preKey !== key && me.eventMap && me.eventMap.change) {
                me.eventMap.change.call(this, me.dataObj[key]);
            }
            me.preKey = key; //更新记录这一次click的key
        },
        /**
         * @private
         * @description 设置选中的项的样式
         * @param {boolean} image   是否有image图片
         * @param {object} obj    选中项的对象
         * @param {object} bxCarObj   此组件对象
         */
        _setActiveItemCSS: function(image, obj, bxCarObj, key) {
            var me = bxCarObj; //此组件对象
            var desp = me.dataObj[key] ? me.dataObj[key].desp : "";
            //显示说明文字
            if (me.options.isItemSelectDesp && !me.options.vertical) {
                desp = desp.split("\n").join("<br>");
                me._despEl.html(desp).attr("title", desp.split("<br>").join(""));
            }

            if (!image) {
                // 清除其他的样式
                me.ulEl.children("." + carouselLiActive)
                    .children("." + carouselLiChildActive)
                    .removeClass()
                    .addClass(carouselLiChild);
                me.ulEl.children("." + carouselLiActive)
                    .removeClass()
                    .addClass(carouselLi);
                // 修改当前被点击的图片样式
                obj.removeClass().addClass(carouselLiActive);
                obj.children("div ." + carouselLiChild)
                    .removeClass()
                    .addClass(carouselLiChildActive);
            } else {
                // 清除其他的样式
                me.ulEl.children("li").children("div ." + carouselUserPicSelect)
                    .children("a:eq(1)")
                    .removeClass();
                me.ulEl.children("li").children("div ." + carouselUserPicSelect)
                    .removeClass()
                    .addClass(carouselUserPicUnselect);
                // 修改当前被点击的图片样式
                obj.removeClass()
                    .addClass(carouselUserPicSelect);
                obj.children("a:eq(1)").addClass(carouselUserDefindPicTick);
            }
        },
        /**
         * @private
         * @description 获取图片样式
         * @param {object} 一条数据
         */
        _getArrowImage: function(val) {
            var arrowImage, subtractionSign = new RegExp("-");
            if (subtractionSign.test(val.offset)) {
                if ("r" === val.color) {
                    arrowImage = arrowRedDown;
                } else if ("y" === val.color) {
                    arrowImage = arrowYellowDown;
                } else if ("g" === val.color) {
                    arrowImage = arrowGreenDown;
                }
            } else {
                if ("r" === val.color) {
                    arrowImage = arrowRedUp;
                } else if ("y" === val.color) {
                    arrowImage = arrowYellowUp;
                } else if ("g" === val.color) {
                    arrowImage = arrowGreenUp;
                }
            }
            return arrowImage;
        },
        /**
         * @private
         * @description 获取字符颜色
         * @param {object} 一条数据
         */
        _getCharacterColor: function(val) {
            var charColor = {};
            if ("r" === val.color) {
                charColor.left = "#FF0000";
                charColor.right = "#CD0100";
            } else if ("y" === val.color) {
                charColor.left = "#F4C042";
                charColor.right = "#E3A81C";
            } else if ("g" === val.color) {
                charColor.left = "#00C11B";
                charColor.right = "#009615";
            }
            return charColor;
        },
        /**
         * @private
         * @description 左移图片
         */
        _clickLeftArrow: function() {
            var me = this,
                options = me.options,
                left = parseFloat(me.ulEl.css("left")),
                top = parseFloat(me.ulEl.css("top")),
                t = 0,
                times = 0;
            if (me.leftArrowA.hasClass(carouselArrowGrayCls)) {
                return;
            }

            function scrollImageToLeft() {
                t = times++ * scrollParams.interval;
                var range = (scrollParams.speed + scrollParams.acceleration * t) * t;
                if (!options.vertical) {
                    if (left < 0) {
                        left = left + range;
                        me.ulEl.css("left", left + "px");
                    } else {
                        clearInterval(timerLeft);
                    }
                } else {
                    if (top < 0) {
                        top = top + range;
                        me.ulEl.css("top", top + "px");
                    } else {
                        clearInterval(timerLeft);
                    }
                }
                me._changeArrow();
            }

            timerLeft = setInterval(scrollImageToLeft, scrollParams.interval);
        },
        /**
         * @private
         * @description 右移图片
         */
        _clickRightArrow: function() {
            var me = this,
                options = me.options,
                left = parseFloat(me.ulEl.css("left")),
                top = parseFloat(me.ulEl.css("top")),
                t = 0,
                times = 0,
                diffOfWinAndUl;
            if (me.rightArrowA.hasClass(carouselArrowGrayCls)) {
                return;
            }

            function scrollImageToRight() {
                t = times++ * scrollParams.interval;
                var range = (scrollParams.speed + scrollParams.acceleration * t) * t;
                if (!options.vertical) {
                    diffOfWinAndUl = parseFloat(me.visibleWin.width()) - parseFloat(me.ulEl.width());
                    if (left > diffOfWinAndUl) {
                        left = left - range;
                        me.ulEl.css("left", left + "px");
                    } else {
                        clearInterval(timerRight);
                    }
                } else {
                    diffOfWinAndUl = parseFloat(me.visibleWin.height()) - parseFloat(me.ulEl.height());
                    if (top > diffOfWinAndUl) {
                        top = top - range;
                        me.ulEl.css("top", top + "px");
                    } else {
                        clearInterval(timerRight);
                    }
                }
                me._changeArrow();
            }

            timerRight = setInterval(scrollImageToRight, scrollParams.interval);
        },
        /**
         * @private
         * @description 鼠标滚轮滚动，左移图片
         * @param {Number} 鼠标滚轮滚动一次左移的像素值
         */
        _mouseWheelLeft: function(range) {
            var me = this,
                options = me.options,
                left = parseFloat(me.ulEl.css("left")),
                top = parseFloat(me.ulEl.css("top"));
            if (!options.vertical) {
                // 横向的计分卡，只有一个图片，直接用鼠标滚动，图片跑到了最右边
                if (left >= 0 || left + me.ulEl.width() < me.visibleWin.width()) {
                    return;
                }
                if (left < 0) {
                    left = left + range;
                    me.ulEl.css("left", left + "px");
                }
            } else {
                // 竖向的计分卡，只有一个图片，直接用鼠标滚动，图片跑到了最下边
                if (top >= 0 || top + me.ulEl.height() < me.visibleWin.height()) {
                    return;
                }
                if (top < 0) {
                    top = top + range;
                    me.ulEl.css("top", top + "px");
                }
            }
            me._changeArrow();
        },
        /**
         * @private
         * @description 鼠标滚轮滚动，右移图片
         * @param {Number} 鼠标滚轮滚动一次右移的像素值
         */
        _mouseWheelRight: function(range) {
            var me = this,
                options = me.options,
                left = parseFloat(me.ulEl.css("left")),
                top = parseFloat(me.ulEl.css("top")),
                diffOfWinAndUl;
            if (!options.vertical) {
                diffOfWinAndUl = parseFloat(me.visibleWin.width()) - parseFloat(me.ulEl.width());
                // 横向的计分卡，只有一个图片，直接用鼠标滚动，图片跑到了最右边
                if (diffOfWinAndUl > 0) {
                    return;
                }
                if (left > diffOfWinAndUl) {
                    left = left - range;
                    me.ulEl.css("left", left + "px");
                }
            } else {
                diffOfWinAndUl = parseFloat(me.visibleWin.height()) - parseFloat(me.ulEl.height());
                // 竖向的计分卡，只有一个图片，直接用鼠标滚动，图片跑到了最下边
                if (diffOfWinAndUl > 0) {
                    return;
                }
                if (top > diffOfWinAndUl) {
                    top = top - range;
                    me.ulEl.css("top", top + "px");
                }
            }
            me._changeArrow();
        },
        /**
         * @private
         * @description 箭头置灰
         */
        _changeArrow: function() {
            var me = this,
                options = me.options,
                diffOfWinAndUl;
            if (!options.vertical) {
                var left = parseFloat(me.ulEl.css("left"));
                diffOfWinAndUl = parseFloat(me.visibleWin.width()) - parseFloat(me.ulEl.width());
                if (left < 0) {
                    me.leftArrowA.removeClass(carouselArrowGrayCls);
                    me.leftArrowPreDivEl.removeClass(ArrorPreDivGrayCls);
                } else {
                    me.leftArrowA.addClass(carouselArrowGrayCls);
                    me.leftArrowPreDivEl.addClass(ArrorPreDivGrayCls);
                    me.leftArrowParentDiv.hide();
                    me.ulEl.css("left", 0);
                }

                if (left > diffOfWinAndUl) {
                    me.rightArrowA.removeClass(carouselArrowGrayCls);
                    me.rightArrowPreDivEl.removeClass(ArrorPreDivGrayCls);
                } else {
                    me.rightArrowA.addClass(carouselArrowGrayCls);
                    me.rightArrowPreDivEl.addClass(ArrorPreDivGrayCls);
                    me.rightArrowParentDiv.hide();
                    me.ulEl.css("left", diffOfWinAndUl);
                }
            } else {
                var top = parseFloat(me.ulEl.css("top"));
                diffOfWinAndUl = parseFloat(me.visibleWin.height()) - parseFloat(me.ulEl.height());
                if (top < 0) {
                    me.leftArrowA.removeClass(carouselArrowGrayCls);
                    me.leftArrowPreDivEl.removeClass(ArrorPreDivGrayCls);
                } else {
                    me.leftArrowA.addClass(carouselArrowGrayCls);
                    me.leftArrowPreDivEl.addClass(ArrorPreDivGrayCls);
                    me.leftArrowParentDiv.hide();
                    me.ulEl.css("top", 0);
                }

                if (top > diffOfWinAndUl) {
                    me.rightArrowA.removeClass(carouselArrowGrayCls);
                    me.rightArrowPreDivEl.removeClass(ArrorPreDivGrayCls);
                } else {
                    me.rightArrowA.addClass(carouselArrowGrayCls);
                    me.rightArrowPreDivEl.addClass(ArrorPreDivGrayCls);
                    me.rightArrowParentDiv.hide();
                    me.ulEl.css("top", diffOfWinAndUl);
                }
            }
        },
        /**
         * @private
         * @description 去激活注册事件
         */
        _removeListener: function() {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(eventName, func) {
                if ("click" === eventName) {
                    me.eventMap.click = null;
                }
                if ("change" === eventName) {
                    me.eventMap.change = null;
                }
            });
        },
        /**
         * @private
         * 组件注册监听事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if ("click" === eventName && me.eventMap) {
                    me.eventMap.click = func;
                }
                if ("change" === eventName && me.eventMap) {
                    me.eventMap.change = func;
                }
            });
        },
        /**
         * 获取组件值
         * @private
         * @return {function} me._getSelectedText()
         */
        _getValue: function() {
            var me = this,
                key1 = me.ulEl.children("." + carouselLiActive)
                    .children("." + carouselLiChildActive)
                    .attr("value"),
                key2 = me.ulEl.children("li")
                    .children("div ." + carouselUserPicSelect)
                    .attr("value");

            return me.dataObj[key1 || key2] || null;
        },
        /**
         * 设置组件值
         * @private
         * @param {object} 组件值
         */
        _setValue: function(val) {
            var me = this,
                data = me.dataObj[val.value],
                obj = me.liArrarObj[val.value];
            if (data) {
                var hasImage = data.image ? true : false;
                var itemObj = obj;
                if (hasImage) {
                    //如果有image，对象使用下面的对象
                    itemObj = obj.children("div");
                }
                me._setActiveItemCSS(hasImage, itemObj, me, val.value); //改变被选中选项的样式

                //触发change事件，仅在这一次选择的选项与上一次记录的不一样时才触发
                if (me.preKey !== val.value && me.eventMap && me.eventMap.change) {
                    me.eventMap.change.call(this, data);
                }
                me.preKey = val.value; //更新记录这一次click的key
            } else {
                me._error("Value does not exist!");
            }
        }
    });

    /**
     * 滑动KPI/积分卡
     * @name Sweet.BxCarousel
     * @class 
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     *  var data = [
     *      {text : "Perceived Call Success Rate", value : "52.32%", offset : "-14.23%", 
     *       color : "r", data: null, image : false, imagePath: ""},
     *      {text : "业务质量分析效果", value : "8186ms", offset : "8186ms", 
     *       color : "g", data: null, image : false, imagePath: ""},
     *      {text : "业务质量分析效果", value : "38.32%", offset : "-17.23%", 
     *       color : "y", data: null, image : false, imagePath: ""}
     *  ];
     *  sweetCarousel = new Sweet.cmp.kpiCarousel({
     *      width: 500,
     *      data : data,
     *      vertical : false,
     *      renderTo : "sweet-carousel"
     * });
     * </pre>
     */
    Sweet.BxCarousel = $.sweet.widgetBxCarousel;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 组件--错误提示框
 * 2013.9.6
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    //图片区
    var imageClass = "sweet-errorInterface-img",
        //只有图片时的图片区
        imageOnlyClass = "sweet-errorInterface-imgOnly",
        //文本间的间距
        gapClass = "sweet-errorInterface-gap",
        //文本对齐方式
        contentAlignClass = "sweet-errorInterface-align",
        //错误类型文本区
        errorTextSpanClass = "sweet-errorInterface-errorTextSpan",
        //错误详情文本区
        tipTextSpanClass = "sweet-errorInterface-tipTextSpan",
        //文本区
        textSpanClass = "sweet-errorInterface-textSpan",
        contentDivClass = "sweet-errorInterface-contentDiv",
        divClass = "sweet-errorInterface-div",
        //只有错误类型文本时，文本样式
        errorTextOnlyClass = "sweet-errorInterface-errorTextOnly",
        //只有错误详情文本时，文本样式
        tipTextOnlyClass = "sweet-errorInterface-tipTextOnly",
        //只有文本时的文本区
        textOnlyClass = "sweet-errorInterface-textOnly",
        //图片类型
        imageTypeObj = {},
        //与图片类型绑定的错误类型文本样式
        errorTextType = {},
        //与图片类型绑定的错误详情文本样式
        tipTextType = {};
    imageTypeObj[Sweet.constants.errorType.UNCONNECTED] = "sweet-errorInterface-serverUnconnected";
    imageTypeObj[Sweet.constants.errorType.UNKNOWN] = "sweet-errorInterface-serverUnknown";
    imageTypeObj[Sweet.constants.errorType.COMMON] = "sweet-errorInterface-common";
    errorTextType[Sweet.constants.errorType.UNCONNECTED] = "sweet-errorInterface-errorTextUnconnected";
    errorTextType[Sweet.constants.errorType.UNKNOWN] = "sweet-errorInterface-errorTextUnknown";
    errorTextType[Sweet.constants.errorType.COMMON] = "sweet-errorInterface-errorTextCommon";
    tipTextType[Sweet.constants.errorType.UNCONNECTED] = "sweet-errorInterface-tipTextUnconnected";
    tipTextType[Sweet.constants.errorType.UNKNOWN] = "sweet-errorInterface-tipTextUnknown";
    tipTextType[Sweet.constants.errorType.COMMON] = "sweet-errorInterface-tipTextCommon";

    $.widget("sweet.widgetErrorInterface", $.sweet.widget, /** @lends Sweet.ErrorInterface.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-errorInterface]",
        options: /** @lends Sweet.ErrorInterface.prototype*/
        {
            /**
             * @description 图片类型
             * @type {String}
             * @default null
             */
            imageType: null,
            /**
             * @description 接受参数值
             * @type {String/Number/object}
             * @default {value: "", errorText: "", tipText:"", data:null}
             */
            value: {
                value: "",
                errorText: "",
                tipText: "",
                data: null
            }
        },
        /**
         * @description 更新组件数据
         * @param {Obj} obj 数据对象{imageType:"", value:{}}
         */
        _setValue: function(obj) {
            var me = this;
            //清空组件
            if (me.errorTextSpanEl) {
                me.errorTextSpanEl.remove();
            }
            if (me.tipTextSpanEl) {
                me.tipTextSpanEl.remove();
            }
            if (me.textSpanEl) {
                me.textSpanEl.remove();
            }
            if (me.imageEl) {
                me.imageEl.remove();
            }
            //更新参数
            me.options.value = obj.value;
            me.options.imageType = obj.imageType;
            me.options.width = obj.width;
            me.options.height = obj.height;
            //添加元素
            me._addElement(obj);
            //布局
            me._doLayout();
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            if (!id || this.rendered) {
                return;
            }
            if (!this.renderEl) {
                // 创建宿主元素               
                this._createRenderEl(id);
            }
            this.errorEl.appendTo(this.renderEl);
            this.rendered = true;
        },
        /**
         * @private
         * @description 实现widget接口
         */
        _createSweetWidget: function() {
            var me = this;
            // 创建errorInterface组件          
            options = me.options;
            me.errorEl = $("<div>").addClass(divClass);
            me.contentEl = $("<div>").appendTo(me.errorEl).addClass(contentDivClass);
            //添加元素
            me._addElement(options);
        },
        /**
         * @private
         * @description 添加元素
         * @param {String，Obj} options 数据对象{imageType:"",value:{}}
         */
        _addElement: function(options) {
            var me = this;
            //加载图片元素           
            if ($.isNotNull(options.imageType)) {
                me.imageEl = $("<span>").addClass(imageTypeObj[options.imageType]).appendTo(me.contentEl);
            }
            //加载文本元素          
            if (me._isTextNotNull(options)) {
                me.textSpanEl = $("<span>").appendTo(me.contentEl);
                me.contentEl.css("width", Sweet.constants.elWidth.DIV_WIDTH);
                if ($.isNotNull(options.value.errorText)) {
                    me.errorTextSpanEl = $("<span>").appendTo(me.textSpanEl).text(options.value.errorText);
                    if ($.isNotNull(options.imageType)) {
                        me.errorTextSpanEl.addClass(errorTextType[options.imageType]);
                    } else {
                        me.errorTextSpanEl.addClass(errorTextOnlyClass);
                    }
                }
                if ($.isNotNull(options.value.tipText)) {
                    if ($.isNotNull(options.value.errorText)) {
                        me.textGap = $("<div>").appendTo(me.textSpanEl).addClass(gapClass);
                    }
                    me.tipTextSpanEl = $("<span>").appendTo(me.textSpanEl).text(options.value.tipText);
                    if ($.isNotNull(options.imageType)) {
                        me.tipTextSpanEl.addClass(tipTextType[options.imageType]);
                    } else {
                        me.tipTextSpanEl.addClass(tipTextOnlyClass);
                    }
                }
            }
            //添加样式
            me._addClass(options);
        },
        /**
         * @private
         * @description 添加样式
         * @param {String，Obj} options 数据对象{imageType:"",value:{}}
         */
        _addClass: function(options) {
            var me = this;
            if ($.isNotNull(options.imageType) && me._isTextNotNull(options)) {
                me.imageEl.addClass(imageClass);
                me.textSpanEl.addClass(textSpanClass);
                if ($.isNotNull(options.value.errorText)) {
                    me.errorTextSpanEl.addClass(errorTextSpanClass);
                }
                if ($.isNotNull(options.value.tipText)) {
                    me.tipTextSpanEl.addClass(tipTextSpanClass);
                }
            } else if ($.isNotNull(options.imageType)) {
                me.imageEl.addClass(imageOnlyClass);
            } else {
                if (me.tipTextSpanEl) {
                    var tipW = me.tipTextSpanEl.width();
                }
                if (me.errorTextSpanEl) {
                    var errorW = me.errorTextSpanEl.width();
                }
                var textW = tipW > errorW ? tipW : errorW;
                me.textSpanEl.addClass(contentAlignClass);
                if (textW < Sweet.constants.elWidth.MIN_WIDTH) {
                    me.textSpanEl.css("min-width", textW);
                } else {
                    me.textSpanEl.css("min-width", Sweet.constants.elWidth.MIN_WIDTH);
                }
                me.textSpanEl.addClass(textOnlyClass);
                if (me.errorTextSpanEl) {
                    me.errorTextSpanEl.addClass(errorTextSpanClass);
                }
                if (me.tipTextSpanEl) {
                    me.tipTextSpanEl.addClass(tipTextSpanClass);
                }
            }
        },
        /**
         * @private
         * @description 判断文本是否为空
         * @param {String，Obj} options 数据对象{imageType:"",value:{}}
         */
        _isTextNotNull: function(options) {
            if ($.isNull(options.value)) {
                return false;
            } else if (($.isNull(options.value.errorText) && $.isNull(options.value.tipText))) {
                return false;
            } else {
                return true;
            }
        },
        /**
         * @private
         * @description 组件布局
         */
        _doLayout: function() {
            var me = this;
            //设置组件高度和宽度            
            me.errorEl.css("width", me.options.width);
            me.errorEl.css("height", me.options.height);
            //使组件在文字较短时居中
            if ($.isNotNull(me.options.imageType) && me._isTextNotNull(me.options)) {
                var tipW = 0;
                var errorW = 0;
                if (me.tipTextSpanEl) {
                    tipW = me.tipTextSpanEl.width();
                }
                if (me.errorTextSpanEl) {
                    errorW = me.errorTextSpanEl.width();
                }
                var textW = tipW > errorW ? tipW : errorW;
                var contW = me.imageEl.width() + textW + Sweet.constants.gap.IMG_TEXT;
                me.contentEl.css("width", contW);
            }
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.contentEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.contentEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.contentEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.contentEl.externalHeight(height);
        }
        /**
         * 统一错误提示组件
         * @name Sweet.ErrorInterface
         * @class 
         * @extends Sweet.widget
         * @requires
         * <pre>
         *  jquery.ui.core.js
         *  jquery.ui.widget.js
         *  jquery.sweet.widget.js
         * </pre>
         * @example 
         * <pre>
         * errorInterface = new Sweet.ErrorInterface({
         *          imageType: "server_unconnected",
         *          renderTo: "sweet-errorInterface",
         *          value: { "value":1, 
         *                   "errorText":"服务器连接中断", 
         *                   "tipText":"所有监控指标暂时无法获取,请稍后刷新重试。", 
         *                   "data":null
         *                  },
         *          width: "100%",
         *          height: "100%"
         *      });   
         * </pre>
         */
    });
    Sweet.ErrorInterface = $.sweet.widgetErrorInterface;
}(jQuery));

;
/**
 * @fileOverview  
 * <pre>
 * 树组件
 * 2013/2/18
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

/**
 * 创建Sweet.tree
 * @name Sweet.tree
 * @class 
 * @extends Sweet.widget
 * @requires 
 * <pre>
 * jquery.ui.core.js
 * jquery.ui.widget.js
 * jquery.sweet.widget.js
 * </pre>
 * @example 
 * <pre>
 * </pre>
 */
(function($, undefined) {

    var defaultTreeClass = "sweet-tree-panel";

    $.widget("sweet.widgetTree", $.sweet.widget, /** @lends Sweet.tree.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-tree]:",
        options: /** @lends Sweet.tree.prototype*/
        {},
        /**
         * @private
         * @description 创建树
         */
        _createSweetWidget: function() {
            var me = this,
                options = this.options,
                treeEl = this.treeEl = $("<div>");
            treeEl.height(options.height)
                .width(options.width)
                .attr("id", options.id)
                .addClass(defaultTreeClass + " " + options.widgetClass);
        },
        /**
         * @private
         * @description 返回组件高度
         */
        _getHeight: function() {
            return this.treeEl.externalHeight();
        },
        /**
         * @private
         * @description 返回组件宽度
         */
        _getWidth: function() {
            return this.treeEl.externalWidth();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            this.treeEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            this.treeEl.externalHeight(height);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * @private
         * @description 子类继承实现
         */
        _destroyWidget: function() {
            if (this.treeEl) {
                this.treeEl.remove();
            }
        }
    });
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * KQI树组件
 * 2013/2/18
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    "use strict";

    var defaultTreeClass = "sweet-tree-panel";
    var kqiTreeClass = "sweet-tree-kqitree";
    var lightClass = "sweet-kqitree-light";
    var zoomClass = "sweet-kqitree-zoom";
    var fitClass = "fit";
    var actClass = "act";

    $.widget("sweet.widgetKqiTree", $.sweet.widgetTree, /** @lends Sweet.tree.KQITree.prototype */ {
        version: "1.0",
        sweetWidgetName: "[widget-tree-kqitree]:",
        eventNames: {},
        options: /** @lends Sweet.tree.KQITree.prototype */
        {
            /**
             * 渲染目标DIV的id
             * @type String
             * @default ""
             */
            renderTo: "",
            /**
             * 内边距
             * @type Number
             * @default 10
             */
            padding: 10,
            /**
             * 节点间水平间距
             * @type Number
             * @default 14
             */
            offsetX: 14,
            /**
             * 节点间垂直间距
             * @type Number
             * @default 48
             */
            offsetY: 48,
            /**
             * 节点宽度
             * @type Number
             * @default 110
             */
            elemWidth: 110,
            /**
             * 节点高度
             * @type Number
             * @default 1303
             */
            elemHeight: 130,
            /**
             * 节点间连线宽度
             * @type Number
             * @default 1
             */
            lineWidth: 1,
            /**
             * 节点间连线颜色
             * @type String
             * @default "#666666"
             */
            lineColor: "#666666",
            /**
             * 树构造数据
             * @type Object
             * @default null
             */
            data: null
        },
        /**
         * 刷新布局
         * @private
         */
        _doLayout: function() {
            var options = this.options;

            if (!this.rendered) {
                return;
            }

            this._super();

            // 修正容器大小
            this.treeEl.externalWidth(options.width).externalHeight(options.height);

            // 如果还没有创建树，此时创建
            if ($.isNull(this.R)) {
                this._createKqiTree();
            }
        },
        /**
         * @private
         * 组件创建前，初始化操作，子类继承实现
         */
        _beforeCreateSweetWidget: function() {
            // 树节点类，暂时只支持 Sweet.chart.Speedometer
            this.nodeClass = Sweet.chart.Speedometer;

            // 引擎
            this.engine = "svg";

            // Raphael的Paper对象
            this.R = null;

            this.treeData = null;
            this.maxWidth = 0; // 布局后树的最大宽度
            this.maxHeight = 0; // 布局后树的高大高度
            this.nodeList = {}; // 所有节点对象
            this.lineList = []; // 所有连接线对象，目前使用直线
            this.zoomFactor = 1.0; // 适应区域与实际大小两种显示方式之间的缩放比例
            this.offset = this.options.padding;
        },
        /**
         * @private
         * @description 创建树
         */
        _createSweetWidget: function() {
            var options = this.options;

            // 创建容器
            this.treeEl = $("<div>");
            this.treeEl.addClass(kqiTreeClass + " " + defaultTreeClass + " " + options.widgetClass)
                .attr("id", options.id);
        },
        /**
         * @description 布局指定节点下的子节点的位置
         * @param {Object} parent 指定节点，为它的子节点进行布局
         * @param {Number} level 当前布局节点在树中的深度，保留未用
         * @return {Object} 布局后当前深度的宽度信息
         * @private
         */
        _layoutChildren: function(parent, level) {
            var config = this.options;
            var left = parent.pos.left;
            var top = parent.pos.top + config.elemHeight + config.offsetY;

            var left2 = left;

            // layout current level
            for (var i = 0; i < parent.children.length; i++) {
                var node = parent.children[i];
                node.pos = {};
                node.pos.left = left2;
                node.pos.top = top;

                // layout children
                if (node.children && node.children.length > 0) {
                    var pos = this._layoutChildren(node, level + 1);

                    // fix left position, center it among children
                    left = Math.round((left2 + pos.left) / 2);
                    node.pos.left = left;

                    // fix right position
                    left2 = pos.left;
                }

                // calculate sibling node's position
                left = left2;
                left2 += config.elemWidth + config.offsetX;
            }

            // record right border
            if (left > this.maxWidth) {
                this.maxWidth = left;
            }

            if (top > this.maxHeight) {
                this.maxHeight = top;
            }

            // return right edge
            return {
                "left": left,
                "top": top
            };
        },

        /**
         * @description 根据已设置的数据，对节点进行自动布局
         * @return {Boolean} 布局结果
         * @private
         */
        _layoutTree: function() {
            var options = this.options;
            var svgEl = this.treeEl.find(">svg");

            if ($.isNull(this.treeData)) {
                return false;
            }

            // 初始化节点位置信息
            var root = this.treeData.nodes;
            root.pos = {};
            root.pos.left = options.padding;
            root.pos.top = options.padding;

            this.maxWidth = root.pos.left;
            this.maxHeight = root.pos.top;

            var pos = this._layoutChildren(root, 1);
            root.pos.left = Math.round((root.pos.left + pos.left) / 2);

            // 如果树的宽度小于容器宽度，居中显示
            var w = this.treeEl.width();
            var h = this.treeEl.height();
            this.maxWidth = this.maxWidth + options.elemWidth + options.padding;
            this.maxHeight = this.maxHeight + options.elemHeight + options.padding;

            if (this.maxWidth < w) {
                this.offset = Math.floor((w - this.maxWidth) / 2);
            }

            // 修正SVG大小
            if (this.maxWidth > w) {
                svgEl.externalWidth(this.maxWidth);
            }

            if (this.maxHeight > h) {
                svgEl.externalHeight(this.maxHeight);
            }

            // 根据实际大小和容器大小，计算fit模式下的缩放比例
            if (this.maxHeight > h || this.maxWidth > w) {
                if (h / this.maxHeight < w / this.maxWidth) {
                    this.zoomFactor = h / this.maxHeight;
                } else {
                    this.zoomFactor = w / this.maxWidth;
                }
            }

            return true;
        },

        /**
         * @description 递归绘制指定节点下所有节点及连接线
         * @param {Object} node 待绘制的节点的信息
         * @private
         */
        _drawTree: function(node) {
            var options = this.options;

            if (node === null) {
                return;
            }

            // fix position to center horizontal
            node.pos.left += this.offset;

            // 准备节点的配置
            var param = {
                renderTo: "none-div",
                paper: this.R,
                left: node.pos.left,
                top: node.pos.top,
                width: options.elemWidth,
                height: options.elemHeight,
                borderStyle: node.borderStyle ? node.borderStyle : "solid"
            };

            // 创建节点对象
            var obj = new this.nodeClass(param);
            obj.setData(node);
            this.nodeList[node.id] = obj;

            // 绘制子节点
            var w = options.elemWidth;
            var h = options.elemHeight;
            for (var i = 0; i < node.children.length; i++) {
                this._drawTree(node.children[i]);

                // 绘制节点和这个子节点之间的连接线
                var child = node.children[i];
                var path = ["M", node.pos.left + w / 2, node.pos.top + h,
                    "L", node.pos.left + w / 2, node.pos.top + h + options.offsetY / 2,
                    "L", child.pos.left + w / 2, node.pos.top + h + options.offsetY / 2,
                    "L", child.pos.left + w / 2, child.pos.top];
                var line = this.R.path(path).attr({
                    "stroke-width": options.lineWidth,
                    stroke: options.lineColor
                });

                // 如果子节点的边框是虚线，那它的连接线也是虚线
                if (node.children[i].borderStyle === "dashed") {
                    line.attr({
                        "stroke-dasharray": "- "
                    });
                }

                this.lineList.push(line);
            }
        },

        /**
         * @description 设置数据
         * @param {Object} data 树形存储的数据
         */
        setData: function(data) {
            this.treeData = data;

            if (!$.isNull(this.treeData)) {
                this._layoutTree();
                this._drawTree(this.treeData.nodes);
            }
        },

        /**
         * @description 缩放画布
         * @param {Number} factor 缩放比例
         * @private
         */
        _zoom: function(factor) {
            var tfm = "s" + factor + "," + factor + "," + this.maxWidth / 2 + ",0";

            // 调整连线
            for (var i = 0; i < this.lineList.length; i++) {
                this.lineList[i].transform(tfm);
            }

            // 调整节点
            for (var id in this.nodeList) {
                if (this.nodeList.hasOwnProperty(id)) {
                    this.nodeList[id].setScale(factor, this.maxWidth / 2, 0);
                }
            }

            // 如果Fit模式，调整到左、上位置
            if (factor !== 1) {
                this.treeEl.find(">svg").css({
                    "left": 0,
                    "top": 0
                });
            }
        },

        /**
         * @description 绘制并初始化缩放工具
         * @private
         */
        _drawZoomer: function() {
            var _this = this;
            var zoomEl = $("<div>").addClass(zoomClass).addClass(fitClass).appendTo(this.treeEl);

            zoomEl.unbind().bind("click", function() {
                if (zoomEl.hasClass(fitClass)) {
                    _this._zoom(_this.zoomFactor);
                    zoomEl.addClass(actClass).removeClass(fitClass);
                } else {
                    _this._zoom(1);
                    zoomEl.removeClass(actClass).addClass(fitClass);
                }
            });
        },

        /**
         * @description 绘制告警灯说明
         * @private
         */
        _drawLight: function() {
            var zIndex = $.getMaxZIndex();

            // 创建Dom元素
            var light = $("<div>").addClass(lightClass).css("z-index", zIndex);
            var lightInfo = $("<label>").text(Sweet.core.i18n.tree.info);
            var lightWarn = $("<label>").text(Sweet.core.i18n.tree.warn);

            // 插入Dom树
            light.append(lightInfo).append(lightWarn).appendTo(this.treeEl);
        },

        /**
         * @description 初始化画布
         * @return {Boolean} 结果
         * @private
         */
        _createKqiTree: function() {
            if (this.R === null) {
                /* 在这一行关闭jshint newcap告警 */
                /* jshint newcap: false */
                this.R = Raphael(this.treeEl.get(0), "100%", "100%");
            }

            // render zoom-in/out tool
            this._drawZoomer();

            // 绘制告警灯说明
            this._drawLight();

            // 拖动的处理
            var _this = this;
            var svg = this.treeEl.find(">svg");
            var width, height, cWidth, cHeight;
            this.treeEl.find(">svg").sweetDrag(function() {
                // 如果当前是fit模式，不允许移动
                if (_this.treeEl.find("." + actClass).length > 0) {
                    return false;
                }

                width = svg.externalWidth();
                height = svg.externalHeight();
                cWidth = _this.treeEl.width();
                cHeight = _this.treeEl.height();
            },
            $.noop,

            function(event, x, y) {
                // 避免不必要的移动
                if (x > 0) {
                    svg.css("left", 0);
                } else if (width + x < cWidth) {
                    svg.css("left", cWidth - width);
                } else {
                    svg.css("left", x);
                }

                if (y > 0) {
                    svg.css("top", 0);
                } else if (height + y < cHeight) {
                    svg.css("top", cHeight - height);
                } else {
                    svg.css("top", y);
                }

                return false;
            });

            return true;
        },

        /**
         * @description 设置指定节点的值
         * @param {String} id 节点ID
         * @param {Number} value 当前值
         */
        setValue: function(id, value) {
            if ($.isNull(this.nodeList[id]) || !$.isFunction(this.nodeList[id].setValue)) {
                return;
            }

            this.nodeList[id].setValue(value);
        }
    });

    /**
     * @description KQI指标树
     * @name Sweet.tree.KQITree
     * @class
     * @extends Sweet.tree
     * @requires <pre>
     * jquery.js
     * raphael.js
     * jquery.sweetdrag.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.tree.js
     * </pre>
     * @example
     * <pre>
     * 创建KQI树：
     * var sweetKQITree = new Sweet.tree.KQITree({*});
     * </pre>
     */
    Sweet.tree.KQITree = $.sweet.widgetKqiTree;
}(jQuery));;
/**
 * @fileOverview
 *
 * <pre>
 * 树组件
 * 2013/2/18
 * &lt;a href=&quot;www.huawei.com&quot;&gt;http://www.huawei.com&lt;/a&gt;
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var treenodeClass = "sweet-tree-node",
        treenodeSelectClass = "sweet-tree-node-select",
        treeNodeExpandClass = "sweet-tree-expand",
        treeNodeCollClass = "sweet-tree-coll",
        treeNodeCheckedClass = "sweet-tree-check",
        treeNodeAllcheckedClass = "sweet-tree-full-check",
        treeNodeUnCheckClass = "sweet-tree-uncheck",
        treeLeafNodeClass = "sweet-tree-leaf-node",
        treeNodeSelectClass = "sweet-tree-action-node",
        treeListUlClass = "sweet-tree-list-ul",
        treeNodeLineClass = "sweet-tree-node-line",
        treeLeafIocClass = "sweet-tree-leaf-ioc",
        treeLeafUserDefine = "sweet-tree-leaf-userDefine",
        treeNodeIocClass = "sweet-tree-node-ioc",
        treeLeafDimensionClass = "sweet-tree-leaf-dimension",
        treeLeafCompClass = "sweet-tree-leaf-comp",
        treeLeafIndexClass = "sweet-tree-leaf-index",
        treeTitleClass = "sweet-tree-title",
        treeEditableClass = "sweet-tree-editable",
        treeStateClass = "sweet-tree-state",
        treePrefix = "sweet-tree-tree-",
        treeSearchClass = "sweet-tree-search-div",
        treeLoadMore = "tree-load-more",
        treeRootUlClass = "sweet-tree-list-root",
        treeRootUl1Class = "sweet-tree-list-root1",
        itemDraggingClass = "sweet-tree-item-dragging",
        defaultPaddingDivDisabledClass = "sweet-tree-tree-disabled ",
        timerSuffix = "sweet-tree-content-timer", // 内容区定时器名称
        treeDrag = "sweet-tree-item-dragging ui-draggable-dragging",
        uuid = 1000,
        loadDataRows = 100, // 分批加载每次加载条数
        selectmap = "selectMap";

    $.widget("sweet.widgetTreeTree", $.sweet.widgetTree, /** @lends Sweet.tree.Tree.prototype */ {
        version: "1.0",
        sweetWidgetName: "[widget-tree-tree]:",
        eventNames: /** @lends Sweet.tree.Tree.prototype */
        {
            /**
             * @event
             * @description 树节点单击事件,一般参数为(evt, data)
             */
            nodeClick: "树节点单击事件",
            /**
             * @event
             * @description 树节点双击事件,一般参数为(evt, data)
             */
            nodeDClick: "树节点双击事件",
            /**
             * @event
             * @description 树节点展开事件,一般参数为(evt, data)
             */
            nodeExpand: "树节点展开事件",
            /**
             * @event
             * @description 树节点的拖拽事件,一般参数为(evt, data)
             */
            nodeDrag: "树节点的拖拽事件",
            /**
             * @event
             * @description 树节点CheckBox选中事件,一般参数为(evt, data)
             */
            nodeCheck: "树节点CheckBox选中事件",
            /**
             * @event
             * @description 树节点CheckBox反选事件,一般参数为(evt, data)
             */
            nodeUnCheck: "树节点CheckBox反选事件",
            /**
             * @event
             * @description 搜索节点事件,一般参数为(evt, data)
             */
            search: "搜索节点事件",
            /**
             * @event
             * @description 切换树节点事件,一般参数为(evt, data)
             */
            change: "切换树节点事件",
            /**
             * @event
             * @description 调用完setData方法后事件,一般参数为(evt, data)
             */
            afterSetData: "调用完setData方法后事件",
            /**
             * @event
             * @description setValue执行后触发,一般参数为(evt, data)
             */
            afterSetValue: "setValue执行后触发",
            /**
             * @event
             * @description 树节点编辑事件,一般参数为(evt, data)
             */
            nodeEdit: "树节点编辑事件",
            /**
             * @event
             * @description 点击checkBox(未选中,半选)之前的事件,一般参数为(evt, data)
             */
            beforeCheckboxClick: "点击checkBox(未选中,半选)之前的事件"
        },
        options: /** @lends Sweet.tree.Tree.prototype */
        {
            /**
             * 基础数据
             * @type Object
             * @default null
             */
            data: null,
            /**
             * 是否多选
             * @type Boolean
             * @default false
             */
            multi: false,
            /**
             * 是否显示树节点的图标
             * @type Boolean
             * @default false
             */
            icon: false,
            /**
             * 树节点是否可以拖动
             * @type Boolean
             * @default false
             */
            nodeDraggable: false,
            /**
             * 接受树节点的对象
             * @type Object
             * @default null
             */
            nodeAccept: null,
            /**
             * 是否展开
             * @type boolean
             * @default false
             */
            expand: false,
            /**
             * 是否延迟加载数据
             * @type boolean
             * @default false
             */
            lazyLoad: false,
            /**
             * 延迟加载数据条数
             * @type Number
             * @default false
             */
            limit: 20,
            /**
             * 是否使用后台延迟加载数据
             * @type boolean
             * @default false
             */
            backEndLoad: false,
            /**
             * 是否显示搜索框
             * @type boolean
             * @default false
             */
            search: false,
            /**
             * 是否搜索目录，默认只搜索树的叶子节点，当searchDir：true时对目录进行搜索
             * @type boolean
             * @default false
             */
            searchDir: false,
            /**
             * 当search为true时，出现的搜索框中的提示文字
             * @type string
             * @default Sweet.core.i18n.tree.search("search"/"搜索")
             */
            searchEmptyText: Sweet.core.i18n.tree.search,
            /**
             * 树的默认最大高度
             * @type Number
             * @default false
             */
            maxHeight: 0,
            /**
             * 加载数据
             * @type {Object}
             * @default null
             */
            store: null,
            /**
             * 是否是后台搜索
             * @type {boolean}
             * @default false
             */
            remote: false,
            /**
             * 是否禁用list组件
             * @type {boolean}
             * @default false
             */
            disabled: false,
            /**
             * 返回数据是否带有父节点数据，默认值是false
             * 如果为true，在树的拖动、双击事件传入的数据包括父节点数据，为false，只传当前节点数据
             * @type {Boolean}
             * @default false
             */
            parent: false,
            /**
             * @description 可配置对呈现数据加工后再返回
             * @type {Function}
             */
            parentAllowNodeClick: false,
            /**
             * @description 允许单选树父节点有nodeClick事件
             * @default false
             */
            handleText: function(text) {
                return text;
            },
            /**
             * @description 可配置对呈现数据tip提示加工后再返回
             * @type {Function}
             */
            handleTitle: function(title) {
                return title;
            }
        },
        /**
         * @description 设置值
         * @param {Array} data 值，格式如[{text:'text1',value:'value1',data:'{"type": 2},...],
         * @param {Boolean} isAppend 是否是追加新的树节点
         *  children:[{text:'text11',value:'valuw11','data':''}]},...]
         */
        setData: function(data, isAppend, _isFilterSetData) {
            var me = this,
                options = me.options;
            isAppend = isAppend || false;
            _isFilterSetData = _isFilterSetData || false;
            me.afterSetData = false;
            options.data = $.objClone(data);
            var tempData = $.objClone(data);
            //data 如果不是数组，转化成数组
            if (!$.isArray(tempData)) {
                tempData = [tempData];
            }
            if (!isAppend) {
                me.removeAllNode();
                me.data = tempData;
            } else {
                me.removeAllNode();
                if ($.isNull(me.data)) {
                    me.data = [];
                }
                //给追加数据data添加isSelect属性
                $.each(tempData, function(index, node) {
                    if ($.isNull(node.data)) {
                        node.data = {};
                    }
                    node.data.isSelect = 1;
                });
                //追加之前，判断数据是否存在
                me.data = me.data.concat(tempData);
                me.options.data = me.data;
            }
            me._initValue();

            if (!_isFilterSetData) {
                me._filterCache();
            }
        },
        /**
         * @description 返回树节点数据
         * @return {Array} 叶子节点对应的值,格式如[{text:'text1',value:'value1'},...]
         */
        getData: function() {
            var me = this;
            return me.data;
        },
        /**
         * @description 设置叶子节点处于选中状态
         * @param {Array} data 值，格式如[{text:'text1',value:'value1'},...]
         */
        setSelected: function(data) {
            var me = this,
                li;
            //判断数据有效性
            if ($.isNull(data)) {
                return;
            }
            //定时器判断数据是否加载完成
            me.timerSetSelectedId = setInterval(function() {
                if (me.afterSetData) {
                    li = me.rootListEl.children("li");
                    $.each(li, function(index, nodeli) {
                        nodeli = $(nodeli);
                        // 清除之前选中的样式
                        nodeli.find("div").removeClass(treeNodeSelectClass);
                    });
                    //将data数据转化成数组
                    data = $.isArray(data) ? data : [data];
                    //根据数据设置节点选中
                    $.each(data, function(index, nodeData) {
                        me._leafNodeSelected(nodeData);
                    });
                    clearInterval(me.timerSetSelectedId);
                }
            }, 500);
        },
        /**
         * @description 删除所有树节点
         */
        removeAllNode: function() {
            var rootList = this.treeEl.children("ul");
            rootList.children().remove();
            rootList.data("children", []);
        },
        /**
         * @description 删除树节点
         * @param {Object} data 树节点的绑定的数据
         *  [{text:'text1',value:'value1',data:'',
         *  children:[{text:'text11',value:'valuw11','data':''}]},...]
         */
        removeNode: function(data) {
            if ($.isNull(data)) {
                return;
            }
            var me = this,
                treeNode = null;
            $.each(data, function(index, nodeData) {
                treeNode = me._findNodeUI(nodeData);
                if ($.isNull(treeNode)) {
                    me.removeNode(nodeData.children);
                    return;
                }
                //如果节点不存在子节点删除当前节点
                if (!me._hasChild(treeNode)) {
                    me._removeNodeData(treeNode, treeNode.data("data"));
                    treeNode.empty();
                    treeNode.remove();
                } else {
                    //当节点存在子节点时先删除子节点
                    if (nodeData.children) {
                        me.removeNode(nodeData.children);
                        if (!me._hasChild(treeNode)) {
                            me._removeNodeData(treeNode, treeNode.data("data"));
                            treeNode.empty();
                            treeNode.remove();
                        }
                    }
                }
            });
        },
        /**
         * @description 获取所有的树节点的值
         * @param {Boolean} isSelect 是否过滤data中的isSelect属性
         * @return {Array} 叶子节点对应的值,格式如[{text:'text1',value:'value1'},...]
         */
        getAllNode: function(isSelect) {
            var me = this,
                rootList = this.treeEl.children("ul").data("children"),
                array = [];
            if ($.isNull(rootList)) {
                return [];
            }
            isSelect = isSelect || false;
            $.each(rootList, function(index, nodeEl) {
                if (nodeEl) {
                    array.push($.objClone(nodeEl.data("data")));
                }
            });
            if (!isSelect) {
                me._deleteAttrIsSelect(array);
            }
            return array;
        },
        /**
         * @description 设置所有selectMap数据为全选
         */
        getUnSelectedData: function() {
            var me = this,
                rootList = this.treeEl.children("ul").data("children");
            if ($.isNull(rootList)) {
                return [];
            }
            me._removeAllSelectMapData();
            $.each(rootList, function(index, nodeEl) {
                if (nodeEl) {
                    //选中树节点，同时迭代联动选中其子孙节点
                    me._checkNode($(nodeEl));
                }
            });
        },
        /**
         * @description 为某个树节点添加子节点
         * @param {Array} data 子节点要展示的数据，格式如:
         *  [{text:'text1',value:'value1',data:'',
         *  children:[text:'text11',value:'valuw11',data:'']},...]
         * @param {Boolean} isSelect 列表节点是否被选中
         * @param {Object} treeNodeEl 当前节点，默认为根节点
         * @param {Number} depth 当前节点的深度，默认为0
         * @param {Boolean} isLastRoot 是否是最后一个根节点
         */
        addNode: function(data, isSelect, treeNodeEl, depth, isLastRoot) {
            if (!$.isArray(data)) {
                return;
            }
            var me = this,
                blankWidth = 20,
                treeNodeLi,
                loadCount = me.options.limit,
                nodeioc = "",
                treenodeEblow,
                nodeblank,
                liStr,
                treecoll,
                lazyIndex,
                treeTextClass,
                checkStr = "",
                treeNode,
                i,
                lazyLoad = this.options.lazyLoad,
                index, value,
                expand = me.options.expand;
            isSelect = isSelect || false;
            depth = depth || 0;
            treeNodeEl = treeNodeEl || me.rootListEl;
            var listEls = treeNodeEl.data("children") || [];
            isLastRoot = isLastRoot || false;

            if (lazyLoad) {
                if (this.isgetData) {
                    this.lazyLoadDiv.data({
                        "data": data,
                        "clickCount": 0
                    });
                    this.lazyLoadDiv.attr("title", Sweet.core.i18n.tree.clickLoad);
                    this.isgetData = false;
                }
                lazyIndex = loadCount * this.lazyLoadDiv.data("clickCount");
                //如果点击展开图标
                if (0 < depth) {
                    lazyIndex = 0;
                }
            } else {
                //设置查询起始位置
                lazyIndex = me.dataIndex;
            }
            $.each(data, function(index, value) {
                i = index + lazyIndex;
                if (lazyLoad) {
                    //设置点击加载按钮
                    if (me.data.length <= i) {
                        me.lazyLoadDiv.attr("title", Sweet.core.i18n.tree.clickLoadOver);
                        me._deleteNodeLine();
                    }
                    if (i + 1 > loadCount + lazyIndex) {
                        //将所有节点添加到rootListEl
                        treeNodeEl.data("children", listEls);
                        return false;
                    }
                } else {
                    if (i >= me.dataIndex + loadDataRows) {
                        //将所有节点添加到rootListEl
                        treeNodeEl.data("children", listEls);
                        return;
                    }
                }
                if ($.isNull(data[i])) {
                    return false;
                }
                value = data[i];

                treenodeEblow = nodeblank = treecoll = "";
                if (value.children && 0 < value.children.length) {
                    //判断是否是最后一个根节点
                    if (data.length - 1 === i) {
                        isLastRoot = true;
                        treeNodeLi = $("<li>")
                            .data({
                            "data": value,
                            "lazyLoad": true,
                            "depth": depth + 1,
                            "isLeaf": false,
                            "isLastRoot": true
                        });
                    } else {
                        isLastRoot = false;
                        treeNodeLi = $("<li>")
                            .data({
                            "data": value,
                            "lazyLoad": true,
                            "depth": depth + 1,
                            "isLeaf": false,
                            "isLastRoot": false
                        });
                    }
                    //使用竖线填充节点前面的空间
                    for (var j = 0; j < depth; j++) {
                        nodeblank = nodeblank + '<span class="sweet-tree-node-line"></span>';
                    }
                    //如果expand为false则不展开树节点
                    treecoll = !expand ? '<a class="sweet-tree-expand" href="javascript:void(0)"></a>' :
                        '<a class="sweet-tree-coll" href="javascript:void(0)"></a>';
                } else {
                    for (var k = 0; k < depth; k++) {
                        //如果父节点是最后一个根节点
                        if (isLastRoot) {
                            var line = "";
                            for (var l = 0; l < depth - 1; l++) {
                                line = line + '<span class="sweet-tree-node-line"></span>';
                            }
                            nodeblank = line +
                                '<span class="sweet-tree-node-blank" style="width: ' + blankWidth + 'px;"></span>';
                        } else {
                            nodeblank = nodeblank + '<span class="sweet-tree-node-line"></span>';
                        }
                    }
                    treenodeEblow = (i === data.length - 1) ? '<span class="sweet-tree-node-eblow-end"></span>' :
                        '<span class="sweet-tree-node-eblow"></span>';
                    treeNodeLi = $("<li>").data({
                        "data": value,
                        "lazyLoad": true,
                        "depth": depth + 1,
                        "isLeaf": true
                    });
                }
                treeNodeLi.data(selectmap, []);
                //判断是否有checkbox
                if (me.options.multi) {
                    checkStr = me._createCheckBox(treeNodeLi, checkStr, isSelect);
                }
                //判断是否有icon
                if (me.options.icon) {
                    nodeioc = me._createIcon(value, nodeioc);
                }
                //判断是否是可编辑
                treeTextClass = value.editable ? treeEditableClass : treeTitleClass;
                if (!$.isNull(value.data) && "1" === value.data.state) {
                    treeTextClass = treeStateClass;
                }
                liStr = '<div class="sweet-tree-node">' + nodeblank + treenodeEblow + treecoll + nodeioc + checkStr +
                    '<span class=' + treeTextClass +
                    ' title=' + '\'' + me.options.handleTitle($.htmlEscape(value.text)) + '\'' + '>' + me.options.handleText($.htmlEscape(value.text)) + '</span>' +
                    '</div>' +
                    '<ul>' +
                    '</ul>';

                treeNodeLi.html(liStr);
                treeNodeLi.appendTo(treeNodeEl);
                treeNode = treeNodeLi.children("ul");

                //如果expand为false则不展开树节点
                if (!me.options.expand) {
                    treeNode.hide();
                }
                listEls.push(treeNodeLi);
                if (value.children && 0 < value.children.length) {
                    me.addNode(value.children, isSelect, treeNode, depth + 1, isLastRoot);
                }
            });
            treeNodeEl.data("children", listEls);
        },
        /**
         * @description 删除数据
         * @param {Object} selectedData 需要删除的数据
         * @param {Object} filterData 需要删除的数据
         * @return {Object} 原始数据删除之后的数据
         */
        deleteData: function(selectedData, filterData) {
            var me = this;
            for (var i = 0; i < selectedData.length; i++) {
                for (var j = 0; j < filterData.length; j++) {
                    if (selectedData[i].value === filterData[j].value) {
                        if (selectedData[i].children && 0 < selectedData[i].children.length && filterData[j].children && 0 < filterData[j].children.length) {
                            me.deleteData(selectedData[i].children, filterData[j].children);
                        } else {
                            filterData[j].isDelete = true;
                        }
                    }
                }
            }
        },
        /**
         * @description 删除节点包括isDelete属性的节点
         * @param {Array} array description
         */
        deleteFilterData: function(array) {
            var me = this;
            for (var i = 0; i < array.length; i++) {
                //如果没有子节点
                if ($.isNull(array[i].children)) {
                    //如果子节点有isDelete属性
                    if (!$.isNull(array[i].isDelete)) {
                        array.splice(i, 1);
                        i--;
                    }
                } else {
                    me.deleteFilterData(array[i].children);
                    if (0 === array[i].children.length) {
                        array.splice(i, 1);
                        i--;
                    }
                }
            }
        },
        /**
         * @description 合并树
         * @param {Object} filterData 需要合并的数据
         * @param {Object} data 需要合并的数据
         * @return {Object} 合并之后数据
         */
        mergeTree: function(filterData, data) {
            var me = this,
                isAdd;
            if ($.isNull(data)) {
                data = [];
            }
            if ($.isNull(filterData)) {
                filterData = [];
            }
            for (var i = 0; i < data.length; i++) {
                isAdd = true;
                var j = 0;
                for (j = 0; j < filterData.length; j++) {
                    //判断这个节点是否为追加节点
                    if (data[i].value === filterData[j].value) {
                        isAdd = false;
                        break;
                    }
                }
                if (isAdd) {
                    filterData.push(data[i]);
                } else {
                    if (!$.isNull(filterData[j]) && !$.isNull(filterData[j].children)) {
                        me.mergeTree(filterData[j].children, data[i].children);
                    }
                }
            }
            return filterData;
        },
        /**
         * @description 根据数据选中节点
         * @param {Object} data 树节点的绑定的数据 {text:'text1',value:'value1'}
         */
        _leafNodeSelected: function(data) {
            var me = this,
                li = me.rootDiv.find("li");
            $.each(li, function(index, nodeli) {
                nodeli = $(nodeli);
                //设置选中的样式
                if (nodeli.data("data").value === data.value) {
                    nodeli.children("div").removeClass(treenodeClass)
                        .addClass(treenodeSelectClass + " " + treeNodeSelectClass);
                    //展开节点
                    me._displayRootNode(nodeli);
                }
            });
        },
        /**
         * @description 创建展开与折叠按钮
         * @private
         * @param {Object} treeNodeLi 
         * @param {String} checkStr checkBox显示的字符串
         * @param {Boolean} isSelect checkBox是否被选中
         */
        _createExpandBotton: function(treeNodeLi, checkStr, isSelect) {
            var me = this;
            checkStr = isSelect ? '<a class="sweet-tree-full-check"></a>' :
                '<a class="sweet-tree-uncheck"></a>';
            if (isSelect) {
                me._checkNode(treeNodeLi);
                me._getSelectedMap();
            }
            return checkStr;
        },
        /**
         * @description 创建复选框
         * @private
         * @param {Object} treeNodeLi 
         * @param {String} checkStr checkBox显示的字符串
         * @param {Boolean} isSelect checkBox是否被选中
         */
        _createCheckBox: function(treeNodeLi, checkStr, isSelect) {
            var me = this;
            checkStr = isSelect ? '<a class="sweet-tree-full-check"></a>' :
                '<a class="sweet-tree-uncheck"></a>';
            if (isSelect) {
                me._checkNode(treeNodeLi);
                me._getSelectedMap();
            }
            return checkStr;
        },
        /**
         * @description 创建图标
         * @private
         * @param {Array} value 数据，格式如[{text:'text1',value:'value1','data':'',
         * @param {String} nodeioc 图标显示的字符串
         *  children:[{text:'text11',value:'valuw11','data':''}]},...]
         */
        _createIcon: function(value, nodeioc) {
            nodeioc = "";
            if (value.children && 0 < value.children.length) {
                //判断是否有icon
                nodeioc = '<a class="sweet-tree-node-ioc"></a>';
            } else {
                if ($.isNull(value.data)) {
                    nodeioc = '<a class="sweet-tree-leaf-ioc"></a>';
                } else {
                    switch (value.data.type) {
                        case 0:
                            nodeioc = '<a class="sweet-tree-leaf-dimension"></a>';
                            break;
                        case 1:
                            nodeioc = '<a class="sweet-tree-leaf-index"></a>';
                            break;
                        case 2:
                            nodeioc = '<a class="sweet-tree-leaf-userDefine"></a>';
                            break;
                        case 3:
                            nodeioc = '<a class="sweet-tree-leaf-comp"></a>';
                            break;
                        default:
                            nodeioc = '<a class="sweet-tree-leaf-ioc"></a>';
                            break;
                    }
                }
            }
            return nodeioc;
        },
        /**
         * @description 设置数据
         * @private
         * @param {Array} data 数据，格式如[{text:'text1',value:'value1','data':'',
         *  children:[{text:'text11',value:'valuw11','data':''}]},...]
         * @param {Boolean} isTrigger 是否触发afterSetData
         */
        createNodes: function(data, isTrigger) {
            var me = this,
                options = me.options,
                lazyLoad = options.lazyLoad;
            isTrigger = isTrigger || false;
            if ($.isNull(data)) {
                return;
            }
            //树形加载默认使用多线程加载,每隔10ms加载100条数据,
            //在配置lazyLoad属性为true时，使用懒加载方式。
            if (lazyLoad) {
                me.addNode(data);
            } else {
                me.data = data;
                // 记录行索引
                me.dataIndex = 0;
                // 树内容区定时器名称
                me.timerTreeContent = options.id + "-" + timerSuffix;
                //添加遮罩
                // 启动定时器，绘制树内容
                Sweet.Task.Timeout.start({
                    id: me.timerTreeContent,
                    run: me._buildTreeContent,
                    scope: me,
                    args: [{
                        "isTrigger": isTrigger
                    }],
                    interval: 10
                });
            }
        },
        /**
         * @description 过滤树
         * @param {String} filStr 过滤的字符串
         */
        filter: function(filStr) {
            var me = this,
                data;
            var patt1 = new RegExp($.regExp.escape(filStr), "i");
            if (me.options.store) {
                me.isgetData = true;
                if (me.options.remote) {
                    me.options.store.load({
                        "filStr": filStr
                    });
                } else {
                    //搜索目录
                    if (me.options.searchDir) {
                        me.options.store.filter(filStr, patt1, true);
                    } else {
                        me.options.store.filter(filStr, patt1);
                    }
                }
            }
            // 处理不用store的情况下过滤功能
            else {
                //搜索为空则收缩树节点，或者懒加载时节点收缩
                if ($.isNull(filStr) || me.options.lazyLoad) {
                    me.options.expand = false;
                }
                //搜索不为空，则展开树节点
                else {
                    me.options.expand = true;
                }
                data = $.fuzzyFilter(me.filterData, filStr);
                me.setData(data, false, true);
            }
            //搜索完之后数据之后发生change事件
            if (!$.isNull(me.eventMap.change)) {
                me.eventMap.change.call(null, null, me.data);
            }
        },
        /**
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用组件
         */
        setDisabled: function(disabled) {
            var me = this;
            me.options.disabled = disabled;
            if (disabled) {
                me.rootDiv.addClass(defaultPaddingDivDisabledClass);
                if (me.options.search) {
                    me.searchField.setDisabled(true);
                }

            } else {
                me.rootDiv.removeClass(defaultPaddingDivDisabledClass);
                if (me.options.search) {
                    me.searchField.setDisabled(false);
                }
            }
        },
        /**
         * @description 为树初始化数据
         * @private
         */
        _initValue: function() {
            var me = this,
                data = me.options.data;
            me.data = data;
            me.createNodes(data);
        },
        /**
         * @description 清空selectMap
         * @param {Object} treeNodeEl 当前节点，默认为根节点
         * @private
         */
        _removeAllSelectMapData: function(treeNodeEl) {
            var me = this;
            treeNodeEl = treeNodeEl || me.rootListEl;
            //清空selectMap     
            $.each(treeNodeEl.children("li"), function(index, nodeEl) {
                $(nodeEl).data(selectmap, []);
                if (0 < $(nodeEl).children("ul").children("li").length) {
                    me._removeAllSelectMapData($(nodeEl).children("ul"));
                }
            });
        },
        /**
         * @description 组件重绘
         * @private
         */
        _doLayout: function() {
            // 避免未渲染之前调用
            if (!this.rendered) {
                return;
            }
            var renderEl = this.renderEl,
                options = this.options,
                width = options.width,
                height = options.height,
                rootListEl = this.rootListEl,
                rootDiv = this.rootDiv,
                searchField = this.searchField,
                lazyLoad = this.options.lazyLoad,
                treeEl = this.treeEl;
            rootDiv.width(width);
            rootDiv.height(height);
            if (searchField) {
                searchField.setWidth(width);
                height = height - this.searchFiedlDiv.outerHeight(true);
            }
            treeEl.externalWidth(width);
            treeEl.externalHeight(height);
            rootListEl.externalWidth(width);
            if (lazyLoad) {
                rootListEl.externalHeight(height - 23);
            } else {
                rootListEl.externalHeight(height);
            }
        },
        /**
         * @description 删除最后一个根节点最前面的竖线
         * @private
         */
        _deleteNodeLine: function() {
            var me = this,
                lastLi = me.rootDiv.children().children("ul").children("li:last"),
                div = lastLi.find("li").children("div");
            $.each(div, function(index, div) {
                $(div).children("span:first").removeClass(treeNodeLineClass)
                    .addClass("sweet-tree-node-blank").width(20);
            });
        },
        /**
         * @description 生成树节点内容区
         * @private
         * @param {Object} args 传递给run的参数数组
         */
        _buildTreeContent: function(args) {
            var me = this;
            // 防止越界查找，并关闭定时器
            if (0 === me.data.length || me.dataIndex >= me.data.length) {
                Sweet.Task.Timeout.stop(me.timerTreeContent);
                //取消遮罩
                me._deleteNodeLine();
                me.afterSetData = true;
                if (!args[0].isTrigger) {
                    me._trigger("afterSetData", null, null);
                    if (!$.isNull(me.eventMap.afterSetData)) {
                        me.eventMap.afterSetData.call();
                    }
                }
                return;
            }
            me.addNode(me.data);
            //每次生成100条数据
            me.dataIndex = me.dataIndex + loadDataRows;
        },
        /**
         * @description 为树节点设置默认值
         * @private
         * @param {Object or Array} data 树节点对应的数据
         **/
        _setValue: function(data) {
            var me = this,
                selectedValue,
                li,
                multi = this.options.multi;
            //afterSetValue为true时用于告知setValue执行成功
            me.afterSetValue = false;
            var timerId = setInterval(function() {
                if (me.afterSetData) {
                    li = me.rootListEl.children("li");
                    $.each(li, function(index, nodeli) {
                        nodeli = $(nodeli);
                        // 清除选中的样式
                        if (multi) {
                            if (nodeli.children("div").children("a:last").hasClass(treeNodeAllcheckedClass)) {
                                // 清除选中树节点，同时迭代联动选中其子孙节点
                                me._unCheckNode(nodeli);
                                //反选树节点，同时迭代联动选中其子孙节点
                                nodeli.find("." + treeNodeAllcheckedClass).removeClass().addClass(treeNodeUnCheckClass);
                                //反选树节点，同时迭代联动父节点
                                me._checkParent(nodeli);
                            }
                            if (nodeli.children("div").children("a:last").hasClass(treeNodeCheckedClass)) {
                                me._checkNode(nodeli);
                                me._unCheckNode(nodeli);
                                //反选树节点，同时迭代联动选中其子孙节点
                                nodeli.find("." + treeNodeAllcheckedClass).removeClass().addClass(treeNodeUnCheckClass);
                                //反选树节点，同时迭代联动父节点
                                me._checkParent(nodeli);
                            }
                        } else {
                            //单选树，传数组个数大于1时，只改变值，不改变以前的选中状态
                            if (!$.isArray(data) || 1 === data.length) {
                                nodeli.find("div").removeClass(treeNodeSelectClass);
                            }
                        }
                    });
                    if ($.isArray(data)) {
                        $.each(data, function(index, nodeData) {
                            if (1 < data.length) {
                                me._setNodeStyle(nodeData, true);
                            } else {
                                me._setNodeStyle(nodeData);
                            }
                        });
                    } else {
                        data = [data];
                        $.each(data, function(index, nodeData) {
                            me._setNodeStyle(nodeData);
                        });
                    }
                    //更新父节点文本颜色
                    me._updateParentTextColor();
                    clearInterval(timerId);
                    //给树组件设值成功
                    me.afterSetValue = true;
                    if (!$.isNull(me.eventMap.afterSetValue)) {
                        me.eventMap.afterSetValue.call(null, null, me._getValue());
                    }
                    selectedValue = me._getLeafNodeObj(me._getValue());
                    // 判断是否触发change事件
                    if (!$.equals(selectedValue, data)) {
                        //触发setValue之后的change事件
                        if (!$.isNull(me.eventMap.change)) {
                            me.eventMap.change.call(null, null, selectedValue);
                        }
                    }
                }
            }, 500);
        },
        /**
         * @description 删除某个树节点的子节点
         * @private
         * @param {Object} node 树节点
         * @param {Array} data 子节点对应的数据，格式如[{text:'text1',value:'value1','data':'',
         *  children:[{text:'text11',value:'valuw11','data':''}]},...]
         */
        _removeNodeData: function(node, data) {
            var nodeList = node.children("ul"),
                parentUI;
            if (0 < nodeList.length) {
                var brotherNodes = node.children("ul").data("children");
                if (!$.isNull(brotherNodes)) {
                    $.each(brotherNodes, function(index, brotherNode) {
                        if (brotherNode) {
                            var brotherData = brotherNode.data("data");
                            if (brotherData.value === data.value) {
                                brotherNodes[index] = null;
                                return false;
                            }
                        }
                    });
                }
            }
            parentUI = node.parent("ul").parent("");
            if (!parentUI.length) {
                return;
            }
            this._removeNodeData(parentUI, data);
        },
        /**
         * @description 根据数据从新设置选中样式
         * @private
         * @param {Object} data 设置的数据
         * @param {Boolean} lengthGreaterOne 数据的长度大于1
         */
        _setNodeStyle: function(data, lengthGreaterOne) {
            var me = this,
                multi = this.options.multi,
                li = me.rootDiv.find("li");
            lengthGreaterOne = lengthGreaterOne || false;
            $.each(li, function(index, nodeli) {
                nodeli = $(nodeli);
                //重新设置选中的样式
                if (nodeli.data("data").value === data.value) {
                    //根据data属性从新设置样式
                    if (!$.isNull(data.data)) {
                        me._updateIconAndTextColor(nodeli, data.data);
                    }
                    if (multi) {
                        //选中树节点，同时迭代联动选中其子孙节点
                        me._checkNode(nodeli);
                        //选中树节点，同时迭代联动父节点
                        me._checkParent(nodeli);
                        //将当前节点的根节点，下面的数据存储
                        me._getSelectedMap();
                        me._displayRootNode(nodeli);
                    } else {
                        if (!lengthGreaterOne) {
                            nodeli.children("div").addClass(treeNodeSelectClass).removeClass(treenodeClass);
                            me._displayRootNode(nodeli);
                        }
                    }
                }
            });
        },
        /**
         * @description 根据子节点更新父节点状态
         * @private
         */
        _updateParentTextColor: function() {
            var li,
            span,
            nodeData,
            me = this;

            //将全部父节点红色先全部清除isLeaf
            li = me.rootDiv.find("li");
            $.each(li, function(index, nodeli) {
                nodeli = $(nodeli);
                nodeData = nodeli.data("data").data;
                //判断是否存在data参数，data中是否包含state
                if ($.isNull(nodeData) || $.isNull(nodeData.state)) {
                    return true;
                }
                //如果是根节点清除红色
                if (!nodeli.data("isLeaf")) {
                    span = nodeli.children("div").children("span:last");
                    span.removeClass().addClass(treeTitleClass);
                    //设置父节点文本为默认颜色
                    nodeData.state = "0";
                }
                //判断子节点是否有红色文字，如果有则需要设置父节点也为红色文字
                span = nodeli.children("div").children("span:last");
                //包含红色文字的节点
                if (span.hasClass(treeStateClass)) {
                    //循环找到父节点，设置红色文字
                    nodeli = nodeli.parent().parent();
                    while ("1" <= nodeli.data("depth")) {
                        nodeData = nodeli.data("data").data;
                        span = nodeli.children("div").children("span:last");
                        span.removeClass().addClass(treeStateClass);
                        //如果父节点没有data参数需要增加，设置父节点的state为红色
                        if ($.isNull(nodeData)) {
                            //创建节点data参数
                            nodeli.data("data").data = {
                                "state": "1"
                            };
                        } else {
                            nodeData.state = "1";
                        }
                        nodeli = nodeli.parent().parent();
                    }
                }
            });
        },
        /**
         * @description 根据data属性更新图标和文字样式
         * @private
         * @param {Object} nodeli 树节点的绑定的数据
         * @param {Object} data 节点属性
         */
        _updateIconAndTextColor: function(nodeli, data) {
            var iconClass,
            nodeData = nodeli.data("data").data,
                icon = nodeli.children("div").children("a:first"),
                text = nodeli.children("div").children("span:last");
            //如果存在图标，判断是否更新图标
            if (icon.hasClass(treeLeafDimensionClass) || icon.hasClass(treeLeafIocClass) || icon.hasClass(treeLeafCompClass) || icon.hasClass(treeLeafIndexClass) || icon.hasClass(treeLeafUserDefine)) {
                if (!$.isNull(data.type)) {
                    switch (data.type) {
                        case 0:
                            iconClass = treeLeafDimensionClass;
                            break;
                        case 1:
                            iconClass = treeLeafIndexClass;
                            break;
                        case 2:
                            iconClass = treeLeafUserDefine;
                            break;
                        case 3:
                            iconClass = treeLeafCompClass;
                            break;
                        default:
                            iconClass = treeLeafIocClass;
                            break;
                    }
                }
                icon.removeClass().addClass(iconClass);
            }
            //如果没有data参数，则需要创建
            if ($.isNull(nodeData)) {
                //更新节点data数据
                nodeli.data("data").data = $.objClone(data);
            }
            //判断是否更新文字颜色
            if (!$.isNull(data.state)) {
                //state等于1表示红色字体
                if ("1" === data.state) {
                    text.removeClass().addClass(treeStateClass);
                } else {
                    text.removeClass().addClass(treeTitleClass);
                }
            }
            //更新子节点数据
            $.extend(nodeData, data);
        },
        /**
         * @description 显示树节点UI，已经其父节点UI
         * @private
         * @param {Object} nodeli 树节点的绑定的数据
         */
        _displayRootNode: function(nodeli) {
            var me = this,
                expand = nodeli.children("div").children("." + treeNodeExpandClass);
            me._clickExpandEventTrigger($(expand));
            if (1 === nodeli.data("depth")) {
                return;
            } else {
                me._displayRootNode(nodeli.parent().parent());
            }
        },
        /**
         * @description 查找树节点UI
         * @private
         * @param {Object} data 树节点的绑定的数据
         */
        _findNodeUI: function(data) {
            var parentNode = this._findParentNode(data, this.treeEl) || this.treeEl,
                nodeArrays = parentNode.children("ul").data("children"),
                treeNode = null,
                childData = $.isArray(data) ? data[0] : data;
            if ($.isNull(nodeArrays)) {
                return null;
            }
            $.each(nodeArrays, function(index, node) {
                if (node && node.data("data").value === childData.value) {
                    treeNode = node;
                    return false;
                }
            });
            return treeNode;
        },
        /**
         * @description 检查某节点是否存在子节点
         * @private
         * @param {Object} treeNode 节点UI
         */
        _hasChild: function(treeNode) {
            if (treeNode) {
                return !!treeNode.find("li").length;
            }
            return false;
        },
        /**
         * @description 查找父节点
         * @private
         * @param nodeData 当前节点对应的节点数据
         * @param treeNode 起始树节点
         */
        _findParentNode: function(nodeData, treeNode) {
            treeNode = treeNode || this.treeEl;
            if (treeNode.find("li").length === 0) {
                return null;
            }
            var me = this,
                childNodes = treeNode.children("ul").data("children"),
                hasFindParent = false,
                parentNode = null;
            if ($.isNull(childNodes)) {
                return null;
            }
            $.each(childNodes, function(inext, childNode) {
                if (childNode) {
                    if (childNode.data("data").value === nodeData.value) {
                        hasFindParent = true;
                        parentNode = treeNode;
                        return false;
                    } else {
                        if (me._hasChild(childNode)) {
                            var node = me._findParentNode(nodeData, childNode);
                            if (node) {
                                hasFindParent = true;
                                parentNode = node;
                                return false;
                            }
                            if (hasFindParent) {
                                return false;
                            }
                        }
                    }
                }
            });
            if (hasFindParent && parentNode) {
                return parentNode;
            }
        },
        /**
         * @description 绑定树节点双击时触发
         * @private
         * @param {Object} event 双击事件
         */
        _dblClickEventTrigger: function(event) {
            var me = this,
                hasClass,
                nodeli,
                data,
                div,
                options = me.options,
                parent = options.parent,
                target = $(event.target);
            if (me.options.disabled) {
                return;
            }
            //判断拖动的目标
            nodeli = (target.hasClass(treenodeClass) || target.hasClass(treeNodeSelectClass)) ? target.parent() : target.parent().parent();
            data = nodeli.data("data");
            //取父节点信息,构造返回数据
            if (parent) {
                data = me._createNodeData(nodeli, data);
            }
            //触发nodeDClick事件
            me._trigger("nodeDClick", nodeli, data);
            //如果注册nodeDClick的回调，则调用
            if (!$.isNull(me.eventMap.nodeDClick)) {
                me.eventMap.nodeDClick.call(this, event, data);
            }
            if (me.options.lazyLoad) {
                if (0 < $(target.children("." + treeNodeExpandClass)).length) {
                    me._clickExpandEventTrigger($(target.children("." + treeNodeExpandClass)), event);
                } else {
                    me._clickExpandEventTrigger($(target.children("." + treeNodeCollClass)), event);
                }
            } else {
                div = nodeli.children("div");
                if ("none" === nodeli.children("ul").css("display")) {
                    nodeli.children("ul").show();
                    hasClass = div.children("a:first").hasClass(treeNodeExpandClass);
                    if (hasClass) {
                        div.children("a:first")
                            .removeClass(treeNodeExpandClass)
                            .addClass(treeNodeCollClass);
                    }
                } else {
                    nodeli.children("ul").hide();
                    hasClass = div.children("a:first").hasClass(treeNodeCollClass);
                    if (hasClass) {
                        div.children("a:first")
                            .removeClass(treeNodeCollClass)
                            .addClass(treeNodeExpandClass);
                    }
                }
            }
        },
        /**
         * @description 绑定展开与关闭时触发
         * @private
         * @param {Object} target 单击目标
         * @param {Object} event 点击事件
         * @return {Boolean} 是否执行此方法
         */
        _clickExpandEventTrigger: function(target, event) {
            var me = this,
                lazyLoad = me.options.lazyLoad;
            if (me.options.disabled) {
                return;
            }
            // 如果在ul元素上点击
            if (target.hasClass(treeRootUlClass) || target.hasClass(treeRootUl1Class)) {
                return true;
            }
            //节点展开操作
            if (target.hasClass(treeNodeCollClass)) {
                target.parent().parent().children("ul").hide();
                target.removeClass().addClass(treeNodeExpandClass);
                //触发节点展开事件
                if (!$.isNull(event) && !$.isNull(me.eventMap.nodeExpand)) {
                    me.eventMap.nodeExpand.call(this, event, {
                        "isExpand": false
                    });
                }
                return true;
            }
            //节点折叠操作
            if (target.hasClass(treeNodeExpandClass)) {
                target.parent().parent().children("ul").show();
                var treeNodeLi = target.parent().parent();
                var treeNode = target.parent().parent().children("ul");
                target.removeClass().addClass(treeNodeCollClass);
                //触发节点折叠事件
                if (!$.isNull(event) && !$.isNull(me.eventMap.nodeExpand)) {
                    me.eventMap.nodeExpand.call(this, event, {
                        "isExpand": true
                    });
                }
                //异步加载子节点
                if (lazyLoad && treeNodeLi.data("lazyLoad")) {
                    //如果是最后一个节点
                    treeNodeLi.data("lazyLoad", false);
                }
                return true;
            }
        },
        /**
         * @description 复选树节点选中时前触发
         * @private
         * @param {Object} event 点击事件
         * @return {Boolean} 是否执行此方法
         */
        _beforeOnCheckEventTrigger: function(event) {
            var me = this,
                target = $(event.target);
            if (me.options.disabled) {
                return;
            }
            //点击复选框事件,节点选中treeNodeCheckedClass
            if (target.hasClass(treeNodeUnCheckClass) || target.hasClass(treeNodeCheckedClass)) {
                return me._beforeCheckboxClick(event);
            }
        },
        /**
         * @description 复选树节点选中时触发
         * @private
         * @param {Object} event 单击目标
         * @return {Boolean} 是否执行此方法
         */
        _onCheckEventTrigger: function(event) {
            var me = this,
                treeNode,
                target = $(event.target),
                lazyLoad = me.options.lazyLoad;
            if (me.options.disabled) {
                return;
            }
            //点击复选框事件,节点选中
            if (target.hasClass(treeNodeUnCheckClass)) {
                treeNode = target.parent().parent();
                var treeNodeEL = target.parent().parent().children("ul");
                //如果是懒加载，点击checkBox时加载子节点
                if (lazyLoad && treeNode.data("lazyLoad")) {
                    //如果是最后一个节点
                    if (treeNode.data("isLastRoot")) {
                        me.addNode(treeNode.data("data")
                            .children, false, treeNodeEL, treeNode.data("depth"), true);
                    } else {
                        me.addNode(treeNode.data("data")
                            .children, false, treeNodeEL, treeNode.data("depth"), false);
                    }
                    treeNode.data("lazyLoad", false);
                }

                // 选中树节点，同时迭代联动选中其子孙节点
                me._checkNode(treeNode);
                //选中树节点，同时迭代联动父节点
                me._checkParent(treeNode);
                //将当前节点的根节点，下面的数据存储
                me._getSelectedMap();
                me._trigger("change", treeNode, treeNode.data("data"));
                me._trigger("nodeCheck", treeNode, treeNode.data("data"));

                if (!$.isNull(me.eventMap.nodeCheck)) {
                    me.eventMap.nodeCheck.call(this, event, treeNode.data("data"));
                }
                if (!$.isNull(me.eventMap.change)) {
                    me.eventMap.change.call(this, event, treeNode.data("data"));
                }
                return true;
            }
        },
        /**
         * @description 列表节点的选中或反选事件 
         * @private
         * @param {Object} event 参数对象
         */
        _beforeCheckboxClick: function(event) {
            var me = this,
                target = $(event.target),
                treeNode = target.parent().parent(),
                isClick = true;
            if (me.options.disabled) {
                return;
            }
            me._trigger("beforeCheckboxClick", treeNode, treeNode.data("data"));
            if (!$.isNull(me.eventMap.beforeCheckboxClick)) {
                isClick = me.eventMap.beforeCheckboxClick.call(this, event, treeNode.data("data"));
                //如果返回为undefined
                if ($.isNull(isClick)) {
                    isClick = true;
                }
            }
            if (!isClick) {
                return true;
            } else {
                return false;
            }
        },
        /**
         * @description 复选树节点反选时触发
         * @private
         * @param {Object} event 单击目标
         * @return {Boolean} 是否执行此方法
         */
        _unCheckEventTrigger: function(event) {
            var me = this,
                target = $(event.target),
                treeNode;
            if (me.options.disabled) {
                return;
            }
            if (target.hasClass(treeNodeAllcheckedClass)) {
                treeNode = target.parent().parent();
                // 反选树节点，同时迭代联动选中其子孙节点
                me._unCheckNode(treeNode);
                //反选树节点，同时迭代联动选中其子孙节点
                treeNode.find("." + treeNodeAllcheckedClass).removeClass().addClass(treeNodeUnCheckClass);
                //反选树节点，同时迭代联动父节点
                me._checkParent(treeNode);
                me._trigger("nodeUnCheck", treeNode, treeNode.data("data"));
                if (!$.isNull(me.eventMap.nodeUnCheck)) {
                    me.eventMap.nodeUnCheck.call(this, treeNode.data("data"));
                }

                me._trigger("change", treeNode, treeNode.data("data"));
                if (!$.isNull(me.eventMap.change)) {
                    me.eventMap.change.call(this, treeNode.data("data"));
                }
                me._getSelectedMap();
                return true;
            }
        },
        /**
         * @description 复选树节点处于半选时触发
         * @private
         * @param {Object} target 单击目标
         * @return {Boolean} 是否执行此方法
         */
        _checkEventTrigger: function(target) {
            var me = this,
                treeNode;
            if (me.options.disabled) {
                return;
            }
            if (target.hasClass(treeNodeCheckedClass)) {
                treeNode = target.parent().parent();
                // 选中树节点，同时迭代联动选中其子孙节点
                me._checkNode(treeNode);
                //选中树节点，同时迭代联动父节点
                me._checkParent(treeNode);
                //将当前节点的根节点，下面的数据存储
                me._getSelectedMap();
                return true;
            }
        },
        /**
         * @description 树节点单击时触发
         * @private
         * @param {Object} event 单击目标
         * @return {Boolean} 是否执行此方法
         */
        _clickNodeEventTrigger: function(event) {
            var me = this,
                options = this.options,
                target = $(event.target),
                value,
                data;
            if (me.options.disabled) {
                return;
            }
            //单选树根节点不能选中
            if (!options.parentAllowNodeClick) {
                if (!options.multi) {
                    if (target.children().hasClass(treeNodeExpandClass) || target.children().hasClass(treeNodeCollClass) || target.parent().children().hasClass(treeNodeExpandClass) || target.parent().children().hasClass(treeNodeCollClass)) {
                        return;
                    }
                }
            }
            me.rootDiv.find("." + treeNodeSelectClass).removeClass(treeNodeSelectClass).addClass(treenodeClass);
            me.rootDiv.find("." + treenodeSelectClass).removeClass(treeNodeSelectClass);
            me.rootDiv.find("." + treenodeSelectClass).removeClass(treenodeSelectClass).addClass(treenodeClass);
            if (target.hasClass(treenodeClass)) {
                target.addClass(treeNodeSelectClass);
                target.removeClass(treenodeClass);
                target.addClass(treenodeSelectClass);
                //获取当前点击节点数据
                data = target.parent().data("data");
                //获取点击节点数据
                value = me._getNodeClickData();
                //触发节点点击事件
                me._trigger("nodeClick", target.parent(), data);
                //调用节点单击绑定的回调函数
                if (!$.isNull(me.eventMap.nodeClick)) {
                    me.eventMap.nodeClick.call(this, event, data);
                }
                //多选树的时候不发生change事件
                if (!options.multi) {
                    me._trigger("change", target.parent(), value);
                    if (!$.isNull(me.eventMap.change)) {
                        me.eventMap.change.call(this, event, value);
                    }
                }

            } else {
                //获取当前点击节点数据
                data = target.parent().parent().data("data");
                //判断是否是可编辑文本
                if (target.hasClass(treeEditableClass)) {
                    if (!$.isNull(me.eventMap.nodeEdit)) {
                        me.eventMap.nodeEdit.call(this, event, data);
                    }
                }

                target.parent().addClass(treeNodeSelectClass);
                target.parent().removeClass(treenodeClass);
                target.parent().addClass(treenodeSelectClass);

                //获取点击节点数据
                value = me._getNodeClickData();
                //触发节点点击事件
                me._trigger("nodeClick", target.parent().parent(), data);
                //调用节点单击绑定的回调函数
                if (!$.isNull(me.eventMap.nodeClick)) {
                    me.eventMap.nodeClick.call(this, event, data);
                }
                //多选树的时候不发生change事件
                if (!options.multi) {
                    me._trigger("change", target.parent().parent(), value);
                    if (!$.isNull(me.eventMap.change)) {
                        me.eventMap.change.call(this, event, value);
                    }
                }
            }
            return true;
        },
        /**
         * @description 创建组件之后绑定事件
         * @private
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                TimeFn = null;
            if (me.options.nodeDraggable) {
                me._addNodeDragEvent();
            }
            //监听双击树节点事件
            me.rootListEl.bind("dblclick", function(event) {
                clearInterval(TimeFn);
                me._dblClickEventTrigger(event);
                return;
            });
            //点击延迟加载事件
            me.lazyLoadDiv.bind("click", function(event) {
                var target = $(event.target),
                    clickCount = target.data("clickCount"),
                    data = target.data("data");
                target.data("clickCount", clickCount + 1);
                me.addNode(data);
                return;
            });
            me.rootListEl.bind("click", function(event) {
                clearInterval(TimeFn);

                //关闭展开事件
                var target = $(event.target),
                    isTrigger = false;
                //判断是否执行clickExpandEvent
                isTrigger = me._clickExpandEventTrigger(target, event);
                if (isTrigger) {
                    return;
                }
                //判断是否执行beforeOnCheckEventTrigge
                isTrigger = me._beforeOnCheckEventTrigger(event);
                if (isTrigger) {
                    return;
                }
                //点击复选框事件,节点选中
                isTrigger = me._onCheckEventTrigger(event);
                if (isTrigger) {
                    return;
                }
                //点击复选框事件,节点反选
                isTrigger = me._unCheckEventTrigger(event);
                if (isTrigger) {
                    return;
                }
                //复选框处于半选状态点击事件
                isTrigger = me._checkEventTrigger(target);
                if (isTrigger) {
                    return;
                }
                //监听单击树节点事件
                TimeFn = setInterval(function() {
                    isTrigger = me._clickNodeEventTrigger(event);
                    if (isTrigger) {
                        clearInterval(TimeFn);
                        return false;
                    }

                }, 300);

            });
        },
        /**
         * @description 选中树节点，同时迭代联动选中其子孙节点
         * @private
         * @param {Object} treeNodeEl 树节点
         */
        _checkNode: function(treeNodeEl) {
            if ($.isNull(treeNodeEl)) {
                return;
            }
            var me = this,
                childNodes = treeNodeEl.children("ul").data("children");
            if (childNodes) {
                $.each(childNodes, function(index, childNode) {
                    me._checkNode(childNode, true);
                });
            }
            me._onCheckNode(treeNodeEl, true);
        },
        /**
         * @description 监听树节点的选中事件
         * @private
         * @param {Object} treeNodeEl 树节点
         * @param {Boolean} full 是否全选
         */
        _onCheckNode: function(treeNodeEl, full) {
            var checkEl,
            parentSelectMap,
            newTreeNodeClass,
            parentNode,
            nodeData,
            selectMap,
            selectObject,
            nodeLength = treeNodeEl.length;
            if (nodeLength === 0) {
                return;
            }
            if (0 < treeNodeEl.children().children("." + treeNodeUnCheckClass).length) {
                checkEl = treeNodeEl.children().children("." + treeNodeUnCheckClass);
            } else {
                checkEl = treeNodeEl.children().children("." + treeNodeCheckedClass);
            }
            nodeData = treeNodeEl.data("data");
            selectMap = treeNodeEl.data(selectmap);
            checkEl.removeClass();
            newTreeNodeClass = full ? treeNodeAllcheckedClass : treeNodeCheckedClass;
            checkEl.addClass(newTreeNodeClass);
            parentNode = treeNodeEl.parent("ul").parent("li");
            //树节点选中后，会将该节点存放在父节点的selectMap中
            if (this.options.multi) {
                parentSelectMap = parentNode.data(selectmap);
            } else {
                parentSelectMap = [];
            }

            if (0 < parentNode.length) {
                selectObject = {
                    "text": nodeData.text,
                    "value": nodeData.value,
                    "data": nodeData.data,
                    "editable": nodeData.editable
                };
                if (0 < selectMap.length) {
                    selectObject.children = selectMap;
                }
                parentSelectMap[nodeData.value] = selectObject;
                parentNode.data(selectmap, parentSelectMap);
                parentNode.data("selectMap").length++;
            }
        },
        /**
         * @description 反选树节点，同时迭代联动反选其子孙节点
         * @private
         * @param {Object} treeNodeEl 树节点
         */
        _unCheckNode: function(treeNodeEl) {
            if ($.isNull(treeNodeEl)) {
                return;
            }
            var me = this,
                childNodes = treeNodeEl.children("ul").data("children");
            me._onUnCheckNode(treeNodeEl);
            if (!childNodes) {
                return;
            }
            $.each(childNodes, function(index, childNode) {
                me._unCheckNode(childNode);
            });
        },
        /**
         * @description 监听树节点的反选中事件
         * @private
         * @param {Object} treeNodeEl 树节点
         */
        _onUnCheckNode: function(treeNodeEl) {
            if (0 === treeNodeEl.length) {
                return;
            }
            var nodeData = treeNodeEl.data("data"),
                parentNode = treeNodeEl.parent("ul").parent("li");
            //树节点反选后，会将该节点从父节点的selectMap中删除
            if (0 < parentNode.length) {
                var selectMap = parentNode.data(selectmap);
                if (0 < selectMap.length) {
                    delete selectMap[nodeData.value];
                    parentNode.data("selectMap").length--;
                }
            }
        },
        /**
         * @description 删除选中的叶子节点的值
         * @private
         * @param {Object} treeNodeEl 当前节点
         */
        _deleteSelectedMap: function(treeNodeEl) {
            var me = this,
                allLi,
                data = [];
            //如果是子节点
            if (treeNodeEl.data("isLeaf")) {
                data = treeNodeEl.data("data");
                for (var i = 0; i < me.selectMap.length; i++) {
                    if (me.selectMap[i].value === data.value && me.selectMap[i].text === data.text) {
                        me.selectMap.splice(i, 1);
                    }
                }
            } else {
                //找到当前节点下面的全部叶子节点
                allLi = treeNodeEl.find("li");
                $.each(allLi, function(index, childLi) {
                    data = $(childLi).data("data");
                    for (var i = 0; i < me.selectMap.length; i++) {
                        if (me.selectMap[i].value === data.value && me.selectMap[i].text === data.text) {
                            me.selectMap.splice(i, 1);
                        }
                    }
                });
            }
        },
        /**
         * @description 设置祖先节点的选中状态
         * @private
         * @param {Object} treeNode 当前树节点
         * @return {Object} 当前节点的根节点 
         */
        _checkParent: function(treeNode) {
            var me = this,
                nodeNum,
                parentUl = treeNode.parent(),
                parentNodeEl = parentUl.parent("li"),
                nodeData = parentNodeEl.data("data"),
                selectMap = parentNodeEl.data(selectmap),
                parentNode = parentNodeEl.parent("ul").parent("li"),
                //获取ul节点下的li的个数
                countLi = parentUl.children("li").length,
                //ul下没有被选中的节点个数
                unSelectCount = 0,
                //ul下有被选中的节点个数
                selectCount = 0,
                childrenLis = parentUl.children("li"),
                treeNodeEl = parentUl.parent();
            if (1 === treeNode.data("depth")) {
                return treeNode;
            }
            $.each(childrenLis, function(index, childLi) {
                if ($(childLi).children("div").children().hasClass(treeNodeUnCheckClass)) {
                    unSelectCount++;
                }
                if ($(childLi).children("div").children().hasClass(treeNodeAllcheckedClass)) {
                    selectCount++;
                }
            });
            if (0 === selectCount) {
                nodeData = {
                    "text": undefined,
                    "value": nodeData.value,
                    "data": undefined,
                    "editable": undefined
                };
            }
            //设置父节点
            nodeNum = me.options.icon ? 2 : 1;
            if (countLi === selectCount) {
                parentNodeEl.children("div").children("a:eq(" + nodeNum + ")")
                    .removeClass().addClass(treeNodeAllcheckedClass);
            } else if (countLi === unSelectCount) {
                parentNodeEl.children("div").children("a:eq(" + nodeNum + ")")
                    .removeClass().addClass(treeNodeUnCheckClass);
                //同时删除父节点
                me._onUnCheckNode(parentNodeEl);
            } else {
                parentNodeEl.children("div").children("a:eq(" + nodeNum + ")")
                    .removeClass().addClass(treeNodeCheckedClass);
            }
            //树节点选中后，会将该节点存放在父节点的selectMap中
            if (0 < parentNode.length) {
                var parentSelectMap = parentNode.data(selectmap),
                    selectObject = {
                        "text": nodeData.text,
                        "value": nodeData.value,
                        "data": nodeData.data,
                        "editable": nodeData.editable
                    };
                if (0 < selectMap.length) {
                    selectObject.children = selectMap;
                }
                if ($.isNull(selectObject.text)) {
                    parentSelectMap[nodeData.value] = undefined;
                } else {
                    parentSelectMap[nodeData.value] = selectObject;
                }

                parentNode.data(selectmap, parentSelectMap);
            }

            treeNode = me._checkParent(treeNodeEl);
            return treeNode;
        },
        /**
         * @description 为树添加拖动事件
         * @private
         */
        _addNodeDragEvent: function() {
            var me = this,
                title,
                options = me.options,
                parent = options.parent,
                nodeAccept = options.nodeAccept,
                liDiv = me.treeEl;
            liDiv.draggable({
                opacity: 1.0,
                appendTo: 'body',
                helper: function(event) {
                    var icon,
                    dropDiv = $("<div>"),
                        target = event.target,
                        nodeli,
                        data,
                        div,
                        divChildren,
                        obj = null;
                    //获取目标元素
                    liDiv.children("ul").children("li").each(function(index, div) {
                        if ($.isNull(div)) {
                            return;
                        }
                        if ($.contains(div, target)) {
                            obj = $(target);
                        }
                    });
                    if (null === obj) {
                        return dropDiv;
                    }
                    //判断拖动的目标
                    nodeli = (obj.hasClass(treenodeClass)) ? obj.parent() : obj.parent().parent();
                    data = nodeli.data("data");
                    //取父节点信息,构造返回数据
                    if (parent) {
                        data = me._createNodeData(nodeli, data);
                    }
                    me.dragData = data;
                    //获取树节点下面的div
                    div = $(nodeli.children()[0]);
                    divChildren = div.children();
                    //图标获取
                    if (me.options.icon) {
                        if (divChildren.hasClass(treeLeafIocClass)) {
                            icon = div.children("." + treeLeafIocClass).clone();
                        } else if (divChildren.hasClass(treeLeafUserDefine)) {
                            icon = div.children("." + treeLeafUserDefine).clone();
                        } else if (divChildren.hasClass(treeNodeIocClass)) {
                            icon = div.children("." + treeNodeIocClass).clone();
                        } else if (divChildren.hasClass(treeLeafDimensionClass)) {
                            icon = div.children("." + treeLeafDimensionClass).clone();
                        } else if (divChildren.hasClass(treeLeafCompClass)) {
                            icon = div.children("." + treeLeafCompClass).clone();
                        } else {
                            icon = div.children("." + treeLeafIndexClass).clone();
                        }
                        icon.appendTo(dropDiv);
                    }
                    //获取文字
                    title = div.children("." + treeTitleClass).clone();
                    dropDiv.addClass(itemDraggingClass);
                    title.appendTo(dropDiv);
                    //设置拖动元素位置
                    liDiv.draggable('option', 'cursorAt', {
                        left: dropDiv.width() / 2,
                        top: dropDiv.height() / 2
                    });
                    return dropDiv;
                }
            });

            // 节点拖动不是必备功能，有些场景不需要
            if (nodeAccept) {
                nodeAccept.droppable({
                    drop: function(event, ui) {
                        //判断只有树的节点才响应droppable方法
                        if (treeDrag === ui.helper[0].className) {
                            me._trigger("nodeDrag", me.dragData, me.dragData);
                            if (!$.isNull(me.eventMap.nodeDrag)) {
                                me.eventMap.nodeDrag.call(null, event, me.dragData);
                            }
                        }
                    }
                });
            }
        },
        /**
         *@description 根据子节点数据，构造包含所有父节点的数据，生成树形数据
         *@private 
         *@param {Object} nodeli 树节点
         *@param {Object} data 该节点数据 格式如{text:'text1',value:'value1'}
         *@return {Object} 树形数据,格式如{text:'text1',value:'value1'}
         */
        _createNodeData: function(nodeli, data) {
            var nodeData,
            tempData;
            //判断是否是根节点
            while (1 < nodeli.data("depth")) {
                nodeli = nodeli.parent().parent();
                nodeData = nodeli.data("data");
                tempData = {
                    "text": nodeData.text,
                    "value": nodeData.value,
                    "data": nodeData.data,
                    "children": data
                };
                data = tempData;
            }
            return data;
        },
        /**
         *@description 删除节点中的isSelect属性
         *@private 
         *@param {Object} data 格式如[{text:'text1',value:'value1'},...]
         *@return {Array} 树节点对应的值,格式如[{text:'text1',value:'value1'},...]
         */
        _deleteAttrIsSelect: function(data) {
            $.each(data, function(index, node) {
                if (node.data) {
                    delete node.data.isSelect;
                }
            });
            return data;
        },
        /**
         * @description 获取选中的叶子节点的值，构造成树形数据
         * @private
         * @return {Array} 叶子节点对应的值,格式如[{text:'text1',value:'value1'},...]
         */
        _getSelectedMap: function() {
            var me = this,
                nodeData,
                selectMap,
                rootList = this.treeEl.children("ul").data("children"),
                listMap = me.selectMap = [];
            if ($.isNull(rootList)) {
                return [];
            }
            $.each(rootList, function(index, nodeEl) {
                if (nodeEl) {
                    nodeData = nodeEl.data("data"),
                    selectMap = nodeEl.data(selectmap);
                    if (me.options.multi) {
                        if (0 < nodeEl.find("." + treeNodeAllcheckedClass).length) {
                            listMap[nodeData.value] = {
                                "text": nodeData.text,
                                "value": nodeData.value,
                                "data": nodeData.data,
                                "editable": nodeData.editable,
                                "children": selectMap
                            };
                        }
                    } else {
                        if (0 < nodeEl.find("." + treeNodeSelectClass).length) {
                            listMap[nodeData.value] = {
                                "text": nodeData.text,
                                "value": nodeData.value,
                                "data": nodeData.data,
                                "editable": nodeData.editable,
                                "children": selectMap
                            };
                            listMap.length++;
                        }
                    }
                }
            });
            return listMap;
        },
        /**
         * @description 获取点击节点的数据
         * @private
         * @return {Array} 叶子节点对应的值,格式如[{text:'text1',value:'value1'},...]
         */
        _getNodeClickData: function() {
            var nodeData,
            treeNode,
            clickData = {};

            //找到选中的节点
            treeNode = this.treeEl.find("." + treeNodeSelectClass).parent("li");
            nodeData = treeNode.data("data");
            //判断是否是根节点
            if (treeNode.data("isLeaf")) {
                clickData = {
                    "text": nodeData.text,
                    "value": nodeData.value,
                    "data": nodeData.data,
                    "editable": nodeData.editable
                };
            } else {
                clickData = nodeData;
            }

            //获取选中节点的全部父节点，组成树形结构
            treeNode = treeNode.parent().parent();
            while (0 < treeNode.data("depth")) {
                nodeData = treeNode.data("data");
                clickData = {
                    "text": nodeData.text,
                    "value": nodeData.value,
                    "data": nodeData.data,
                    "editable": nodeData.editable,
                    "children": [clickData]
                };
                treeNode = treeNode.parent().parent();
            }
            return [clickData];
        },
        /**
         * @description 获取组件中选择的节点数据
         * @private
         * @return {Array}
         *  节点对应的节点数据数组，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]
         */
        _getValue: function() {
            var me = this;
            if (!me.options.multi) {
                var treeNode = this.treeEl.find("." + treeNodeSelectClass).parent("li");
                //触发选中
                if (0 < treeNode.length) {

                    me._checkNode(treeNode);
                    me._checkParent(treeNode);
                }
            }
            me._getSelectedMap();
            return $.deleteUndefinedData(me.selectMap);
        },
        /**
         * @description 创建树
         * @private
         */
        _createSweetWidget: function() {
            var me = this,
                treeEl,
                rootHeight,
                options = this.options;
            me.selectMap = [];
            me.eventMap = {};
            treeEl = this.treeEl = $("<div>").attr("id", options.id)
                .addClass("sweet-tree-list sweet-tree-panel").addClass(options.widgetClass);
            uuid++;
            this.rootDiv = $("<div>").width(options.width).height(options.height);
            this.rootDiv.attr("id", options.id + treePrefix + uuid);
            this.lazyLoadDiv = $("<div title='" + Sweet.core.i18n.tree.clickLoad + "'>").text("...").addClass(treeLoadMore);
            this.isgetData = true;
            if (options.search) {
                me.searchFiedlDiv = $("<div>").attr("id", options.id + treePrefix + uuid + "search")
                    .addClass(treeSearchClass);
                me.searchField = new Sweet.form.SearchField({
                    width: options.width,
                    emptyText: options.searchEmptyText
                });
                me.searchField.addListener("keyup", function(e, data) {
                    me.filter(data.text);
                    //触发搜索监听
                    if (!$.isNull(me.eventMap.search)) {
                        me.eventMap.search.call(null, e, data);
                    }
                });
                me.searchField.addListener("click", function(e, data) {
                    me.filter(data.text);
                    if (!$.isNull(me.eventMap.search)) {
                        me.eventMap.search.call(null, e, data);
                    }
                });
                if (options.disabled) {
                    me.searchField.setDisabled(true);
                    me.rootDiv.addClass(defaultPaddingDivDisabledClass);
                } else {
                    me.searchField.setDisabled(false);
                    me.rootDiv.removeClass(defaultPaddingDivDisabledClass);
                }
            }
            rootHeight = options.height;
            if (options.height === "auto" && options.maxHeight !== 0) {
                rootHeight = options.maxHeight;
                me.rootListEl = $("<ul>").appendTo(me.treeEl).addClass(treeRootUl1Class)
                    .css("max-height", rootHeight);
                me.rootListEl.width(options.width);
                me.rootListEl.height(options.height);
            } else {
                me.rootListEl = $("<ul>").appendTo(me.treeEl).addClass(treeRootUlClass);
                me.rootListEl.width(options.width);
                me.rootListEl.height(options.height);
            }
            me._initValue();
            // 如果配置store，给store注册回调
            if (options.store) {
                options.store.addListener({
                    "setData": me.setData,
                    "scope": this
                });
            } else {
                me._filterCache();
            }
        },
        /**
         * @private
         * @description 在没有配置store情况下，缓存数据供过滤使用
         */
        _filterCache: function() {
            var me = this;
            me.filterData = $.objClone(me.data);
            if ($.isEmptyObject(me.filterData)) {
                me.filterData = [];
            }
        },
        /**
         * @description 子类继承实现
         * @private
         */
        _destroyWidget: function() {
            var me = this;
            if (this.treeEl) {
                this.treeEl.remove();
            }
            if (me.timerTreeContent) {
                Sweet.Task.Timeout.stop(me.timerTreeContent);
            }
        },
        /**
         * @description 显示当前树节点
         * @private
         * @param {Object} treeNode description
         */
        _showTreeNode: function(treeNode) {
            treeNode = treeNode || this.treeEl;
            var me = this,
                ulEl = treeNode.children("ul"),
                childNodes = ulEl.data("children");
            if (childNodes) {
                $.each(childNodes, function(index, childNode) {
                    me._showTreeNode(childNode);
                });
            }
            treeNode.hide();
        },
        /**
         * @description 渲染树
         * @private
         * @param {String} id 树ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.rootDiv.appendTo(me.renderEl);
            if (me.searchField) {
                me.searchFiedlDiv.appendTo(me.rootDiv);
                me.searchField.render(me.searchFiedlDiv.attr("id"));
            }
            me.treeEl.appendTo(me.rootDiv);
            // 添加延迟加载按钮
            if (me.options.lazyLoad) {
                me.lazyLoadDiv.appendTo(me.treeEl);
            }
            me.rendered = true;
            return true;
        },
        /**
         * @description 取消事件
         * @private
         */
        _removeListener: function() {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(eventName, func) {
                if ("change" === eventName) {
                    me.eventMap.change = null;
                    delete me.handlers.change;
                }
                if ("search" === eventName) {
                    me.eventMap.search = null;
                    delete me.handlers.search;
                }
                if ("nodeDClick" === eventName) {
                    me.eventMap.nodeDClick = null;
                    delete me.handlers.nodeDClick;
                }
                if ("afterSetData" === eventName) {
                    me.eventMap.afterSetData = null;
                    delete me.handlers.afterSetData;
                }
                if ("afterSetValue" === eventName) {
                    me.eventMap.afterSetValue = null;
                    delete me.handlers.afterSetValue;
                }
                if ("nodeCheck" === eventName) {
                    me.eventMap.nodeCheck = null;
                    delete me.handlers.nodeCheck;
                }
                if ("nodeUnCheck" === eventName) {
                    me.eventMap.nodeUnCheck = null;
                    delete me.handlers.nodeUnCheck;
                }
                if ("nodeClick" === eventName) {
                    me.eventMap.nodeClick = null;
                    delete me.handlers.nodeClick;
                }
                if ("nodeDrag" === eventName) {
                    me.eventMap.nodeDrag = null;
                    delete me.handlers.nodeDrag;
                }
                if ("beforeCheckboxClick" === eventName) {
                    me.eventMap.beforeCheckboxClick = null;
                    delete me.handlers.beforeCheckboxClick;
                }
                if ("nodeExpand" === eventName) {
                    me.eventMap.nodeExpand = null;
                    delete me.handlers.nodeExpand;
                }
                if ("nodeEdit" === eventName) {
                    me.eventMap.nodeEdit = null;
                    delete me.handlers.nodeEdit;
                }
            });
        },
        /**
         * @description 注册事件
         * @private
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if ("change" === eventName) {
                    me.eventMap.change = func;
                }
                if ("search" === eventName) {
                    me.eventMap.search = func;
                }
                if ("nodeDClick" === eventName) {
                    me.eventMap.nodeDClick = func;
                }
                if ("afterSetData" === eventName) {
                    me.eventMap.afterSetData = func;
                }
                if ("afterSetValue" === eventName) {
                    me.eventMap.afterSetValue = func;
                }
                if ("nodeCheck" === eventName) {
                    me.eventMap.nodeCheck = func;
                }
                if ("nodeUnCheck" === eventName) {
                    me.eventMap.nodeUnCheck = func;
                }
                if ("nodeClick" === eventName) {
                    me.eventMap.nodeClick = func;
                }
                if ("nodeDrag" === eventName) {
                    me.eventMap.nodeDrag = func;
                }
                if ("beforeCheckboxClick" === eventName) {
                    me.eventMap.beforeCheckboxClick = func;
                }
                if ("nodeExpand" === eventName) {
                    me.eventMap.nodeExpand = func;
                }
                if ("nodeEdit" === eventName) {
                    me.eventMap.nodeEdit = func;
                }
            });
        },
        /**
         * 将tree返回的数据转换为对象数组（只获取叶子节点）
         * @param {Object} treeValue 对象数组 
         * @return {object} [{"text":"1", "value":"ONE"},{"text":"2", "value":"TWO"}]
         */
        _getLeafNodeObj: function(treeValue, objArr) {
            var me = this;
            objArr = objArr || [];
            if (!treeValue) {
                return;
            }

            var treeValueArr = [];
            // 对象转换为数组
            if ($.isNull(treeValue)) {
                treeValueArr = [];
            } else if ($.isArray(treeValue)) {
                treeValueArr = treeValue;
            } else {
                treeValueArr.push(treeValue);
            }

            for (var i = 0; i < treeValueArr.length; i++) {
                if (treeValueArr[i].children) {
                    me._getLeafNodeObj(treeValueArr[i].children, objArr);
                } else {
                    objArr.push(treeValueArr[i]);
                }
            }
            return objArr;
        }
    });

    /**
     * 创建树
     * @name Sweet.tree.Tree
     * @class
     * @extends Sweet.tree
     * @requires <pre>
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.tree.js
     * </pre>
     * @example
     * <pre>
     *  var data = [{"value":"1", "text":"ONE","children":["text":"ONE_ChildOne","value":"11"]},
     *                {"value":"2", "text":"TWO"},
     *                {"value":"3", "text":"THREE"},
     *                {"value":"4", "text":"FOUR"}];
     *  new Sweet.tree.Tree({
     *               width : 150,
     *               height : 350,
     *               multi : true,
     *               data : data,
     *               renderTo :"sweet-tree"
     *           });
     * </pre>
     */
    Sweet.tree.Tree = $.sweet.widgetTreeTree;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 树组件
 * 2014.06.15
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var treePrefix = "sweet-treev1",
        treePanelClass = "sweet-treev1-panel",
        treePanelDisabledClass = "sweet-treev1-disabled",
        treeBodyClass = "sweet-treev1-body",
        treeULClass = "sweet-treev1-ul",
        treeNodeClass = "sweet-treev1-node",
        treeNodeTextClass = "sweet-treev1-node-text",
        treeNodeCCTextClass = "sweet-treev1-node-cc-text",
        treenodeSelectClass = "sweet-treev1-node-selected",
        treeExpandedClass = "sweet-treev1-node-expanded", //展开状态
        treeCollapsedClass = "sweet-treev1-node-collapsed", //收起状态
        treeFullCheckedClass = "sweet-treev1-node-fullchecked", //全选中状态
        treeCheckedClass = "sweet-treev1-node-checked", //半选中状态
        treeUnCheckedClass = "sweet-treev1-node-unchecked", //未选中状态
        treeSearchClass = "sweet-treev1-search", //查询栏样式
        treeParentNodeIcoClass = "sweet-treev1-node-folder-ioc",
        treeLeafNodeIcoClass = "sweet-treev1-node-leaf-ioc",
        treeLeafIndexClass = "sweet-treev1-node-leaf-index",
        treeLeafNodeDimensionClass = "sweet-treev1-node-leaf-dimension",
        treeLeafCompClass = "sweet-treev1-node-leaf-comp",
        treeLeafUserDefineClass = "sweet-treev1-node-leaf-userDefine",
        treeNodeLineClass = "sweet-treev1-node-line", //竖线
        treeNodeMinusLineClass = "sweet-treev1-node-line-minus", //竖线
        treeNodeEblowClass = "sweet-treev1-node-eblow", //连接下方节点线段，未结尾
        treeNodeEblowEndClass = "sweet-treev1-node-eblow-end", //连接下方节点折线，结尾
        treeNodeMinusEblowClass = "sweet-treev1-node-eblow-minus", //叶子节点无连接线
        treeNodeEditMenuClass = "sweet-treev1-node-edit-menu", //节点编辑弹出菜单样式

        //事件
        eventChange = "change",
        eventSearch = "search",
        eventBeforeSearch = "beforesearch",
        eventClick = "click",
        eventBeforeDbClick = "beforedbclick",
        eventDbClick = "dbclick",
        eventBeforeExpand = "beforeexpand",
        eventExpand = "expand",
        eventBeforeCollapse = "beforecollapse",
        eventCollapse = "collapse",
        eventBeforeCheckChange = "beforecheckchange",
        eventCheckChange = "checkchange",
        eventBeforeSelected = "beforeselected",
        eventSelected = "selected",
        eventBeforeLoad = "beforeload",
        eventLoad = "load", //加载事件
        eventBeforeTextChange = "beforetextchange",
        eventTextChange = "textchange",
        eventBeforeEdit = "beforeedit",
        eventEdit = "edit", //节点编辑事件
        eventBeforeRemove = "beforeremove",
        eventRemove = "remove", //节点删除事件

        //node属性信息
        KEY_VALUE = "value", //node属性字段: value
        KEY_TEXT = "text", //node属性字段: text
        KEY_DATA = "data", //node属性字段: 节点挂的用户自定义数据
        KEY_CHECKED = "checked", //node属性字段: 多选时是否选中
        KEY_EXPANDED = "expanded", //node属性字段: 是否展开
        KEY_HIDDEN = "hidden", //node属性字段: 是否隐藏
        KEY_QTIP = "qtip", //node属性字段: 节点提示信息,默认为text
        KEY_ICON = "icon", //node属性字段: 节点前的图片路径
        KEY_LEAF = "leaf", //node属性字段: 是否是叶子节点
        KEY_ISLAST = "isLast", //node属性字段: 是否是本层最后一个节点
        KEY_DEPTH = "depth", //node属性字段: 层级深度,顶层为0
        KEY_PATH = "path", //node属性字段: 路径,父path#&#*#&#子value
        KEY_PARENTPATH = "parentPath", //node属性字段: 父层级path
        KEY_CHILDREN = "children", //node属性字段: 存储子节点path的数组
        KEY_ALLCHILDREN = "allChildren", //node属性字段: 存储所有子节点path的数组
        KEY_EL = "el", //node属性字段: 绑定的DOM,包括li、展开dom、复选dom
        KEY_LI = "li", //li dom
        KEY_LOADED = "loaded", //li dom

        //常量信息
        EVENTTYPE_EXPANDED = "expanded",
        EVENTTYPE_CHECKED = "checked",
        ATTR_NODE = "node",
        ATTR_NAME = "name",
        CHECKED_STATE_UNCHECKED = "0", //未选中状态
        CHECKED_STATE_CHECKED = "1", //半选中状态
        CHECKED_STATE_FULLCHECKED = "2", //全选中状态

        //图标类型
        ICON_TYPE = {
            0: treeLeafNodeDimensionClass,
            1: treeLeafIndexClass,
            2: treeLeafUserDefineClass,
            3: treeLeafCompClass
        },
        i18n = Sweet.core.i18n.tree,
        //编辑时菜单图标路径
        EDIT_TYPE = {
            "add": {
                text: i18n["add"],
                icon: "../../../sweet/themes/default/core/images/tree/tree_add.png"
            },
            "delete": {
                text: i18n["delete"],
                icon: "../../../sweet/themes/default/core/images/tree/tree_delete.png"
            },
            "edit": {
                text: i18n["edit"],
                icon: "../../../sweet/themes/default/core/images/tree/tree_edit.png"
            }
        },
        //连接符
        pathConnectSymbol = "#&#*#&#",
        LIMIT_COUNT = 300, //超过此值后则处理成滚动加载
        uuid = uuid || 1000;
    $.widget("sweet.widgetTreeTree_v1", $.sweet.widgetTree, /** @lends Sweet.tree.Tree_v1.prototype */ {
        version: "1.0",
        sweetWidgetName: "[widget-tree-tree-v1]:",
        type: 'tree',
        eventNames: /** @lends Sweet.tree.Tree_v1.prototype */
        {
            /**
             * @event
             * @description 树节点单击事件,一般参数为(node, me)
             */
            click: "树节点单击事件, 只针对单选叶子节点操作",
            /**
             * @event
             * @description 树节点双击前事件,一般参数为(node, me)
             */
            beforedbclick: "树节点双击前事件",
            /**
             * @event
             * @description 树节点双击事件,一般参数为(node, me)
             */
            dbclick: "树节点双击事件",
            /**
             * @event
             * @description 单选树节点选中前事件,一般参数为(node, me) (--暂未实现)
             */
            beforeselected: "单选树节点选中前事件",
            /**
             * @event
             * @description 单选树节点选中事件,一般参数为(node, me)
             */
            selected: "单选树节点选中事件",
            /**
             * @event
             * @description 树节状态改变时事件,一般参数为({node: node, checked: checked}, this)
             */
            checkchange: "树节状态改变时事件",
            /**
             * @event
             * @description 树节状态改变前事件,一般参数为({node: node, checked: checked}, this)
             */
            beforecheckchange: "树节状态改变前事件",
            /**
             * @event
             * @description 树节点收起前事件,如果返回false则收起操作终止,一般参数为(node, this)
             */
            beforecollapse: "树节点收起前事件,如果返回false则收起操作终止",
            /**
             * @event
             * @description 树节点收起事件,一般参数为(node, this)
             */
            collapse: "树节点收起事件",
            /**
             * @event
             * @description 树节点展开前事件,如果返回false则展开操作终止,一般参数为(node, this)
             */
            beforeexpand: "树节点展开前事件,如果返回false则展开操作终止",
            /**
             * @event
             * @description 树节点展开事件,一般参数为(node, this)
             */
            expand: "树节点展开事件",
            /**
             * @event
             * @description 延迟加载数据时,加载前事件,一般参数为(loader, tree),loader中的tParams记录了过滤信息,如果没有则没有tParams
             */
            beforeload: "延迟加载数据时,加载前事件",
            /**
             * @event
             * @description 延迟加载数据时,数据加载回时事件,一般参数为(loader, tree),loader中datas为加载回来的数据,其中tParams记录了过滤信息,如果没有则没有tParams
             */
            load: "延迟加载数据时,数据加载回时事件",
            /**
             * @event
             * @description 查询事件,一般两个参数(datas, tree)
             */
            search: "查询事件",
            /**
             * @event
             * @description 查询前事件,一般两个参数(filter, tree)
             */
            beforesearch: "查询前事件",
            /**
             * @event
             * @description 树节点的拖拽事件,一般参数为(evt, data)
             */
            drag: "树节点的拖拽事件",
            /**
             * @event
             * @description 切换树节点事件,一般参数为(value, tree)
             */
            change: "切换树节点事件",
            /**
             * @event
             * @description 节点文本发生变化前时事件,一般两个参数(data, me)
             */
            beforetextchange: "节点文本发生变化前事件",
            /**
             * @event
             * @description 节点文本发生变化事件,一般两个参数(data, me)
             */
            textchange: "节点文本发生变化事件",
            /**
             * @event
             * @description 节点删除前时事件,一般两个参数(node, me)
             */
            beforeremove: "节点删除前事件",
            /**
             * @event
             * @description 节点删除事件,一般两个参数(node, me)
             */
            remove: "节点删除事件",
            /**
             * @event
             * @description 节点编辑前时事件,一般两个参数(data, me)
             */
            beforeedit: "节点编辑前事件",
            /**
             * @event
             * @description 节点编辑事件,一般两个参数(node, me)
             */
            edit: "节点编辑事件"
        },
        options: /** @lends Sweet.tree.Tree_v1.prototype*/
        {
            /**
             * 基础数据
             * @type {Object}
             * @default null
             */
            data: null,
            /**
             * 多选属性
             * @type {Boolean}
             * @default false
             */
            multi: false,
            /**
             * 是否显示搜索框
             * @type {Boolean}
             * @default false
             */
            search: false,
            /**
             * 是否有提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * 是否禁用list组件
             * @type {Boolean}
             * @default false
             */
            disabled: false,
            /**
             * 是否显示树节点的图标
             * @type {Boolean}
             * @default true
             */
            icon: true,
            /**
             * 树节点是否可以拖动(暂未实现)
             * @type {Boolean}
             * @default false
             */
            draggable: false,
            /**
             * 是否显示节点之间的连线
             * @type {Boolean}
             * @default true
             */
            useArrows: true,
            /**
             * 获值时需要取的节点数据key
             * @type {Array}
             * @default [KEY_VALUE, KEY_TEXT, KEY_DATA, KEY_ICON]
             */
            valueKeys: [KEY_VALUE, KEY_TEXT, KEY_DATA, KEY_ICON],
            /**
             * 延迟加载器:如果为延迟加载则配置,非延迟加载则不要配置
             * {
             *      url: "XXXX.action",              //请求数据的URL
             *      baseParams: {param: xxxxx},      //提交的参数
             *      autoLoad: false,                  //初始化时是否自动加载数据,默认为false   
             *      loadMask: true,                   //是否出遮罩
             *      contentType: "application/json;charset=UTF-8"
             * }
             * @type {Object}
             * @default null
             */
            loader: null,
            /**
             * 是否可编辑,当前支持["add", "edit", "delete"]
             * @type {Boolean/Array}
             * @default false
             */
            editable: false,
            /**
             * 可编辑时,双击节点时是否出编辑框,默认出
             * @type {Boolean}
             * @default true
             */
            isDbClickEdit: true,
            /**
             * 父节点是否显示子节点个数,只针对非延迟加载且非编辑树,默认不显示,如果配置true/"true"则显示所有子节点个数,如果配置"leaf"只显示所有叶子节点个数
             * @type {Boolean/String}
             * @default false
             */
            showCCount: false,
            /**
             * 当search为true时，出现的搜索框中的提示文字
             * @type string
             * @default Sweet.core.i18n.tree.search("search"/"搜索")
             */
            searchEmptyText: Sweet.core.i18n.tree.search,
            /**
             * 以毫秒表示的从开始输入到发出查询语句过滤下拉列表的时长, 默认350毫秒  
             * @type {Number}
             * @default 350
             */
            queryDelay: 350,
            /**
             * 单选时，父节点是否可以被选中，默认不可选中
             * @type {Boolean}
             * @default false
             */
            isParentNodeSelect: false
        },
        /**
         * @description 创建列表组件
         * @private
         */
        _createSweetWidget: function() {
            var me = this,
                queryDelay = 350,
                id = me.options.id,
                widgetClass = me.options.widgetClass,
                listeners;
            // 每个选项的高度
            me.liHeight = 22;
            // 搜索框高
            me.searchFieldHeight = 25;
            // 每页渲染条数
            me.renderSize = 10;
            //是否是一次性渲染
            me.isRenderAll = false;
            // 临时LI的TOP,用于LI预渲染时取最大宽度用
            me.__tempRenderTop = -100;
            // 总数据
            me.data = me.options.data || [];
            //以列表形式存储原始数据
            me.listDatas = [];
            //以对象形式存储原始数据
            me.objDatas = {};
            //当前渲染的数据
            me.optListDatas = [];
            //存储当前操作的对象数据信息
            me.optObjDatas = {};
            //存储选中的节点,只存储叶子节点
            me.selectedDatas = {};
            //存储LIST型数据,用于延迟渲染用
            me.optShowDatas = [];
            me.contentType = "application/json;charset=UTF-8";
            me.treeEl = $("<div>").attr("id", me.options.id)
                .addClass(treePanelClass);
            if (me.options.disabled) {
                me.treeEl.addClass(treePanelDisabledClass);
            }
            if (widgetClass && "" != widgetClass) {
                me.treeEl.addClass(widgetClass);
            }
            //如果为可编辑,则不能过滤和没有节点连接线
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                me.options.search = false;
                me.options.useArrows = false;
            }
            // 增加搜索框
            if (me.options.search) {
                //过滤延时处理
                queryDelay = parseInt(me.options.queryDelay, 10);
                if (isNaN(queryDelay)) {
                    queryDelay = 350;
                }
                if (queryDelay < 0) {
                    queryDelay = 0;
                }
                me.searchFiedlDiv = $("<div>").attr("id", id + treePrefix + "-search-" + uuid)
                    .appendTo(me.treeEl)
                    .addClass(treeSearchClass);
                me.searchField = new Sweet.form.SearchField({
                    width: me.options.width,
                    emptyText: Sweet.core.i18n.tree.search
                });
                me.searchField.addListener("keyup", function(e, data) {
                    Sweet.Task.Delay.start({
                        id: me.options.id + "-treev1-filter-delay1",
                        run: function(args) {
                            me.filter(args);
                        },
                        args: data.value,
                        delay: queryDelay
                    });
                });
                me.searchField.addListener("click", function(e, data) {
                    Sweet.Task.Delay.start({
                        id: me.options.id + "-treev1-filter-delay2",
                        run: function(args) {
                            me.filter(args);
                        },
                        args: data.value,
                        delay: queryDelay
                    });
                });
            }
            me.treeBodyDiv = $("<div>").addClass(treeBodyClass);
            me.treeUL = $("<ul>").addClass(treeULClass)
                .appendTo(me.treeBodyDiv);
            me.treeBodyDiv.appendTo(me.treeEl);
            listeners = me.options["listeners"];
            if (!$.isEmptyObject(listeners)) {
                for (var key in listeners) {
                    me.addListener(("" + key), listeners[key]);
                }
            }
            if (me.options.loader) {
                if (!(true == me.options.loader["autoLoad"] || "true" == me.options.loader["autoLoad"])) {
                    me.options.loader["autoLoad"] = false;
                }
                if (me.options.loader["autoLoad"]) {
                    me.data = me._loadDatas()["datas"] || [];
                }
            }
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                LIMIT_COUNT = 500;
            }
            me._initData(me.data);
        },
        /**
         * @description 设置数据
         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1', chlidren: [...]},...]
         */
        setData: function(data) {
            var me = this;
            if (me.options.disabled) {
                return;
            }
            if ($.isNull(data)) {
                data = [];
            }
            if (!$.isArray(data)) {
                data = [data];
            }
            me.data = data;
            me._reset();
            // 如果有search框,则清除过滤信息
            if (me.searchField) {
                me.searchField.setValue({
                    value: "",
                    text: ""
                });
            }
            me._initData(me.data);
            me._setData();
        },
        /**
         * @private
         * @description 设置数据,内部调用
         */
        _setData: function() {
            var me = this,
                treeBodyDiv = me.treeBodyDiv;
            me._removeAllNodeList();
            // 初始化时让滚动条置顶				
            treeBodyDiv[0].scrollTop = 0;
            me._doLayout();
        },
        /**
         * @private
         * @description 解析me.optObjDatas，内部调用(递归算法)
         */
        _parseChildren: function(objKey) {
            var me = this,
                result = [],
                obj = me.optObjDatas[objKey];
            if (!obj || obj.leaf || !obj.children || obj.children.length === 0) {
                return null;
            }

            var node;
            var resultNode;
            var nodeChildren;
            for (var idx in obj.children) {
                node = me.optObjDatas[obj.children[idx]];
                resultNode = {
                    checked: node.checked,
                    depth: node.depth,
                    expanded: node.expanded,
                    hidden: node.hidden,
                    leaf: node.leaf,
                    loaded: node.loaded,
                    text: node.text,
                    value: node.value
                };

                nodeChildren = me._parseChildren(node.path);
                if (nodeChildren != null) {
                    resultNode.children = nodeChildren;
                }
                result.push(resultNode);
            }
            return result;
        },
        /**
         * @description 取得所有数据,如果为延迟加载也处理，使用此方法时，延迟加载时也起作用，和getData区分
         * @returns {Array/Object} data 返回List的所有数据
         */
        getAllData: function() {
            var me = this,
                resultDatas;
            if (me.options.loader) {
                resultDatas = [];
                var node;
                var resultNode;
                for (var lkey in me.optObjDatas) {
                    node = me.optObjDatas[lkey];
                    //辨别为父节点的时候执行
                    if (node.depth === 0) {
                        resultNode = {
                            checked: node.checked,
                            depth: node.depth,
                            expanded: node.expanded,
                            hidden: node.hidden,
                            leaf: node.leaf,
                            loaded: node.loaded,
                            text: node.text,
                            value: node.value,
                            children: me._parseChildren(node.path)
                        }
                        resultDatas.push(resultNode);
                    }
                }
                return JSON.parse(JSON.stringify(resultDatas));
            }
        },
        /**
         * @description 取得所有数据,如果为延迟加载则不处理,并返回空数组
         * @returns {Array/Object} data 返回List的所有数据
         */
        getData: function() {
            var me = this,
                _tempMap,
                _tNode,
                _tCloneNode,
                liDoms,
                keys = me.options.valueKeys,
                resultDatas;
            //如果为延迟加载,则返回空数组
            if (me.options.loader) {
                return [];
            }


            //如果为编辑树,则从optObjDatas中转化一份树的数据
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                liDoms = me.treeUL.find("li");
                //如果没有LI,则返回空数组
                if (!liDoms || liDoms.length <= 0) {
                    me.listDatas = me.optListDatas = [];
                    me.objDatas = me.optObjDatas = {};
                    return [];
                }
                //存储节点对应信息
                _tempMap = {};
                resultDatas = [];
                for (var i = 0; i < liDoms.length; i++) {
                    _tCloneNode = {};
                    _tNode = $(liDoms[i]).data("node");
                    for (var k = 0; k < keys.length; k++) {
                        _tCloneNode[keys[k]] = _tNode[keys[k]];
                    }
                    //如果为非叶子节点,则将此节点的children置为[]
                    if (!_tNode[KEY_LEAF]) {
                        _tCloneNode[KEY_CHILDREN] = [];
                    }
                    //如果为根节点则加入result
                    if (!_tNode[KEY_PARENTPATH]) {
                        resultDatas.push(_tCloneNode);
                    } else {
                        //加到父层级的children中
                        if (_tempMap[_tNode[KEY_PARENTPATH]]) {
                            if (!_tempMap[_tNode[KEY_PARENTPATH]][KEY_CHILDREN]) {
                                _tempMap[_tNode[KEY_PARENTPATH]][KEY_CHILDREN] = [];
                            }
                            _tempMap[_tNode[KEY_PARENTPATH]][KEY_CHILDREN].push(_tCloneNode);
                        }
                    }
                    //将节点存储到此临时变量中,用于后续节点检索父层级节点信息
                    _tempMap[_tNode[KEY_PATH]] = _tCloneNode;
                }
                _tempMap = null;
                return resultDatas;
            }
            return JSON.parse(JSON.stringify(me.data));
        },
        /**
         * @description 设置值
         * @param {Array} value 组件对应的数据，格式如：[{text:'text1',value:'value1', chlidren: [...]},...]
         */
        setValue: function(value) {
            var me = this,
                optValue = $.objClone(value),
                valueListDatas = [],
                valueObjDatas = {},
                updateCheckedNodes = {};
            if (me.options.disabled) {
                return;
            }
            optValue = optValue || [];
            if (!$.isArray(optValue)) {
                optValue = [optValue];
            }
            //清除之前选中
            me._reset();
            //解析value数据
            me.parseDatas($.objClone(optValue), valueListDatas, valueObjDatas, "", false, null);
            //如果为单选
            if (!me.options.multi) {
                me.treeUL.find("li").removeClass(treenodeSelectClass);
                for (var key in valueObjDatas) {
                    if (valueObjDatas[key][KEY_LEAF]) {
                        if (me.optObjDatas[key]) {
                            me._doSelected(me.optObjDatas[key]);
                            me._doBubbleExpanded(me.optObjDatas[key]);
                            break;
                        } else {
                            if (me.objDatas[key]) {
                                me.selectedDatas[key] = me.objDatas[key];
                                break;
                            }
                        }
                    }
                }
                optValue = me._getValue(null, true);
                // 触发change事件
                me._triggerHandler(optValue, eventChange, me);
                return;
            }
            //多选设置值处理
            if (me.isRenderAll) {
                for (var key in me.optObjDatas) {
                    //选取消checked样式
                    me._checked(me.optObjDatas[key], CHECKED_STATE_UNCHECKED);
                    if (valueObjDatas[key] && valueObjDatas[key][KEY_LEAF]) {
                        me._checked(me.optObjDatas[key], CHECKED_STATE_FULLCHECKED);
                        me.selectedDatas[key] = me.optObjDatas[key];
                    }
                }
                me._bubbleUpdateNodeChecked(me.selectedDatas);
                //存储需要更新的节点
                for (var key in me.selectedDatas) {
                    if (me.selectedDatas[key][KEY_LEAF]) {
                        me._getUpdateNode(me.optObjDatas[key], updateCheckedNodes);
                    }
                }
                for (var key in updateCheckedNodes) {
                    me._checked(updateCheckedNodes[key], updateCheckedNodes[key][KEY_CHECKED]);
                }
            } else {
                for (var key in me.optObjDatas) {
                    me.optObjDatas[key][KEY_CHECKED] = CHECKED_STATE_UNCHECKED;
                    if (valueObjDatas[key] && valueObjDatas[key][KEY_LEAF]) {
                        me._asyncChecked(me.optObjDatas[key], CHECKED_STATE_FULLCHECKED);
                        me.selectedDatas[key] = me.optObjDatas[key];
                    }
                }
                me._bubbleUpdateNodeChecked(me.selectedDatas);
                var liDoms = me.treeUL.find("li"),
                    tLiEl, tCheckEl, tNodeData;
                for (var i = 0; i < liDoms.length; i++) {
                    tLiEl = $(liDoms[i]);
                    tNodeData = tLiEl.data();
                    tCheckEl = tLiEl.find("span[name=checked]");
                    if (tCheckEl && tCheckEl.length > 0) {
                        if (tNodeData[KEY_CHECKED] == CHECKED_STATE_FULLCHECKED) {
                            tCheckEl.removeClass(treeUnCheckedClass);
                            tCheckEl.removeClass(treeCheckedClass);
                            tCheckEl.addClass(treeFullCheckedClass);
                        } else if (tNodeData[KEY_CHECKED] == CHECKED_STATE_CHECKED) {
                            tCheckEl.removeClass(treeUnCheckedClass);
                            tCheckEl.removeClass(treeFullCheckedClass);
                            tCheckEl.addClass(treeCheckedClass);
                        } else {
                            tCheckEl.removeClass(treeFullCheckedClass);
                            tCheckEl.removeClass(treeCheckedClass);
                            tCheckEl.addClass(treeUnCheckedClass);
                        }
                    }
                }
                me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
                me.treeUL.height(me.optShowDatas.length * me.liHeight);
                me._doTriggerScrollEvent();
            }
            for (var key in valueObjDatas) {
                if (!me.selectedDatas[key] && me.objDatas[key] && me.objDatas[key][KEY_LEAF]) {
                    me.selectedDatas[key] = me.objDatas[key];
                }
            }
            // 触发change事件
            me._triggerHandler(optValue, eventChange, me);
        },
        /**
         * @description 组件重新加载数据,内部调用
         * @param {Object} loader 异步数据加载器,里面配有URL及请求参数
         * @returns {Array} result {datas: datas, isContinue: true}; 返回加载到的数据及是否继续住下执行
         */
        _loadDatas: function(loader) {
            var me = this,
                flag,
                datas = [],
                reqConfig,
                reqContentType,
                result = {
                    isContinue: true,
                    datas: []
                };
            //如果没有传loader则用原始默认的
            if (!loader) {
                //非延迟加载处理
                if (!me.options.loader) {
                    loader = {
                        baseParams: {}
                    };
                    loader["baseParams"]["timestemp"] = new Date().getTime();
                    flag = me._triggerHandler(loader, eventBeforeLoad, me);
                    if (false === flag || "false" === flag) {
                        result["isContinue"] = false;
                        return result;
                    }
                    loader["datas"] = me.data;
                    me._triggerHandler(loader, eventLoad, me);
                    if (!loader["datas"]) {
                        loader["datas"] = [];
                    } else {
                        if (!$.isArray(loader["datas"])) {
                            loader["datas"] = [loader["datas"]];
                        }
                    }
                    result["datas"] = loader["datas"];
                    return result;
                } else {
                    loader = $.objClone(me.options.loader);
                }
            }
            if (!loader["baseParams"]) {
                loader["baseParams"] = {};
            }
            loader["baseParams"]["timestemp"] = new Date().getTime();
            flag = me._triggerHandler(loader, eventBeforeLoad, me);
            if (false === flag || "false" === flag) {
                result["isContinue"] = false;
                return result;
            }
            if (!loader["contentType"] || "" == loader["contentType"].trim()) {
                reqContentType = me.contentType;
            } else {
                reqContentType = loader["contentType"];
            }
            reqConfig = {
                contentType: reqContentType,
                url: loader["url"],
                data: loader["baseParams"],
                async: false,
                dataType: "json",
                timeout: 3600000,
                success: function(result) {
                    datas = result || [];
                },
                error: function() {
                    datas = [];
                }
            };
            if (false === loader["loadMask"] || "false" === loader["loadMask"]) {
                reqConfig["loadMask"] = false;
            } else {
                reqConfig["loadMask"] = true;
            }
            Sweet.Ajax.request(reqConfig);
            loader["datas"] = datas;
            me._triggerHandler(loader, eventLoad, me);
            if (!loader["datas"]) {
                loader["datas"] = [];
            } else {
                if (!$.isArray(loader["datas"])) {
                    loader["datas"] = [loader["datas"]];
                }
            }
            result["datas"] = loader["datas"];
            return result;
        },
        /**
         * @description 设置组件加载器
         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数
         */
        setLoader: function(loader) {
            var me = this;
            me.options.loader = loader;
            me.isRenderAll = false;
            me._setData();
        },
        /**
         * @description 组件重新加载数据,延迟加载时,如果没传loader,则使用默认的loader,如果传了则用此loader加载数据;如果为非延迟加载,则重新set数据
         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数
         */
        load: function(loader) {
            var me = this,
                loaderDatas;
            if (me.options.disabled) {
                return;
            }
            // 如果有search框,则清除过滤信息
            if (me.searchField) {
                me.searchField.setValue({
                    value: "",
                    text: ""
                });
            }
            loaderDatas = me._loadDatas(loader);
            if (!loaderDatas["isContinue"]) {
                return;
            }
            me.data = loaderDatas["datas"];
            me.setData(me.data);
        },
        /**
         * @description 加载器加载数据
         * @param {Object} node 当前节点
         * @param {Object} loader 数据加载器
         * @param {Object} selectedDatas 存储本次加载回来数据中选中的
         * @return {Boolean} flag 是否继续往下执行
         */
        _doLoaderLoad: function(node, loader, selectedDatas) {
            var me = this,
                tReqNode,
                datas,
                tListDatas,
                tObjDatas,
                tDepth,
                tPath,
                index,
                sDatas,
                eDatas,
                keyArray = me.options.valueKeys,
                fValueObj,
                loaderDatas;
            node[KEY_LOADED] = true;
            tReqNode = {};
            for (var k = 0; k < keyArray.length; k++) {
                tReqNode[keyArray[k]] = node[keyArray[k]];
            }
            if (!loader["tParams"]) {
                loader["tParams"] = {};
            }
            loader["tParams"]["node"] = tReqNode;
            if (me.searchField) {
                fValueObj = me.searchField.getValue();
                if (fValueObj && "" != fValueObj["value"]) {
                    loader["tParams"]["filter"] = fValueObj["value"];
                }
            }
            loaderDatas = me._loadDatas(loader);
            if (!loaderDatas["isContinue"]) {
                return false;
            }
            datas = loaderDatas["datas"];
            if (datas.length > 0) {
                tListDatas = [];
                tObjDatas = {};
                tDepth = node[KEY_DEPTH];
                me.parseDatas(datas, tListDatas, tObjDatas, node[KEY_PATH], node[KEY_HIDDEN], ++tDepth, selectedDatas);
                $.extend(me.optObjDatas, tObjDatas);
                if (!node[KEY_CHILDREN]) {
                    node[KEY_CHILDREN] = [];
                }
                if (!node[KEY_ALLCHILDREN]) {
                    node[KEY_ALLCHILDREN] = [];
                }
                for (var k = 0; k < tListDatas.length; k++) {
                    tPath = tListDatas[k][KEY_PATH];
                    if (me.optObjDatas[tPath] && !me.optObjDatas[tPath][KEY_LEAF]) {
                        me.optObjDatas[tPath][KEY_LOADED] = true;
                    }
                    if (me.optObjDatas[tPath][KEY_PARENTPATH] == node[KEY_PATH]) {
                        node[KEY_CHILDREN].push(tPath);
                    }
                    node[KEY_ALLCHILDREN].push(tPath);
                }
                me.bubble(node, function(node, pNode) {
                    if (!pNode[KEY_CHILDREN]) {
                        pNode[KEY_CHILDREN] = [];
                    }
                    if (!pNode[KEY_ALLCHILDREN]) {
                        pNode[KEY_ALLCHILDREN] = [];
                    }
                    pNode[KEY_ALLCHILDREN] = pNode[KEY_ALLCHILDREN].concat(node[KEY_ALLCHILDREN]);
                });
                for (var i = 0; i < me.optListDatas.length; i++) {
                    if (me.optListDatas[i][KEY_PATH] == node[KEY_PATH]) {
                        index = i;
                        break;
                    }
                }
                sDatas = me.optListDatas.slice(0, (index + 1));
                eDatas = me.optListDatas.slice(index + 1);
                me.optListDatas = sDatas.concat(tListDatas, eDatas);
            }
            return true;
        },
        /**
         * @description 过滤
         * @param {String} value 过滤的字符串
         */
        filter: function(value) {
            var me = this,
                patt,
                tDatas = {},
                selectedDatas = {},
                tempTreeDatas = {},
                flag,
                tFilter;
            tFilter = {
                filter: value
            };
            flag = me._triggerHandler(tFilter, eventBeforeSearch, me);
            if (false === flag || "false" === flag) {
                return;
            }
            value = tFilter["filter"];
            //本次过滤完毕后才能执行下次过滤操作
            if (me.searchField) {
                me.searchField.setDisabled(true);
            }
            //如果为延迟加载
            if (me.options.loader) {
                me._doLoaderFilter(value, $.objClone(me.options.loader));
                if (me.searchField) {
                    me.searchField.setDisabled(false);
                }
                return;
            }
            if (!$.isNotNull(value)) {
                me.optListDatas = $.objClone(me.listDatas);
                me.optObjDatas = $.objClone(me.objDatas);
                me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
                me.treeUL.height(me.optShowDatas.length * me.liHeight);
                me._doTriggerScrollEvent();
            } else {
                me.optObjDatas = $.objClone(me.objDatas);
                patt = new RegExp($.regExp.escape(value), "i");
                for (var key in me.optObjDatas) {
                    if (me.optObjDatas[key][KEY_LEAF] && patt.test(me.optObjDatas[key][KEY_TEXT])) {
                        tDatas[key] = me.optObjDatas[key];
                    }
                }
                var keys = keys = me.options.valueKeys;
                me.parseTreeDatas(tDatas, me.optObjDatas, keys, tempTreeDatas);
                if (tempTreeDatas["data"]) {
                    tempTreeDatas = tempTreeDatas["data"];
                } else {
                    tempTreeDatas = [];
                }
                me.optListDatas = [];
                me.optObjDatas = {};
                me.parseDatas(tempTreeDatas, me.optListDatas, me.optObjDatas, "", false, null);
            }
            if (me.options.multi) {
                for (var key in me.selectedDatas) {
                    if (me.optObjDatas[key]) {
                        me.optObjDatas[key][KEY_CHECKED] = CHECKED_STATE_FULLCHECKED;
                        selectedDatas[key] = me.optObjDatas[key];
                    }
                }
                me._bubbleUpdateNodeChecked(selectedDatas);
            }
            //如果输入过滤值不为空,则将过滤后的数据全部展开
            if ($.isNotNull(value)) {
                for (var key in me.optObjDatas) {
                    me.optObjDatas[key][KEY_HIDDEN] = false;
                    if (!me.optObjDatas[key][KEY_LEAF]) {
                        me.optObjDatas[key][KEY_EXPANDED] = true;
                    }
                }
            }
            me._triggerHandler(me.optObjDatas, eventSearch, me);
            me._setData();
            tDatas = null;
            selectedDatas = null;
            tempTreeDatas = null;
            if (me.searchField) {
                me.searchField.setDisabled(false);
            }
        },
        /**
         * @description 延迟加载数据时过滤处理
         * @param {String} value 过滤的字符串
         * @param {Object} loader 数据加载器
         */
        _doLoaderFilter: function(value, loader) {
            var me = this,
                datas,
                loaderDatas;
            if (value) {
                if (!loader["tParams"]) {
                    loader["tParams"] = {};
                }
                loader["tParams"]["filter"] = value;
            } else {
                if (loader["tParams"]) {
                    delete loader["tParams"]["filter"];
                }
            }
            loaderDatas = me._loadDatas(loader);
            if (!loaderDatas["isContinue"]) {
                return;
            }
            datas = loaderDatas["datas"];
            me.data = datas;
            me._reset();
            me._initData(me.data);
            me._setData();
        },
        /**
         * @private
         * @description 设置宽度
         * @param {String/Number} width 宽度
         */
        _setWidth: function(width) {
            var me = this;
            if (!width || width < 0) {
                return;
            }
            me.width = width;
            me.treeEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置高度
         * @param {String/Number} height 高度
         */
        _setHeight: function(height) {
            var me = this;
            if (!height || height < 0) {
                return;
            }
            me.height = height;
            me.treeEl.externalHeight(height);
        },
        /**
         * @private
         * @description 设置宽度、高度
         * @param {String/Number} width 宽度
         * @param {String/Number} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me.width = width;
            me.height = height;
            me.treeEl.externalWidth(width).externalHeight(height);
        },
        /**
         * @private
         * @description 获取宽度
         * @returns {Number} 返回宽度
         */
        _getWidth: function() {
            var me = this;
            return me.treeEl.externalWidth();
        },
        /**
         * @private
         * @description 获取高度
         * @returns {Number} 返回高度
         */
        _getHeight: function() {
            var me = this;
            return me.treeEl.externalHeight();
        },
        /**
         * @private
         * @description 设置宽度、高度
         * @param {String/Number} width 宽度
         * @param {String/Number} height 高度
         */
        resizeLayout: function(width, height) {
            var me = this,
                treeBodyDiv = me.treeBodyDiv[0],
                _scrollTop = treeBodyDiv.scrollTop,
                _scrollLeft = treeBodyDiv.scrollLeft;
            me.setWH(width, height);
            treeBodyDiv.scrollTop = _scrollTop;
            treeBodyDiv.scrollLeft = _scrollLeft;
        },
        /**
         * @private
         * @description 逐层下报,执行fn,提供fn参数为node和childrenNode
         * @param {Object} node 渲染节点的数据
         * @param {Function} fn 渲染节点的数据
         */
        cascade: function(node, fn) {
            var me = this;
            if (!node || !node[KEY_ALLCHILDREN] || node[KEY_ALLCHILDREN].length <= 0) {
                return;
            }
            if (!fn || typeof fn != "function") {
                return;
            }
            for (var i = 0; i < node[KEY_ALLCHILDREN].length; i++) {
                fn(me.optObjDatas[node[KEY_PATH]], me.optObjDatas[node[KEY_ALLCHILDREN][i]]);
            }
        },
        /**
         * @private
         * @description 逐层上报,执行fn,提供fn参数为node和parentNode
         * @param {Object} node 渲染节点的数据
         * @param {Function} fn 渲染节点的数据
         */
        bubble: function(node, fn) {
            var me = this;
            if (!fn || typeof fn != "function") {
                return;
            }
            if (!node[KEY_PARENTPATH] || "" == node[KEY_PARENTPATH]) {
                return;
            }
            fn(me.optObjDatas[node[KEY_PATH]], me.optObjDatas[node[KEY_PARENTPATH]]);
            me.bubble(me.optObjDatas[node[KEY_PARENTPATH]], fn);
        },
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this,
                width,
                height,
                searchHeight = 0,
                padding = 0,
                liHeight = me.liHeight,
                treeBodyHeight,
                optListDatas,
                tValue;
            if (me._editMenu) {
                me._editMenu.destroy();
            }
            width = parseInt(me.options.width, 10);
            height = parseInt(me.options.height, 10);
            padding = 12;
            // 如果有搜索框
            if (me.options.search) {
                me.searchField.setWidth(width);
                searchHeight = me.searchFiedlDiv.outerHeight(true);
            }
            if (!isNaN(parseInt(me.options.height, 10))) {
                height = parseInt(me.options.height, 10);
            }
            if (!isNaN(parseInt(me.options.width, 10))) {
                width = parseInt(me.options.width, 10);
            }
            height = height - padding;
            treeBodyHeight = height - searchHeight;
            if (treeBodyHeight < 0) {
                treeBodyHeight = 0;
            }
            me.renderSize = Math.ceil(treeBodyHeight / liHeight);
            if (me.renderSize <= 0) {
                me.renderSize = 1;
            }
            me.treeBodyDiv.externalWidth(width).css("height", treeBodyHeight);
            me.treeBodyDiv[0].scrollTop = 0;
            //如果节点数比较少则一次性渲染
            if (me.isRenderAll) {
                // 清除绑定的scroll事件
                me.treeBodyDiv.unbind("scroll");
                me.treeUL.height("auto");
                optListDatas = [];
                for (var i = 0; i < me.optListDatas.length; i++) {
                    optListDatas.push(me.optObjDatas[me.optListDatas[i][KEY_PATH]]);
                }
                me._doRenderAll(optListDatas);
            } else {
                me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
                me.treeUL.height(me.optShowDatas.length * liHeight);
                optListDatas = me.optShowDatas.slice(0, me.renderSize);
                me._registScrollEvent();
                me._createListNode(optListDatas, 0, false);
            }
            //组件首次渲染时如果有默认值则需要触发change事件
            if (!me.__isTempFlag) {
                me.__isTempFlag = true;
                tValue = me._getValue(null, true);
                // 触发change事件
                if (tValue && tValue.length > 0) {
                    me._triggerHandler(tValue, eventChange, me);
                }
            }
        },
        /**
         * @private
         * @description 渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.treeEl.appendTo(me.renderEl);
            // 渲染搜索框
            if (me.searchField) {
                me.searchField.render(me.searchFiedlDiv.attr("id"));
            }
            me.setDisabled(me.options.disabled);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         * @returns {Boolean} result 执行的结果
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用组件
         */
        setDisabled: function(disabled) {
            var me = this;
            me.options.disabled = disabled;
            if (me.searchField) {
                me.searchField.setDisabled(disabled);
            }
            if (disabled) {
                me.treeEl.addClass(treePanelDisabledClass);
            } else {
                me.treeEl.removeClass(treePanelDisabledClass);
            }
        },
        /**
         * @description 获取组件值
         * @param {Array} valueKeys 节点key信息
         * @param {Boolean} isAll 获取选中节点时,是否也获取过滤掉的选中节点
         * @return {Array} 选中值,格式：[{text:'text1',value:'value1',children: [...]},...]
         */
        getValue: function(valueKeys, isAll) {
            var me = this;
            return me._getValue(valueKeys, isAll);
        },
        /**
         * @private
         * @description 获取组件中选择的节点数据,以树型结构返回选中的节点数据数组
         * @param {Array} valueKeys 节点key信息
         * @param {Boolean} isAll 获取选中节点时,是否也获取过滤掉的选中节点
         * @return {Array} 选中值,格式：[{text:'text1',value:'value1',children: [...]},...]
         */
        _getValue: function(valueKeys, isAll) {
            var me = this,
                result = {},
                keys = me.options.valueKeys,
                tDatas,
                isInitValue = false,
                tObjDatas = me.optObjDatas;
            if ($.isEmptyObject(me.selectedDatas)) {
                return [];
            }
            if ($.isArray(valueKeys) && valueKeys.length > 0) {
                keys = valueKeys;
            }
            if (isAll) {
                tObjDatas = me.objDatas;
            }
            //从当前操作的数据中还原选中数据
            me.parseTreeDatas(me.selectedDatas, tObjDatas, keys, result);
            if (!result["data"]) {
                return [];
            }
            tDatas = $.objClone(result["data"]);
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                for (var key in me.selectedDatas) {
                    if (!me.selectedDatas[key][KEY_LEAF]) {
                        isInitValue = true;
                    }
                    break;
                }
                if (isInitValue) {
                    tDatas = me._doInitValue(tDatas);
                }
            }
            return tDatas;
        },
        /**
         * @private
         * @description 单选可编辑选了父亲节点时,处理数据删除最后一层级的children
         * @param {Array} datas 待处理的数据
         * @return {Array} datas 处理后的数据
         */
        _doInitValue: function(datas) {
            var me = this;
            for (var i = 0; i < datas.length; i++) {
                if (datas[i][KEY_CHILDREN] && datas[i][KEY_CHILDREN].length > 0) {
                    if ("string" == typeof datas[i][KEY_CHILDREN][0]) {
                        delete datas[i][KEY_CHILDREN];
                        return datas;
                    } else {
                        me._doInitValue(datas[i][KEY_CHILDREN]);
                    }
                }
            }
            return datas;
        },
        /**
         * @private
         * @description 一次性渲染全部节点数据
         * @param {Array} datas 节点信息
         */
        _doRenderAll: function(datas) {
            var me = this,
                text,
                nTextEl,
                expandedEl,
                checkedEl,
                textEl,
                liEl,
                depth,
                lineClass,
                eblowClass,
                tNode,
                tempLastNode,
                iconType,
                maxWidth = 0,
                isEdit = false,
                _treeNodeTextClass = "";
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                isEdit = true;
                _treeNodeTextClass = treeNodeTextClass;
                me.treeBodyDiv.unbind("contextmenu");
                me.treeBodyDiv.bind("contextmenu", {
                    "me": me,
                    isTreeBody: true
                }, me._onNodeMousedown);
            }
            //选移除之前渲染
            me.treeUL.find("li").remove();
            if (!datas || datas.length <= 0) {
                return;
            }
            for (var i = 0; i < datas.length; i++) {
                nTextEl = null;
                expandedEl = null;
                //创建节点LI
                liEl = $("<li>").addClass(treeNodeClass);
                tNode = datas[i];
                if (me.options.useArrows) {
                    lineClass = treeNodeLineClass;
                } else {
                    lineClass = treeNodeMinusLineClass;
                }
                //拿到当前节点的深度
                depth = tNode[KEY_DEPTH];
                //逐层上报筛选所有父节点中是最一个节点的节点
                tempLastNode = {};
                me._getPLastNode(tNode, me.optObjDatas, tempLastNode);
                //处理连接线
                for (var j = 0; j < depth; j++) {
                    if (tempLastNode[j]) {
                        $("<span>").addClass(treeNodeMinusLineClass).appendTo(liEl);
                    } else {
                        $("<span>").addClass(lineClass).appendTo(liEl);
                    }
                }
                //如果不是叶子节点
                if (!tNode[KEY_LEAF]) {
                    //如果展开,则加展开样式
                    if (tNode[KEY_EXPANDED]) {
                        expandedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_EXPANDED).addClass(treeExpandedClass).appendTo(liEl);
                    } else {
                        expandedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_EXPANDED).addClass(treeCollapsedClass).appendTo(liEl);
                    }
                    //如果显示图标,则加上图标
                    if (me.options.icon) {
                        $("<span>").addClass(treeParentNodeIcoClass).appendTo(liEl);
                    }
                } else {
                    //如果显示连接线,则加上连接线
                    if (me.options.useArrows) {
                        if (tNode[KEY_ISLAST]) {
                            eblowClass = treeNodeEblowEndClass;
                        } else {
                            eblowClass = treeNodeEblowClass;
                        }
                    } else {
                        eblowClass = treeNodeMinusEblowClass;
                    }
                    $("<span>").addClass(eblowClass).appendTo(liEl);
                    //如果显示图标,则加上图标
                    if (me.options.icon) {
                        //如果没有配置,则用默认的叶子节点图标
                        iconType = ICON_TYPE[tNode[KEY_ICON]];
                        if (iconType) {
                            $("<span>").addClass(iconType).appendTo(liEl);
                        } else {
                            if (!tNode[KEY_ICON]) {
                                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(liEl);
                            } else {
                                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(liEl)
                                    .css({
                                    "background": 'url(' + tNode[KEY_ICON] + ')'
                                });
                            }
                        }
                    }
                }
                //如果为多选,则加入check框
                if (me.options.multi) {
                    checkedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_CHECKED).addClass(treeUnCheckedClass).appendTo(liEl);
                }
                text = $.nullToString(tNode[KEY_TEXT]);
                textEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(liEl);
                if (me.options.showCCount && !tNode[KEY_LEAF]) {
                    nTextEl = me._addCNodeCount(tNode, liEl, textEl);
                } else {
                    // 是否有tip提示
                    if (me.options.tip) {
                        textEl.attr("title", tNode[KEY_QTIP]);
                    }
                }
                if (tNode[KEY_HIDDEN]) {
                    liEl.hide();
                }
                //节点信息中加入此节点下的EL信息,便于后续操作
                tNode[KEY_EL] = {};
                tNode[KEY_EL][KEY_LI] = liEl;
                if (expandedEl) {
                    tNode[KEY_EL][KEY_EXPANDED] = expandedEl;
                }
                if (checkedEl) {
                    //双击文本时选中处理
                    textEl.bind("dblclick", {
                        "me": me,
                        "node": tNode,
                        "checkedEl": checkedEl
                    }, me._onNodeDbClick);
                    if (nTextEl) {
                        nTextEl.bind("dblclick", {
                            "me": me,
                            "node": tNode,
                            "checkedEl": checkedEl,
                            "textEl": textEl
                        }, me._onNodeDbClick);
                    }
                    tNode[KEY_EL][KEY_CHECKED] = checkedEl;
                    me._checked(tNode, tNode[KEY_CHECKED]);
                } else {
                    textEl.bind("dblclick", {
                        "me": me,
                        "node": tNode,
                        "expandedEl": expandedEl
                    }, me._onNodeDbClick);
                    if (nTextEl) {
                        nTextEl.bind("dblclick", {
                            "me": me,
                            "node": tNode,
                            "expandedEl": expandedEl,
                            "textEl": textEl
                        }, me._onNodeDbClick);
                    }
                }
                //给LI绑上节点信息,注册单击事件
                liEl.data(ATTR_NODE, tNode).bind("click", {
                    "me": me,
                    "node": tNode,
                    "liEl": liEl
                }, me._onNodeClick);
                if (!me.options.multi && $.isArray(me.options.editable) && me.options.editable.length > 0) {
                    liEl.bind("contextmenu", {
                        "me": me,
                        "node": tNode,
                        "liEl": liEl,
                        textEl: textEl
                    }, me._onNodeMousedown);
                }
                //单选选中样式处理
                if (!me.options.multi && me.selectedDatas[tNode[KEY_PATH]]) {
                    me._doSelected(tNode);
                }
                liEl.appendTo(me.treeUL);
            }
            maxWidth = me._getLiMaxWidth(me.treeUL, isEdit);
            me._setElWidth(me.treeUL, maxWidth, isEdit);
            return;
        },
        /**
         * @private
         * @description 注册主区域滚动加载数据事件
         */
        _registScrollEvent: function() {
            var me = this,
                sScrollTop = 0,
                treeBodyDiv = me.treeBodyDiv;
            // 先清楚绑定的scroll事件
            treeBodyDiv.unbind("scroll");
            treeBodyDiv.scroll(function(e) {
                // 如果是横向滚动条滚动,则不处理
                if (sScrollTop == $(this)[0].scrollTop) {
                    return;
                }
                sScrollTop = $(this)[0].scrollTop;
                me._doTriggerScrollEvent();
            });
        },
        /**
         * @private
         * @description 主区域滚动加载数据事件处理
         */
        _doTriggerScrollEvent: function() {
            var me = this,
                sScrollHight,
                sScrollTop,
                sDivHight,
                startIndex = 0,
                treeBodyDiv = me.treeBodyDiv,
                rDatas = [],
                isLast = false,
                tempStart = 0;
            isLast = false;
            sDivHight = treeBodyDiv[0].clientHeight;
            sScrollHight = treeBodyDiv[0].scrollHeight;
            sScrollTop = treeBodyDiv[0].scrollTop;
            startIndex = Math.floor(sScrollTop / me.liHeight);
            rDatas = me.optShowDatas.slice(startIndex, (startIndex + me.renderSize));
            // 加载到最后一页数据的处理
            if (sScrollTop > 0 && (sScrollTop + sDivHight) >= sScrollHight) {
                isLast = true;
                tempStart = me.optShowDatas.length - me.renderSize;
                if (tempStart < 0) {
                    tempStart = 0;
                    sScrollTop = 0;
                }
                rDatas = me.optShowDatas.slice(tempStart);
            } else {
                isLast = false;
                if (sScrollTop <= 0 || startIndex < 0) {
                    startIndex = 0;
                    sScrollTop = 0;
                    rDatas = me.optShowDatas.slice(startIndex, (startIndex + me.renderSize));
                }
            }
            me._doScrollLoad(rDatas, sScrollTop, isLast);
        },
        /**
         * @private
         * @description 大数据量滚动加载处理:生成节点
         * @param {Array} datas 待渲染节点的数据
         * @param {Number} sScrollTop 滚动条滚动的位置
         * @param {Boolean} isLast 是否加载到底部
         */
        _createListNode: function(datas, sScrollTop, isLast) {
            var me = this;
            if ($.isNull(datas)) {
                return;
            }
            me.treeUL.find("li").remove();
            me._doScrollLoad(datas, sScrollTop, isLast);
        },
        /**
         * @private
         * @description 主区域滚动加载数据渲染处理
         * @param {Array} datas 渲染节点的数据
         * @param {Number} sScrollTop 向上滚动的距离
         * @param {Boolean} isLast 是否加载到底部
         */
        _doScrollLoad: function(datas, sScrollTop, isLast) {
            var me = this,
                liDoms,
                treeUL = me.treeUL,
                paddingWidth = 5,
                maxWidth = 0,
                sDivHight;
            // 如果到底,将滚动条设置到底部
            if (isLast) {
                me.treeBodyDiv[0].scrollTop = treeUL.height() - me.treeBodyDiv[0].clientHeight + paddingWidth;
            }
            // 由于本次要渲染的LI可能会出现横向滚动条,固高度重新计算,应减去底部横向滚动条所占的高
            if (sScrollTop > 0) {
                sDivHight = me.treeBodyDiv[0].clientHeight + sScrollTop;
                // Y坐标
                sScrollTop = sDivHight - datas.length * me.liHeight;
            }
            //记录之前渲染的LI,本次渲染完后需要删除这些LI
            liDoms = treeUL.find("li");
            for (var i = 0; i < datas.length; i++) {
                me._addLiNode(datas[i], (sScrollTop + i * me.liHeight));
            }
            //防止横向滚动条位置变动,渲染后再删除
            liDoms.remove();
            maxWidth = me._getLiMaxWidth(treeUL);
            //拿到本次渲染的LI,设置宽度
            me._setElWidth(treeUL, maxWidth);
        },
        /**
         * @private
         * @description 生成主列表区域li标签
         * @param {Object} node 节点信息
         * @param {Number} top Y坐标
         * @returns {Object} liEl 当前操作的LI
         */
        _addLiNode: function(node, top) {
            var me = this,
                depth,
                lineClass,
                eblowClass,
                iconType,
                tempLastNode,
                expandedEl,
                checkedEl,
                textEl,
                liEl,
                text,
                nTextEl,
                disabled = me.options.disabled;
            liEl = $("<li>").addClass(treeNodeClass).css({
                top: top,
                position: "absolute"
            });
            if (me.options.useArrows) {
                lineClass = treeNodeLineClass;
            } else {
                lineClass = treeNodeMinusLineClass;
            }
            depth = node[KEY_DEPTH];
            tempLastNode = {};
            me._getPLastNode(node, me.optObjDatas, tempLastNode);
            for (var j = 0; j < depth; j++) {
                if (tempLastNode[j]) {
                    $("<span>").addClass(treeNodeMinusLineClass).appendTo(liEl);
                } else {
                    $("<span>").addClass(lineClass).appendTo(liEl);
                }
            }
            //如果不是叶子节点
            if (!node[KEY_LEAF]) {
                //如果展开,则加展开样式
                if (node[KEY_EXPANDED]) {
                    expandedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_EXPANDED).addClass(treeExpandedClass).appendTo(liEl);
                } else {
                    expandedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_EXPANDED).addClass(treeCollapsedClass).appendTo(liEl);
                }
                //如果有图片,则加上图片
                if (me.options.icon) {
                    $("<span>").addClass(treeParentNodeIcoClass).appendTo(liEl);
                }
            } else {
                if (me.options.useArrows) {
                    if (node[KEY_ISLAST]) {
                        eblowClass = treeNodeEblowEndClass;
                    } else {
                        eblowClass = treeNodeEblowClass;
                    }
                } else {
                    eblowClass = treeNodeMinusEblowClass;
                }
                $("<span>").addClass(eblowClass).appendTo(liEl);
                //如果有图片,则加上图片
                if (me.options.icon) {
                    //如果没有配置,则用默认的叶子节点图标
                    iconType = ICON_TYPE[node[KEY_ICON]];
                    if (iconType) {
                        $("<span>").addClass(iconType).appendTo(liEl);
                    } else {
                        if (!node[KEY_ICON]) {
                            $("<span>").addClass(treeLeafNodeIcoClass).appendTo(liEl);
                        } else {
                            $("<span>").addClass(treeLeafNodeIcoClass).appendTo(liEl)
                                .css({
                                "background": 'url(' + node[KEY_ICON] + ')'
                            });
                        }
                    }
                }
            }
            if (me.options.multi) {
                checkedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_CHECKED).addClass(treeUnCheckedClass).appendTo(liEl);
            }
            text = $.nullToString(node[KEY_TEXT]);
            textEl = $("<span>").text(text).appendTo(liEl);
            if (me.options.showCCount && !node[KEY_LEAF]) {
                nTextEl = me._addCNodeCount(node, liEl, textEl);
            } else {
                // 是否有tip提示
                if (me.options.tip) {
                    textEl.attr("title", node[KEY_QTIP]);
                }
            }
            node[KEY_EL] = {};
            if (checkedEl) {
                //如果是多选则加入双击选中事件处理
                textEl.bind("dblclick", {
                    "me": me,
                    "node": node,
                    "checkedEl": checkedEl
                }, me._onAsyncNodeDbClick);
                if (nTextEl) {
                    nTextEl.bind("dblclick", {
                        "me": me,
                        "node": node,
                        "checkedEl": checkedEl
                    }, me._onAsyncNodeDbClick);
                }
                node[KEY_EL][KEY_CHECKED] = checkedEl;
                me._checked(node, node[KEY_CHECKED]);
                delete node[KEY_EL][KEY_CHECKED];
            } else {
                textEl.bind("dblclick", {
                    "me": me,
                    "node": node
                }, me._onAsyncNodeDbClick);
                if (nTextEl) {
                    nTextEl.bind("dblclick", {
                        "me": me,
                        "node": node
                    }, me._onAsyncNodeDbClick);
                }
            }
            node[KEY_EL][KEY_LI] = liEl;
            //给LI绑上节点信息,注册单击事件
            liEl.data(ATTR_NODE, node).bind("click", {
                "me": me,
                "node": node,
                "liEl": liEl
            }, me._onAsyncNodeClick);
            if (!me.options.multi && me.selectedDatas[node[KEY_PATH]]) {
                me._doSelected(node);
            }
            liEl.appendTo(me.treeUL);
            if (disabled) {
                me.setDisabled(disabled);
            }
            return liEl;
        },
        /**
         * @private
         * @description 滚动加载: 节点双击事件处理
         * @param {Object} e 事件对象
         */
        _onAsyncNodeDbClick: function(e) {
            var me = e.data.me,
                checkedEl = e.data.checkedEl,
                node = e.data.node,
                el = $(e.target),
                expandEl,
                flag;
            if (me.options.disabled) {
                return;
            }
            flag = me._triggerHandler($.objClone(node), eventBeforeDbClick, me);
            if (false === flag || "false" === flag) {
                return;
            }
            //如果为多选,选中时则展开子节点;如果为单选且为非叶子节点,则双击时切换展开与折叠
            if (checkedEl) {
                me._doAsyncChecked(checkedEl, node);
            } else {
                expandEl = el.parent("." + treeNodeClass).find("span[name='expanded']");
                if (!node[KEY_LEAF] && expandEl) {
                    me._doAsyncExpanded(expandEl, node);
                }
            }
            me._triggerHandler($.objClone(node), eventDbClick, me);
        },
        /**
         * @private
         * @description 输入框获得焦点时处理
         * @param {Object} e 事件对象
         */
        _doInputFocus: function(e) {
            var me = e.data.me,
                inputEl;
            if (e.data.self) {
                inputEl = e.data.self.get(0);
                if (inputEl) {
                    inputEl.selectionStart = inputEl.value.length;
                }
            }
        },
        /**
         * @private
         * @description 双击时编辑处理
         * @param {Object} e 事件对象
         */
        _doEdit: function(e) {
            var me = e.data.me,
                node = e.data.node,
                oldText,
                newText,
                flag;
            oldText = e.data["oldText"];
            newText = e.data.self.val();
            //修改text值
            if (oldText != newText) {
                flag = me._triggerHandler({
                    text: newText,
                    oldText: oldText
                }, eventBeforeTextChange, me);
                if (false === flag || "false" === flag) {
                    flag = false;
                    newText = oldText;
                } else {
                    flag = true;
                }
            }
            e.data.self.remove();
            e.data.el.text(newText);
            if (flag) {
                if (me.optObjDatas[node[KEY_PATH]]) {
                    me.optObjDatas[node[KEY_PATH]][KEY_TEXT] = newText;
                    me.optObjDatas[node[KEY_PATH]][KEY_QTIP] = newText;
                    if (me.options.tip) {
                        if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                            me._upDateCNodeCount(me.optObjDatas[node[KEY_PATH]]);
                        } else {
                            e.data.el.attr("title", newText);
                        }
                    }
                }
                me.objDatas = me.optObjDatas;
                me._triggerHandler({
                    text: newText,
                    oldText: oldText
                }, eventTextChange, me);
            }
            me._triggerHandler($.objClone(node), eventEdit, me);
        },
        /**
         * @private
         * @description 滚动加载: 节点单击事件处理
         * @param {Object} e 事件对象
         */
        _onNodeMousedown: function(e) {
            var me = e.data.me,
                itemDatas = [],
                _item;
            if (me.options.disabled) {
                return;
            }
            if (!me.options.editable) {
                return;
            }
            //如果只配置了true则不出右键弹出菜单
            if (true === me.options.editable || "true" === me.options.editable) {
                return;
            }
            //如果menus没配置则不出右键弹出菜单
            if ($.isArray(me.options.editable) && me.options.editable.length <= 0) {
                return;
            }
            if (e.button != 2) {
                return;
            }
            //选中样式处理
            if (e.data.isTreeBody) {
                me._doSelected(null);
            } else {
                me._doSelected(e.data.node);
            }
            if (me._editMenu) {
                me._editMenu.destroy();
            }
            if (!me._editMenuId) {
                me._editMenuId = me.options.id + "-edit-menu";
                $("<div id=\"" + me._editMenuId + "\">").appendTo(document.body);
            }
            var x = e.pageX;
            for (var i = 0; i < me.options.editable.length; i++) {
                _item = EDIT_TYPE[me.options.editable[i]];
                if (_item) {
                    itemDatas.push(_item);
                }
            }
            me._editMenu = new Sweet.menu.Menu({
                renderTo: me._editMenuId,
                widgetClass: treeNodeEditMenuClass,
                X: x,
                Y: e.pageY,
                itemClick: function(evt, data) {
                    me._doMenuClick(e, me, data);
                },
                items: itemDatas
            });
            e.preventDefault();
            e.stopPropagation();
            me._doScrollEvent();
            return false;
        },
        /**
         * @private
         * @description 滚动时删除弹出菜单
         */
        _doScrollEvent: function() {
            var me = this;
            // 先清楚绑定的scroll事件
            me.treeBodyDiv.unbind("scroll");
            me.treeBodyDiv.scroll(function(e) {
                if (me._editMenu) {
                    me._editMenu.destroy();
                }
            });
        },
        /**
         * @private
         * @description 编辑menu单击事件处理
         * @param {Object} e 事件对象
         * @param {Object} me tree组件对象
         * @param {Object} data 菜单项对象
         */
        _doMenuClick: function(e, me, data) {
            var cNode;
            if (me.options.disabled) {
                return;
            }
            switch (data["text"]) {
                case i18n["add"]:
                    //新创建的节点
                    cNode = {};
                    cNode[KEY_TEXT] = i18n["nodeName"];
                    cNode[KEY_VALUE] = me.options.id + "-edit-" + (++uuid);
                    me._doAddNode(cNode, e.data.node);
                    break;
                case i18n["edit"]:
                    me._doEditNode(e, true);
                    break;
                case i18n["delete"]:
                    me._doDeleteNode(e.data.node);
                    break;
                default:
                    return;
            }
        },
        /**
         * @private
         * @description 编辑menu单击编辑项事件处理
         * @param {Object} e 事件对象
         * @param {Boolean} isDbClickEdit 双击节点时是否出编辑框
         */
        _doEditNode: function(e, isDbClickEdit) {
            var me = this,
                node,
                el,
                nodeOldText,
                editInputEl,
                flag;
            el = e.data.textEl;
            if (!el) {
                return;
            }
            node = e.data.node;
            flag = me._triggerHandler({
                newNode: null,
                node: $.objClone(node)
            }, eventBeforeEdit, me);
            if (false === flag || "false" === flag) {
                return;
            }
            if (!(false === isDbClickEdit || "false" === isDbClickEdit)) {
                nodeOldText = el.text();
                el.text("");
                editInputEl = $("<input type='text'>").attr({
                    value: nodeOldText
                }).css({
                    width: "100%",
                    height: "22px"
                });
                editInputEl.appendTo(el)
                    .bind("blur", {
                    me: me,
                    el: el,
                    node: node,
                    self: editInputEl,
                    oldText: nodeOldText
                }, me._doEdit)
                    .bind("focus", {
                    me: me,
                    el: el,
                    node: node,
                    self: editInputEl,
                    oldText: nodeOldText
                }, me._doInputFocus);
                editInputEl.focus();
            }
        },
        /**
         * @private
         * @description 编辑menu单击添加项事件处理(根节点)
         * @param {Object} cNode 待添加节点对象
         * @param {Object} node 加到此节点之后/之前
         * @param {Boolean} isBefore 加到此节点之前
         */
        _doAddRootNode: function(cNode, node, isBefore) {
            var me = this,
                firstLi,
                cLiEl,
                text,
                cTextEl,
                maxWidth,
                depth = 0,
                _treeNodeTextClass = "",
                _listDatas = [],
                _tempLastNdoe;
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                _treeNodeTextClass = treeNodeTextClass;
            }
            cNode[KEY_DEPTH] = depth;
            cNode[KEY_HIDDEN] = false;
            cNode[KEY_LEAF] = true;
            cNode[KEY_QTIP] = cNode[KEY_TEXT];
            cNode[KEY_PATH] = cNode[KEY_VALUE];
            cLiEl = $("<li>").addClass(treeNodeClass);
            $("<span>").addClass(treeNodeMinusEblowClass).appendTo(cLiEl);
            //如果显示图标,则加上图标
            if (me.options.icon) {
                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(cLiEl);
            }
            text = $.nullToString(cNode[KEY_TEXT]);
            cTextEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(cLiEl);
            // 是否有tip提示
            if (me.options.tip) {
                cTextEl.attr("title", cNode[KEY_QTIP]);
            }
            //节点信息中加入此节点下的EL信息,便于后续操作
            cNode[KEY_EL] = {};
            cNode[KEY_EL][KEY_LI] = cLiEl;
            cTextEl.bind("dblclick", {
                "me": me,
                "node": cNode
            }, me._onNodeDbClick);
            //给LI绑上节点信息,注册单击事件
            cLiEl.data(ATTR_NODE, cNode).bind("click", {
                "me": me,
                "node": cNode,
                "liEl": cLiEl
            }, me._onNodeClick);
            cLiEl.bind("contextmenu", {
                "me": me,
                "node": cNode,
                "liEl": cLiEl,
                textEl: cTextEl
            }, me._onNodeMousedown);
            me.optObjDatas[cNode[KEY_PATH]] = cNode;
            me.objDatas = me.optObjDatas;
            if (!$.isEmptyObject(node)) {
                if (isBefore) {
                    _tempLastNdoe = node;
                    //将新加的节点加入列表数据中
                    for (var i = 0; i < me.optListDatas.length; i++) {
                        if (_tempLastNdoe[KEY_PATH] == me.optListDatas[i][KEY_PATH]) {
                            _listDatas.push({
                                path: cNode[KEY_PATH]
                            });
                        }
                        _listDatas.push(me.optListDatas[i]);
                    }
                    me.optListDatas = _listDatas;
                    me.listDatas = me.optListDatas;
                    cLiEl.insertBefore(_tempLastNdoe[KEY_EL][KEY_LI]);
                } else {
                    if (node[KEY_LEAF]) {
                        _tempLastNdoe = node;
                    } else {
                        node[KEY_ALLCHILDREN] = node[KEY_ALLCHILDREN] || [];
                        if (node[KEY_ALLCHILDREN].length <= 0) {
                            _tempLastNdoe = node;
                        } else {
                            _tempLastNdoe = me.optObjDatas[node[KEY_ALLCHILDREN][node[KEY_ALLCHILDREN].length - 1]];
                        }
                    }
                    //将新加的节点加入列表数据中
                    for (var i = 0; i < me.optListDatas.length; i++) {
                        _listDatas.push(me.optListDatas[i]);
                        if (_tempLastNdoe[KEY_PATH] == me.optListDatas[i][KEY_PATH]) {
                            _listDatas.push({
                                path: cNode[KEY_PATH]
                            });
                        }
                    }
                    me.optListDatas = _listDatas;
                    me.listDatas = me.optListDatas;
                    cLiEl.insertAfter(_tempLastNdoe[KEY_EL][KEY_LI]);
                }
            } else {
                firstLi = me.treeUL.find("li");
                if (isBefore && firstLi && firstLi.length > 0) {
                    me.optListDatas = [{
                        path: cNode[KEY_PATH]
                    }].concat(me.optListDatas);
                    me.listDatas = me.optListDatas;
                    cLiEl.insertBefore($(firstLi[0]));
                } else {
                    //将新加的节点加入列表数据中
                    me.optListDatas.push({
                        path: cNode[KEY_PATH]
                    });
                    me.listDatas = me.optListDatas;
                    //将新创建的节点加到后面
                    cLiEl.appendTo(me.treeUL);
                }
            }
            //单选选中样式处理
            me._doSelected(cNode);
            //计算最大宽度
            maxWidth = me._getLiMaxWidth(me.treeUL, true);
            me._setElWidth(me.treeUL, maxWidth, true);
        },
        /**
         * @private
         * @description 编辑menu单击添加项事件处理
         * @param {Object} cNode 待添加节点对象
         * @param {Object} node 节点对象
         */
        _doAddNode: function(cNode, node) {
            var me = this,
                liEl,
                _tempLastNdoe,
                _tempAllChildren,
                isLeaf,
                cLiEl,
                text,
                textEl,
                cTextEl,
                expandedEl,
                nTextEl,
                maxWidth,
                depth = 0,
                _listDatas = [],
                lineClass = treeNodeMinusLineClass,
                _treeNodeTextClass = "";
            if (!cNode) {
                return;
            }
            if ($.isEmptyObject(node)) {
                cNode[KEY_DEPTH] = depth;
                cNode[KEY_HIDDEN] = false;
                cNode[KEY_LEAF] = true;
                cNode[KEY_QTIP] = cNode[KEY_TEXT];
                cNode[KEY_PATH] = cNode[KEY_VALUE];
                me._doAddRootNode(cNode);
                return;
            }
            isLeaf = node[KEY_LEAF];
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                _treeNodeTextClass = treeNodeTextClass;
            }
            liEl = node[KEY_EL][KEY_LI];
            liEl.children().remove();
            //节点信息更改
            node[KEY_LEAF] = false;
            node[KEY_EXPANDED] = true;
            node[KEY_HIDDEN] = false;
            //拿到当前节点的深度
            depth = node[KEY_DEPTH];
            cNode[KEY_DEPTH] = (depth + 1);
            cNode[KEY_HIDDEN] = false;
            cNode[KEY_LEAF] = true;
            cNode[KEY_QTIP] = cNode[KEY_TEXT];
            cNode[KEY_PATH] = node[KEY_PATH] + pathConnectSymbol + cNode[KEY_VALUE];
            cNode[KEY_PARENTPATH] = node[KEY_PATH];
            cLiEl = $("<li>").addClass(treeNodeClass);
            for (var j = 0; j < cNode[KEY_DEPTH]; j++) {
                $("<span>").addClass(lineClass).appendTo(cLiEl);
            }
            $("<span>").addClass(treeNodeMinusEblowClass).appendTo(cLiEl);
            //如果显示图标,则加上图标
            if (me.options.icon) {
                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(cLiEl);
            }
            text = $.nullToString(cNode[KEY_TEXT]);
            cTextEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(cLiEl);
            // 是否有tip提示
            if (me.options.tip) {
                cTextEl.attr("title", cNode[KEY_QTIP]);
            }
            //节点信息中加入此节点下的EL信息,便于后续操作
            cNode[KEY_EL] = {};
            cNode[KEY_EL][KEY_LI] = cLiEl;
            cTextEl.bind("dblclick", {
                "me": me,
                "node": cNode
            }, me._onNodeDbClick);
            //给LI绑上节点信息,注册单击事件
            cLiEl.data(ATTR_NODE, cNode).bind("click", {
                "me": me,
                "node": cNode,
                "liEl": cLiEl
            }, me._onNodeClick);
            cLiEl.bind("contextmenu", {
                "me": me,
                "node": cNode,
                "liEl": cLiEl,
                textEl: cTextEl
            }, me._onNodeMousedown);

            //当前节点信息变更
            for (var j = 0; j < depth; j++) {
                $("<span>").addClass(lineClass).appendTo(liEl);
            }
            expandedEl = $("<span>").attr(ATTR_NAME, EVENTTYPE_EXPANDED).addClass(treeExpandedClass).appendTo(liEl);
            //如果显示图标,则加上图标
            if (me.options.icon) {
                $("<span>").addClass(treeParentNodeIcoClass).appendTo(liEl);
            }
            text = $.nullToString(node[KEY_TEXT]);
            textEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(liEl);
            textEl.bind("dblclick", {
                "me": me,
                "node": node,
                "expandedEl": expandedEl
            }, me._onNodeDbClick);

            liEl.removeData(ATTR_NODE);
            liEl.unbind("click");
            liEl.unbind("contextmenu");
            //给LI绑上节点信息,注册单击事件
            liEl.data(ATTR_NODE, node).bind("click", {
                "me": me,
                "node": node,
                "liEl": liEl
            }, me._onNodeClick);
            liEl.bind("contextmenu", {
                "me": me,
                "node": node,
                "liEl": liEl,
                textEl: textEl
            }, me._onNodeMousedown);
            //节点信息中加入此节点下的EL信息,便于后续操作
            node[KEY_EL] = {};
            node[KEY_EL][KEY_LI] = liEl;
            node[KEY_EL][KEY_EXPANDED] = expandedEl;

            //将新创建的节点加入到当前编辑节点中
            if (isLeaf) {
                node[KEY_CHILDREN] = [cNode[KEY_PATH]];
                node[KEY_ALLCHILDREN] = [cNode[KEY_PATH]];
                _tempLastNdoe = node;
            } else {
                node[KEY_CHILDREN] = node[KEY_CHILDREN] || [];
                node[KEY_ALLCHILDREN] = node[KEY_ALLCHILDREN] || [];
                if (node[KEY_ALLCHILDREN].length <= 0) {
                    _tempLastNdoe = node;
                } else {
                    _tempLastNdoe = me.optObjDatas[node[KEY_ALLCHILDREN][node[KEY_ALLCHILDREN].length - 1]];
                }
                node[KEY_CHILDREN].push(cNode[KEY_PATH]);
                node[KEY_ALLCHILDREN].push(cNode[KEY_PATH]);
            }
            //更新数据
            me.optObjDatas[cNode[KEY_PATH]] = cNode;
            me.objDatas = me.optObjDatas;
            //将新加的节点加入列表数据中
            for (var i = 0; i < me.optListDatas.length; i++) {
                _listDatas.push(me.optListDatas[i]);
                if (_tempLastNdoe[KEY_PATH] == me.optListDatas[i][KEY_PATH]) {
                    _listDatas.push({
                        path: cNode[KEY_PATH]
                    });
                }
            }
            //修改列表数据
            me.optListDatas = _listDatas;
            me.listDatas = me.optListDatas;
            if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node, function(node, pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < pNode[KEY_ALLCHILDREN].length; i++) {
                        _tempAllChildren.push(pNode[KEY_ALLCHILDREN][i]);
                        if (_tempLastNdoe[KEY_PATH] == pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(cNode[KEY_PATH]);
                        }
                    }
                    pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                    me._upDateCNodeCount(pNode);
                });
                nTextEl = me._addCNodeCount(node, liEl, textEl);
                if (nTextEl) {
                    nTextEl.bind("dblclick", {
                        "me": me,
                        "node": node,
                        "expandedEl": expandedEl,
                        "textEl": textEl
                    }, me._onNodeDbClick);
                }
            } else {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node, function(node, pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < pNode[KEY_ALLCHILDREN].length; i++) {
                        _tempAllChildren.push(pNode[KEY_ALLCHILDREN][i]);
                        if (_tempLastNdoe[KEY_PATH] == pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(cNode[KEY_PATH]);
                        }
                    }
                    pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                });
                // 是否有tip提示
                if (me.options.tip) {
                    textEl.attr("title", node[KEY_QTIP]);
                }
            }
            //将新创建的节点加到后面
            cLiEl.insertAfter(_tempLastNdoe[KEY_EL][KEY_LI]);
            //单选选中样式处理
            me._doSelected(cNode);
            //展开子节点
            me._doExpanded(expandedEl, node, false);
            //计算最大宽度
            maxWidth = me._getLiMaxWidth(me.treeUL, true);
            me._setElWidth(me.treeUL, maxWidth, true);
        },
        /**
         * @private
         * @description 编辑menu单击删除项事件处理
         * @param {Object} node 节点对象
         */
        _doDeleteNode: function(node) {
            var me = this,
                tDatas = [],
                tDeletePaths = [],
                pNode,
                tNode,
                flag,
                maxWidth;
            if (!node) {
                return;
            }
            flag = me._triggerHandler($.objClone(node), eventBeforeRemove, me);
            if (false === flag || "false" === flag) {
                return;
            }
            if (node[KEY_ALLCHILDREN]) {
                tDeletePaths = node[KEY_ALLCHILDREN];
            }
            tDeletePaths.push(node[KEY_PATH]);
            pNode = me.optObjDatas[node[KEY_PARENTPATH]];
            //先从父节点children中删除此节点
            if (pNode && pNode[KEY_CHILDREN]) {
                for (var i = 0; i < pNode[KEY_CHILDREN].length; i++) {
                    if (pNode[KEY_CHILDREN][i] != node[KEY_PATH]) {
                        tDatas.push(pNode[KEY_CHILDREN][i]);
                    }
                }
                pNode[KEY_CHILDREN] = tDatas;
            }
            if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                me.bubble(node, function(node, pNode) {
                    pNode[KEY_ALLCHILDREN] = me._deleteFun(pNode[KEY_ALLCHILDREN], tDeletePaths);
                    me._upDateCNodeCount(pNode);
                });
            } else {
                me.bubble(node, function(node, pNode) {
                    pNode[KEY_ALLCHILDREN] = me._deleteFun(pNode[KEY_ALLCHILDREN], tDeletePaths);
                });
            }
            //删除LI,同时也从当前操作数据中删除此节点
            for (var i = 0; i < tDeletePaths.length; i++) {
                tNode = me.optObjDatas[tDeletePaths[i]];
                if (tNode && tNode[KEY_EL] && tNode[KEY_EL][KEY_LI]) {
                    tNode[KEY_EL][KEY_LI].remove();
                }
                delete me.optObjDatas[tDeletePaths[i]];
                delete me.selectedDatas[tDeletePaths[i]];
            }
            me.objDatas = me.optObjDatas;
            //修改列表数据
            me.optListDatas = me._deleteFun(me.optListDatas, tDeletePaths);
            me.listDatas = me.optListDatas;
            maxWidth = me._getLiMaxWidth(me.treeUL, true);
            me._setElWidth(me.treeUL, maxWidth, true);
            me._triggerHandler($.objClone(node), eventRemove, me);
        },
        /**
         * @private
         * @description 从array1中移除array2
         * @param {Array} array1 源数据
         * @param {Array} array2 要删除的数据
         * @return {Array} datas 删除后的数组
         */
        _deleteFun: function(array1, array2) {
            var datas = [],
                tObjs,
                tPath;
            if (!array1) {
                return datas;
            }
            if (!array2 || array2.length <= 0) {
                return array1;
            }
            tObjs = {};
            for (var i = 0; i < array2.length; i++) {
                tObjs[array2[i]] = array2[i];
            }
            for (var i = 0; i < array1.length; i++) {
                tPath = array1[i];
                if (tPath[KEY_PATH]) {
                    if (!tObjs[tPath[KEY_PATH]]) {
                        datas.push(tPath);
                    }
                } else {
                    if (!tObjs[tPath]) {
                        datas.push(tPath);
                    }
                }
            }
            return datas;
        },
        /**
         * @private
         * @description 滚动加载: 节点单击事件处理
         * @param {Object} e 事件对象
         */
        _onAsyncNodeClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                node = e.data.node;
            if (me.options.disabled) {
                return;
            }
            switch (self.attr(ATTR_NAME)) {
                case EVENTTYPE_EXPANDED:
                    me._doAsyncExpanded(self, node);
                    break;
                case EVENTTYPE_CHECKED:
                    me._doAsyncChecked(self, node);
                    break;
                default:
                    me._doSelected(node);
                    me._triggerHandler($.objClone(node), eventClick, me);
                    return;
            }
        },
        /**
         * @private
         * @description 滚动加载时节点check处理
         * @param {Boolean} el 是否选中
         * @param {Object} node 当前操作的节点
         */
        _doAsyncChecked: function(el, node) {
            var me = this,
                flag,
                checked = !el.hasClass(treeFullCheckedClass),
                allChildrenArray = node[KEY_ALLCHILDREN] || [],
                tNode;
            if (me.options.disabled) {
                return;
            }
            flag = me._triggerHandler({
                node: $.objClone(node),
                checked: checked
            }, eventBeforeCheckChange, me);
            if (false === flag || "false" === flag) {
                return;
            }
            //叶子节点处理
            if (node[KEY_LEAF]) {
                me._doAsyncLeafChecked(node, checked);
            } else {
                if (checked) {
                    node[KEY_HIDDEN] = false;
                    node[KEY_EXPANDED] = true;
                    //设置选中状态
                    me._asyncChecked(node, CHECKED_STATE_FULLCHECKED);
                    //如果为延迟加载
                    if (me.options.loader && !node[KEY_LOADED]) {
                        node[KEY_LOADED] = true;
                        flag = me._doLoaderLoad(node, $.objClone(me.options.loader));
                        if (!flag) {
                            return;
                        }
                        //重新取
                        allChildrenArray = node[KEY_ALLCHILDREN] || [];
                    }
                    //如果为延迟加载
                    for (var i = 0; i < allChildrenArray.length; i++) {
                        tNode = me.optObjDatas[allChildrenArray[i]];
                        tNode[KEY_HIDDEN] = false;
                        if (!tNode[KEY_LEAF]) {
                            tNode[KEY_EXPANDED] = true;
                        }
                        me._asyncChecked(tNode, CHECKED_STATE_FULLCHECKED);
                    }
                } else {
                    //取消选中状态
                    node[KEY_HIDDEN] = false;
                    me._asyncChecked(node, CHECKED_STATE_UNCHECKED);
                    for (var i = 0; i < allChildrenArray.length; i++) {
                        tNode = me.optObjDatas[allChildrenArray[i]];
                        //取消选中状态
                        me._asyncChecked(tNode, CHECKED_STATE_UNCHECKED);
                    }
                }
            }
            me._doAsyncUpdatePNodeChecked(node);
            me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
            me.treeUL.height(me.optShowDatas.length * me.liHeight);
            me._doTriggerScrollEvent();
            me._triggerHandler({
                node: $.objClone(node),
                checked: checked
            }, eventCheckChange, me);
        },
        /**
         * @private
         * @description 滚动加载: 节点check样式处理
         * @param {Object} node 当前node对象
         * @param {Number} checked 选中状态枚举
         */
        _asyncChecked: function(node, checked) {
            var me = this;
            if (!node) {
                return;
            }
            node[KEY_CHECKED] = checked;
            switch (checked) {
                case CHECKED_STATE_UNCHECKED:
                    //未选中状态
                    delete me.selectedDatas[node[KEY_PATH]];
                    break;
                case CHECKED_STATE_CHECKED:
                    //半选中状态
                    delete me.selectedDatas[node[KEY_PATH]];
                    break;
                case CHECKED_STATE_FULLCHECKED:
                    //全选中状态
                    if (node[KEY_LEAF]) {
                        me.selectedDatas[node[KEY_PATH]] = node;
                    }
                    break;
                default:
                    return;
            }
        },
        /**
         * @private
         * @description 滚动加载时叶子节点check处理
         * @param {Object} node 当前操作的节点
         * @param {Boolean} checked 是否选中
         */
        _doAsyncLeafChecked: function(node, checked) {
            var me = this;
            if (checked) {
                //设置选中状态
                me._asyncChecked(node, CHECKED_STATE_FULLCHECKED);
                node[KEY_HIDDEN] = false;
            } else {
                //取消选中状态
                me._asyncChecked(node, CHECKED_STATE_UNCHECKED);
            }
        },
        /**
         * @private
         * @description 滚动加载时更新父层级节点checked
         * @param {Object} node 当前操作的节点
         */
        _doAsyncUpdatePNodeChecked: function(node) {
            var me = this,
                checked = false,
                isFullchecked = true,
                pNode,
                tNode,
                cCount;
            //顶级节点不做处理
            pNode = me.optObjDatas[node[KEY_PARENTPATH]];
            if (!pNode) {
                return;
            }
            cCount = pNode[KEY_ALLCHILDREN].length;
            for (var i = 0; i < cCount; i++) {
                tNode = me.optObjDatas[pNode[KEY_ALLCHILDREN][i]];
                if (CHECKED_STATE_FULLCHECKED == tNode[KEY_CHECKED]) {
                    checked = true;
                } else {
                    isFullchecked = false;
                }
            }
            if (isFullchecked) {
                //设置全选状态
                me._asyncChecked(pNode, CHECKED_STATE_FULLCHECKED);
            } else {
                if (checked) {
                    //设置半选状态
                    me._asyncChecked(pNode, CHECKED_STATE_CHECKED);
                } else {
                    //取消选中状态
                    me._asyncChecked(pNode, CHECKED_STATE_UNCHECKED);
                }
            }
            //逐层上报更新父节点状态
            me._doAsyncUpdatePNodeChecked(pNode);
        },
        /**
         * @private
         * @description 滚动加载时节点展开折叠处理
         * @param {Object} el 当前li对象
         * @param {Object} node 当前操作的节点
         * @param {Object} node 当前操作的节点
         */
        _doAsyncExpanded: function(el, node) {
            var me = this,
                tNode,
                eventName,
                expanded = el.hasClass(treeCollapsedClass),
                childrenArray = node[KEY_CHILDREN] || [],
                allChildrenArray = node[KEY_ALLCHILDREN] || [],
                flag,
                selectedDatas = {};
            if (me.options.disabled) {
                return;
            }
            if (expanded) {
                eventName = eventExpand;
                flag = me._triggerHandler($.objClone(node), eventBeforeExpand, me);
                if (false === flag || "false" === flag) {
                    return;
                }
                //如果为延迟加载
                if (me.options.loader && !node[KEY_LOADED]) {
                    node[KEY_LOADED] = true;
                    flag = me._doLoaderLoad(node, $.objClone(me.options.loader), selectedDatas);
                    if (!flag) {
                        return;
                    }
                    //重新取子节点
                    childrenArray = node[KEY_CHILDREN] || [];
                    allChildrenArray = node[KEY_ALLCHILDREN] || [];
                    //选中数据的处理
                    if (!$.isEmptyObject(selectedDatas)) {
                        if (me.options.multi) {
                            for (var key in selectedDatas) {
                                me.selectedDatas[key] = me.optObjDatas[key];
                            }
                            me.selectedDatas = me._getLeafSelectedDatas(me.selectedDatas);
                        } else {
                            //如果之前没有选中,本次加载回来选中前一条
                            if ($.isEmptyObject(me.selectedDatas)) {
                                for (var key in selectedDatas) {
                                    me.selectedDatas[key] = me.optObjDatas[key];
                                    break;
                                }
                            }
                        }
                    }
                }
                //展开时显示子层级节点
                el.removeClass(treeCollapsedClass);
                el.addClass(treeExpandedClass);
                node[KEY_EXPANDED] = true;
                if (childrenArray) {
                    for (var i = 0; i < childrenArray.length; i++) {
                        tNode = me.optObjDatas[childrenArray[i]];
                        tNode[KEY_HIDDEN] = false;
                    }
                }
            } else {
                eventName = eventCollapse;
                flag = me._triggerHandler($.objClone(node), eventBeforeCollapse, me);
                if (false === flag || "false" === flag) {
                    return;
                }
                //收起时将其下所有子节点隐藏
                el.removeClass(treeExpandedClass);
                el.addClass(treeCollapsedClass);
                node[KEY_EXPANDED] = false;
                if (allChildrenArray) {
                    for (var i = 0; i < allChildrenArray.length; i++) {
                        tNode = me.optObjDatas[allChildrenArray[i]];
                        tNode[KEY_HIDDEN] = true;
                        tNode[KEY_EXPANDED] = false;
                    }
                }
            }
            me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
            me.treeUL.height(me.optShowDatas.length * me.liHeight);
            me._doTriggerScrollEvent();
            flag = me._triggerHandler($.objClone(node), eventName, me);
        },
        /**
         * @private
         * @description 节点双击事件处理
         * @param {Object} e 事件对象
         */
        _onNodeDbClick: function(e) {
            var me = e.data.me,
                checkedEl = e.data.checkedEl,
                expandEl = e.data.expandedEl,
                node = e.data.node,
                checked,
                expanded,
                flag;
            if (me.options.disabled) {
                return;
            }
            flag = me._triggerHandler($.objClone(node), eventBeforeDbClick, me);
            if (false === flag || "false" === flag) {
                return;
            }
            //只针对单选可编辑
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                if (!$(e.target).hasClass(treeNodeCCTextClass)) {
                    e.data.textEl = $(e.target);
                }
                me._doEditNode(e, me.options.isDbClickEdit);
                if (false === me.options.isDbClickEdit || "false" === me.options.isDbClickEdit) {
                    if (!node[KEY_LEAF] && expandEl) {
                        expanded = expandEl.hasClass(treeExpandedClass);
                        me._doExpanded(expandEl, node, expanded);
                    }
                }
                me._triggerHandler($.objClone(node), eventDbClick, me);
                return;
            }
            //如果为多选,选中时则展开子节点;如果为单选且为非叶子节点,则双击时切换展开与折叠
            if (checkedEl) {
                checked = !checkedEl.hasClass(treeFullCheckedClass);
                me._doChecked(node, checked, true);
            } else {
                if (!node[KEY_LEAF] && expandEl) {
                    expanded = expandEl.hasClass(treeExpandedClass);
                    me._doExpanded(expandEl, node, expanded);
                }
            }
            me._triggerHandler($.objClone(node), eventDbClick, me);
        },
        /**
         * @private
         * @description 节点单击事件处理
         * @param {Object} e 事件对象
         */
        _onNodeClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                node = e.data.node,
                checked,
                expanded;
            if (me.options.disabled) {
                return;
            }
            switch (self.attr(ATTR_NAME)) {
                case EVENTTYPE_EXPANDED:
                    expanded = self.hasClass(treeExpandedClass);
                    me._doExpanded(self, node, expanded);
                    break;
                case EVENTTYPE_CHECKED:
                    checked = !self.hasClass(treeFullCheckedClass);
                    me._doChecked(node, checked, true);
                    break;
                default:
                    me._doSelected(node);
                    me._triggerHandler($.objClone(node), eventClick, me);
                    return;
            }
        },
        /**
         * @private
         * @description 节点check处理
         * @param {Object} node 当前操作的节点
         * @param {Boolean} checked 是否选中
         * @param {Boolean} isExpanded 选中时是否展开子节点
         */
        _doChecked: function(node, checked, isExpanded) {
            var me = this,
                expandedEL,
                allChildrenArray = node[KEY_ALLCHILDREN],
                tNode,
                flag,
                maxWidth;
            if (me.options.disabled) {
                return;
            }
            flag = me._triggerHandler({
                node: $.objClone(node),
                checked: checked
            }, eventBeforeCheckChange, me);
            if (false === flag || "false" === flag) {
                return;
            }
            //叶子节点处理
            if (node[KEY_LEAF] || !allChildrenArray || allChildrenArray.length <= 0) {
                me._doLeafChecked(node, checked);
                me._triggerHandler({
                    node: $.objClone(node),
                    checked: checked
                }, eventCheckChange, me);
                return;
            }
            if (checked) {
                node[KEY_HIDDEN] = false;
                //设置选中状态
                me._checked(node, CHECKED_STATE_FULLCHECKED);
                //如果不是叶子节点,则将展开图标置为收起
                if (isExpanded) {
                    expandedEL = node[KEY_EL][KEY_EXPANDED];
                    if (expandedEL) {
                        node[KEY_EXPANDED] = true;
                        expandedEL.removeClass(treeCollapsedClass);
                        expandedEL.addClass(treeExpandedClass);
                    }
                    for (var i = 0; i < allChildrenArray.length; i++) {
                        tNode = me.optObjDatas[allChildrenArray[i]];
                        //设置选中状态
                        me._checked(tNode, CHECKED_STATE_FULLCHECKED);
                        //如果不是叶子节点,则将展开图标置为收起
                        expandedEL = tNode[KEY_EL][KEY_EXPANDED];
                        if (expandedEL) {
                            tNode[KEY_EXPANDED] = true;
                            expandedEL.removeClass(treeCollapsedClass);
                            expandedEL.addClass(treeExpandedClass);
                        }
                        tNode[KEY_HIDDEN] = false;
                        if (tNode[KEY_EL] && tNode[KEY_EL][KEY_LI]) {
                            tNode[KEY_EL][KEY_LI].show();
                        }
                    }
                } else {
                    for (var i = 0; i < allChildrenArray.length; i++) {
                        tNode = me.optObjDatas[allChildrenArray[i]];
                        //设置选中状态
                        me._checked(tNode, CHECKED_STATE_FULLCHECKED);
                    }
                }
            } else {
                //取消选中状态
                me._checked(node, CHECKED_STATE_UNCHECKED);
                node[KEY_HIDDEN] = false;
                for (var i = 0; i < allChildrenArray.length; i++) {
                    tNode = me.optObjDatas[allChildrenArray[i]];
                    //取消选中状态
                    me._checked(tNode, CHECKED_STATE_UNCHECKED);
                }
            }
            //逐层上报更新父节点状态
            me._doUpdatePNodeChecked(node);
            maxWidth = me._getLiMaxWidth(me.treeUL);
            me._setElWidth(me.treeUL, maxWidth);
            me._triggerHandler({
                node: $.objClone(node),
                checked: checked
            }, eventCheckChange, me);
        },
        /**
         * @private
         * @description 单选时节点选中处理
         * @param {Object} node 当前操作的节点
         */
        _doSelected: function(node) {
            var me = this,
                oldLiEl,
                liEl;
            if (me.options.multi) {
                return;
            }
            //如果可编辑,则非叶子节点也增加selected样式
            if (node) {
                if (!me.options.isParentNodeSelect && !node[KEY_LEAF] && !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                    return;
                }
            }
            if (!$.isEmptyObject(me.selectedDatas)) {
                for (var key in me.selectedDatas) {
                    if (me.selectedDatas[key][KEY_EL] && me.selectedDatas[key][KEY_EL][KEY_LI]) {
                        oldLiEl = me.selectedDatas[key][KEY_EL][KEY_LI];
                        oldLiEl.removeClass(treenodeSelectClass);
                    }
                }
            }
            me.selectedDatas = {};
            if (!$.isEmptyObject(node)) {
                me.selectedDatas[node[KEY_PATH]] = node;
                if (node[KEY_EL] && node[KEY_EL][KEY_LI]) {
                    liEl = node[KEY_EL][KEY_LI];
                    liEl.addClass(treenodeSelectClass);
                }
            }
            me._triggerHandler($.objClone(node), eventSelected, me);
        },
        /**
         * @private
         * @description 节点check样式处理
         * @param {Object} node 当前node对象
         * @param {Number} checked 选中状态枚举
         */
        _checked: function(node, checked) {
            var me = this,
                el = null;
            if (!node) {
                return;
            }
            el = node[KEY_EL][KEY_CHECKED];
            node[KEY_CHECKED] = checked;
            switch (checked) {
                case CHECKED_STATE_UNCHECKED:
                    delete me.selectedDatas[node[KEY_PATH]];
                    //未选中状态
                    el.removeClass(treeFullCheckedClass);
                    el.removeClass(treeCheckedClass);
                    el.addClass(treeUnCheckedClass);
                    break;
                case CHECKED_STATE_CHECKED:
                    delete me.selectedDatas[node[KEY_PATH]];
                    //半选中状态
                    el.removeClass(treeUnCheckedClass);
                    el.removeClass(treeFullCheckedClass);
                    el.addClass(treeCheckedClass);
                    break;
                case CHECKED_STATE_FULLCHECKED:
                    if (node[KEY_LEAF]) {
                        me.selectedDatas[node[KEY_PATH]] = node;
                    }
                    //全选中状态
                    el.removeClass(treeUnCheckedClass);
                    el.removeClass(treeCheckedClass);
                    el.addClass(treeFullCheckedClass);
                    break;
                default:
                    return;
            }
        },
        /**
         * @private
         * @description 叶子节点check处理
         * @param {Object} node 当前操作的节点
         * @param {Boolean} checked 是否选中
         */
        _doLeafChecked: function(node, checked) {
            var me = this;
            if (checked) {
                //设置选中状态
                me._checked(node, CHECKED_STATE_FULLCHECKED);
                node[KEY_HIDDEN] = false;
            } else {
                //取消选中状态
                me._checked(node, CHECKED_STATE_UNCHECKED);
            }
            me._doUpdatePNodeChecked(node);
        },
        /**
         * @private
         * @description 更新父层级节点checked
         * @param {Object} node 当前操作的节点
         */
        _doUpdatePNodeChecked: function(node) {
            var me = this,
                checked = false,
                isFullchecked = true,
                pNode,
                tNode,
                cCount;
            //顶级节点不做处理
            pNode = me.optObjDatas[node[KEY_PARENTPATH]];
            if (!pNode) {
                return;
            }
            cCount = pNode[KEY_ALLCHILDREN].length;
            for (var i = 0; i < cCount; i++) {
                tNode = me.optObjDatas[pNode[KEY_ALLCHILDREN][i]];
                if (CHECKED_STATE_FULLCHECKED == tNode[KEY_CHECKED]) {
                    checked = true;
                } else {
                    isFullchecked = false;
                }
            }
            if (isFullchecked) {
                //设置全选状态
                me._checked(pNode, CHECKED_STATE_FULLCHECKED);
            } else {
                if (checked) {
                    //设置半选状态
                    me._checked(pNode, CHECKED_STATE_CHECKED);
                } else {
                    //取消选中状态
                    me._checked(pNode, CHECKED_STATE_UNCHECKED);
                }
            }
            //逐层上报更新父节点状态
            me._doUpdatePNodeChecked(pNode);
        },
        /**
         * @private
         * @description 从此节点逐层上报展开处理
         * @param {Object} node 当前操作的节点
         */
        _doBubbleExpanded: function(node) {
            var me = this,
                tNode,
                expandedEL,
                el,
                maxWidth = 0,
                isEdit = false;
            if (me.options.disabled) {
                return;
            }
            if (!node) {
                return;
            }
            //上报让每层父节点展开
            me.bubble(node, function(_node, _pNode) {
                _pNode[KEY_EXPANDED] = true;
                _pNode[KEY_HIDDEN] = false;
                if (_pNode[KEY_EL]) {
                    expandedEL = _pNode[KEY_EL][KEY_EXPANDED];
                    el = _pNode[KEY_EL][KEY_LI];
                    if (expandedEL) {
                        expandedEL.removeClass(treeCollapsedClass);
                        expandedEL.addClass(treeExpandedClass);
                    }
                    if (el) {
                        el.show();
                    }
                }
                //展开子节点
                for (var i = 0; i < _pNode[KEY_CHILDREN].length; i++) {
                    tNode = me.optObjDatas[_pNode[KEY_CHILDREN][i]];
                    tNode[KEY_HIDDEN] = false;
                    if (tNode[KEY_EL] && tNode[KEY_EL][KEY_LI]) {
                        tNode[KEY_EL][KEY_LI].show();
                    }
                }
            });
            if (!me.isRenderAll) {
                me.optShowDatas = me._getShowDatas(me.optListDatas, me.optObjDatas);
                me.treeUL.height(me.optShowDatas.length * me.liHeight);
                me._doTriggerScrollEvent();
            }
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                isEdit = true;
            }
            maxWidth = me._getLiMaxWidth(me.treeUL, isEdit);
            //设置LI宽
            me._setElWidth(me.treeUL, maxWidth, isEdit);
        },
        /**
         * @private
         * @description 节点展开折叠处理
         * @param {Object} el 当前li对象
         * @param {Object} node 当前操作的节点
         * @param {Boolean} expanded 当前操作的节点
         */
        _doExpanded: function(el, node, expanded) {
            var me = this,
                tNode,
                expandedEL,
                childrenArray = node[KEY_CHILDREN],
                allChildrenArray = node[KEY_ALLCHILDREN],
                maxWidth = 0,
                flag,
                eventName,
                isEdit = false;
            if (me.options.disabled) {
                return;
            }
            if (expanded) {
                eventName = eventCollapse;
                flag = me._triggerHandler($.objClone(node), eventBeforeCollapse, me);
                if (false === flag || "false" === flag) {
                    return;
                }
                node[KEY_EXPANDED] = false;
                //收起时将其下所有子节点隐藏
                el.removeClass(treeExpandedClass);
                el.addClass(treeCollapsedClass);
                for (var i = 0; i < allChildrenArray.length; i++) {
                    tNode = me.optObjDatas[allChildrenArray[i]];
                    if (!tNode) {
                        continue;
                    }
                    //如果不是叶子节点,则将展开图标置为收起
                    expandedEL = tNode[KEY_EL][KEY_EXPANDED];
                    if (expandedEL) {
                        tNode[KEY_EXPANDED] = false;
                        expandedEL.removeClass(treeExpandedClass);
                        expandedEL.addClass(treeCollapsedClass);
                    }
                    tNode[KEY_HIDDEN] = true;
                    if (tNode[KEY_EL] && tNode[KEY_EL][KEY_LI]) {
                        tNode[KEY_EL][KEY_LI].hide();
                    }
                }
            } else {
                eventName = eventExpand;
                flag = me._triggerHandler($.objClone(node), eventBeforeExpand, me);
                if (false === flag || "false" === flag) {
                    return;
                }
                node[KEY_EXPANDED] = true;
                //展开时显示子层级节点
                el.removeClass(treeCollapsedClass);
                el.addClass(treeExpandedClass);
                for (var i = 0; i < childrenArray.length; i++) {
                    tNode = me.optObjDatas[childrenArray[i]];
                    tNode[KEY_HIDDEN] = false;
                    if (tNode[KEY_EL] && tNode[KEY_EL][KEY_LI]) {
                        tNode[KEY_EL][KEY_LI].show();
                    }
                }
            }
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                isEdit = true;
            }
            maxWidth = me._getLiMaxWidth(me.treeUL, isEdit);
            //设置LI宽
            me._setElWidth(me.treeUL, maxWidth, isEdit);
            me._triggerHandler($.objClone(node), eventName, me);
        },
        /**
         * @private
         * @description 删除所有节点
         */
        _removeAllNodeList: function() {
            var me = this;
            // 删除dom节点
            if (me.treeUL) {
                me.treeUL.children().remove();
            }
        },
        /**
         * @private
         * @description 重置tree设置的条件
         */
        _reset: function() {
            var me = this;
            // 选中数据
            me.selectedDatas = {};
        },
        /**
         * @description 将树型数据转换成一份列表型数据和一份对象数据;列表数据用于渲染,对象数据用于操作,其中记录了此节点信息
         * @param {Object} datas 原始树型数据,调用此函数时需要复制一份
         * @param {Array} listDatas 存储列表型数据
         * @param {Object} objDatas 存储对象型数据
         * @param {String} path 节点路径,root为""
         * @param {Boolean} pHidden 父节点是否显示,root显示
         * @param {Number} depth 节点深度,root为null,第一层级为0
         * @param {Object} selectedDatas 存储选中的节点
         */
        parseDatas: function(datas, listDatas, objDatas, path, pHidden, depth, selectedDatas) {
            var me = this,
                childrens,
                tPath,
                tDepth,
                tempObj,
                isChildrensShow = false,
                allChildrensPath = [],
                childrensPath = [],
                flag = false;
            if (!datas) {
                return;
            }
            // 对象转换为数组
            if (!$.isArray(datas)) {
                datas = [datas];
            }
            if (datas.length <= 0) {
                return;
            }
            datas[datas.length - 1][KEY_ISLAST] = true;
            for (var i = 0; i < datas.length; i++) {
                //每个节点记录其父节点path,如果为第一层则无parentPath
                if (path && "" != path) {
                    datas[i][KEY_PARENTPATH] = path;
                }
                //拼接当前节点path
                tPath = path + pathConnectSymbol + datas[i][KEY_VALUE];
                tDepth = depth;
                //当前深度,第一层为0
                if (!tDepth) {
                    pHidden = false;
                    tPath = datas[i][KEY_VALUE];
                    tDepth = 0;
                    isChildrensShow = true;
                    objDatas[tPath] = datas[i];
                    //默认第一层节点数据为show
                    objDatas[tPath][KEY_HIDDEN] = false;
                } else {
                    objDatas[tPath] = datas[i];
                    //如果父层级展开,则子层级节点显示
                    if (objDatas[path] && (true === objDatas[path][KEY_EXPANDED] || "true" === objDatas[path][KEY_EXPANDED])) {
                        isChildrensShow = true;
                    } else {
                        //一个层级只执行一次
                        if (!flag) {
                            //如果父层级显示且其子层级中有展开的节点,则此层所有的节点都显示
                            for (var j = 0; j < datas.length; j++) {
                                if (true === datas[j][KEY_EXPANDED] || "true" === datas[j][KEY_EXPANDED]) {
                                    isChildrensShow = true;
                                    break;
                                }
                            }
                            flag = true;
                        }
                    }
                    //节点是否显示
                    if (!pHidden && isChildrensShow) {
                        objDatas[tPath][KEY_HIDDEN] = false;
                    } else {
                        objDatas[tPath][KEY_HIDDEN] = true;
                    }
                }
                //记录深度
                objDatas[tPath][KEY_DEPTH] = tDepth;
                childrens = datas[i][KEY_CHILDREN];
                delete datas[i][KEY_CHILDREN];
                datas[i][KEY_PATH] = tPath;
                if (undefined === datas[i][KEY_QTIP] || null === datas[i][KEY_QTIP]) {
                    datas[i][KEY_QTIP] = datas[i][KEY_TEXT];
                }
                tempObj = {};
                tempObj[KEY_PATH] = tPath;
                //加入渲染数组中
                if (listDatas) {
                    listDatas.push(tempObj);
                }
                if ((CHECKED_STATE_FULLCHECKED == datas[i][KEY_CHECKED] || true == datas[i][KEY_CHECKED] || "true" == datas[i][KEY_CHECKED]) && selectedDatas) {
                    delete datas[i][KEY_CHECKED];
                    selectedDatas[tPath] = "";
                } else {
                    delete datas[i][KEY_CHECKED];
                }
                //如果childrens为空数组,则也认为一个有效的父节点
                if (childrens) {
                    datas[i][KEY_LEAF] = false;
                    //递归取到所有子节点的path
                    allChildrensPath = [];
                    me._getChildrensPath(childrens, datas[i][KEY_PATH], allChildrensPath);
                    datas[i][KEY_ALLCHILDREN] = allChildrensPath;
                    //取到其子节点
                    childrensPath = [];
                    for (var k = 0; k < childrens.length; k++) {
                        childrensPath.push(tPath + pathConnectSymbol + childrens[k][KEY_VALUE]);
                    }
                    datas[i][KEY_CHILDREN] = childrensPath;
                    me.parseDatas(childrens, listDatas, objDatas, datas[i][KEY_PATH], objDatas[tPath][KEY_HIDDEN], ++tDepth, selectedDatas);
                } else {
                    if (false == datas[i][KEY_LEAF] || "false" == datas[i][KEY_LEAF]) {
                        datas[i][KEY_LEAF] = false;
                        datas[i][KEY_LOADED] = false;
                    } else {
                        datas[i][KEY_LEAF] = true;
                    }
                }
            }
        },
        /**
         * @description 获取某节点下所有子节点path, 存储到childrensPath中
         * @param {Object} datas 节点
         * @param {String} path 节点路径
         * @param {Array} childrensPath 存储所有子节点path
         */
        _getChildrensPath: function(datas, path, childrensPath) {
            var me = this,
                tPath,
                childrens;
            if (!datas || datas.length <= 0) {
                return;
            }
            for (var i = 0; i < datas.length; i++) {
                tPath = path + pathConnectSymbol + datas[i][KEY_VALUE];
                datas[i][KEY_PATH] = tPath;
                childrensPath.push(tPath);
                childrens = datas[i][KEY_CHILDREN];
                if (childrens && childrens.length > 0) {
                    me._getChildrensPath(childrens, datas[i][KEY_PATH], childrensPath);
                }
            }
        },
        /**
         * @private
         * @description 从列表数据里筛选出显示的数据
         * @param {Array} listDatas 列表数据
         * @param {Object} objDatas 节点对象数据
         * @returns {Array} result 执行的结果
         */
        _getShowDatas: function(listDatas, objDatas) {
            var result = [],
                showArray = [],
                tempObj;
            if (!listDatas || listDatas.length <= 0) {
                return result;
            }
            //取出显示的节点
            for (var i = 0; i < listDatas.length; i++) {
                tempObj = objDatas[listDatas[i][KEY_PATH]];
                if (tempObj && !tempObj[KEY_HIDDEN]) {
                    showArray.push(tempObj);
                }
            }
            return showArray;
        },
        /**
         * @description 将list型数据还原成树型数据,存储到result中
         * @param {Object} selectedDatas 底层叶子节点数据, 调用前需要复制一份
         * @param {Object} objDatas 存储节点对象的数据, 调用前需要复制一份
         * @param {Array} keyArray 要取数据的node属性
         * @param {Array} result 转化后的数据
         * @returns {Array} result 执行的结果
         */
        parseTreeDatas: function(selectedDatas, objDatas, keyArray, result) {
            var me = this,
                tempObj,
                tListObj = {},
                tListNode,
                pPath,
                tResult,
                isBubble = false,
                node,
                tNode,
                tPNode;
            for (var key in selectedDatas) {
                tNode = {};
                tPNode = {};
                node = selectedDatas[key];
                if (!node) {
                    continue;
                }
                //如果节点不存在,则不处理,像延迟加载过滤数据时
                if (!objDatas[node[KEY_PATH]]) {
                    continue;
                }
                pPath = node[KEY_PARENTPATH];
                tempObj = objDatas[pPath];
                //如果有父节点
                if (tempObj) {
                    isBubble = true;
                    tListNode = tListObj[node[KEY_PATH]];
                    if (tListNode) {
                        if (node[KEY_CHILDREN] && tListNode[KEY_CHILDREN]) {
                            tListNode[KEY_CHILDREN] = tListNode[KEY_CHILDREN].concat(node[KEY_CHILDREN]);
                        } else if (node[KEY_CHILDREN] && !tListNode[KEY_CHILDREN]) {
                            tListNode[KEY_CHILDREN] = node[KEY_CHILDREN];
                        }
                        continue;
                    }
                    //将需要的属性值复制到预先创建的node中
                    for (var k = 0; k < keyArray.length; k++) {
                        tNode[keyArray[k]] = node[keyArray[k]];
                    }
                    if (node[KEY_CHILDREN]) {
                        tNode[KEY_CHILDREN] = node[KEY_CHILDREN];
                    }
                    if (!tListObj[pPath]) {
                        for (var k = 0; k < keyArray.length; k++) {
                            tPNode[keyArray[k]] = tempObj[keyArray[k]];
                        }
                        tPNode[KEY_PATH] = tempObj[KEY_PATH];
                        tPNode[KEY_PARENTPATH] = tempObj[KEY_PARENTPATH];
                        tListObj[pPath] = tPNode;
                        tListObj[pPath][KEY_CHILDREN] = [];
                    }
                    tListObj[pPath][KEY_CHILDREN].push(tNode);
                } else {
                    if (tListObj[node[KEY_PATH]]) {
                        tListObj[node[KEY_PATH]][KEY_CHILDREN] = tListObj[node[KEY_PATH]][KEY_CHILDREN].concat(node[KEY_CHILDREN]);
                    } else {
                        tListObj[node[KEY_PATH]] = node;
                    }
                }
            }
            if (isBubble) {
                me.parseTreeDatas(tListObj, objDatas, keyArray, result);
            } else {
                tResult = [];
                //删除没用的属性数据
                for (var key in tListObj) {
                    tNode = {};
                    //将需要的属性值复制到预先创建的node中
                    for (var k = 0; k < keyArray.length; k++) {
                        tNode[keyArray[k]] = tListObj[key][keyArray[k]];
                    }
                    if (tListObj[key][KEY_CHILDREN]) {
                        tNode[KEY_CHILDREN] = tListObj[key][KEY_CHILDREN];
                    }
                    tResult.push(tNode);
                }
                return result["data"] = tResult;
            }
        },
        /**
         * @private
         * @description 初始化数据,将原始数据转成一份列表型数据,转成一份对象型数据,遍历时提取出选中的数据
         * @param {Array} data 原始数据
         */
        _initData: function(data) {
            var me = this,
                selectedDatas = {};
            me.selectedDatas = {};
            me.objDatas = {};
            me.listDatas = [];
            //将树型数据转换成一份列表型数据(存储path),一份path对象数据
            me.parseDatas($.objClone(data), me.listDatas, me.objDatas, "", false, null, selectedDatas);
            me.optListDatas = $.objClone(me.listDatas);
            me.optObjDatas = $.objClone(me.objDatas);
            if (!me.options.multi) {
                for (var key in selectedDatas) {
                    me.selectedDatas[key] = me.optObjDatas[key];
                    break;
                }
            } else {
                for (var key in selectedDatas) {
                    me.selectedDatas[key] = me.optObjDatas[key];
                }
            }
            me.selectedDatas = me._getLeafSelectedDatas(me.selectedDatas);
            // 滚动条事件处理
            if (me.listDatas.length <= LIMIT_COUNT && !me.options.loader) {
                me.isRenderAll = true;
            } else {
                me.isRenderAll = false;
            }
        },
        /**
         * @private
         * @description 逐层上报筛选所有父节点中是最一个节点的节点,存储到result
         * @param {Object} node 当前节点的数据
         * @param {Object} objDatas 原始节点的对象数据
         * @param {Object} result 返回的结果,调用时传入{}
         * @return {Object} result 以节点的深度为key,值为此节点 {depth: node1, ...}
         */
        _getPLastNode: function(node, objDatas, result) {
            var me = this;
            if (node && node[KEY_PARENTPATH]) {
                if (objDatas[node[KEY_PARENTPATH]][KEY_ISLAST]) {
                    result[objDatas[node[KEY_PARENTPATH]][KEY_DEPTH]] = objDatas[node[KEY_PARENTPATH]];
                }
                me._getPLastNode(objDatas[node[KEY_PARENTPATH]], objDatas, result);
            } else {
                return;
            }
        },
        /**
         * @description 将选中的节点全部转换成选中的叶子节点数据
         * @param {Object} selectedDatas 选中的节点数据
         * @returns {Array} result 执行的结果
         */
        _getLeafSelectedDatas: function(selectedDatas) {
            var me = this,
                node,
                result = {};
            if ($.isEmptyObject(selectedDatas)) {
                return result;
            }
            for (var key in selectedDatas) {
                node = selectedDatas[key];
                node[KEY_CHECKED] = CHECKED_STATE_FULLCHECKED;
                if (node[KEY_LEAF]) {
                    result[key] = node;
                } else {
                    if (node[KEY_ALLCHILDREN]) {
                        for (var i = 0; i < node[KEY_ALLCHILDREN].length; i++) {
                            if (node[KEY_ALLCHILDREN][i][KEY_LEAF]) {
                                result[node[KEY_ALLCHILDREN][i][KEY_PATH]] = node[KEY_ALLCHILDREN][i];
                            }
                        }
                    }
                }
            }
            me._bubbleUpdateNodeChecked(result);
            return result;
        },
        /**
         * @private
         * @description 上报更新父node
         * @param {Object} node 当前操作的节点
         * @param {Object} nodeObj 存储待更新的节点
         */
        _getUpdateNode: function(node, nodeObj) {
            var me = this,
                checked = false,
                isFullchecked = true,
                pNode,
                tNode,
                cCount;
            nodeObj[node[KEY_PATH]] = node;
            //顶级节点不做处理
            pNode = me.optObjDatas[node[KEY_PARENTPATH]];
            if (!pNode) {
                return;
            }
            cCount = pNode[KEY_ALLCHILDREN].length;
            for (var i = 0; i < cCount; i++) {
                tNode = me.optObjDatas[pNode[KEY_ALLCHILDREN][i]];
                if (CHECKED_STATE_FULLCHECKED == tNode[KEY_CHECKED]) {
                    checked = true;
                } else {
                    isFullchecked = false;
                }
            }
            if (isFullchecked) {
                //设置全选状态
                pNode[KEY_CHECKED] = CHECKED_STATE_FULLCHECKED;
            } else {
                if (checked) {
                    //设置半选状态
                    pNode[KEY_CHECKED] = CHECKED_STATE_CHECKED;
                } else {
                    //取消选中状态
                    pNode[KEY_CHECKED] = CHECKED_STATE_UNCHECKED;
                }
            }
            //逐层上报更新父节点状态
            me._getUpdateNode(pNode, nodeObj);
        },
        /**
         * @private
         * @description 滚动加载时上报更新父node
         * @param {Object} nodes 当前操作的节点,均为叶子节点
         */
        _bubbleUpdateNodeChecked: function(nodes) {
            var me = this,
                tempDatas = {},
                nodeObj = {},
                isContinue = false;
            if ($.isEmptyObject(nodes)) {
                return;
            }
            for (var key in nodes) {
                if (nodes[key][KEY_PARENTPATH]) {
                    isContinue = true;
                    if (CHECKED_STATE_FULLCHECKED == nodes[key][KEY_CHECKED]) {
                        if (nodeObj[nodes[key][KEY_PARENTPATH]]) {
                            nodeObj[nodes[key][KEY_PARENTPATH]]["sCount"]++;
                        } else {
                            nodeObj[nodes[key][KEY_PARENTPATH]] = {};
                            nodeObj[nodes[key][KEY_PARENTPATH]]["sCount"] = 1;
                        }
                        nodeObj[nodes[key][KEY_PARENTPATH]]["checked"] = true;
                    }
                    if (CHECKED_STATE_CHECKED == nodes[key][KEY_CHECKED]) {
                        if (!nodeObj[nodes[key][KEY_PARENTPATH]]) {
                            nodeObj[nodes[key][KEY_PARENTPATH]] = {};
                        }
                        nodeObj[nodes[key][KEY_PARENTPATH]]["checked"] = true;
                    }
                }
            }
            for (var key in nodeObj) {
                me.optObjDatas[key][KEY_CHECKED] = CHECKED_STATE_UNCHECKED;
                if (nodeObj[key]["checked"]) {
                    me.optObjDatas[key][KEY_CHECKED] = CHECKED_STATE_CHECKED;
                }
                if (nodeObj[key]["sCount"] >= me.optObjDatas[key][KEY_CHILDREN].length) {
                    me.optObjDatas[key][KEY_CHECKED] = CHECKED_STATE_FULLCHECKED;
                    nodeObj[key][KEY_CHECKED] = CHECKED_STATE_FULLCHECKED;
                }
                tempDatas[key] = me.optObjDatas[key];
            }
            if (!isContinue) {
                return;
            }
            //逐层上报更新父节点状态
            me._bubbleUpdateNodeChecked(tempDatas);
        },
        /**
         * @private
         * @description 销毁表格组件
         */
        _destroyWidget: function() {
            var me = this,
                _editMenuEl;
            if (me._editMenu) {
                me._editMenu.destroy();
            }
            _editMenuEl = $("#" + me._editMenuId);
            if (_editMenuEl) {
                _editMenuEl.remove();
            }
            if (me.treeEl) {
                me.treeEl.remove();
            }
        },
        /**
         * @private
         * @description 设置文本的宽
         * @param {Object} treeUL 树面板
         * @param {Number} maxWidth 最大宽度
         * @param {Boolean} isEdit 是否为编辑
         */
        _setElWidth: function(treeUL, maxWidth, isEdit) {
            var tempWidth = 0,
                liDoms,
                tEl,
                textEl;
            if (!treeUL) {
                return;
            }
            //拿到本次渲染的LI,设置宽度
            liDoms = treeUL.find("li");
            if (!isEdit) {
                for (var k = 0; k < liDoms.length; k++) {
                    $(liDoms[k]).width(maxWidth);
                }
                return;
            }
            //计算最大宽度
            for (var k = 0; k < liDoms.length; k++) {
                $(liDoms[k]).width(maxWidth);
                if ("none" == $(liDoms[k]).css("display")) {
                    continue;
                }
                tEl = $(liDoms[k]).children();
                tempWidth = 0;
                for (var t = 0; t < tEl.length; t++) {
                    if ($(tEl[t]).hasClass(treeNodeTextClass)) {
                        textEl = $(tEl[t]);
                    } else {
                        if ("none" != $(tEl[t]).css("display")) {
                            tempWidth += $(tEl[t]).externalWidth();
                        }
                    }
                }
                if (textEl) {
                    textEl.width(maxWidth - tempWidth);
                }
            }
        },
        /**
         * @private
         * @description 获取区域中li最宽的宽度
         * @param {Object} treeUL 树面板
         * @param {Boolean} isEdit 是否为编辑
         * @return {Number} maxWidth 最大宽度
         */
        _getLiMaxWidth: function(treeUL, isEdit) {
            var me = this,
                maxWidth = 0,
                tempWidth = 0,
                paddingWidth = 5,
                liDoms,
                tEl;
            if (!treeUL) {
                return maxWidth;
            }
            liDoms = treeUL.find("li");
            if (isEdit) {
                treeUL.find("li ." + treeNodeTextClass).width("");
            }
            //计算最大宽度
            for (var k = 0; k < liDoms.length; k++) {
                if ("none" == $(liDoms[k]).css("display")) {
                    continue;
                }
                tEl = $(liDoms[k]).children();
                tempWidth = 0;
                for (var t = 0; t < tEl.length; t++) {
                    if ("none" != $(tEl[t]).css("display")) {
                        tempWidth += $(tEl[t]).externalWidth();
                    }
                }
                if (tempWidth > maxWidth) {
                    maxWidth = tempWidth;
                }
            }
            // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
            if (me.treeBodyDiv[0].clientWidth >= maxWidth) {
                maxWidth = me.treeBodyDiv[0].clientWidth - paddingWidth;
            }
            return maxWidth;
        },
        /**
         * @private
         * @description 获取当前的数据
         * @return {Array} datas 当前的数据
         */
        getCurrentObjData: function() {
            var me = this;
            return $.objClone(me.objDatas);
        },
        /**
         * @private
         * @description 获取当前操作的数据
         * @return {Array} datas 当前操作的数据
         */
        getCurrentOptObjData: function() {
            var me = this;
            return $.objClone(me.optObjDatas);
        },
        /**
         * @private
         * @description 编辑时,获取所有选中的节点
         * @return {Object} node 节点
         */
        getSelectedDatas: function() {
            var me = this;
            if ($.isEmptyObject(me.selectedDatas)) {
                return null;
            }
            return $.objClone(me.selectedDatas);
        },
        /**
         * @private
         * @description 编辑时,获取当前选中的节点
         * @return {Object} node 节点
         */
        getSelected: function() {
            var me = this;
            if ($.isEmptyObject(me.selectedDatas)) {
                return null;
            }
            for (var key in me.selectedDatas) {
                return $.objClone(me.selectedDatas[key]);
            }
        },
        /**
         * @private
         * @description 给指定节点中插入子节点
         * @param {Object} node 待添加节点信息
         * @param {Object} pNode 父节点信息
         */
        appendChild: function(node, pNode) {
            var me = this;
            if (me.options.multi || !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                return;
            }
            if ($.isEmptyObject(node) || $.isEmptyObject(pNode)) {
                return;
            }
            //由于pNode信息可能不全,需要通过path从操作数据中查找一份
            pNode = me.optObjDatas[pNode[KEY_PATH]];
            me._doAddNode(node, pNode);
        },
        /**
         * @private
         * @description 给指定节点之后插入子节点
         * @param {Object} node1 待添加节点信息
         * @param {Object} node2 在此节点之后添加
         */
        insertAfter: function(node1, node2) {
            var me = this,
                pNode,
                _tempLastNdoe,
                _tempChildren,
                _tempAllChildren,
                isLeaf,
                cLiEl,
                text,
                cTextEl,
                maxWidth,
                depth = 0,
                _listDatas = [],
                lineClass = treeNodeMinusLineClass,
                _treeNodeTextClass = "";
            if (me.options.multi || !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                return;
            }
            if ($.isEmptyObject(node1)) {
                return;
            }
            if (node2) {
                node2 = me.optObjDatas[node2[KEY_PATH]];
                pNode = me.optObjDatas[node2[KEY_PARENTPATH]];
            }
            if (!pNode || $.isEmptyObject(node2)) {
                node1[KEY_DEPTH] = depth;
                node1[KEY_HIDDEN] = false;
                node1[KEY_LEAF] = true;
                node1[KEY_QTIP] = node1[KEY_TEXT];
                node1[KEY_PATH] = node1[KEY_VALUE];
                me._doAddRootNode(node1, node2);
                return;
            }
            //由于node2信息可能不全,需要通过path从操作数据中查找一份
            node2 = me.optObjDatas[node2[KEY_PATH]];
            isLeaf = node2[KEY_LEAF];
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                _treeNodeTextClass = treeNodeTextClass;
            }
            depth = node2[KEY_DEPTH];
            node1[KEY_DEPTH] = depth;
            node1[KEY_HIDDEN] = false;
            node1[KEY_LEAF] = true;
            node1[KEY_QTIP] = node1[KEY_TEXT];
            node1[KEY_PATH] = node2[KEY_PARENTPATH] + pathConnectSymbol + node1[KEY_VALUE];
            node1[KEY_PARENTPATH] = node2[KEY_PARENTPATH];
            cLiEl = $("<li>").addClass(treeNodeClass);
            for (var j = 0; j < node1[KEY_DEPTH]; j++) {
                $("<span>").addClass(lineClass).appendTo(cLiEl);
            }
            $("<span>").addClass(treeNodeMinusEblowClass).appendTo(cLiEl);
            //如果显示图标,则加上图标
            if (me.options.icon) {
                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(cLiEl);
            }
            text = $.nullToString(node1[KEY_TEXT]);
            cTextEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(cLiEl);
            // 是否有tip提示
            if (me.options.tip) {
                cTextEl.attr("title", node1[KEY_QTIP]);
            }
            //节点信息中加入此节点下的EL信息,便于后续操作
            node1[KEY_EL] = {};
            node1[KEY_EL][KEY_LI] = cLiEl;
            cTextEl.bind("dblclick", {
                "me": me,
                "node": node1
            }, me._onNodeDbClick);
            //给LI绑上节点信息,注册单击事件
            cLiEl.data(ATTR_NODE, node1).bind("click", {
                "me": me,
                "node": node1,
                "liEl": cLiEl
            }, me._onNodeClick);
            cLiEl.bind("contextmenu", {
                "me": me,
                "node": node1,
                "liEl": cLiEl,
                textEl: cTextEl
            }, me._onNodeMousedown);
            //将新创建的节点加入到当前编辑节点中
            if (isLeaf) {
                _tempLastNdoe = node2;
            } else {
                node2[KEY_ALLCHILDREN] = node2[KEY_ALLCHILDREN] || [];
                if (node2[KEY_ALLCHILDREN].length <= 0) {
                    _tempLastNdoe = node2;
                } else {
                    _tempLastNdoe = me.optObjDatas[node2[KEY_ALLCHILDREN][node2[KEY_ALLCHILDREN].length - 1]];
                }
            }
            _tempChildren = [];
            for (var i = 0; i < pNode[KEY_CHILDREN].length; i++) {
                _tempChildren.push(pNode[KEY_CHILDREN][i]);
                if (_tempLastNdoe[KEY_PATH] == pNode[KEY_CHILDREN][i]) {
                    _tempChildren.push(node1[KEY_PATH]);
                }
            }
            pNode[KEY_CHILDREN] = _tempChildren;
            _tempChildren = [];
            //更新数据
            me.optObjDatas[node1[KEY_PATH]] = node1;
            me.objDatas = me.optObjDatas;
            //将新加的节点加入列表数据中
            for (var i = 0; i < me.optListDatas.length; i++) {
                _listDatas.push(me.optListDatas[i]);
                if (_tempLastNdoe[KEY_PATH] == me.optListDatas[i][KEY_PATH]) {
                    _listDatas.push({
                        path: node1[KEY_PATH]
                    });
                }
            }
            //修改列表数据
            me.optListDatas = _listDatas;
            me.listDatas = me.optListDatas;
            if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node2, function(node, _pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < _pNode[KEY_ALLCHILDREN].length; i++) {
                        _tempAllChildren.push(_pNode[KEY_ALLCHILDREN][i]);
                        if (_tempLastNdoe[KEY_PATH] == _pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(node1[KEY_PATH]);
                        }
                    }
                    _pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                    me._upDateCNodeCount(_pNode);
                });
            } else {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node2, function(node, _pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < _pNode[KEY_ALLCHILDREN].length; i++) {
                        _tempAllChildren.push(_pNode[KEY_ALLCHILDREN][i]);
                        if (_tempLastNdoe[KEY_PATH] == _pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(node1[KEY_PATH]);
                        }
                    }
                    _pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                });
            }
            //将新创建的节点加到后面
            cLiEl.insertAfter(_tempLastNdoe[KEY_EL][KEY_LI]);
            //单选选中样式处理
            me._doSelected(node1);
            //计算最大宽度
            maxWidth = me._getLiMaxWidth(me.treeUL, true);
            me._setElWidth(me.treeUL, maxWidth, true);
        },
        /**
         * @private
         * @description 给指定节点之前插入子节点
         * @param {Object} node1 待添加节点信息
         * @param {Object} node2 在此节点之后添加
         */
        insertBefore: function(node1, node2) {
            var me = this,
                pNode,
                _tempLastNdoe,
                _tempChildren,
                _tempAllChildren,
                cLiEl,
                text,
                cTextEl,
                maxWidth,
                depth = 0,
                _listDatas = [],
                lineClass = treeNodeMinusLineClass,
                _treeNodeTextClass = "";
            if (me.options.multi || !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                return;
            }
            if ($.isEmptyObject(node1)) {
                return;
            }
            if (node2) {
                node2 = me.optObjDatas[node2[KEY_PATH]];
                pNode = me.optObjDatas[node2[KEY_PARENTPATH]];
            }
            if (!pNode || $.isEmptyObject(node2)) {
                node1[KEY_DEPTH] = depth;
                node1[KEY_HIDDEN] = false;
                node1[KEY_LEAF] = true;
                node1[KEY_QTIP] = node1[KEY_TEXT];
                node1[KEY_PATH] = node1[KEY_VALUE];
                me._doAddRootNode(node1, node2, true);
                return;
            }
            //由于node2信息可能不全,需要通过path从操作数据中查找一份
            node2 = me.optObjDatas[node2[KEY_PATH]];
            if (!me.options.multi && (true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                _treeNodeTextClass = treeNodeTextClass;
            }
            depth = node2[KEY_DEPTH];
            node1[KEY_DEPTH] = depth;
            node1[KEY_HIDDEN] = false;
            node1[KEY_LEAF] = true;
            node1[KEY_QTIP] = node1[KEY_TEXT];
            node1[KEY_PATH] = node2[KEY_PARENTPATH] + pathConnectSymbol + node1[KEY_VALUE];
            node1[KEY_PARENTPATH] = node2[KEY_PARENTPATH];
            cLiEl = $("<li>").addClass(treeNodeClass);
            for (var j = 0; j < node1[KEY_DEPTH]; j++) {
                $("<span>").addClass(lineClass).appendTo(cLiEl);
            }
            $("<span>").addClass(treeNodeMinusEblowClass).appendTo(cLiEl);
            //如果显示图标,则加上图标
            if (me.options.icon) {
                $("<span>").addClass(treeLeafNodeIcoClass).appendTo(cLiEl);
            }
            text = $.nullToString(node1[KEY_TEXT]);
            cTextEl = $("<span>").addClass(_treeNodeTextClass).text(text).appendTo(cLiEl);
            // 是否有tip提示
            if (me.options.tip) {
                cTextEl.attr("title", node1[KEY_QTIP]);
            }
            //节点信息中加入此节点下的EL信息,便于后续操作
            node1[KEY_EL] = {};
            node1[KEY_EL][KEY_LI] = cLiEl;
            cTextEl.bind("dblclick", {
                "me": me,
                "node": node1
            }, me._onNodeDbClick);
            //给LI绑上节点信息,注册单击事件
            cLiEl.data(ATTR_NODE, node1).bind("click", {
                "me": me,
                "node": node1,
                "liEl": cLiEl
            }, me._onNodeClick);
            cLiEl.bind("contextmenu", {
                "me": me,
                "node": node1,
                "liEl": cLiEl,
                textEl: cTextEl
            }, me._onNodeMousedown);
            //将新创建的节点加入到当前编辑节点中
            _tempLastNdoe = node2;
            _tempChildren = [];
            for (var i = 0; i < pNode[KEY_CHILDREN].length; i++) {
                if (_tempLastNdoe[KEY_PATH] == pNode[KEY_CHILDREN][i]) {
                    _tempChildren.push(node1[KEY_PATH]);
                }
                _tempChildren.push(pNode[KEY_CHILDREN][i]);
            }
            pNode[KEY_CHILDREN] = _tempChildren;
            _tempChildren = [];
            //更新数据
            me.optObjDatas[node1[KEY_PATH]] = node1;
            me.objDatas = me.optObjDatas;
            //将新加的节点加入列表数据中
            for (var i = 0; i < me.optListDatas.length; i++) {
                if (_tempLastNdoe[KEY_PATH] == me.optListDatas[i][KEY_PATH]) {
                    _listDatas.push({
                        path: node1[KEY_PATH]
                    });
                }
                _listDatas.push(me.optListDatas[i]);
            }
            //修改列表数据
            me.optListDatas = _listDatas;
            me.listDatas = me.optListDatas;
            if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node2, function(node, _pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < _pNode[KEY_ALLCHILDREN].length; i++) {
                        if (_tempLastNdoe[KEY_PATH] == _pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(node1[KEY_PATH]);
                        }
                        _tempAllChildren.push(_pNode[KEY_ALLCHILDREN][i]);
                    }
                    _pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                    me._upDateCNodeCount(_pNode);
                });
            } else {
                //上报让每层父节点的allchildren加入新加的节点
                me.bubble(node2, function(node, _pNode) {
                    _tempAllChildren = [];
                    for (var i = 0; i < _pNode[KEY_ALLCHILDREN].length; i++) {
                        if (_tempLastNdoe[KEY_PATH] == _pNode[KEY_ALLCHILDREN][i]) {
                            _tempAllChildren.push(node1[KEY_PATH]);
                        }
                        _tempAllChildren.push(_pNode[KEY_ALLCHILDREN][i]);
                    }
                    _pNode[KEY_ALLCHILDREN] = _tempAllChildren;
                });
            }
            //将新创建的节点加到后面
            cLiEl.insertBefore(_tempLastNdoe[KEY_EL][KEY_LI]);
            //单选选中样式处理
            me._doSelected(node1);
            //计算最大宽度
            maxWidth = me._getLiMaxWidth(me.treeUL, true);
            me._setElWidth(me.treeUL, maxWidth, true);
        },
        /**
         * @private
         * @description 将指定节点及其子节点删除
         * @param {Object} node 待删除节点信息
         */
        remove: function(node) {
            var me = this;
            if (me.options.multi || !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                return;
            }
            if ($.isEmptyObject(node)) {
                return;
            }
            //由于node信息可能不全,需要通过path从操作数据中查找一份
            node = me.optObjDatas[node[KEY_PATH]];
            me._doDeleteNode(node);
        },
        /**
         * @private
         * @description 重新设置节点信息
         * @param {Object} newNode 新节点信息
         * @param {Object} node 节点信息
         */
        edit: function(newNode, node) {
            var me = this,
                oldText,
                newText,
                textEl,
                flag;
            if (me.options.multi || !(true === me.options.editable || "true" === me.options.editable || $.isArray(me.options.editable))) {
                return;
            }
            if ($.isEmptyObject(newNode) || $.isEmptyObject(node)) {
                return;
            }
            //由于node信息可能不全,需要通过path从操作数据中查找一份
            node = me.optObjDatas[node[KEY_PATH]];
            if (!node[KEY_EL] || !node[KEY_EL][KEY_LI]) {
                return;
            }
            flag = me._triggerHandler({
                newNode: $.objClone(newNode),
                node: $.objClone(node)
            }, eventBeforeEdit, me);
            if (false === flag || "false" === flag) {
                return;
            }
            oldText = node[KEY_TEXT];
            newText = newNode[KEY_TEXT];
            node[KEY_VALUE] = newNode[KEY_VALUE];
            node[KEY_TEXT] = newNode[KEY_TEXT];
            node[KEY_DATA] = newNode[KEY_DATA];
            textEl = node[KEY_EL][KEY_LI].find("." + treeNodeTextClass);
            //修改text值
            if (oldText != newText) {
                flag = me._triggerHandler({
                    text: newText,
                    oldText: oldText
                }, eventBeforeTextChange, me);
                if (false === flag || "false" === flag) {
                    flag = false;
                    newText = oldText;
                } else {
                    flag = true;
                }
            }
            textEl.text(newText);
            if (flag) {
                if (me.optObjDatas[node[KEY_PATH]]) {
                    me.optObjDatas[node[KEY_PATH]][KEY_TEXT] = newText;
                    me.optObjDatas[node[KEY_PATH]][KEY_QTIP] = newText;
                    if (me.options.tip) {
                        if (true == me.options.showCCount || "true" == me.options.showCCount || "leaf" == me.options.showCCount) {
                            me._upDateCNodeCount(me.optObjDatas[node[KEY_PATH]]);
                        } else {
                            textEl.attr("title", newText);
                        }
                    }
                }
                me.objDatas = me.optObjDatas;
                me._triggerHandler({
                    text: newText,
                    oldText: oldText
                }, eventTextChange, me);
            }
            me._triggerHandler($.objClone(node), eventEdit, me);
        },
        /**
         * @private
         * @description 是否为根节点
         * @param {Object} node 节点信息
         * @return {Boolean} isRootNode 是否为根节点
         */
        isRootNode: function(node) {
            var me = this;
            if ($.isEmptyObject(node)) {
                return false;
            }
            //由于node信息可能不全,需要通过path从操作数据中查找一份
            node = me.optObjDatas[node[KEY_PATH]];
            if ($.isEmptyObject(node)) {
                return false;
            }
            if (node[KEY_DEPTH] <= 0) {
                return true;
            }
            return false;
        },
        /**
         * @private
         * @description 获取节点深度,根节点为0,如果节点信息错误则返回-1
         * @param {Object} node 节点信息
         * @return {Number} depth 节点深度
         */
        getNodeDepth: function(node) {
            var me = this;
            if ($.isEmptyObject(node)) {
                return -1;
            }
            //由于node信息可能不全,需要通过path从操作数据中查找一份
            node = me.optObjDatas[node[KEY_PATH]];
            if ($.isEmptyObject(node)) {
                return -1;
            }
            return node[KEY_DEPTH];
        },
        /**
         * @private
         * @description 将数据转成数组
         * @param {Object} data 待转化的数据
         * @return {Object} 转化后的数组[{"text":"1", "value":"1"}, ...]
         */
        _objToArray: function(data) {
            var value = [];
            if (!data) {
                return value;
            }
            // 对象转换为数组
            if ($.isArray(data)) {
                value = data;
            } else {
                if (!$.isUndefined(data.value) && !$.isUndefined(data.text)) {
                    value.push(data);
                }
            }
            return value;
        },
        /**
         * @private
         * @description 加入显示子节点数的DOM
         * @param {Object} node 节点
         * @param {Object} liEl 节点DOM
         * @param {Object} textEl 节点文本DOM
         */
        _addCNodeCount: function(node, liEl, textEl) {
            var me = this,
                nText,
                tipText,
                nTextEl;
            if (!node || !liEl || !textEl) {
                return null;
            }
            nText = "(0)";
            if (true == me.options.showCCount || "true" == me.options.showCCount) {
                if (node[KEY_ALLCHILDREN]) {
                    nText = "(" + node[KEY_ALLCHILDREN].length + ")";
                }
            } else if ("leaf" == me.options.showCCount) {
                nText = "(" + me._getAllLeafChildrenCount(node[KEY_ALLCHILDREN]) + ")";
            }
            nTextEl = $("<span>").addClass(treeNodeCCTextClass).text(nText).appendTo(liEl);
            // 是否有tip提示
            if (me.options.tip) {
                tipText = node[KEY_QTIP] + "&nbsp;&nbsp;" + nText;
                textEl.attr("title", tipText);
                nTextEl.attr("title", tipText);
            }
            return nTextEl;
        },
        /**
         * @private
         * @description 更新节点显示的子节点数
         * @param {Object} node 节点
         */
        _upDateCNodeCount: function(node) {
            var me = this,
                nText,
                tipText,
                nTextEl;
            if (!node || !node[KEY_EL] || !node[KEY_EL][KEY_LI]) {
                return;
            }
            nTextEl = node[KEY_EL][KEY_LI].find("span." + treeNodeCCTextClass);
            if (nTextEl && nTextEl.length > 0) {
                if (true == me.options.showCCount || "true" == me.options.showCCount) {
                    nText = "(" + node[KEY_ALLCHILDREN].length + ")";
                } else if ("leaf" == me.options.showCCount) {
                    nText = "(" + me._getAllLeafChildrenCount(node[KEY_ALLCHILDREN]) + ")";
                }
                nTextEl.text(nText);
            }
            if (me.options.tip) {
                tipText = node[KEY_QTIP];
                if (nText) {
                    tipText = node[KEY_QTIP] + "&nbsp;&nbsp;" + nText;
                }
                if (nTextEl && nTextEl.length > 0) {
                    nTextEl.attr("title", tipText);
                }
                nTextEl = node[KEY_EL][KEY_LI].find("span." + treeNodeTextClass);
                if (nTextEl && nTextEl.length > 0) {
                    nTextEl.attr("title", tipText);
                }
            }
        },
        /**
         * @private
         * @description 通过所有子节点获取其叶子节点的个数
         * @param {Array} allChildren 所有子节点
         * @return {Number} count 叶子节点的个数
         */
        _getAllLeafChildrenCount: function(allChildren) {
            var me = this,
                tNode,
                count = 0;
            if (!allChildren || allChildren.length <= 0 || $.isEmptyObject(me.optObjDatas)) {
                return count;
            }
            for (var i = 0; i < allChildren.length; i++) {
                tNode = me.optObjDatas[allChildren[i]];
                if (tNode && tNode[KEY_LEAF]) {
                    count++;
                }
            }
            return count;
        }
    });
    /**
     * 创建树
     * @name Sweet.tree.Tree_v1
     * @class 
     * @extends Sweet.tree
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.tree.js
     * </pre>
     * @example 
     * <pre>
     *  var data = [
     *           {
     *             value: "value1",
     *             text: "text1",
     *             children: [
     *                 {
     *                     value: "value1-1",
     *                     text: "text1-1",
     *                     children: [
     *                         {
     *                             value: "value1-1-1",
     *                             text: "text1-1-1"
     *                         },
     *                         {
     *                             value: "value1-1-2",
     *                             text: "text1-1-2"
     *                         }
     *                     ]
     *                 },
     *                 {
     *                     value: "value1-2",
     *                     text: "text1-2"
     *                 }
     *             ]
     *         }
     *     ];
     *  sweetTree = new Sweet.tree.Tree_v1({
     *               width : 200,
     *               height : 3000,
     *               multi : true,
     *               data : data,
     *               renderTo :"sweet-tree"
     *           })
     * sweetTree.render("sweet-tree");
     * </pre>
     */
    Sweet.tree.Tree_v1 = $.sweet.widgetTreeTree_v1;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 树形组件
 * 2014.1.13
 * http://www.huawei.com
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($) {

    var defaultStyle = {
        defaultTreeClass: "sweet-optimizetree-panel",
        treenodeClass: "sweet-optimizetree-node",
        treeRootNodeClass: "sweet-optimizetree-root-node-empty",
        treenodeSelectClass: "sweet-optimizetree-node-selected",
        treeParentClass: "sweet-optimizetree-parent",
        treeBGClass: "select_win_bg",
        treeTextClass: "sweet-optimizetree-text-node",
        treeIcoBlockClass: "sweet-optimizetree-ico-empty-block",
        treeEmptyBlockClass: "sweet-optimizetree-empty-block",
        treeExpandClass: "sweet-optimizetree-expand", //展开状态
        treeUnExpandClass: "sweet-optimizetree-coll", //收起状态
        treeFullCheckedClass: "sweet-optimizetree-full-check", //全选中状态
        treeCheckedClass: "sweet-optimizetree-check", //半选中状态
        treeUnCheckedClass: "sweet-optimizetree-uncheck", //未选中状态
        treeSearchClass: "sweet-tree-search-div", //查询栏样式

        treeToolAddClass: "sweet-optimizetree-tool-add",
        treeToolModifyClass: "sweet-optimizetree-tool-modify",
        treeToolDeleteClass: "sweet-optimizetree-tool-delete",

        treeParentNodeIco: "sweet-tree-node-ioc",
        treeLeafNodeIco: "sweet-tree-leaf-ioc",
        treeLeafIndexClass: "sweet-tree-leaf-index",
        treeLeafNodeDimension: "sweet-tree-leaf-dimension",
        treeLeafCompClass: "sweet-tree-leaf-comp",
        treeLeafUserDefine: "sweet-tree-leaf-userDefine",
        treeNodeLine: "sweet-tree-node-line", //竖线
        treeNodeEblow: "sweet-tree-node-eblow", //连接下方节点线段，未结尾
        treeNodeEblowEnd: "sweet-tree-node-eblow-end" //连接下方节点折线，结尾
    };

    //内部使用的Key
    var keyExpanded = "expand",
        keyChecked = "checked",
        keyRootNode = 'rootNode',
        keyLeafNode = 'leafNode',
        keySelected = "selected",
        keySameLvlNodeCount = "sameLvlNodeCount",
        keyIsLastNode = "isLastNode",
        keyParentExpandIcoInfo = "parentExpandIcoInfo",
        keyId = "treeNodeId",
        keyChildren = "children",
        keyType = "type",
        keyParentKey = "parentKey",
        keyLevel = "level",
        keyNodeIndex = "orgNodeIndex",
        keyPath = "pathKey",
        keyChildrenIndexs = 'childrenIndexs',
        keyRootKey = 'nodeRootKey',
        keySelectedMap = "selectedMap",
        keyHalfSelectedMap = "halfSelectedMap",
        keySelectedCount = "selectedCount",
        keyHalfSelectedCount = "halfSelectedCount",
        keyNeedUpdateCheckedState = "needUpdateCheckedState",
        keyNeedRemove = "needRemove",
        //内部派发事件
        keyNodeCheckedEvent = "optimizeTreeNodeCheckedEvent",
        keyNodeExpandEvent = "optimizeTreeNodeExpandedEvent",
        keyNodeClickEvent = "optimizeTreeNodeClickEvent",
        keyNodeDClickEvent = "optimizeTreeDClickEvent",
        keyToolTypeNone = "none",
        keyToolTypeAll = "all",
        keyToolTypeLeaf = "leaf",
        keyToolTypeDir = "dir",
        keyToolTypeRoot = "root",
        keyToolTypeAdd = "add",
        keyToolTypeModify = "modify",
        keyToolTypeDelete = "delete";


    //常用的枚举
    var FULL_CHECKED = 2,
        HALF_CHECKED = 1,
        NONE_CHECKED = 0,
        //内部组件的ID前缀
        treePrefix = "sweet-optimizeTree-",
        //树节点容器的ID前缀
        treeElPrefix = "sweet-optimizeTree-container-";

    /**
     * 用于判断类型
     **/
    var is = function(o, type) {
        type = type.toLowerCase();
        if (type == "finite") {
            return !isnan[has](+o);
        }
        if (type == "array") {
            return o instanceof Array;
        }
        return (type == "null" && o === null) || (type == typeof o && o !== null) || (type == "object" && o === Object(o)) || (type == "array" && Array.isArray && Array.isArray(o)) || Object.prototype.toString.call(o).slice(8, -1).toLowerCase() == type;
    };

    /**
     * 用于数据分块，存放数据, 只能使用new创建
     * */
    var dataCell = function() {
        this.data = [];
        this.cellIndex = 0;
    };

    /**
     * 表格的渲染器 ,只能使用new创建
     * */
    var itemRenderer = function($dom, _options) {
        this.options = _options;
        this.data = {};
        this.ypos = 0;
        this.el = $dom;
        this.cellIndex = 0;
        this.nodeIndex = 0;
        //传入的$dom作为渲染器的外层容器
        var self = this,
            i = 0,
            style = _options.style,
            //展开或收起的图标
            _expandDom = $("<div class='" + style.treeIcoBlockClass + "'/>").attr('name', 'expandDom'),
            //根据type类型显示的图标
            _iconDom = $("<div />").attr('name', 'iconDom'),
            //复选框图标
            _checkedDom = $("<div />").attr('name', 'checkedDom'),
            //文本dom
            _textDom = $("<span class='" + style.treeTextClass + "'/>").attr('name', 'textDom'),
            //子节点连接父节点线段,初始化隐藏
            _leafEblowDom = $("<div class='" + style.treeNodeEblow + "' />").hide(),
            //子节点连接父节点，并封闭线段,初始化隐藏
            _leafEblowEndDom = $("<div class='" + style.treeNodeEblowEnd + "'/>").hide(),
            //存放所有占位节点
            _emptyNodes = [],
            //所有的功能节点
            _tools = [];

        //添加默认样式
        this.el.addClass(style.treenodeClass);

        //在这里先创建出占位使用的图标
        //根据当前节点的层级和是否是最后一个节点来判断需要呈现几个
        for (i = 0; i < this.options.pc.maxNodeLevel; i++) {
            //先创建占位的dom节点
            var emptyNode = $("<div class='" + style.treeNodeLine + "' />").hide();
            _emptyNodes.push(emptyNode);
            this.el.append(emptyNode);
        }

        //初始化节点
        this.el.append(_leafEblowDom)
            .append(_leafEblowEndDom)
            .append(_expandDom)
            .append(_iconDom)
            .append(_checkedDom)
            .append(_textDom);

        //在所有节点后面创建
        if (keyToolTypeNone != this.options.toolsType) {
            for (i = 0; i < this.options.tools.length; i++) {
                var toolType = this.options.tools[i];
                var toolNode = $("<div></div>").hide();
                _tools.push(toolNode);
                switch (toolType) {
                    case keyToolTypeAdd:
                        toolNode.addClass(style.treeToolAddClass).attr('name', 'toolAdd');
                        break;
                    case keyToolTypeModify:
                        toolNode.addClass(style.treeToolModifyClass).attr('name', 'toolModify');
                        break;
                    case keyToolTypeDelete:
                        toolNode.addClass(style.treeToolDeleteClass).attr('name', 'toolDelete');
                        break;
                }
                this.el.append(toolNode);
            }
        }

        this.preUpdateNode = function(val, pos, cellIndex, nodeIndex) {
            self.data = val;
            self.ypos = pos;
            if (undefined == val) {
                return;
            }
            self.cellIndex = val['cellIndex'] = cellIndex;
            self.nodeIndex = val['nodeIndex'] = nodeIndex;
        };

        this.updateNode = function(options, me) {
            if (undefined == self.data) {
                //隐藏并更新Y坐标
                self.el.hide().css('top', self.ypos + 'px');
                return;
            } else {
                self.el.show();
            }

            var parentNode,
            fixedWidth = 20,
                iconW = 20,
                level = self.data[keyLevel],
                emptyNode,
                iconClass = style.treeLeafNodeIco,
                //是否有父节点
                hasParent = false,
                //是否有子节点
                haseChildren = false,
                isExpand = self.data[keyExpanded] == undefined ? false : self.data[keyExpanded],
                isChecked = self.data[keyChecked] == NONE_CHECKED ? false : self.data[keyChecked];

            if (!this.options.icon) {
                _iconDom.hide();
                fixedWidth -= iconW;
            }
            //在这里更新icon
            else if (this.options.icon && !$.isNull(self.data[this.options.iconField])) {
                switch (self.data[this.options.iconField]) {
                    case 0:
                        iconClass = style.treeLeafNodeDimension;
                        break;
                    case 1:
                        iconClass = style.treeLeafIndexClass;
                        break;
                    case 2:
                        iconClass = style.treeLeafUserDefine;
                        break;
                    case 3:
                        iconClass = style.treeLeafCompClass;
                        break;
                    case 4:
                        iconClass = style.treeParentNodeIco;
                        break;
                    default:
                        iconClass = style.treeLeafNodeIco;
                        break;
                }
            }


            //判断是否存在子节点
            if (self.data.hasOwnProperty(keyChildren) && self.data[keyChildren].length != 0) {
                //显示expandDom
                _expandDom.show().removeClass();
                if (isExpand == true) {
                    _expandDom.addClass(style.treeUnExpandClass);
                } else {
                    _expandDom.addClass(style.treeExpandClass);
                }
                //修改节点样式,父节点样式优先显示
                iconClass = style.treeParentNodeIco;
                haseChildren = true;
                fixedWidth += iconW;
            }
            //如果不存在子节点
            else {
                //隐藏expandDom
                if (self.data[keyLeafNode] == true) {
                    _expandDom.removeClass().hide();
                } else {
                    _expandDom.removeClass().addClass(style.treeIcoBlockClass);
                    fixedWidth += iconW;
                }
            }

            if (this.options.icon) {
                _iconDom.removeClass().addClass(iconClass);
            }

            //判断是否出现checkBox
            if (this.options.multi) {
                _checkedDom.show().removeClass();
                if (isChecked == FULL_CHECKED) {
                    _checkedDom.addClass(style.treeFullCheckedClass);
                } else if (isChecked == HALF_CHECKED) {
                    _checkedDom.addClass(style.treeCheckedClass);
                } else {
                    _checkedDom.addClass(style.treeUnCheckedClass);
                }
                fixedWidth += iconW;
            } else {
                _checkedDom.hide();
            }

            //判断是否存在父节点,如果存在，说明不是根节点,需要进行缩进
            if (self.data.hasOwnProperty(keyParentKey)) {
                self.el.removeClass(style.treeRootNodeClass);
                var nodeMap = this.options.pc.isFilterMode ? this.options.pc.filterItemsMap : this.options.pc.itemsMap;
                parentNode = nodeMap[self.data[keyParentKey]];
                hasParent = true;
            }
            //添加根节点样式
            else {
                self.el.addClass(style.treeRootNodeClass);
            }

            //如果是最后一层节点，并且有父节点，
            _leafEblowDom.hide();
            _leafEblowEndDom.hide();
            //如果存没有子节点,并且当前不是根节点
            if (!haseChildren && hasParent && options.displayLine) {
                if (self.data[keyIsLastNode]) {
                    _leafEblowEndDom.show();
                } else {
                    _leafEblowDom.show();
                }
                fixedWidth += iconW;
            }

            var parentLvl = level;
            if (parentNode) parentLvl = parentNode[keyLevel];
            //先判断需要使用几个占位符
            for (var i = 0; i < _emptyNodes.length; i++) {
                emptyNode = _emptyNodes[i];
                //先使用空白的占位符
                emptyNode.removeClass().addClass(style.treeIcoBlockClass);
                if (i < level) {
                    emptyNode.show();
                    fixedWidth += iconW;
                } else {
                    emptyNode.hide();
                }
                if (false == self.data[keyParentExpandIcoInfo][i] && options.displayLine) {
                    emptyNode.removeClass().addClass(style.treeNodeLine);
                }
            }

            var displayTools = false;
            if (keyToolTypeNone != self.options.toolsType) {
                switch (self.options.toolsType) {
                    case keyToolTypeAll:
                        displayTools = true;
                        break;
                    case keyToolTypeLeaf:
                        if (self.data[keyLeafNode] == true) {
                            displayTools = true;
                        }
                        break;
                    case keyToolTypeDir:
                        if (!self.data[keyLeafNode]) {
                            displayTools = true;
                        }
                        break;
                    case keyToolTypeRoot:
                        if (self.data[keyRootNode]) {
                            displayTools = true;
                        }
                        break;
                }
            }

            for (i = 0; i < _tools.length; i++) {
                if (displayTools) {
                    _tools[i].show();
                    if (i == 0) {
                        _tools[i].css('marginLeft', 10)
                    }
                } else {
                    _tools[i].hide();
                }
            }


            //更新Y坐标
            self.el.css({
                'top': self.ypos + 'px'
            }).data({
                data: self.data
            });

            //需要在样式变更过后设置正确的data
            if (self.data.hasOwnProperty(this.options.labelField)) {
                _textDom.html(self.data[this.options.labelField]);
            }
            var w = fixedWidth + parseInt(_textDom.css('width'));
            if (w > options.maxNodeWidth) {
                options.maxNodeWidth = w;
            }

            if (true == self.data[keySelected]) {
                self.el.addClass(style.treenodeSelectClass);
            } else {
                self.el.removeClass(style.treenodeSelectClass);
            }
        };

    };


    $.widget("sweet.optimizeTree", $.sweet.widget, /** @lends Sweet.tree.OptimizeTree.prototype */ {
        version: "1.0",
        sweetWidgetName: "[widget-optimizeTree]",
        eventNames: /** @lends Sweet.tree.OptimizeTree.prototype */
        {
            /**
             * @event
             * @description 树节点单击事件,一般参数为两个(evt, data)
             */
            nodeClick: "树节点单击事件",
            /**
             * @event
             * @description 树节点双击事件,一般参数为两个(evt, data)
             */
            nodeDClick: "树节点双击事件",
            /**
             * @event
             * @description 树节点展开事件,一般参数为两个(evt, data)
             */
            nodeExpand: "树节点展开事件",
            /**
             * @event
             * @description 树节点拖拽事件,一般参数为两个(evt, data)
             */
            nodeDrag: "树节点拖拽事件",
            /**
             * @event
             * @description 树节点CheckBox选中事件,一般参数为两个(evt, data)
             */
            nodeCheck: "树节点CheckBox选中事件",
            /**
             * @event
             * @description 树节点CheckBox反选事件,一般参数为两个(evt, data)
             */
            nodeUnCheck: "树节点CheckBox反选事件",
            /**
             * @event
             * @description 搜索节点事件,一般参数为两个(evt, data)
             */
            search: "搜索节点事件",
            /**
             * @event
             * @description 切换树节点事件,一般参数为两个(evt, data)
             */
            change: "切换树节点事件",
            /**
             * @event
             * @description 调用完setData方法后触发,一般参数为两个(evt, data)
             */
            afterSetData: "调用完setData方法后触发",
            /**
             * @event
             * @description 调用完setValue后触发,一般参数为两个(evt, data)
             */
            afterSetValue: "调用完setValue后触发",
            /**
             * @event
             * @description 树节点编辑事件,一般参数为两个(evt, data)
             */
            nodeEdit: "树节点编辑事件",
            /**
             * @event
             * @description 点击checkBox之前的事件,一般参数为两个(evt, data)
             */
            "beforeCheckboxClick": "点击checkBox之前的事件",
            "toolAddClick": "工具栏点击新增按钮",
            "toolModifyClick": "工具栏点击修改按钮",
            "toolDeleteClick": "工具栏点击删除按钮"
        },
        //public config
        options: /** @lends Sweet.tree.OptimizeTree.prototype */
        {
            /***
             * 在这里列出所有属性
             * */

            /**
             * 数据的ID字段，只有设置useTreeStruct为false时是必须的
             * @type String
             * @default id
             */
            idField: 'id',
            /**
             * 数据的父节点ID字段，只有设置useTreeStruct为false时是必须的
             * @type String
             * @default parent
             */
            parentField: 'parent',
            /**
             * 基础数据
             * @type Array
             * @default null
             */
            data: [],
            /**
             * @private
             * 原始数据,不建议外部使用
             * @type Array
             * @default null
             */
            orgData: [],
            /**
             * 是否禁用当前组件
             * @type Boolean
             * @default false
             */
            disabled: false,
            /**
             * 是否展开所有层级的所有节点
             * @type Boolean
             * @default false
             */
            expand: false,
            /**
             * 是否显示树节点的图标
             * @type Boolean
             * @default true
             */
            icon: true,
            /**
             * 用于标识显示ICON类型的字段
             * @type String
             * @default type
             */
            iconField: 'type',
            /**
             * 是否显示节点之间的连线
             * @type Boolean
             * @default true
             */
            displayLine: true,
            /**
             * 是否允许多选,如果true,显示checkBox
             * @type Boolean
             * @default true
             */
            multi: false,
            /**
             * 接受树节点的对象名称
             * @type String
             * @default ""
             */
            nodeAccept: "",
            /**
             * 树节点是否可以拖动
             * @type Boolean
             * @default false
             */
            nodeDraggable: false,
            /**
             * 是否显示搜索框
             * @type boolean
             * @default true
             */
            search: true,
            /**
             * 当search为true时，出现的搜索框中的提示文字
             * @type string
             * @default Sweet.core.i18n.tree.search("search"/"搜索")
             */
            searchEmptyText: Sweet.core.i18n.tree.search,
            /**
             * @private
             * 所有选中的元素,使用每个节点的唯一KEY值存储
             * @type Object
             * @default null
             */
            selectedItems: {},
            /**
             * @private
             *  自定义样式接口
             * @type Object
             * @default null
             */
            style: {},
            /**
             * @private
             * 当前树控件的最大层级
             * @type Number
             * @default 0
             */
            maxLevel: 0,
            /**
             * 显示使用的字段
             * @type String
             * @default text
             */
            labelField: "text",
            /**
             * 保存值的字段
             * @type String
             * @default value
             */
            valueField: "value",
            /**
             * @private
             * 树节点的高度
             * @type Number
             * @default 22
             */
            itemHeight: 22,
            /**
             * 是否使用树形结构的数据。
             *  如果为true,调用getValue方法时返回的是树形结构数据。
             *  如果为false,调用getValue方法时将尝试构造平铺结构的数据进行返回，如果有重复ID出现，将抛出异常。
             * @type Boolean
             * @default true
             */
            useTreeStruct: true,
            /**
             * 是否使用自定义的按钮，呈现在树节点右侧
             * 类型： add, modify, delete
             * 例如：[add, add, modify, delete]将依次显示两个新增按钮，一个修改按钮和一个删除按钮
             * @type Array
             * @default []
             */
            tools: [],
            /**
             * tools的显示方式
             * 类型： all 所有节点都显示,
             *       root 只有根节点显示,
             *       dir 所有的非叶子节点都显示,
             *       leaf 所有的叶子节点显示,
             *       none 不显示
             * @type String
             * @default none
             */
            toolsType: 'none',
            /**
             * @private
             * 当前的选中节点
             * @type Object
             * @default null
             */
            selectedNode: null,
            /**
             * @private
             * 节点的最大宽度
             * @type Number
             * @default 0
             */
            maxNodeWidth: 0,
            //private Config
            /**
             * @private
             * 是否始终在非叶子节点上显示展开icon
             * @type Boolean
             * @default false
             */
            alwaysDisplayExpandIcon: false,
            //private Config
            /**
             * @private
             * 存放组件的私有属性，这些属性会影响到组件的实际功能，不对外开放。
             * @type Object
             * @default null
             */
            pc: {},
            /**
             * @description 可配置对呈现数据加工后再返回
             * @type {Function}
             */
            handleText: function(val) {
                return val;
            },
            /**
             * @description 可配置对呈现数据tip提示加工后再返回
             * @type {Function}
             */
            handleTitle: function(val) {
                return val;
            }
        },
        /***
         * 在这里列出所有对外暴露的方法
         * */
        /**
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用组件 true/false
         */
        setDisabled: function(disabled) {},

        /**
         * @description 设置子节点选中状态
         * @param {Object} data 树形结构的数据，与setData中的数据格式保持一致
         */
        setSelected: function(data) {

        },

        setUnSelected: function(data) {

        },

        setUnSelectedAll: function() {

        },

        /**
         * @private
         * @description 更新树控件的配置,不使用jquery.widget的_setOption,调用时间过早
         * @param {Object} cfg 与options格式相同
         */
        updateOptions: function(cfg) {
            for (var key in cfg) {
                if (cfg[key] && 'pc' != key) {
                    if (key == 'data') {
                        this.setData(cfg[key]);
                    }
                    this.options[key] = cfg[key];
                }
            }
        },

        /**
         * @private
         * @description 内部方法，在options中包含data时调用
         * @param {Object} data 与options格式相同
         * @param {Boolean} isAppend 是否将新数据追加到老数据上
         */
        _updateOptionsData: function(data, isAppend) {
            //如果是追加数据，需要合并数据
            if (undefined != isAppend && true == isAppend) {
                data = this.concatData(this.options.orgData, data);
            }
            this._clearAll();
            this.options.data = data;
            this.options.orgData = data;
            this.options.expand = this.options.expand == undefined ? false : this.options.expand;
            //为数据建立索引,并且将数据分块
            this._createIndex(this.options.pc.itemsMap, this.options.pc.leafItemsMap, data);
            //计算出所有节点需要的最大高度
            this.options.pc.maxBgHeight = this.options.pc.totalNodeCount * this.options.itemHeight;
            //分解完数据后绘制渲染器
            this._draw();
        },

        /**
         * @private
         * @description 内部方法，连接两个数据结构，组合成新的数据返回
         * @param {Object} orgData 当前组件使用的数据
         * @param {Object} newData 需要合并的新数据
         * @return {Array} 拼接后的新数组
         */
        concatData: function(orgData, newData) {
            if (!orgData || !newData) {
                throw new Error("Function concatData Error: 传入的参数不合法");
            }

            var self = this,
                options = self.options,
                result = new Array();

            if (options.useTreeStruct == true) {
                var tempOrg = {
                    children: orgData
                },
                tempNew = {
                    children: newData
                };
                result = self._concatTreeData(tempOrg, tempNew, "");
                result = result[keyChildren];
            } else {
                result = self._concatRepeatData(orgData, newData);
            }
            return new Array().concat(result);
        },

        /**
         * @private
         * @description 内部方法，拼接树形结构的数据
         * @param {Object} orgData 当前组件使用的数据
         * @param {Object} newData 需要合并的新数据
         * @param {String} parentKey 父节点的key，用于递归使用
         * @return {Array} 拼接后的新数组
         */
        _concatTreeData: function(orgData, newData, parentKey) {
            var self = this,
                options = self.options,
                newPath = parentKey,
                orgChildren = orgData[keyChildren],
                newChildren = newData[keyChildren];

            if (!orgChildren || !newChildren) return null;

            for (var i = 0; i < newChildren.length; i++) {
                var newNode = newChildren[i],
                    newId = newNode[options.labelField] + '_' + newNode[options.valueField],
                    nodePath = newId;

                if (undefined != newPath && "" != newPath) {
                    nodePath = newPath + "#" + newId;
                }

                newNode[keyId] = newId;
                newNode[keyPath] = nodePath;
                //查找当前源数据是否已经存在相同节点
                var orgNode = options.pc.itemsMap[nodePath];
                //如果已经存在该节点，合并
                if (orgNode) {
                    orgNode = self._concatTreeData(orgNode, newNode, nodePath);
                }
                //如果不存在，添加
                else {
                    newNode[keyNeedUpdateCheckedState] = true;
                    orgData[keyChildren].push(newNode);
                }
            }
            return orgData;
        },

        /**
         * @private
         * @description 内部方法，拼接平铺结构的数据
         * @param {Object} orgData 当前组件使用的数据
         * @param {Object} newData 需要合并的新数据
         * @return {Array} 拼接后的新数组
         */
        _concatRepeatData: function(orgData, newData) {
            var self = this,
                options = self.options,
                len = newData.length;

            for (var i = 0; i < len; i++) {
                var newNode = newData[i],
                    newId = newNode[options.labelField] + '_' + newNode[options.valueField],
                    nodePath = newId;
                //查找当前源数据是否已经存在相同节点
                var orgNode = options.pc.itemsMap[nodePath];
                if (!orgNode) {
                    orgData.push(newNode);
                }
            }
            return orgData;
        },

        //设置数据
        setData: function(data, isAppend) {
            data = $.objClone(data);
            if (false == this.options.useTreeStruct) {
                //在这里将平铺数据转换为树形结构
                data = this._repeatToTreeStruct(data).children;
            }
            this._updateOptionsData(data, isAppend);
            this._fireEvent('afterSetData', this, {});
        },

        /**
         * @description 返回当前组件使用的所有数据，数据中可能包含组件内部使用的属性，但不会影响到原始数据的完整性。
         * @return {Object} 当前组件使用的所有数据
         */
        getData: function() {
            return this.options.orgData;
        },

        /**
         * @description 将平铺结构的数据转换为树形结构
         * @return {Object} 当前组件使用的所有数据
         */
        _repeatToTreeStruct: function(data) {
            var self = this,
                options = self.options,
                tempMap = {},
                result = {
                    children: []
                },
                len = data.length,
                i = 0,
                node;

            for (i = 0; i < len; i++) {
                node = data[i];
                tempMap[node[options.idField]] = node;
            }

            for (i = 0; i < len; i++) {
                node = data[i];
                var parentKey = node[options.parentField];
                if (undefined == parentKey || "" == parentKey) {
                    result.children.push(node);
                } else if (tempMap[parentKey]) {
                    if (!tempMap[parentKey].children) {
                        tempMap[parentKey].children = [];
                    }
                    tempMap[parentKey].children.push(node);
                }
            }
            return result;
        },

        /***
         * @description 获取所有选中项，返回的是所有的选中结果，如果存在过滤字符串的情况，也会将之前选中但是隐藏的项返回
         * @return 返回一个Object，使用键值对存储选中项目
         * **/
        getSelectedItems: function() {
            return this.options.selectedItems;
        },

        /**
         * @description 获取当前所有选中项的个数，包含被隐藏的项
         * @return {Number} 所有选中项的个数
         */
        getTotalItemsCount: function() {
            return this.options.pc.totalNodeCount;
        },

        /**
         * @description 删除所有的选中项,包含被隐藏的项
         */
        removeSelectedItems: function() {
            this._removeNodes(this.options.selectedItems);
        },

        /**
         * @private
         * @description 删除指定的数据
         * @param {Object} 需要删除的节点，树形结构
         */
        _removeNodes: function(nodes) {
            var self = this,
                options = self.options,
                node;
            //只处理子节点数据，然后反刷父节点
            for (var key in nodes) {
                node = nodes[key];
                //标记为需要删除，在下一次渲染时刻生效
                self.options.pc.itemsMap[node[keyPath]][keyNeedRemove] = true;
                delete nodes[node[keyPath]];
            }
            var filterStr = self.getFilterString();
            self._updateData(options.orgData);
            if ("" != filterStr) {
                self.filter(filterStr);
            }
        },

        /**
         * @private
         * @description 获取当前输入的过滤字符串
         * @return {String} 当前查询框输入的文本
         */
        getFilterString: function() {
            if (this.searchField) {
                var result = this.searchField.getValue();
                if (!result || !result.text) {
                    return "";
                }
                return result.text;
            }
        },

        /**
         * @description 获取当前鼠标选中的节点，非勾选
         * @param {Object} data 鼠标选中的节点数据
         */
        getSelectedNode: function() {
            if (this.options.selectedNode) {
                return this.options.selectedNode;
            }
        },

        /**
         * @description 根据传入的数据，找到相同的节点，修改属性值,所有的修改只针对叶子节点有效
         * @param {Object} data 指定需要修改的新数据
         */
        _setValue: function(data) {
            this._modifyNodeData(data, "");
            this._updateItems(true);
        },

        /**
         * @private
         * @description 在当前组件中查找到指定的节点，修改节点的值
         * @param {Object} data 指定需要修改的新数据
         * @param {String} parentKey 父节点KEY，递归使用
         */
        _modifyNodeData: function(data, parentKey) {
            var self = this,
                options = self.options,
                newPath = parentKey,
                len = data.length;

            for (var i = 0; i < len; i++) {
                var node = data[i],
                    nodeId = node[options.labelField] + '_' + node[options.valueField],
                    nodePath = nodeId;
                if (undefined != newPath && "" != newPath) {
                    nodePath = newPath + nodeId;
                }
                node[keyId] = nodeId;
                node[keyPath] = nodePath;
                var orgNode = options.pc.itemsMap[nodePath];
                if (orgNode) {
                    //只处理叶子节点
                    if (!orgNode[keyChildren] || 0 == orgNode[keyChildren].length) {
                        self._changeNodeProp(orgNode, node);
                        //更新父类节点的选中状态
                        self._updateParentCheckedState(node);
                    } else {
                        self._modifyNodeData(node[keyChildren], nodePath + "#");
                    }
                }
            }
        },

        /**
         * @private
         * @description 使用新的属性值覆盖到老的对象上，如果有新的属性存在，将会附加
         * @param {Object} node 指定的修改对象
         * @param {Object} prop 新的对象
         */
        _changeNodeProp: function(node, prop) {
            var self = this,
                options = self.options;
            for (var key in prop) {
                node[key] = prop[key];
                if (key == keyChecked) {
                    if (prop[key] == FULL_CHECKED && node[keyLeafNode]) {
                        options.selectedItems[node[keyPath]] = node;
                    } else {
                        delete options.selectedItems[node[keyPath]];
                    }
                }
            }
        },

        /**
         * @description 返回当前组件所有选中的值，包含被隐藏的部分
         * @return {Object} 返回的数据结构与当前组件的useTreeStruct属性有关，请参见useTreeStruct属性
         **/
        _getValue: function() {
            var self = this,
                options = self.options,
                selectedItems = options.selectedItems;

            if (options.useTreeStruct == true) {
                return self._rebuildValueTree(selectedItems);
            } else {
                return self._rebuildValueRepeat(selectedItems);
            }
        },

        _rebuildValueTree: function(orgData) {
            return this._rebuildTreeData(orgData, new Object());
        },

        _rebuildValueRepeat: function(orgData) {
            var result = [];
            var temp = {};
            for (var key in orgData) {
                var node = orgData[key];
                if (temp[node[keyId]] != undefined) {
                    throw new Error("返回的平铺数据中，存在相同ID的节点，请设置树控件的useTreeStruct为true来返回正确的数据格式");
                } else {
                    temp[node[keyId]] = true;
                    result.push(orgData[key]);
                }

            }
            return result;
        },

        _updateDataChecked: function(data, isChecked) {
            data[keyChecked] = isChecked;
            //如果是在过滤模式下勾选，需要同步到原始数据,只同步叶子节点数据
            if (this.options.pc.isFilterMode && data[keyLeafNode]) {
                this.options.pc.itemsMap[data[keyPath]][keyChecked] = isChecked;
                this.options.pc.itemsMap[data[keyPath]][keyNeedUpdateCheckedState] = true;
            }
            //只存储叶子节点,在用户操作的时候就保存，避免循环
            if (isChecked == FULL_CHECKED && data[keyLeafNode]) {
                this.options.selectedItems[data[keyPath]] = data;
            } else {
                delete this.options.selectedItems[data[keyPath]];
            }
        },
        /**
         * 内部方法，选中节点的处理
         * **/
        _checkedNode: function(data, isChecked) {
            //重新赋值
            this._updateDataChecked(data, isChecked);
            //更新子节点状态
            this._updateChildrenCheckedState(data);
            //更新父节点状态
            this._updateParentCheckedState(data);
        },
        /**
         * 内部方法，更新当前节点的子节点选中状态
         * @params data 需要更新的节点
         * **/
        _updateChildrenCheckedState: function(data) {
            data[keySelectedCount] = 0;
            data[keySelectedMap] = {};
            //如果存在子节点，还需要更新子节点的状态
            if (undefined != data[keyChildren]) {
                var children = data[keyChildren],
                    len = children.length,
                    child,
                    isChecked = data[keyChecked];

                if (isChecked == FULL_CHECKED) {
                    data[keySelectedCount] = len;
                }

                for (var i = 0; i < len; i++) {
                    child = children[i];
                    this._updateDataChecked(child, isChecked);
                    if (isChecked == FULL_CHECKED) {
                        data[keySelectedMap][child[keyPath]] = child[keyPath];
                    }
                    this._updateChildrenCheckedState(child);
                }
            }
        },
        /**
         * 内部方法，更新当前节点的父节点选中状态
         * @params data 需要更新的节点
         * **/
        _updateParentCheckedState: function(data) {
            var nodeMap = this.options.pc.isFilterMode ? this.options.pc.filterItemsMap : this.options.pc.itemsMap,
                parentNode = nodeMap[data[keyParentKey]];

            //到根节点终止
            if (parentNode == undefined) {
                return;
            }
            parentNode[keySelectedMap] = parentNode[keySelectedMap] || {};
            parentNode[keyHalfSelectedMap] = parentNode[keyHalfSelectedMap] || {};
            parentNode[keySelectedCount] = parentNode[keySelectedCount] || 0;
            parentNode[keyHalfSelectedCount] = parentNode[keyHalfSelectedCount] || 0;

            this._updateParentNodeCheckedCount(data, parentNode);
            //递归
            this._updateParentCheckedState(parentNode);
        },

        /***
         * 根据子节点状态更新父节点的选中状态，不使用循环
         * ***/
        _updateParentNodeCheckedCount: function(node, parentNode) {
            var nodeIndex = node[keyPath];
            //如果是选中状态或半选状态，添加到父节点的选中节点列表
            if (node[keyChecked] == FULL_CHECKED) {
                //先从map中查询是否已经存在，避免重复
                if (parentNode[keySelectedMap][nodeIndex] == undefined) {
                    //map中存放下标
                    parentNode[keySelectedMap][nodeIndex] = nodeIndex;
                    parentNode[keySelectedCount]++;
                }
                if (parentNode[keyHalfSelectedMap][nodeIndex] != undefined) {
                    delete parentNode[keyHalfSelectedMap][nodeIndex];
                    parentNode[keyHalfSelectedCount]--;
                }
            } else if (node[keyChecked] == HALF_CHECKED) {
                if (parentNode[keyHalfSelectedMap][nodeIndex] == undefined) {
                    parentNode[keyHalfSelectedMap][nodeIndex] = nodeIndex;
                    parentNode[keyHalfSelectedCount]++;
                }
                if (parentNode[keySelectedMap][nodeIndex] != undefined) {
                    parentNode[keySelectedCount]--;
                    delete parentNode[keySelectedMap][nodeIndex];
                }
            }
            //如果是未选中状态，从父节点的选中节点列表中删除
            else if (node[keyChecked] == NONE_CHECKED) {
                if (parentNode[keySelectedMap][nodeIndex] != undefined) {
                    parentNode[keySelectedCount]--;
                    delete parentNode[keySelectedMap][nodeIndex];
                } else if (parentNode[keyHalfSelectedMap][nodeIndex] != undefined) {
                    parentNode[keyHalfSelectedCount]--;
                    delete parentNode[keyHalfSelectedMap][nodeIndex];
                }
            }

            this._calcCheckedState(parentNode);
        },
        /**
         * 计算节点的选中状态
         * **/
        _calcCheckedState: function(parentNode) {
            var result = parentNode[keyHalfSelectedCount] + parentNode[keySelectedCount],
                childrenLen = parentNode[keyChildren].length;

            //未选中状态
            if (result == 0) {
                parentNode[keyChecked] = NONE_CHECKED;
            }
            //全选
            else if (parentNode[keySelectedCount] == childrenLen) {
                parentNode[keyChecked] = FULL_CHECKED;
            }
            //半选状态
            else if (parentNode[keyHalfSelectedCount] > 0 || parentNode[keySelectedCount] < childrenLen) {
                parentNode[keyChecked] = HALF_CHECKED;
            } else {
                throw new Error("选中状态计算错误 : " + parentNode[this.options.labelField]);
            }
        },

        /**
         * 创建组件,在这里创建常驻的元素
         * */
        _createSweetWidget: function() {
            this._initStyle();
            this._initPrivateConfig();

            var self = this,
                options = this.options,
                style = options.style,
                //传入的渲染DIV
                renderEl = this.renderEl = $("#" + options.renderTo),
                //创建根节点元素
                rootDiv = this.rootDiv = $("<div/>").width(options.width).height(options.height).attr('id', 'rootDiv_' + this.uuid + "_" + options.id),
                //存放树元素和占位元素
                treeRootDiv = this.treeRootDiv = $("<div>").width(options.width).addClass(style.treeParentClass + ' ' + style.treeBGClass),
                //创建树的根DOM元素
                treeEl = this.treeEl = $("<div/>").width(options.width).attr('id', options.id).addClass(style.defaultTreeClass),
                //创建用于占位的div,高度等于要显示的所有数据 * 渲染器的单个高度
                bgEl = this.bgEl = $("<div></div>");
            rootDiv.addClass(options.widgetClass);

            //如果需要呈现搜索栏
            if (options.search) {
                self.searchRendererDiv = $('<div/>').attr('id', options.id + treePrefix + options.id + 'search')
                    .addClass(style.treeSearchClass);
                self.searchField = new Sweet.form.SearchField({
                    width: options.width,
                    emptyText: options.searchEmptyText
                });
            }
            bgEl.addClass(style.treeEmptyBlockClass);
        },
        _initStyle: function() {
            var style = {},
            custStyle = this.options.style;
            for (var key in defaultStyle) {
                if (custStyle[key]) {
                    style[key] = custStyle[key]
                } else {
                    style[key] = defaultStyle[key];
                }
            }
            this.options.style = style;
        },
        _initPrivateConfig: function() {
            this.options.pc = {
                //存放所有的DataCell
                cells: [],
                //当前是否在过滤状态下
                isFilterMode: false,
                //在过滤状态下存放所有被过滤出的node
                filterItemsMap: {},
                //用于建立索引,存放所有的node
                itemsMap: {},
                //存放所有的叶子节点
                leafItemsMap: {},
                //用于刷新使用
                updateItemsMap: {},
                updateLeafItemsMap: {},
                //存放所有的渲染器
                items: [],
                //最下方itemRenderer的Y坐标
                bottomYPos: 0,
                //最上方itemRenderer的Y坐标
                topYPos: 0,
                //最上方的itemRenderer
                topItem: {},
                //最下方的itemRenderer
                bottomItem: {},
                //存放用于查询的集合
                searchMap: {},
                //数据分块的大小
                cellCount: 100,
                //所有的根节点，子节点的总数
                totalNodeCount: 0,
                //最大的层级数
                maxNodeLevel: 0,
                //最大的宽度限制,所有的根节点与子节点集合
                maxBgHeight: 0
            }
        },
        //组件创建完毕以后，添加事件监听
        _afterCreateSweetWidget: function() {
            var self = this,
                options = self.options;

            //添加过滤文本框
            if (options.search) {
                var searchInterval = 0;
                //设置一个定时器，定时器超时后调用过滤
                self.searchField.addListener('keyup', function(e, data) {
                    if (0 == searchInterval) {
                        searchInterval = setInterval(function() {
                            clearInterval(searchInterval);
                            self.filter(data.text);
                            self._fireEvent('search', e.target, data);
                        }, 500);
                    }
                    //在500毫秒内连续输入，重置定时器
                    else {
                        clearInterval(searchInterval);
                        searchInterval = setInterval(function() {
                            clearInterval(searchInterval);
                            self.filter(data.text);
                            self._fireEvent('search', e.target, data);
                        }, 500);
                    }
                });

                self.searchField.addListener('click', function(e, data) {
                    self.filter(data.text);
                    self._fireEvent('search', e.target, data);
                });
            }
            self._handleAllEvent();
        },
        _handleAllEvent: function() {
            var self = this,
                options = self.options,
                style = options.style;;
            //如果当前禁用组件，不做处理
            if (self.options.disabled) return;
            self.treeEl.bind('click', function(evt) {

                var target = $(evt.target),
                    node, data, domName;

                if (target.hasClass(style.treenodeClass)) {
                    node = target;
                } else if (target.parent() && target.parent().hasClass(style.treenodeClass)) {
                    node = target.parent();
                }
                //如果不是点击在树节点上,不做处理
                if (!node) return;
                //设置树节点选中
                data = node.data('data');
                domName = target.attr('name');

                //优先处理展开事件
                if ('expandDom' == domName) {
                    var isExpanded = data[keyExpanded] = undefined ? true : !data[keyExpanded];
                    //处理展开数据
                    self._expandNode(data, isExpanded);
                    //更新所有的渲染器状态
                    self._updateItems(true);
                    if (isExpanded) {
                        //触发展开节点事件
                        self._fireEvent('nodeExpand', evt, data);
                    }
                }
                //处理复选事件
                else if ('checkedDom' == domName) {
                    var isChecked = data[keyChecked] == undefined ? NONE_CHECKED : data[keyChecked];
                    if (isChecked == NONE_CHECKED || isChecked == HALF_CHECKED) {
                        isChecked = FULL_CHECKED;
                    } else {
                        isChecked = NONE_CHECKED;
                    }
                    //勾选之前判断是否继续处理
                    if (!$.isNull(self.handlers) && !$.isNull(self.handlers['beforeCheckboxClick'])) {
                        if (false == self.handlers['beforeCheckboxClick'].call(self.treeEl, evt, data)) {
                            return;
                        }
                    }
                    //处理选中
                    self._checkedNode(data, isChecked);
                    //更新所有的渲染器状态
                    self._updateItems(true);
                    //勾选完毕后派发事件
                    if (isChecked == FULL_CHECKED) {
                        //触发勾选事件
                        self._fireEvent('nodeCheck', evt, data);
                    } else {
                        self._fireEvent('nodeUnCheck', evt, data);
                    }
                } else if ('toolAdd' == domName) {
                    self._fireEvent('toolAddClick', evt, data);
                } else if ('toolModify' == domName) {
                    self._fireEvent('toolModifyClick', evt, data);
                } else if ('toolDelete' == domName) {
                    self._fireEvent('toolDeleteClick', evt, data);
                }
                //处理单击和双击事件
                else {
                    if (0 == self._nodeClickTimer) {
                        //设置定时器，300毫秒内点击两次派发双击事件，否则派发单击
                        self._nodeClickTimer = setInterval(function() {
                            clearInterval(self._nodeClickTimer);
                            self._nodeClickTimer = 0;
                            if (self._nodeClickCount > 1) {
                                self._fireEvent('nodeDClick', evt, data);
                            } else {
                                //如果为单选,且点了叶子节点,则将此节点加入选中数据中
                                if (!self.options.multi && (!data.children || data.children.length < 1)) {
                                    //先清空
                                    for (var key in self.options.selectedItems) {
                                        self._checkedNode(self.options.selectedItems[key], 0);
                                    }
                                    self.options.selectedItems = {};
                                    self._checkedNode(data, 2);
                                }
                                self._fireEvent('nodeClick', evt, data);
                            }
                            self._nodeClickCount = 0;
                        }, 300);
                    }
                    self._nodeClickCount++;
                }
                //触发选中操作
                data[keySelected] = true;
                if (self.options.selectedNode != data) {
                    if (self.options.selectedNode) {
                        self.options.selectedNode[keySelected] = false;
                    }
                    self.options.selectedNode = data;
                    self._updateItems(true);
                    self._fireEvent('change', evt, data);
                }
            });
        },
        _nodeClickTimer: 0,
        _nodeClickCount: 0,
        _fireEvent: function(evtName, evt, data) {
            this._trigger(evtName, evt.target, data);
            //调用已注册的回调函数
            if (!$.isNull(this.handlers) && !$.isNull(this.handlers[evtName])) {
                this.handlers[evtName].call(this.treeEl, evt, data);
            }
        },

        //为树节点添加拖动事件
        _addNodeDragEvent: function() {
            var self = this,
                options = self.options,
                style = options.style,
                nodeAccept = options.nodeAccept == undefined ? '' : options.nodeAccept,
                treeEl = self.treeEl;

            treeEl.children('.' + style.treenodeClass).draggable({
                appendTo: 'body',
                opacity: 1.0,
                cursorAt: {
                    left: 0,
                    top: 0
                },
                start: function(evt, ui) {
                    var target = $(evt.target),
                        data = {};
                    if (!target.hasClass(style.treenodeClass)) {
                        target = target.parent();
                    }
                    data = target.data('data');
                    self._fireEvent('nodeDrag', evt, data);
                },
                //不使用clone,dom元素需要剔除
                helper: function(event) {
                    var dragDiv = $("<div></div>").addClass(style.treenodeClass),
                        target = event.target,
                        treeNode = $(target),
                        children,
                        child;

                    //需要修正事件当前的对象
                    if (!treeNode.hasClass(style.treenodeClass)) {
                        treeNode = treeNode.parent();
                    }
                    children = treeNode.children();
                    for (var i = 0; i < children.length; i++) {
                        child = $(children[i]);
                        if (child.is(":visible") && (child.attr('name') == 'iconDom' || child.attr('name') == 'textDom')) {
                            child = child.clone().appendTo(dragDiv);
                        }
                    }
                    //构造拖拽的div
                    return dragDiv;
                }
            });

            //设置接收拖拽的DOM节点事件处理
            if (nodeAccept) {
                nodeAccept.droppable({
                    drop: function(event, ui) {
                        var dragData = ui.draggable.data('data');
                    }
                });
            }
        },

        /**
         * 展开当前指定的节点
         * */
        _expandNode: function(data, isExpand) {
            //重新给data赋值
            data[keyExpanded] = isExpand;
            if (data['hasChildren'] == false) {
                return;
            }

            var children = data[keyChildren],
                len = children.length,
                cellIndex,
                nodeIndex,
                dataCell,
                flag = 1;

            cellIndex = data['cellIndex'];
            nodeIndex = data['nodeIndex'];
            dataCell = this.options.pc.cells[cellIndex];
            //如果是展开操作，添加子节点到itemGroup中
            if (isExpand) {
                //将当前展开的数组插入到items中，平铺数据
                //节点之前的数组，重新拼接
                var before = dataCell.data.slice(0, nodeIndex + 1);
                var after = dataCell.data.slice(nodeIndex + 1, dataCell.data.length);
                dataCell.data = before.concat(children, after);
            }
            //如果是收起操作，需要收起所有小于当前层级的节点
            //保证操作的元素是最小的
            else {
                //删除掉不需要显示的数据
                flag = -1;
                var currentNode,
                startIndex = nodeIndex + 1,
                    itemLen = dataCell.data.length,
                    findSameLvlNode = false;

                //找到下一个与自己层级一致的节点，将中间部分删除
                for (var i = nodeIndex + 1; i < itemLen; i++) {
                    currentNode = dataCell.data[i];
                    //遇到和自己层级一样，或者是高于自己层级的，跳出
                    if (data[keyLevel] >= currentNode[keyLevel]) {
                        len = i - startIndex;
                        dataCell.data.splice(startIndex, len);
                        findSameLvlNode = true;
                        break;
                    }
                    //所有被收起的子节点，都呈现可展开状态
                    currentNode[keyExpanded] = false;
                }
                //最后一个节点的情况单独处理
                if (!findSameLvlNode) {
                    len = itemLen - startIndex;
                    dataCell.data.splice(startIndex, itemLen - startIndex);
                }
            }
            //修正全局的最大高度
            var tempH = parseInt(this.bgEl.css('height')) + len * this.options.itemHeight * flag;
            this.bgEl.css('height', tempH + "px");
        },
        //待刷新的列表
        _preUpdateCount: 0,
        /***
         * 更新当前所有的渲染器
         * 默认的触发条件是在有滚动操作时，有渲染器的Y坐标处于失效位置时
         *
         * 优化处理：
         * 在需要更新的节点数量大于阈值或定时器超时后，调用更新
         * @params validateNow (true/false) 是否强制更新当前已呈现的节点,在调用展开或选中节点时需要调用
         *
         * */
        _updateItems: function(validateNow) {
            var self = this,
                i = 0,
                //当前的滚动条位置
                y = self.treeEl[0].scrollTop,
                //当前视窗的高度
                h = parseInt(self.treeEl.css("height")),
                //所有渲染器的个数
                itemLen = self.options.pc.items.length,
                cellsLen = self.options.pc.cells.length,
                isValidateNow = validateNow == undefined ? false : validateNow,
                offsetHeight = 0,
                topThreshold = y - this.options.itemHeight,
                bottomThreshold = y + h + this.options.itemHeight,
                item;

            //先判断是否需要更新itemRenderer
            if ((self.options.pc.topYPos < topThreshold || self.options.pc.bottomYPos > bottomThreshold) || isValidateNow == true) {
                var yy,
                currentYPos = self.options.pc.topYPos,
                    //默认使用最上方元素的cellIndex
                    cellIndex = self.options.pc.topItem.cellIndex,
                    //默认使用最上方元素的nodeIndex
                    nodeIndex = self.options.pc.topItem.nodeIndex,
                    cell = self.options.pc.cells[cellIndex],
                    needOptimizeHandle = false,
                    nodeData, bottomY, topY;

                self.options.maxNodeWidth = parseInt(self.treeEl.externalWidth());
                //先在这里判断是否需要进行越界处理,避免在展开、收起最下方节点的时候出现问题
                if (isValidateNow) {

                    var indexInfo = 0,
                        overflowCount = 0;
                    //如果当前显示的所有节点小于渲染器数量，不用做处理
                    var bgH = parseInt(self.bgEl.css('height'));
                    if (bgH / self.options.itemHeight > itemLen) {
                        indexInfo = self._calcDataCellIndex(cellIndex, nodeIndex, itemLen - 1);
                        overflowCount = indexInfo.overflowCount;
                        //判断是否越界
                        if (overflowCount > 0) {
                            //如果越界
                            indexInfo = self._calcDataCellIndex(indexInfo.cellIndex, indexInfo.nodeIndex, -(itemLen - 1));
                            self.options.pc.topItem.cellIndex = cellIndex = indexInfo.cellIndex;
                            self.options.pc.topItem.nodeIndex = nodeIndex = indexInfo.nodeIndex;
                            cell = this.options.pc.cells[indexInfo.cellIndex];
                            //需要修正的高度
                            offsetHeight = -overflowCount * this.options.itemHeight;
                            //如果当前顶部渲染器的Y坐标大于修正高度，才做修正
                            if (self.options.pc.topYPos > Math.abs(offsetHeight)) {
                                self.options.pc.topYPos += offsetHeight;
                                self.options.pc.bottomYPos += offsetHeight;
                            } else {
                                offsetHeight = 0;
                            }
                        }
                    }

                    for (i = 0; i < itemLen; i++) {
                        item = self.options.pc.items[i];
                        yy = parseInt(item.ypos);
                        if (undefined != cell) {
                            nodeData = self.options.pc.cells[cellIndex].data[nodeIndex];
                        } else {
                            nodeData = undefined;
                        }
                        if (self.options.pc.topItem.ypos == currentYPos) {
                            item.preUpdateNode(nodeData, currentYPos, cellIndex, nodeIndex);
                        } else {
                            item.preUpdateNode(nodeData, currentYPos + offsetHeight, cellIndex, nodeIndex);
                        }
                        //允许使用空数据传递，空数据会使当前的item隐藏
                        item.updateNode(self.options, self);
                        nodeIndex++;
                        currentYPos += self.options.itemHeight;
                        if (cell && nodeIndex >= cell.data.length) {
                            nodeIndex = 0;
                            cellIndex++;
                            cell = self.options.pc.cells[cellIndex];
                        }
                    }
                    self._preUpdateCount = 0;
                    //重新设置宽度
                    self._initNodesWidth(self);
                    return;
                } else {
                    //下移
                    if (y > self._lastYpos) {
                        for (i = 0; i < itemLen; i++) {
                            item = self.options.pc.items[i];
                            yy = parseInt(item.ypos);
                            if (yy >= topThreshold) break;
                            //放置在最下方
                            cellIndex = self.options.pc.bottomItem.cellIndex;
                            nodeIndex = self.options.pc.bottomItem.nodeIndex;
                            cell = self.options.pc.cells[cellIndex];
                            //下移，nodeIndex需要自增
                            nodeIndex++;
                            if (nodeIndex >= cell.data.length) {
                                nodeIndex = 0;
                                cellIndex++;
                                if (cellIndex >= cellsLen) break;
                            }
                            nodeData = self.options.pc.cells[cellIndex].data[nodeIndex];
                            bottomY = self.options.pc.bottomYPos + self.options.itemHeight;
                            item.preUpdateNode(nodeData, bottomY, cellIndex, nodeIndex);
                            self.options.pc.items.splice(i, 1);
                            self.options.pc.items.push(item);
                            --i;
                            //更新topYPos和bottomYPos位置
                            self.options.pc.bottomItem = item;
                            self.options.pc.bottomYPos = bottomY;
                            self.options.pc.topItem = self.options.pc.items[0];
                            self.options.pc.topYPos = parseInt(self.options.pc.topItem.ypos);
                            self._preUpdateCount++;
                        }
                    } else if (y < self._lastYpos) {
                        for (i = itemLen - 1; i >= 0; i--) {
                            item = self.options.pc.items[i];
                            yy = parseInt(item.ypos);
                            if (yy <= bottomThreshold) break;

                            cellIndex = self.options.pc.topItem.cellIndex;
                            nodeIndex = self.options.pc.topItem.nodeIndex;
                            cell = self.options.pc.cells[cellIndex];
                            //上移，nodeIndex需要自减
                            nodeIndex--;
                            if (nodeIndex < 0) {
                                cellIndex--;
                                if (cellIndex < 0) break;
                                nodeIndex = self.options.pc.cells[cellIndex].data.length - 1;
                            }
                            nodeData = self.options.pc.cells[cellIndex].data[nodeIndex];
                            topY = self.options.pc.topYPos - self.options.itemHeight;
                            item.preUpdateNode(nodeData, topY, cellIndex, nodeIndex);
                            self.options.pc.items.splice(i, 1);
                            self.options.pc.items.unshift(item);
                            ++i;
                            //更新位置
                            self.options.pc.topItem = item;
                            self.options.pc.topYPos = topY;
                            self.options.pc.bottomItem = self.options.pc.items[itemLen - 1];
                            self.options.pc.bottomYPos = parseInt(self.options.pc.bottomItem.ypos);
                            self._preUpdateCount++;
                        }
                    }
                    needOptimizeHandle = Math.abs(y - self._lastYpos) > 200;
                    self._lastYpos = y;
                }

                //超过指定时间或者超过最大更新数量
                if (self._preUpdateCount > 0) {
                    if (true == needOptimizeHandle) {
                        if (false == self._preUpdateCountFlag) {
                            self._preUpdateCountFlag = true;
                            self._preUpdateTimer = setInterval(function() {
                                self._preUpdateTimerCount++;
                                if (self._preUpdateTimerCount >= 3) {
                                    self._preUpdateTimerCount = 0;
                                    self._preUpdateCount = 0;
                                    clearInterval(self._preUpdateTimer);
                                    self._preUpdateCountFlag = false;
                                    self._updateItems(true);
                                }
                            }, 100);
                        }

                        //判断条件中乘以的系数，和needOptimizeHandle中的赋值条件相关，如果上面是>500,这里建议使用5
                        if (self._preUpdateCount >= self.itemCount * 2) {
                            self._preUpdateTimerCount = 0;
                            self._preUpdateCount = 0;
                            clearInterval(self._preUpdateTimer);
                            self._preUpdateCountFlag = false;
                            self._updateItems(true);
                        }
                    } else {
                        self._preUpdateCount = 0;
                        self._updateItems(true);
                    }
                }
            }
        },
        _lastYpos: 0,
        _preUpdateTimer: 0,
        _preUpdateTimerCount: 0,
        _preUpdateCountFlag: false,
        //修改子节点的属性
        _modifyChildrenProp: function(children, config) {
            var i = 0,
                self = this,
                node,
                key = "",
                len = children.length;
            for (i = 0; i < len; i++) {
                node = children[i];
                //覆盖同名称的属性
                for (key in config) {
                    node[key] = config[key];
                }
                if (node.hasOwnProperty(keyChildren)) {
                    self._modifyChildrenProp(node[keyChildren], config);
                }
            }
        },
        /**
         * 根据下表和偏移量算出当前的数据子项
         * **/
        _calcDataCellIndex: function(cellIndex, nodeIndex, step) {
            var cell = this.options.pc.cells[cellIndex],
                result = {},
                i = 0,
                cellLen = this.options.pc.cells.length,
                count = Math.abs(step),
                overflowCount = 0;

            if (step < 0) {
                for (i = 0; i < count; i++) {
                    --nodeIndex;
                    if (nodeIndex < 0) {
                        cellIndex--;
                        cell = this.options.pc.cells[cellIndex];
                        if (cell) {
                            nodeIndex = cell.data.length - 1;
                        }
                    }
                    if (cell == undefined) {
                        ++overflowCount;
                    }
                }
            } else {
                for (i = 0; i < count; i++) {
                    ++nodeIndex;
                    if (cell && nodeIndex >= cell.data.length) {
                        nodeIndex = 0;
                        cellIndex++;
                        cell = this.options.pc.cells[cellIndex];
                    }
                    if (!cell) {
                        ++overflowCount;
                    }
                }
            }

            if (nodeIndex < 0) {
                nodeIndex = 0;
            }
            if (cellIndex < 0) {
                cellIndex = 0;
            } else if (cellIndex >= cellLen) {
                cellIndex = cellLen - 1;
                cell = this.options.pc.cells[cellLen - 1];
                nodeIndex = cell.data.length - 1;
            }
            result.cellIndex = cellIndex;
            result.nodeIndex = nodeIndex;
            result.overflowCount = overflowCount;
            return result;
        },

        /**
         * 初始化绘制树节点
         * **/
        _draw: function() {
            //获取当前容器的高度
            var h = parseInt(this.treeEl.css("height"));
            if (isNaN(h) || 0 == h) {
                this.needRedraw = true;
                return;
            }

            var self = this,
                rootLen = self.options.data.length,
                //每屏能够呈现的节点数量
                pageCount = Math.ceil(h / this.options.itemHeight),
                //计算出需要多少个渲染器
                itemCount = pageCount * 2;

            self.treeEl.children().remove();
            self.itemCount = itemCount;
            self.options.pc.items = new Array();
            //更新是否显示icon
            self.options.icon = self.options.icon == undefined ? true : self.options.icon;
            //是否显示checkBox
            self.options.multi = self.options.multi == undefined ? true : self.options.multi;

            //创建用于占位的div
            if (self.options.expand) {
                self.bgEl.css('height', self.options.pc.maxBgHeight + "px");
            } else {
                self.bgEl.css('height', rootLen * self.options.itemHeight + "px");
            }
            self.treeEl.append(self.bgEl);

            //在这里创建子项
            var el, val, cell, cellIndex = 0,
                nodeIndex = 0,
                ypos = 0;

            //初始化itemRenderer
            //只初始化根节点数据
            for (var i = 0; i < itemCount; i++) {
                el = $("<div />");
                ypos = i * this.options.itemHeight;
                cell = this.options.pc.cells[cellIndex];
                if (!cell) {
                    //允许创建空数据传递，使用空数据渲染的节点将隐藏
                    val = undefined;
                    cellIndex = nodeIndex = -1;
                } else {
                    //当前节点的数据
                    val = cell.data[nodeIndex];
                }

                //添加到组件中
                self.treeEl.append(el);
                var item = new itemRenderer(el, this.options);
                item.preUpdateNode(val, ypos, cellIndex, nodeIndex);
                item.updateNode(self.options, self);
                //加入到集合中管理
                self.options.pc.items.push(item);

                //更换数据块
                nodeIndex++;
                if (cell && nodeIndex >= cell.data.length) {
                    cellIndex++;
                    nodeIndex = 0;
                }
            }
            //更新最上方和最下方节点信息
            self.options.pc.topItem = self.options.pc.items[0];
            self.options.pc.topYPos = parseInt(self.options.pc.topItem.el.css("top"));
            self.options.pc.bottomItem = self.options.pc.items[self.options.pc.items.length - 1];
            self.options.pc.bottomYPos = parseInt(self.options.pc.bottomItem.el.css("top"));

            //拖拽事件直接添加到子节点上，因为子节点常驻内存，不会释放
            if (self.options.nodeDraggable) {
                self._addNodeDragEvent();
            }
            //滚动时更新渲染器
            self.treeEl.scroll(function() {
                self._updateItems();
            });
            //如果滚动条的位置和topItem差别过大，需要做优化
            //要考虑快速滚动和指定滚动位置的情况
            self._updateItems();
        },

        /**
         * 渲染组件
         * **/
        _render: function(id) {
            if (!id || this.rendered) {
                return;
            }
            //renderEl指向renderTo的DOM元素
            this.renderEl = $('#' + id);
            if (!this.renderEl) {
                this._createRenderEl();
            }

            this.renderEl.append(this.rootDiv);
            if (this.searchField) {
                this.rootDiv.append(this.searchRendererDiv);
                this.searchField.render(this.searchRendererDiv.attr('id'));
            }
            this.treeRootDiv.append(this.treeEl).appendTo(this.rootDiv);
            this.rendered = true;
            this.updateOptions(this.options);
        },
        /**
         * 布局发生变更时触发
         * */
        _doLayout: function() {
            if (undefined != this.needRedraw && true == this.needRedraw) {
                this.needRedraw = false;
                this._draw();
            }
        },
        clear: function() {
            this.setData([]);
        },
        /**
         * 删除所有的子节点，清空数据
         * 调用setData时会默认调用
         * */
        _clearAll: function() {
            this.options.pc.cells.length = 0;
            this.options.pc.itemsMap = new Object();
            this.options.pc.leafItemsMap = new Object();
            this.options.pc.filterItemsMap = new Object();
            this.options.pc.bottomYPos = this.options.pc.topYPos = 0;
            this.options.pc.topItem = new Object();
            this.options.pc.bottomItem = new Object();
            this.options.pc.totalNodeCount = 0;
            this.options.pc.maxBgHeight = 0;
            this.options.pc.items.length = 0;
            this.options.data.length = 0;
            this.options.orgData.length = 0;
            this.options.selectedItems = new Object();
            this.options.maxLevel = 0;
            this.options.maxNodeWidth = 0;
            this.options.selectedNode = null;
            this.treeEl.children().remove();
        },
        //刷新数据时，需要保存一部分信息
        _clearUpdateData: function() {
            this.options.pc.cells.length = 0;
            this.options.pc.bottomYPos = this.options.pc.topYPos = 0;
            this.options.pc.topItem = {};
            this.options.pc.bottomItem = {};
            this.options.pc.totalNodeCount = 0;
            this.options.pc.maxBgHeight = 0;
            this.options.pc.items.length = 0;
            this.options.data = [];
            this.options.maxLevel = 0;
            this.options.maxNodeWidth = 0;
            this.options.pc.updateItemsMap = new Object();
            this.options.pc.updateLeafItemsMap = new Object();
            this.treeEl.children().remove();
        },
        /**
         * 为数据建立索引
         * 建立父节点的ID
         * 建立完整的到达根路径地址
         * 索引key为根节点ID到最底层节点ID
         * */
        _createIndex: function(allMap, leafMap, list, parent, _level, cell, _isRoot, _nodeIndex, _rootKey, _expandIcoInfo) {
            var //当前节点
            node,
            //从父节点到当前节点的路径
            pathKey = "",
                //当前数组的长度
                len = list.length,
                //是否是根节点标识，如果是根节点，在这里进行数据分块
                isRoot = _isRoot == undefined ? true : _isRoot,
                //当前节点层级
                level = _level || 0,
                rootKey = _rootKey || 'NA',
                currentNodeChecked = NONE_CHECKED,
                cellIndex = 0,
                nodeIndex = _nodeIndex || 0,
                i = 0;

            if (level > this.options.maxLevel) {
                this.options.pc.maxNodeLevel = this.options.maxLevel = level;
            }

            for (i = 0; i < len; i++) {
                node = list[i];
                //判断node是否有效
                if (node.hasOwnProperty(keyNeedRemove) && node[keyNeedRemove] == true) {
                    node[keyChecked] = NONE_CHECKED;
                    this._updateParentCheckedState(node);
                    delete list[i];
                    list.splice(i, 1);
                    delete this.options.pc.itemsMap[node[keyPath]];
                    delete this.options.pc.leafItemsMap[node[keyPath]];
                    --len;
                    --i;
                    continue;
                }

                //使用nodeIndex判断，避免出现--i导致判断失效
                if (isRoot && (nodeIndex == 0 || nodeIndex >= this.options.pc.cellCount - 1)) {
                    cell = new dataCell();
                    cell.cellIndex = cellIndex;
                    this.options.pc.cells[cellIndex] = cell;
                    ++cellIndex;
                    nodeIndex = 0;
                }

                //拼接一个唯一的ID
                node[keyId] = node[this.options.labelField] + '_' + node[this.options.valueField];
                //是否为根节点，如果只有一层数据，根节点标识优先
                node[keyRootNode] = isRoot;
                //记录在数据中的原始下标位置
                node[keyNodeIndex] = nodeIndex;
                //当前节点的级别
                node[keyLevel] = level;
                //是否展开标识,优先使用数据中的标识，再使用全局标识
                node[keyExpanded] = this.options.expand;
                //是否选中标识
                currentNodeChecked = node[keyChecked] = node[keyChecked] == undefined ? NONE_CHECKED : node[keyChecked];
                //在相同父节点的同级别节点中的个数
                node[keySameLvlNodeCount] = len;
                //pathKey为数组的下标
                pathKey = node[keyId];
                //记录当前是否为最后一个节点
                node[keyIsLastNode] = i == len - 1;
                //按照层级记录所有父节点的位置信息
                node[keyParentExpandIcoInfo] = _expandIcoInfo ? _expandIcoInfo.slice(0) : [];
                node[keyParentExpandIcoInfo].push(node[keyIsLastNode]);

                //记录自己的父节点ID
                if (parent != undefined) {
                    node[keyParentKey] = parent[keyPath];
                    pathKey = parent[keyPath] + '#' + pathKey;
                    //存储keynode的索引
                    parent[keyChildrenIndexs][node[keyId]] = node;
                }

                //存放唯一标识
                node[keyPath] = pathKey;
                if (isRoot) {
                    rootKey = node[keyPath];
                }
                node[keyRootKey] = rootKey;

                //itemsMap中存放的key为node的完整标识，可以直接定位到node节点
                allMap[node[keyPath]] = node;
                //cell里面存放平铺结构，需要在递归之前push
                var lastIndex = 0;
                //子节点不展开的时候，cell为null
                if (cell) {
                    cell.data.push(node);
                    lastIndex = cell.data.length - 1;
                    ++nodeIndex;
                }

                if (node.hasOwnProperty(keyChildren)) {
                    node[keyChildrenIndexs] = {};
                    node[keyLeafNode] = false;
                    var orgChildLen = this.options.pc.itemsMap[node[keyPath]][keyChildren].length;
                    var beforeDeleteLen = node[keyChildren].length;
                    //递归子节点
                    nodeIndex = this._createIndex(allMap, leafMap,
                    node[keyChildren], node,
                    level + 1, node[keyExpanded] ? cell : undefined,
                    false, nodeIndex, rootKey, node[keyParentExpandIcoInfo]);

                    var afterDeleteLen = node[keyChildren].length;

                    //如果node下的节点全是无效节点，需要删除自身
                    if (afterDeleteLen == 0 && orgChildLen - beforeDeleteLen == 0) {
                        node[keyNeedRemove] = true;
                        if (cell) {
                            cell.data.splice(lastIndex, 1);
                        }--i;
                        continue;
                    }
                } else {
                    leafMap[node[keyPath]] = node;
                    node[keyLeafNode] = true;
                    //只保存叶子节点的勾选状态
                    if (node[keyChecked] == FULL_CHECKED) {
                        this.options.selectedItems[node[keyPath]] = node;
                    }
                    //在这里处理过滤后的选中问题，只处理出现变化的数据
                    if (true == node[keyNeedUpdateCheckedState]) {
                        this._updateParentCheckedState(node);
                    }
                }
                node[keyNeedUpdateCheckedState] = false;
                //当前需要呈现出来的节点数量，影响背景DIV的高度
                this.options.pc.totalNodeCount++;
            }
            return nodeIndex;
        },

        /**
         * 刷新数据，在过滤字符串时调用
         * **/
        _updateData: function(data) {
            this._clearUpdateData();
            this.options.data = data;
            this._createIndex(this.options.pc.updateItemsMap, this.options.pc.updateLeafItemsMap, this.options.data);
            this.options.pc.maxBgHeight = this.options.pc.totalNodeCount * this.options.itemHeight;
            this._draw();
            this._updateItems(true);
        },

        filter: function(str) {
            var orgLeafData = this._filterItemsByString(str),
                //还原到树状结构的数据
                filterData = [];

            if (!orgLeafData) return;
            //如果能检索到数据
            if (orgLeafData.length > 0) {
                this.options.pc.isFilterMode = true;
                filterData = this._rebuildTreeData(orgLeafData);
                this._updateData(filterData);
            } else {
                this.options.pc.isFilterMode = false;
                this._clearUpdateData();
            }
        },
        /***
         * 根据传入的字符串过滤数据源
         * 过滤只影响呈现，不影响选中的结果
         * */
        _filterItemsByString: function(str) {
            var key = "",
                value,
                //根据配置决定使用哪个map作为数据源,平铺的数据结构
                targetSource = {},
                //存储查询到的节点
                orgLeafData = [];

            //每次过滤时，清除上一次的过滤记录
            this.options.pc.filterItemsMap = {};
            //字符串为空的时候，使用原始数据渲染
            if (str == "") {
                this.options.pc.isFilterMode = false;
                this._updateData(this.options.orgData);
                return;
            }

            this.options.expand = true;
            //只查找子节点数据
            targetSource = this.options.pc.leafItemsMap;
            //[Begin]: add for DTS2014040909378
            //搜索不区分大小写
            str = str.toLowerCase();
            for (key in targetSource) {
                value = targetSource[key][this.options.labelField].toLowerCase();
                if (value.indexOf(str) != -1) {
                    //只放置叶子节点
                    orgLeafData.push(targetSource[key]);
                }
            }
            //[End]: add for DTS2014040909378
            return orgLeafData;
        },

        _copyNode: function(node) {
            var result = $.objCopy(node);
            if (node.data) {
                result.data = $.objClone(node.data);
            }
            //需要重构几个属性
            result[keySelectedMap] = {};
            result[keyHalfSelectedMap] = {};
            result[keySelectedCount] = 0;
            result[keyHalfSelectedCount] = 0;
            return result;
        },

        /***
         * 内部方法
         * 通过叶子节点还原整个树状结构
         * orgData : array 入参是根节点与子节点混合的结构,数据可以无序
         * **/
        _rebuildTreeData: function(orgData, _itemsMap) {
            var parentNode,
            self = this,
                result = [],
                len = orgData.length,
                itemsMap = _itemsMap || self.options.pc.filterItemsMap;

            if (is(orgData, 'array')) {
                for (var i = 0; i < len; i++) {
                    rebuildSingleNode(orgData[i]);
                }
            } else if (is(orgData, 'object')) {
                for (var key in orgData) {
                    rebuildSingleNode(orgData[key]);
                }
            }

            function rebuildSingleNode(node) {
                if (node == undefined) return;
                /**
                 * 三种情况，叶子节点和非叶子节点,根节点
                 * **/
                //如果是根节点
                if (node[keyRootNode]) {
                    if (itemsMap[node[keyPath]]) {
                        node = itemsMap[node[keyPath]];
                    }
                    //只有一层数据的时候
                    else {
                        node = self._copyNode(node);
                        itemsMap[node[keyPath]] = node;
                    }
                    //只push根节点
                    result.push(node);
                }
                //如果是叶子节点
                else {
                    //只有是子节点时需要重构，如果是具有父节点和子节点的情况，node肯定是重构过的
                    if (node[keyLeafNode]) {
                        //copy的对象不会有object和function的属性,所以要重建children属性
                        var d;
                        if (node.data) {
                            d = $.objClone(node.data);
                        }
                        node = itemsMap[node[keyPath]] = $.objCopy(node);
                        if (d) {
                            node.data = d;
                        }
                    }
                    parentNode = self.options.pc.itemsMap[node[keyParentKey]];
                    //如果已经存在
                    if (itemsMap[parentNode[keyPath]]) {
                        parentNode = itemsMap[parentNode[keyPath]];
                        self._pushNodeToParent(node, parentNode);

                    }
                    //不存在的话构建
                    else {
                        parentNode = self._copyNode(parentNode);
                        itemsMap[parentNode[keyPath]] = parentNode;
                        self._pushNodeToParent(node, parentNode);
                        rebuildSingleNode(parentNode);
                    }
                }
            }

            return result;
        },

        /***
         * 在过滤数据时使用
         * **/
        _pushNodeToParent: function(node, parent) {
            var nodeIndex = node[keyPath];
            if (!parent[keyChildren]) {
                parent[keyChildren] = [];
            }
            parent[keyChildren].push(node);
            if (FULL_CHECKED == node[keyChecked]) {
                parent[keySelectedMap][nodeIndex] = nodeIndex;
                parent[keySelectedCount]++;
            } else if (HALF_CHECKED == node[keyChecked]) {
                parent[keyHalfSelectedMap][nodeIndex] = nodeIndex;
                parent[keyHalfSelectedCount]++;
            }
            this._calcCheckedState(parent);
        },

        /**
         * 销毁组件
         * */
        _destoryWidget: function() {
            if (this.rootDiv) {
                this.rootDiv.remove();
            }
        },

        _setHeightAndRedraw: function(val) {
            this._setHeight(val);
            this._draw();
        },

        /**
         * 判断当前是否需要重绘所有节点
         * **/
        autoReDraw: function() {
            var self = this,
                options = self.options,
                pc = options.pc,
                items = pc.items,
                len = items.length;

            var itemsHeight = len * options.itemHeight,
                treeHeight = parseInt(this.treeEl.css("height"));

            if (itemsHeight < treeHeight * 2) {
                self._draw();
            }
        },

        /**
         * @private
         * @description 返回组件高度
         */
        _getHeight: function() {
            return this.rootDiv.externalHeight();
        },

        /**
         * @private
         * @description 返回组件宽度
         */
        _getWidth: function() {
            return this.rootDiv.externalWidth();
        },

        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            this.rootDiv.externalWidth(width);
            this.treeEl.externalWidth(width);
        },

        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {

            if (typeof height === 'string' && /\d+%/.test(height)) {
                var r = parseInt(height, 10);
                height = this.rootDiv.parent().height() * r / 100;
            }
            this.rootDiv.externalHeight(height);
            var fixHeight = 0;
            if (this.searchRendererDiv) {
                fixHeight = parseInt($(this.searchRendererDiv).css('height')) + 20;
            }
            fixHeight = height - fixHeight;
            this.treeRootDiv.css('height', fixHeight);
            this.treeEl.css('height', fixHeight);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
            if (undefined != this.needRedraw && true == this.needRedraw) {
                this.needRedraw = false;
                this._draw();
            }
        },
        _addListener: function(evtName, callBack) {
            if (this.eventNames[evtName]) {
                this.handlers[evtName] = callBack;
            }
        },

        _removeListener: function(evtName) {
            delete this.handlers[evtName];
        },
        //移除掉所有的监听回调
        _removeAllListener: function() {
            for (var key in this.handlers) {
                delete this.handlers[key];
            }
        },
        /**
         * @private
         * @description 重新设置可见区域node的宽度
         * @param {Object} self 树组件对象
         */
        _initNodesWidth: function(self) {
            var tEl,
            tScrollWidth = 22,
                tPaddingWidth = 5,
                tempWidth = 0,
                vTempWidth = 0,
                oWidth,
                oHeight,
                emptyEl;
            for (var k = 0; k < self.options.pc.items.length; k++) {
                tEl = self.options.pc.items[k].el;
                if ("block" != $(tEl).css("display")) {
                    continue;
                }
                tempWidth = 0;
                $.each($(tEl).children(), function(index, cEl) {
                    if ("block" === $(cEl).css("display") || $(cEl).hasClass(self.options.style.treeTextClass)) {
                        tempWidth += $(cEl).externalWidth();
                    }
                });
                if (tempWidth > vTempWidth) {
                    vTempWidth = tempWidth;
                }
            }
            oWidth = self.treeEl.innerWidth();
            oHeight = self.treeEl.height();
            emptyEl = self.bgEl.height();
            //有竖向滚动条时
            if (emptyEl > oHeight) {
                if (vTempWidth < (oWidth - tScrollWidth)) {
                    vTempWidth = oWidth - tScrollWidth;
                }
            } else {
                if (vTempWidth < oWidth - tPaddingWidth) {
                    vTempWidth = oWidth - tPaddingWidth;
                }
            }
            for (var k = 0; k < self.options.pc.items.length; k++) {
                tEl = self.options.pc.items[k].el;
                $(tEl).width(vTempWidth);
            }
        }
    });
    Sweet.tree.OptimizeTree = $.sweet.optimizeTree;
})(jQuery);;
/**
 * @fileOverview  
 * <pre>
 * form组件--下拉框
 * 2013/5/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    /**
     * 保存组件对象
     * 
     */
    var comboboxInputClass = "sweet-form-combobox-element",
        comboboxArrowClass = "sweet-form-combobox-arrow",
        comboboxArrowGrayClass = "sweet-form-combobox-arrow-gray",
        comboboxParentClass = "sweet-form-combobox",
        comboboxParentGrayClass = "sweet-form-combobox-gray",
        textFieldFormClass = "sweet-form-combobox-formEl",
        comboboxUlParentClass = "sweet-form-combobox-ulParent",
        comboboxExpandTextBlue = "sweet-form-combobox-selected",
        comboboxExpandText = "sweet-form-combobox-selectWinText",
        comboboxSelectWinRadio = "sweet-form-combobox-selectWinRadio",
        checkboxImage = "sweet-form-checkbox-image",
        checkboxImageSelect = "sweet-form-checkbox-imageSelect",
        comboboxMultiSpan = "sweet-form-combobox-dropDownSpan",
        comboboxEmptyTextClass = "sweet-form-combobox-emptyDiv",
        comboboxBigDataImageClose = "sweet-form-combobox-bigDataImage-delete",
        comboboxPartitionLineClass = "sweet-form-combobox-partitionLine",
        increments = 0,
        CONSTANT = 1,
        componentHeight = 25,
        itemLimitNumber = 10,
        liHeight = 22,
        eventAfterSetData = "afterSetData",
        eventAfterSetValue = "afterSetValue",
        ALL_TEXT = Sweet.core.i18n.combobox.checkAll;

    $.widget("sweet.widgetFormCombobox", $.sweet.widgetFormInput, /** @lends Sweet.form.ComboBox.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-combobox]",
        type: 'text',
        eventNames: /** @lends Sweet.form.ComboBox.prototype*/
        {
            /**
             * @event
             * @description 值改变的事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            change: "改变值事件",
            /**
             * @event
             * @description 调用完组件的setData方法后事件
             */
            afterSetData: "调用完setData方法后事件",
            /**
             * @event
             * @description 调用完组件的setValue执行后触发
             */
            afterSetValue: "setValue执行后触发",
            /**
             * @event
             * @description 点击checkBox之前的事件(checkBox未选中的时候触发)
             */
            beforeCheckboxClick: "点击checkBox之前的事件(checkBox未选中的时候触发)",
            /**
             * @event
             * @description 关闭浮动窗口后的事件
             */
            afterCloseFloatWin: "关闭浮动窗口后的事件"
        },
        options: /** @lends Sweet.form.ComboBox.prototype*/
        {
            /**
             * 基础数据
             * @type Object
             * @default null
             */
            data: [],
            /**
             * 组件选中值
             * @type {Object/String}
             * @default null
             */
            value: null,
            /**
             * 多选属性
             * @type {Boolean}
             * @default false
             */
            multi: false,
            /**
             * 多选下拉框是否配置all选项
             * @type {Boolean}
             * @default true
             */
            all: false,
            /**
             * 是否支持手动输入
             * @type {Boolean}
             * @default false
             */
            write: false,
            /**
             * 是否显示选项的提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * 是否为树
             * @type {Boolean}
             * @default false
             */
            tree: false,
            /**
             * 是否延迟加载数据
             * @type {Boolean}
             * @default false
             */
            lazyLoad: false,
            /**
             * 每次加载记录数
             * @type {Number}
             * @default 50
             */
            limit: 50,
            /**
             * 是否是后台搜索
             * @type {Boolean}
             * @default false
             */
            remote: false,
            /**
             * 数据源
             * @type Object
             * @default null
             */
            store: null,
            /**
             * @description 输入框为空时显示的字符
             * @type {Object/String/Number}
             * @default 请选择
             */
            emptyText: Sweet.core.i18n.combobox.pleaseCheck,
            /**
             * 为空时，是否默认全部选择
             * @type {Boolean}
             * @default false
             */
            emptyAll: false,
            /**
             * 多选时，必须保留选中的个数
             * @type {Number}
             * @default 0
             */
            minRemains: 0,
            /**
             * 多选时，最多保留选中个数
             * @type {Number}
             * @default Number.MAX_VAULE
             */
            maxRemains: Number.MAX_VALUE,
            /**
             * 单选列表数据中，是否有“请选择”选项
             * @type {Boolean}
             * @default false
             */
            pleaseSelect: false,
            /**
             * 单选列表数据中，pleaseSelect属性为true时，配置列表出现的提示字样
             * @type {String}
             * @default 请选择
             */
            pleaseSelectText: Sweet.core.i18n.combobox.pleaseSelect
        },
        /**
         * @description 判断下拉框是否是全选的状态
         * @returns {boolean} 返回是否是全选的状态
         */
        isAll: function() {
            var me = this;
            if (me.options.all && me.options.multi && me.formElement.val() === ALL_TEXT) {
                return true;
            }
            return false;
        },
        /**
         * 重新设置基础数据
         * @param {object} data 组件data值
         */
        setData: function(data) {
            var me = this;
            me._setData(data);
        },
        /**
         * 重新设置基础数据
         * @param {object} data 组件data值
         * @param {boolean} flag 是否为自已内部调用
         */
        _setData: function(data, flag) {
            var me = this,
                options = me.options;
            options.data = data || [];
            //问题单:DTS2013121002439
            me.oldInputText2 = "";
            // 问题单：DTS2013080802325
            options.value = null;
            // 修改问题：浮动框打开时setData，会执行_closeFloatPanel()将me.needSetDefaultVal置为true，
            // 然后在afterSetData事件中设置默认值遇到为true设置默认值失败，故在setData()时应将浮动框关闭
            if ("block" === me.dropDownEl.css("display")) {
                me.dropDownEl.hide();
            }

            if (!(me.list || me.tree)) {
                me.setDataFlag = data;
                return;
            }
            if (me.formElement && !(true === flag)) {
                me.formElement.val("");
            }
            me.setDataFlag = null;

            if (me.options.tree) {
                me.tree.setData(data);
            } else {
                // 防止没有数据时出现all，setData之后，重新判断是否添加all
                me._deleteAllItem();
                if (options.multi && options.all && (data && data.length > 0)) {
                    me._creatAllItem();
                }
                // 文本框为空时，是否要设置为all
                if (options.emptyAll) {
                    me.inputShowAll = true;
                }
                me.list.setData(data);
            }
            if (me.formElement && !(true === flag)) {
                me.formElement.attr("title", "");
                options.tooltip = "";
            }
        },
        /**
         * @description 设置是否后台搜索
         * @param {Boolean} remote true：后台搜索，false：前台搜索
         */
        setRemote: function(remote) {
            var me = this;
            me.options.remote = remote;
            if (me.list) {
                me.list.setRemote(remote);
            }
        },
        /**
         * @description 设置是否延迟加载
         * @param {Boolean} lazyLoad 延迟加载
         */
        setLazyLoad: function(lazyLoad) {
            var me = this;
            me.options.lazyLoad = lazyLoad;
            if (me.list) {
                me.list.setLazyLoad(lazyLoad);
            }
        },
        /**
         * 销毁组件
         * @private
         */
        _destroyWidget: function() {
            var me = this;
            // 调用父类_destroyWidget函数销毁文本框
            me._super();
            if (me.list) {
                me.list.destroy();
            } else if (me.tree) {
                me.tree.destroy();
            }
            // 销毁展开框，包括销毁dom节点，清除data中缓存数据
            if (me.dropDownEl) {
                me.dropDownEl.remove();
            }
        },
        /**
         * 刷新弹出层内的布局
         * @private
         */
        _doLayoutFloat: function() {
            "use strict";
            var me = this,
                liNum = 0,
                listHeight = 0,
                tData,
                maxHeight = 0;
            if ($.isNotNull(me.options.store)) {
                tData = me.options.store._dealData();
            } else {
                tData = me.options.data;
            }
            // 定位展开框位置
            me.dropDownEl.addClass(comboboxSelectWinRadio).externalWidth(me.formDiv2El.outerWidth(true));

            // 设置树的大小
            if (me.tree) {
                me.tree.setWidth(me.formDiv2El.width(true));
                me.tree.setHeight("auto");
            } else {
                // 展开框中的项数大于9个，则固定高度、增加滚动条
                liNum = me.dropDownEl.find("li").length;
                if (9 < liNum) {
                    maxHeight = liHeight * (itemLimitNumber - 1);
                    me.ulParentEl.css({
                        "max-height": maxHeight
                    });
                }
                if ((!$.isPlainObject(tData)) && me.options.lazyLoad && $.isNotNull(me.options.store)) {
                    liNum -= 2;
                } else if ($.isPlainObject(tData) && me.options.lazyLoad && $.isNotNull(me.options.store)) {
                    var tempdata = tData.total,
                        dWidth = 0,
                        tempWidth = 0,
                        digits = 1;
                    while (tempdata >= 10) {
                        tempdata /= 10;
                        digits++;
                    }
                    tempWidth = me.dropDownEl.width();
                    dWidth = 125 + 7 * (digits - 1) * 2;
                    if (tempWidth < dWidth) {
                        me.dropDownEl.css("width", dWidth);
                    }
                }
                listHeight = liHeight * liNum;
                if (($.isPlainObject(tData)) && me.options.lazyLoad && $.isNotNull(me.options.store)) {
                    listHeight -= 15;
                }
                me.ulParentEl.css("overflow", "hidden");
                me.list.setHeight(0 === maxHeight ? listHeight : maxHeight);
                me.list.doLayout(true);
            }

            // 展开框在页面上定位
            me._orientDropDown();
        },
        /**
         * 组件重绘
         * @private
         */
        _doLayout: function() {
            this._super();

            // 刷新布局时，关闭弹出层
            this._closeFloatPanel();
        },
        /**
         * @private
         * @description 关闭展开框(多选时才会调用)
         */
        _closeFloatPanel: function() {
            var me = this;
            if (!me.openDropDownFlag && "block" === me.dropDownEl.css("display")) {
                me.dropDownEl.hide();
                var hasWrited = false;
                me._triggerHandler(null, "afterCloseFloatWin", {
                    value: me.getValue(),
                    changed: me.beforCloseFloatWinInput !== me.formElement.val()
                });
                //恢复默认箭头图片
                if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                    hasWrited = true;
                    me.downArrow.removeClass(comboboxBigDataImageClose)
                        .addClass(comboboxArrowClass);
                }

                var valueObj = me.getValue();
                // 没有writer属性，且getValue()无值，关闭时应该将数据恢复，文本框内容清除
                // DTS2013090407624 不可编辑单选下拉框切换数据时，文本框内容应该跟着更新
                if (!me.options.write) {
                    // 过滤后恢复数据
                    if (me.options.tree) {
                        if (!valueObj || !me._getInputText(valueObj)) {
                            // 此处的过滤只是为了恢复数据，过滤后需要清除文本框内容
                            me.needSetDefaultVal = false;
                            me.tree.filter("");
                        }
                    } else {
                        // list过滤结束后不设置默认值
                        me.needSetDefaultVal = true;
                        // 文本框为空时，是否要设置为all，延迟加载不会过滤和设置以前的值，所以不会重新设置文本框内容
                        if (me.options.emptyAll && !me.options.lazyLoad && !me.options.remote) {
                            me.inputShowAll = true;
                        }
                        // 延迟加载时，不进行过滤
                        if (!me.options.lazyLoad && !me.options.remote) {
                            if (hasWrited) {
                                var td = me.list.getValue();
                                me.list._triggerHandler(null, eventAfterSetValue, td);
                                me.list.filter("");
                                if (me._afterFilter && ($.isEmptyObject(td) || $.isNull(td))) {
                                    me._afterFilter();
                                }
                            } else {
                                if (!me.options.multi) {
                                    var td = me.list.getValue();
                                    me.list._triggerHandler(null, eventAfterSetValue, td);
                                    me.list.filter("");
                                }
                            }
                        } else {
                            var txt = me._getInputText();
                            // 若关闭浮动框时，不过滤和设置前一次的值，则文本框值要判断是否为all
                            if (me.options.emptyAll && !txt) {
                                txt = ALL_TEXT;
                            }
                            if ($.isNull(txt)) {
                                me.formElement.val(me.oldInputText2);
                            } else {
                                me.formElement.val(txt);
                            }
                            me.formElement.attr("title", me.formElement.val());
                        }
                    }
                } else {
                    var temptxt = me.list.getValue(),
                        text = me._getInputText(temptxt),
                        newInputText = me.formElement.val();
                    if (temptxt && !($.isArray(temptxt) && 1 > temptxt.length) && !$.isEmptyObject(temptxt) && text !== me.lastSelectedVal) {
                        me.formElement.val(text);
                    } else {
                        if (me.oldInputText2 !== newInputText) {
                            me._triggerHandler(null, "change", newInputText);
                        }
                        me.formElement.val(newInputText);
                    }
                    me._setTitle();
                }
                if (me.rendered) {
                    me.formElement.blur();
                }
            }
            me.openDropDownFlag = false;
            me.tabopen = false;
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this,
                options = me.options;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "change") {
                    if (options.tree) {
                        //树
                        me.tree.addListener("change", func);
                    } else {
                        me.list.addListener("change", function(event, val) {
                            if (!options.write && $.isEmptyObject(val) && !$.isArray(val)) {

                            } else {
                                func(event, val);
                            }
                        });
                    }
                }
                // 添加beforeCheckboxClick事件的监听
                if (eventName === "beforeCheckboxClick") {
                    if (options.tree) {
                        //树
                        me.tree.addListener("beforeCheckboxClick", func);
                    } else {
                        me.list.addListener("beforeCheckboxClick", func);
                    }
                }
            });
        },
        /**
         * @description 删除注册监听事件
         * @private
         * @param {String} eventName 事件名称
         */
        _removeListener: function(eventName) {
            var me = this,
                options = me.options;
            if (!$.isNull(eventName)) {
                if (eventName === "change") {
                    if (options.tree) {
                        //树
                        me.tree.removeListener("change");
                    } else {
                        me.list.removeListener("change");
                    }
                }
                // 去除beforeCheckboxClick事件的监听
                if (eventName === "beforeCheckboxClick") {
                    if (options.tree) {
                        //树
                        me.tree.removeListener("beforeCheckboxClick");
                    } else {
                        me.list.removeListener("beforeCheckboxClick");
                    }
                }
            }
        },
        /**
         * 设置组件值
         * @private
         * @param {object} value 组件值
         */
        _setValue: function(value) {
            var me = this,
                options = me.options;
            if (!value) {
                me.formElement.val("");
                me.formElement.attr("title", "");
                options.tooltip = "";
                return;
            }
            // 支持像文本框一样的使用
            if (options.write && value.write) {
                // 清除选中的值
                if (me.options.tree) {
                    // 此处的过滤只是为了清除选中的值，过滤后不需要清除文本框内容
                    me.needSetDefaultVal = true;
                    me.tree.filter("");
                } else {
                    // list过滤结束后不设置默认值
                    me.needSetDefaultVal = true;
                    me.list.filter("");
                    me.formElement.val("");
                }
                me.formElement.val(value.text);
                me._setTitle();
                me._triggerHandler(null, "change", value);
                return;
            }
            // 正常的下拉框
            // 防止没有任何操作，list和tree都没创建就setValue()
            // setValue()时，应该让所有的数据都出来，否则setValue出错或者不全
            me._showAllLine();

            if (me.options.tree) {
                me.tree.setValue(value);
            } else {
                me.list.setValue(value);
            }

            if (me.tree) {
                if (me.timerGetValue) {
                    clearInterval(me.timerGetValue);
                }
            }

            // 改变all选项的样式
            me._setAllItem();
        },
        /**
         * 获取组件值
         * @private
         * @return {Object} 组件值
         */
        _getValue: function() {
            var me = this,
                options = me.options,
                value = null;
            // 防止没有任何操作，list和tree都没创建就setValue()
            if (me.options.tree) {
                value = me.tree.getValue();
            } else {
                value = me.list.getValue();
                // 多选list若配置emptyAll，且文本框为all、getValue()为空数组时，则返回null
                if (options.multi && options.emptyAll && (me.formElement.val() === ALL_TEXT) && (!value || ($.isArray(value) && 1 > value.length))) {
                    return null;
                }
            }
            if (options.write && me.formElement.val() && (!value || ($.isArray(value) && 1 > value.length) || $.isEmptyObject(value))) {
                value = {
                    "value": me.formElement.val(),
                    "text": me.formElement.val(),
                    "write": true
                };
            }
            return value;
        },
        /**
         * @private
         * 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用
         */
        _setDisabled: function(disabled) {
            var me = this,
                formDiv2El = me.formDiv2El,
                downArrow = me.downArrow,
                arrowCls = "";

            formDiv2El.removeClass(comboboxParentClass)
                .removeClass(comboboxParentGrayClass);
            if (disabled) {
                formDiv2El.addClass(comboboxParentGrayClass);
                arrowCls = comboboxArrowGrayClass;
                // setValue()与setDisabled()连用，setValue()后为空时，
                if (!me.formDiv2El.hasClass(me.defaultPaddingDivClass)) {
                    return;
                }
                formDiv2El.removeClass(me.defaultPaddingDivClass).addClass(me.defaultPaddingDivDisabledClass);
            } else {
                formDiv2El.addClass(comboboxParentClass);
                arrowCls = comboboxArrowClass;
                if (me.rendered) {
                    me.formElement.blur();
                }
                if (!formDiv2El.hasClass(me.defaultPaddingDivDisabledClass)) {
                    return;
                }
                formDiv2El.removeClass(me.defaultPaddingDivDisabledClass).addClass(me.defaultPaddingDivClass);
            }
            downArrow.removeClass().addClass(arrowCls);
            me.__setDisabled(disabled);
        },
        /**
         * @private
         * 设置组件不可编辑
         * @param {Boolean} editable 是否可编辑
         */
        _setEditable: function(editable) {
            var me = this;

            if (!editable) {
                // setValue()与setDisabled()连用，setValue()后为空时，
            } else {
                if (me.rendered) {
                    me.formElement.blur();
                }
            }
        },
        /**
         * @private
         * @description 组件配置属性校验，比如属性间互斥等
         */
        _optionsValidate: function() {
            var me = this,
                o = me.options;
            // 延迟加载时不能全选
            if (o.all && o.lazyLoad) {
                me._error("Lazy loading can not select all!");
                return false;
            }

            return true;
        },
        /**
         * @private
         * @description 创建输入域
         */
        _createInputField: function() {
            var me = this,
                formDiv1El = me.formDiv1El,
                formDiv2El = me.formDiv2El = $("<div>").appendTo(formDiv1El)
                    .attr("tabindex", -1),
                formElement = me.formElement = $("<input>"),
                downArrow = me.downArrow = $("<span>");
            //暂时屏蔽此功能，后续修改好后再开放此属性，现在即使设置也不起作用
            if (!me._optionsValidate()) {
                return;
            }

            downArrow.addClass(comboboxArrowClass)
                .bind("click", {
                "me": me
            }, me._showDropDownList)
                .appendTo(formDiv2El);
            formElement.attr("type", me.type)
                .addClass(comboboxInputClass)
                .appendTo(formDiv2El);
            if (!me.options.editable) {
                formElement.attr("disabled", true);
            }
            if ($.isNotNull(me.options.vID)) {
                formElement.attr("id", me.options.vID);
            }

            formDiv2El.addClass(me.defaultPaddingDivClass).addClass(comboboxParentClass);
            formElement.click(function(event) {
                if ("block" === me.dropDownEl.css("display")) {
                    event.stopImmediatePropagation();
                }
            }).bind("keyup", function(event) {
                var key1 = event.charCode || event.keyCode;
                //问题单：DTS2013122005038
                if (Sweet.constants.keyCode.TAB === key1) {
                    if (me.disabled) {
                        return;
                    }
                    if ("none" === me.dropDownEl.css("display")) {
                        me.tabopen = true;
                        // 刷新弹出层的布局
                        me._doLayoutFloat();
                        // 在页面上定位
                        me._orientDropDown();
                        var maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                        me.dropDownEl.css({
                            "z-index": maxIndex
                        });
                        me.dropDownEl.show();
                        me.beforCloseFloatWinInput = me.formElement.val();
                        me.openDropDownFlag = false;
                        me.formElement.select();
                        return;
                    }
                }
                /*避免在输入时忽然跳转显示all*/
                me.inputShowAll = false;
                if (!me.options.tree) {
                    me.list.setFilter(me.formElement.val());
                }
                Sweet.Task.Delay.start({
                    id: me.options.id + "-combobox-filter-delay",
                    run: function(args) {
                        if ("none" !== me.dropDownEl.css("display")) {
                            me._afterFilter = me._filterItems(args[0], args[1]);
                        }
                    },
                    args: [event, me],
                    delay: 350
                });
            });

            // 创建展开框
            var dropDownElId = me.dropDownElId = "comboboxDropdown" + increments++,
                dropDownEl = me.dropDownEl = $("<div>").addClass(me.floatBgClass)
                    .attr({
                    "tabindex": -1
                })
                    .hide()
                    .appendTo("body"),
                ulParentEl = me.ulParentEl = $("<div>").attr({
                    "id": dropDownElId
                })
                    .addClass(comboboxUlParentClass)
                    .appendTo(dropDownEl);
            me._asynOperations();
            if (me.options.emptyAll) {
                me.inputShowAll = true;
            }
        },
        /**
         * 展开下拉框
         * @private
         * @param {Object} 事件
         */
        _showDropDownList: function(event) {
            var me = event.data.me;
            if (me.downArrow.hasClass(comboboxArrowGrayClass)) {
                return;
            }
            if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                me.downArrow.removeClass(comboboxBigDataImageClose)
                    .addClass(comboboxArrowClass);
                // 过滤后恢复数据
                //如果needSetDefaultVal为true，表示需要list或tree重新恢复数据，如果为flase，表示不用了
                me.needSetDefaultVal = true;
                if (me.options.tree) {
                    me.tree.filter("");
                } else {
                    me.list.filter("");
                }
                if ("none" === me.dropDownEl.css("display")) {
                    me.dropDownEl.show();
                    me.beforCloseFloatWinInput = me.formElement.val();
                }
                event.stopImmediatePropagation();
            } else {
                // 调节展开框高度
                me._resizeDropDownHeight();
                var maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                me.dropDownEl.css("z-index", maxIndex);
                // 是否要打开展开框标志
                me.openDropDownFlag = false;
                //展开框没有打开
                if (!$.isVisiable(me.dropDownEl)) {
                    // 在页面上定位
                    me._orientDropDown();
                    me.dropDownEl.addClass(comboboxSelectWinRadio);
                    me.dropDownEl.show();
                    me.openDropDownFlag = true;
                    me.beforCloseFloatWinInput = me.formElement.val();
                    if (me.rendered) {}
                }
                // 刷新弹出层的布局
                me._doLayoutFloat();
            }
            me._showAllLine();
        },
        /**
         * 异步生成list或tree，并注册事件
         * @private
         */
        _asynOperations: function() {
            var me = this,
                options = me.options;
            if (!me.finishedCreatingDropdown) {
                // 创建展开框
                me._createDropDown();
                me._doLayoutFloat();
                if (me.setDataFlag) {
                    me._setData(me.setDataFlag, true);
                }
                // 注册事件
                me._registInitEvent();
                me.finishedCreatingDropdown = true;
            }
        },
        /**
         * 创建下拉列表
         * @private
         */
        _createDropDown: function() {
            var me = this,
                options = me.options,
                dropDownEl = me.dropDownEl;
            dropDownEl.css({
                "height": "auto"
            });
            if (me.list || me.tree) {
                return;
            }
            if (!options.tree) {
                // 创建list下拉列表（区分于树）
                me._creatDropDownList();
            } else {
                // 创建tree拉列表
                me._creatDropDownTree();
            }
            // 防止点击展开框时，导致展开框关闭
            dropDownEl.click(function(event) {
                event.stopImmediatePropagation();
            });
        },
        /**
         * 创建下拉列表（list）
         * @private
         */
        _creatDropDownList: function() {
            var me = this,
                options = me.options,
                data = options.data;
            // 多选出现all
            if (options.multi) {
                // 出现全选
                if (options.all) {
                    me._creatAllItem();
                }
            }
            // 创建list
            var list = me.list = new Sweet.list.List({
                multi: options.multi,
                data: data,
                store: options.store,
                lazyLoad: options.lazyLoad,
                limit: options.limit,
                remote: options.remote,
                tip: options.tip,
                renderTo: me.dropDownElId,
                minRemains: options.minRemains,
                maxRemains: options.maxRemains,
                _pleaseSelect: options.pleaseSelect,
                _pleaseSelectText: options.pleaseSelectText
            });
        },
        /**
         * 创建下拉列表（tree）
         * @private
         */
        _creatDropDownTree: function() {
            var me = this,
                options = me.options;

            // 创建树形下拉列表
            var tree = me.tree = new Sweet.tree.Tree({
                height: "auto",
                multi: options.multi,
                data: options.data,
                store: options.store,
                value: options.value,
                lazyLoad: options.lazyLoad,
                lazyLoadRows: options.limit,
                backSearch: options.remote,
                backEndLoad: true,
                searchDir: options.searchDir,
                renderTo: me.dropDownElId,
                icon: options.icon,
                // 单选树
                nodeClick: function(node, data) {
                    if (!tree.options.multi && (!data.children || data.children.length < 1)) {
                        me.dropDownEl.hide();
                        var valueObj = me.tree.getValue();
                        me.formElement.val(data.text);
                        me._setTitle();
                        // 恢复所有的节点
                        me._triggerHandler(null, "afterCloseFloatWin", {
                            value: me.getValue(),
                            changed: me.beforCloseFloatWinInput !== me.formElement.val()
                        });
                        if (me.rendered) {
                            me.formElement.blur();
                        }
                        // 恢复默认箭头图片
                        if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                            me.downArrow.removeClass(comboboxBigDataImageClose)
                                .addClass(comboboxArrowClass);
                        }
                    }
                },
                // 多选树
                nodeCheck: function(event, data) {
                    if (tree.options.multi) {
                        var txt = me._getInputText();
                        me.formElement.val(txt);
                        me._setTitle();
                        if (me.rendered) {
                            me.formElement.blur();
                        }
                    }
                },
                // 多选树
                nodeUnCheck: function(event, data) {
                    if (tree.options.multi) {
                        var txt = me._getInputText();
                        me.formElement.val(txt);
                        me._setTitle();
                        if (me.rendered) {
                            me.formElement.blur();
                        }
                    }
                }
            });
            me.dropDownElRended = false;
        },
        /**
         * 注册事件(list)
         * @private
         */
        _registInitEvent: function() {
            var me = this;
            if (me.list) {
                me._registInitEventList();
            } else if (me.tree) {
                me._registInitEventTree();
            } else {
                return;
            }
        },
        /**
         * 注册事件(list)
         * @private
         */
        _registInitEventList: function() {
            var me = this,
                options = me.options,
                list = me.list;

            // 设置默认值
            list.addListener("afterSetData", function(event, data) {
                // 如果外部注册了afterSetData
                me._triggerHandler(null, eventAfterSetData, data);
                // 多选list配置了emptyAll属性且没有选择的值时，则不设置默认值，文本框出现all
                var tv = list.getValue();
                var hasVle = true;
                if (tv) {
                    if ($.isArray(tv) && tv.length > 0) {
                        hasVle = false;
                    }
                    if ($.isPlainObject(tv) && (tv.value || tv.text)) {
                        hasVle = false;
                    }
                }
                if (options.multi && options.emptyAll) {
                    if (!hasVle) {
                        return;
                    }
                    // 设置文本框的值
                    if (me.inputShowAll) {
                        me.formElement.val(ALL_TEXT);
                        me.formElement.attr("title", me.formElement.val());
                        me.inputShowAll = false;
                    }
                    me._setTitle();
                    return;
                }
                // 过滤的时候，会setData()，此时不要设置默认值
                if (me.needSetDefaultVal) {
                    me.needSetDefaultVal = false;
                    return;
                }
                // 默认值为第一条数据
                var value = (data && data.length > 0) ? data[0] : [];

                if (options.value) {
                    value = options.value || value;
                } else {
                    if (options.multi) {
                        return;
                    }
                }

                if ($.isArray(value) && (value.length < 1 || value.length > data.length)) {
                    // 多选且配置emptyAll属性，设置的值为空时，文本框应该为all
                    if (options.multi && options.emptyAll) {
                        me.formElement.val(ALL_TEXT);
                    } else {
                        me.formElement.val("");
                    }
                    me._setTitle();
                    if (me.rendered) {
                        me.formElement.blur();
                    }
                    return;
                }
                me._setTitle();
                // 有长度的数组或一个对象
                list.setValue(value);
                me.needSetDefaultVal = false;
                options.value = value;
            });

            // 设置文本框内容
            list.addListener("afterSetValue", function(event, data) {
                var inputText;
                // 问题单：DTS2013080802325
                if ((!options.value || !options.value.value || ($.isArray(options.value) && 1 > options.value.length)) && (!data || ($.isArray(data) && 1 > data.length))) {
                    // 多选且配置emptyAll属性，设置的值不存在时，文本框应该为all
                    var tempCfg = options.multi && options.emptyAll;
                    var vtxt = tempCfg ? ALL_TEXT : "";
                    me.formElement.val(vtxt);
                    me._setTitle();
                    //多选时，不默认选择第一个
                    if (!options.multi) {
                        list._setFirstValue();
                    }
                    return;
                }
                if (me.notSetInpueVal) {
                    me.notSetInpueVal = false;
                    return;
                }
                // 单选，且选择了请选择选项
                var isPlsSlt = Boolean(!options.multi && data && options.pleaseSelectText === data.value && options.pleaseSelect);
                if (isPlsSlt) {
                    inputText = "";
                } else {
                    inputText = me._objArrToObj(data).text;
                    // 多选list，判断all是否需要选中
                    me._setAllItem();
                    if (me.allLiEl && me._allIsClicked()) {
                        inputText = ALL_TEXT;
                    }
                }
                //如果设置的值和显示的值一样，不需要再设置了
                if (me.formElement.val() === inputText) {
                    return;
                }
                // 设置文本框的值
                if ($.isNull(inputText) && !isPlsSlt) {
                    me.formElement.val(me.oldInputText2);
                } else {
                    me.formElement.val(inputText);
                }
                if (me.rendered) {
                    me.formElement.blur();
                }
                me._setTitle();
                // 如果外部注册了afterSetValue
                me._triggerHandler(null, eventAfterSetValue, data);
            });

            // 单选list
            list.addListener("nodeClick", function(node, data) {
                if (!options.multi) {
                    // DTS2013090204662
                    // 问题：下拉框过滤之后再点击下拉框显示的是过滤的内容（应该为全部数据）
                    me._closeFloatPanel();
                    me.notSetInpueVal = false;
                }
            });

            // 多选list
            list.addListener("checkboxClick", function(node, data) {
                if (options.multi) {
                    var valueObj = list.getValue();
                    var txt = me._objArrToObj(valueObj).text;
                    // DTS2013090301740 
                    me.notSetInpueVal = false;
                    // 选中all上的对勾
                    if (me.allLiEl) {
                        if (list.isAll()) {
                            me.allLiEl.children("a")
                                .removeClass()
                                .addClass(checkboxImageSelect);
                            txt = ALL_TEXT;
                        } else {
                            me.allLiEl.children("a")
                                .removeClass()
                                .addClass(checkboxImage);
                        }
                    }
                    // 没有选择数据，而且配置emptyAll，文本框应该显示all
                    if (!txt && options.emptyAll) {
                        me.formElement.val(ALL_TEXT);
                    } else {
                        me.formElement.val(txt);
                    }
                    me._setTitle();
                    if (me.rendered) {
                        me.formElement.blur();
                    }
                }
            });
        },
        /**
         * 注册事件(tree)
         * @private
         */
        _registInitEventTree: function() {
            var me = this,
                options = me.options,
                tree = me.tree;
            // nodeExpand，定位展开框位置
            tree.addListener("nodeExpand", function(event, flag) {
                me._orientDropDown();
            });

            // afterSetValue
            tree.addListener("afterSetValue", function(event, data) {
                var inputText = me._getInputText(data);
                // 设置文本框的值
                me.formElement.val(inputText);
                me._setTitle();
                if (me.rendered) {
                    me.formElement.blur();
                }
                // 如果外部注册了afterSetValue
                me._triggerHandler(null, eventAfterSetValue, data);
            });

            // 如果外部注册了afterSetData
            tree.addListener("afterSetData", function(event, data) {
                // 过滤后的setData()，不要清除文本框内容，其他的setData()需要清除
                if (!me.needSetDefaultVal) {
                    me.formElement.val("");
                    me._setTitle();
                }
                me.needSetDefaultVal = false;
                me._triggerHandler(null, eventAfterSetData, data);
            });
        },
        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });

            return result;
        },
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                options = me.options;
            me._super();
            //渲染tree
            if (me.tree && !me.dropDownElRended) {
                me.tree.render(me.dropDownElId);
                me.dropDownElRended = true;
            }
            me.formElement.bind("click", {
                "me": me
            }, me._showDropDownList);
            me.formElement.bind("focus", function() {
                //问题单：DTS2013122005038
                var tempVal;
                if (me.list) {
                    tempVal = me.list.getValue();
                }
                me.oldInputText = me.formElement.val();
                me.oldInputText2 = me.formElement.val();
                me.lastSelectedVal = me._getInputText(tempVal);

            });
            me.formElement.bind("focusout", function() {
                if ("block" === me.dropDownEl.css("display") && me.tabopen) {
                    me._closeFloatPanel();
                }
            });
            // 解决问题：配置store时，组件在store.load()后，也应该将文本框内容置为all
            // DTS2013083001723 
            if (options.store && options.emptyAll) {
                options.store.addListener({
                    "beforeLoad": function() {
                        me.inputShowAll = true;
                        if (me.notSetInpueVal) {
                            me.inputShowAll = false;
                        }
                    }
                });
            }
        },
        /**
         * 创建all和线
         * @private
         */
        _creatAllItem: function() {
            var me = this;
            // 增加all选项
            var liEl = me.allLiEl = $("<li>");
            var aDom = $("<a>");
            var spanDom = $("<span>").addClass(comboboxMultiSpan);
            var partitionLine = me.partitionLine = $("<div>").addClass(comboboxPartitionLineClass);
            liEl.addClass(comboboxExpandText)
                .prependTo(me.dropDownEl);
            aDom.addClass(checkboxImage)
                .appendTo(liEl);
            liEl.bind("click", function() {
                me._clickAllImage(aDom.get(0));
            });
            spanDom.attr("value", "All")
                .text(ALL_TEXT)
                .appendTo(liEl);
            partitionLine.insertBefore(me.ulParentEl);
        },
        /**
         * 删除all和线
         * @private
         */
        _deleteAllItem: function() {
            var me = this;
            if (me.allLiEl) {
                me.dropDownEl.find("li").remove();
                me.partitionLine.remove();
                me.allLiEl = null;
            }
        },
        /**
         * 全选是否被修改样式
         * @private
         */
        _setAllItem: function() {
            var me = this;
            // 有all选项
            if (me.allLiEl) {
                // 全选
                if (me._allIsClicked()) {
                    me.allLiEl.children("a").removeClass(checkboxImage)
                        .addClass(checkboxImageSelect);
                } else {
                    me.allLiEl.children("a")
                        .removeClass(checkboxImageSelect)
                        .addClass(checkboxImage);
                }
            }
        },
        /**
         * 判断多选下拉框是否被全选
         * @private
         * @return {boolean} 
         */
        _allIsClicked: function() {
            var me = this,
                options = me.options;
            var isAll = false;
            if (me.list && me.list.isAll()) {
                isAll = true;
            }
            return isAll;
        },
        /**
         * 隐藏all和线
         * @private
         */
        _hideAllLine: function() {
            var me = this;
            if (me.allLiEl) {
                me.allLiEl.hide();
                me.partitionLine.hide();
            }
        },
        /**
         * 显示all和线
         * @private
         */
        _showAllLine: function() {
            var me = this;
            if (me.allLiEl) {
                me.allLiEl.show();
                me.partitionLine.show();
            }
        },
        /**
         * 点击all事件
         * @param {Object} nodeName dom节点
         * @private
         */
        _clickAllImage: function(nodeName) {
            var me = this,
                options = me.options;
            var oldImageClass = nodeName.className;
            var newImageClass = (oldImageClass === checkboxImage ? checkboxImageSelect : checkboxImage);
            me.allLiEl.children("a")
                .removeClass(oldImageClass)
                .addClass(newImageClass);
            if (newImageClass === checkboxImageSelect) {
                me.list.all(true);
                me.formElement.val(ALL_TEXT);
                me._setTitle();
            } else {
                me.list.all(false);
                // 没有选择数据，而且配置emptyAll，文本框应该显示all
                if (options.emptyAll) {
                    me.formElement.val(ALL_TEXT);
                } else {
                    me.formElement.val("");
                }
                me._setTitle();
            }
            if (me.rendered) {
                me.formElement.blur();
            }
        },
        /**
         * 获取tree或list的value数据的text（只获取叶子节点）
         * @private
         * @param {Object} valueObj 数组对象
         * @return {String} 对象中的所有text
         */
        _getInputText: function(valueObj) {
            var me = this;
            valueObj = valueObj || me.getValue();
            var valueArr = me._oneObjToArray(valueObj);
            var leafVal = me._getLeafNodeObj(valueArr);
            return me._objArrToObj(leafVal).text;
        },
        /**
         * 将tree返回的数据转换为对象数组（只获取叶子节点）
         * @private
         * @param {Object} treeValue 对象数组 
         * @return {object} [{"text":"1", "value":"ONE"},{"text":"2", "value":"TWO"}]
         */
        _getLeafNodeObj: function(treeValue, obj) {
            var me = this;
            obj = obj || [];
            if (!treeValue) {
                return;
            }
            for (var i = 0; i < treeValue.length; i++) {
                if (treeValue[i].children) {
                    me._getLeafNodeObj(treeValue[i].children, obj);
                } else {
                    obj.push(treeValue[i]);
                }
            }
            return obj;
        },
        /**
         * 将对象数组转换为一个对象
         * @private
         * @return {object} {"text":"1,2", "value":"ONE,TWO"}
         */
        _objArrToObj: function(data) {
            var me = this,
                obj = {}, text = "",
                value = "",
                tempText = "";
            if (!data) {
                obj.text = text;
                obj.value = value;
                return obj;
            }
            var arr = me._oneObjToArray(data);
            for (var i = 0; i < arr.length; i++) {
                tempText = $.isUndefined(arr[i].text) ? arr[i].value : arr[i].text;
                value = value + "," + arr[i].value;
                text = text + "," + tempText;
            }
            obj.text = text.substring(1, text.length);
            obj.value = value.substring(1, value.length);
            return obj;
        },
        /**
         * 统一数据格式，对象转换为数字
         * @param {Object} data 对象或数组
         * @return {object} 数组如[{"text":"1", "value":"ONE"}]
         * @private
         */
        _oneObjToArray: function(data) {
            if (!data) {
                return null;
            }
            var value = [];
            // 对象转换为数字
            if ($.isArray(data)) {
                value = data;
            } else {
                if (!$.isUndefined(data.value) && !$.isUndefined(data.text)) {
                    value.push(data);
                }
            }
            return value;
        },
        /**
         * 过滤选项
         * @private
         */
        _filterItems: function(event, obj) {
            var me = obj,
                options = me.options,
                key = event.charCode || event.keyCode,
                filterChar = me.formElement.val();
            // 文本框不可编辑时，不过滤
            if (false === me.editable) {
                return;
            }
            if (Sweet.constants.keyCode.TAB === key) {
                return;
            }
            // 手动输入时，换成小叉图片
            if (me.downArrow.hasClass(comboboxArrowClass)) {
                me.downArrow.removeClass(comboboxArrowClass)
                    .addClass(comboboxBigDataImageClose);
            }
            // 输入值与上一次的输入值相同，不过滤
            if (me.oldInputText === filterChar) {
                return;
            }
            me.oldInputText = filterChar;
            // 过滤的时候，会setData()，此时不要设置默认值
            me.needSetDefaultVal = true;
            me.notSetInpueVal = true;
            // 树过滤
            if (options.tree) {
                me.tree.filter(filterChar);
                if ("none" === me.dropDownEl.css("display")) {
                    me.downArrow.click();
                }
                return;
            } else {
                //存放过滤前list选中的值
                var lastSelectVal = me.list.getValue();
                me.list.filter(filterChar);
                if ("none" === me.dropDownEl.css("display")) {
                    me.downArrow.click();
                }
                //修改问题：comboBox配置write为true，列表选中一个值，删除输入框中的值，getValue拿到的是删除以前的值
                //如果write为true，文本框输入值时将上一次单选列表选中的值清空
                if (options.write && !options.multi) {
                    me.list.setValue("");
                }
                return function() {
                    //修改问题：单选列表comboBox配置write为false，编辑文本框，保留list上一次选中的值；
                    if (!options.multi && !options.write) {
                        me.list.setValue(lastSelectVal);
                    }
                };
            }

            // 是否显示all
            if (filterChar) {
                me._hideAllLine();
            } else {
                me._showAllLine();
            }

            // 调节展开框高度
            me._resizeDropDownHeight();
            if ("none" === me.dropDownEl.css("display")) {
                me.dropDownEl.show();
                me.beforCloseFloatWinInput = me.formElement.val();
            }
            // 展开框在页面上定位
            me._orientDropDown();
        },
        /**
         * 过滤后，重新调整展开框的高度
         * @private
         */
        _resizeDropDownHeight: function() {
            var me = this;
            // 展开框中的项数大于10个，则固定高度、增加滚动条
            if (me.list) {
                if (me.allLiEl && (("display" === me.dropDownEl.css("display") &&
                    "display" === me.allLiEl.css("display")) ||
                    "none" === me.dropDownEl.css("display"))) {
                    me.ulParentEl.css({
                        "max-height": ((itemLimitNumber - 1) * liHeight) + "px"
                    });
                } else {
                    if (me.list.lazyLoadEl) {
                        if (me.options.lazyLoad && !$.isVisiable(me.list.lazyLoadEl)) {
                            me.ulParentEl.css({
                                "max-height": ((itemLimitNumber - 1) * liHeight - 18) + "px"
                            });
                        }
                    }
                }
            }
        },
        /**
         * 定位展开框位置
         * @private
         */
        _orientDropDown: function() {
            var me = this;
            // 展开框在页面上定位
            var pos = $.getFloatOffset(me.formDiv2El, me.dropDownEl);
            me.dropDownEl.css({
                "left": pos.left,
                "top": pos.top
            });
        },
        /**
         * 改变提示内容
         * @private
         */
        _setTitle: function() {
            var me = this,
                options = me.options,
                val = me.formElement.val(),
                tip = options.tip;
            if (tip && val !== " ") {
                options.tooltip = val;
            }
        },
        /**
         * @description 过滤后处理
         * @private
         */
        _afterFilter: $.noop
    });

    /**
     * 创建下拉框
     * @name Sweet.form.ComboBox
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * </pre>
     * @example 
     * <pre>
     *  var value1 = [{"value":"1", "text":"ONE"},
     *                {"value":"2", "text":"TWO"},
     *                {"value":"3", "text":"THREE"},
     *                {"value":"4", "text":"FOUR"}];
     *  sweetCombobox = new Sweet.form.ComboBox({
     *      label : true,
     *      width : "30%",
     *      height : 40,
     *      data : value1,
     *      labelText : 'combobox',
     *      value : {"value":"2", "text":"TWO"},
     *      multi : false,
     *      renderTo : "sweet-combobox"
     * });
     * </pre>
     */
    Sweet.form.ComboBox = $.sweet.widgetFormCombobox;

}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * form组件--下拉框
 * 2013/5/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var comboboxInputClass = "sweet-form-comboboxv1-input",
        comboboxArrowClass = "sweet-form-comboboxv1-arrow",
        comboboxArrowGrayClass = "sweet-form-comboboxv1-arrow-gray",
        comboboxParentClass = "sweet-form-comboboxv1",
        comboboxParentGrayClass = "sweet-form-comboboxv1-gray",
        comboboxWinClass = "sweet-form-comboboxv1-win",
        comboboxWinBodyClass = "sweet-form-comboboxv1-win-body",
        comboboxWinBodyResizeElClass = "sweet-form-body-resizeEl",
        comboboxWinBodyResizeXYElClass = "sweet-form-body-resizeXYEl",
        comboboxWinBodyResizeXlElClass = "sweet-form-body-resizeXlEl",
        comboboxWinBodyResizeXrElClass = "sweet-form-body-resizeXrEl",
        comboboxWinBodyResizeYtElClass = "sweet-form-body-resizeYtEl",
        comboboxWinBodyResizeYbElClass = "sweet-form-body-resizeYbEl",
        comboboxBigDataImageClose = "sweet-form-comboboxv1-bigDataImage-delete",
        comboboxTreeFloatPanelClass = "sweet-form-comboboxv1-tree-win",
        eventAfterSetData = "afterSetData",
        eventAfterSetValue = "afterSetValue",
        eventChange = "change",
        eventBeforeSearch = "beforesearch",
        eventSearch = "search",
        eventNodeClick = "nodeClick",
        eventClick = "click",
        eventBeforeCheckboxClick = "beforeCheckboxClick",
        eventBeforeCheckChange = "beforecheckchange",
        eventCollapse = "collapse",
        eventExpand = "expand",
        eventCheckChange = "checkchange",
        eventCheckboxClick = "checkboxClick",
        eventCheckboxAllClick = "checkboxAllClick",
        eventResizeLayout = "resizeLayout",
        eventResizeElMove = "resizeElMove",
        increments = 0,
        itemLimitNumber = 10,
        LIHEIGHT = 22,
        ALL_TEXT = Sweet.core.i18n.combobox.checkAll;

    $.widget("sweet.widgetFormCombobox_v1", $.sweet.widgetFormInput, /** @lends Sweet.form.ComboBox_v1.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-form-combobox-v1]",
        type: 'text',
        eventNames: /** @lends Sweet.form.ComboBox_v1.prototype*/
        {
            /**
             * @event
             * @description 值改变的事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            change: "改变值事件",
            /**
             * @event
             * @description 查询前事件,如果返回为false则不做过滤处理,一般两个参数({filter: xxxx}, me)
             */
            beforesearch: "查询前事件",
            /**
             * @event
             * @description 过滤事件,一般两个参数(data, me)
             */
            search: "过滤事件",
            /**
             * @event
             * @description 调用完组件的setData方法后事件
             */
            afterSetData: "调用完setData方法后事件",
            /**
             * @event
             * @description 调用完组件的setValue执行后触发
             */
            afterSetValue: "setValue执行后触发",
            /**
             * @event
             * @description 点击checkBox之前的事件(checkBox未选中的时候触发)
             */
            beforeCheckboxClick: "点击checkBox之前的事件(checkBox未选中的时候触发)",
            /**
             * @event
             * @description 树节状态改变前事件,一般参数为({node: node, checked: checked}, tree/list, me)
             */
            beforecheckchange: "树节状态改变前事件",
            /**
             * @event
             * @description 关闭浮动窗口后的事件
             */
            collapse: "下拉列表关闭后的事件",
            /**
             * @event
             * @description 下拉列表展开前的事件
             */
            expand: "下拉列表展开前的事件",
            /**
             * @event
             * @description 勾选状态发生变化时的事件
             */
            checkchange: "勾选状态发生变化时的事件",
            /**
             * @event
             * @description 单选节点单击时触发的事件
             */
            click: "单选节点单击时触发的事件",
            /**
             * @event
             * @description 缩放刷新后事件,一般两个参数(renderEl, me)
             */
            resizeLayout: "缩放刷新后事件",
            /**
             * @event
             * @description 虚线框缩放事件,一般两个参数({offset: offset, resizeInfo: resizeInfo, resizeType: "xy"}, me)
             */
            resizeElMove: "虚线框缩放事件"
        },
        options: /** @lends Sweet.form.ComboBox_v1.prototype*/
        {
            /**
             * 基础数据
             * @type Object
             * @default null
             */
            data: [],
            /**
             * 组件值
             * @type {Object/String}
             * @default null
             */
            value: null,
            /**
             * 多选属性
             * @type Boolean
             * @default false
             */
            multi: false,
            /**
             * 多选下拉框是否配置all选项
             * @type Boolean
             * @default true
             */
            all: false,
            /**
             * 是否支持手动输入
             * @type Boolean
             * @default false
             */
            write: false,
            /**
             * 是否显示选项的提示
             * @type Boolean
             * @default false
             */
            tip: false,
            /**
             * 是否为树
             * @type Boolean
             * @default false
             */
            tree: false,
            /**
             * 输入框为空时显示的字符
             * @type {Object/String/Number}
             * @default 请选择
             */
            emptyText: Sweet.core.i18n.combobox.pleaseCheck,
            /**
             * 为空时，是否默认全部选择
             * @type Boolean
             * @default false
             */
            emptyAll: false,
            /**
             * 多选时，必须保留选中的个数
             * @type {Number}
             * @default 0
             */
            minRemains: 0,
            /**
             * 多选时，最多保留选中个数
             * @type {Number}
             * @default Number.MAX_VAULE
             */
            maxRemains: Number.MAX_VALUE,
            /**
             * 行工具栏图标，现在只支持delete
             * @type {Array}
             * @default null
             */
            tools: null,
            /**
             * 查看已选择操作条
             * @type {Boolean}
             * @default false
             */
            sViewBar: false,
            /**
             * 是否显示树节点的图标
             * @type {Boolean}
             * @default false
             */
            icon: false,
            /**
             * 是否显示节点之间的连线
             * @type {Boolean}
             * @default true
             */
            useArrows: true,
            /**
             * 下拉时是否显示清除过滤信息图标
             * @type {Boolean}
             * @default false
             */
            isClearFilter: false,
            /**
             * 单选下拉时,是否让数据第一条默认选中
             * @type {Boolean}
             * @default true
             */
            isSelectFirst: true,
            /**
             * 以毫秒表示的从开始输入到发出查询语句过滤下拉列表的时长, 默认350毫秒  
             * @type {Number}
             * @default 350
             */
            queryDelay: 350,
            /**
             * 下拉框是否支持缩放,支持三种情况: 全缩放(true/"xy"),宽度缩放"x",高度缩放"y"
             * @type {Boolean}
             * @default false
             */
            resizAble: false
        },
        /**
         * @description 判断下拉框是否是全选的状态,只针对多选list型
         * @returns {Boolean} 返回是否是全选的状态
         */
        isAll: function() {
            var me = this;
            //这里只针对多选list,分两种:1.全选;2.一个都没选且emptyAll为true
            if (me.options.multi && !(true == me.options.tree || "true" == me.options.tree)) {
                if (me.list && (me.list.isAll() || (me.options.emptyAll && me.list.getValue().length <= 0))) {
                    return true;
                }
            }
            return false;
        },
        /**
         * @description 设置基础数据
         * @param {Object} data 组件data值
         * @param {Boolean} isAppend 是否追加(只针对列表,树不做此处理)
         * @param {Boolean} isOriginalState 是否保持当前状态,如下拉框是否为展开,过滤信息是否清空等等
         * @param {Number} total 总条数
         */
        setData: function(data, isAppend, isOriginalState, total) {
            var me = this;
            if (me.disabled) {
                return;
            }
            if (me._resizeInfo) {
                me._resizeInfo = null;
            }
            if (isOriginalState) {
                me._updateData(data, isAppend, total);
            } else {
                me._setData(data, isAppend, total);
            }
            me._doLayoutFloat();
            //setData和setValue后,第一次show时强制刷新
            me._isDoLayout = true;
        },
        /**
         * @private
         * @description 设置基础数据处理
         * @param {Object} data 组件data值
         * @param {Boolean} isAppend 是否追加(只针对列表,树不做此处理)
         * @param {Number} total 总条数
         */
        _updateData: function(data, isAppend, total) {
            var me = this,
                _length = 0;
            data = me._objToArray(data);
            //记录之前的数据长度,用追加datalength用
            _length = me._dataLength;
            me._dataLength = data.length;
            if (true == me.options.tree || "true" == me.options.tree) {
                me.tree.setData(data);
            } else {
                if (isAppend) {
                    me._dataLength = _length + me._dataLength;
                }
                me.list.setData(data, isAppend, total);
            }
        },
        /**
         * @private
         * @description 设置基础数据处理
         * @param {Object} data 组件data值
         * @param {Boolean} isAppend 是否追加(只针对列表,树不做此处理)
         * @param {Number} total 总条数
         */
        _setData: function(data, isAppend, total) {
            var me = this,
                _length = 0;
            data = me._objToArray(data);
            //记录之前的数据长度,用追加datalength用
            _length = me._dataLength;
            me._dataLength = data.length;
            if (me.dropDownEl && "block" === me.dropDownEl.css("display")) {
                me.dropDownEl.hide();
            }
            //清空显示框信息
            me._setTitle("");
            //恢复下拉图标
            me._initFilterImageState();
            if (true == me.options.tree || "true" == me.options.tree) {
                me.tree.setData(data);
            } else {
                if (isAppend) {
                    me._dataLength = _length + me._dataLength;
                }
                me.list.setData(data, isAppend, total);
                if (me.options.multi) {
                    // 文本框为空时，是否要设置为all
                    if (me.options.emptyAll && me._dataLength > 0) {
                        me._setTitle(ALL_TEXT);
                    }
                } else {
                    //单选时默认第一个选中
                    if (me.options.isSelectFirst && data.length > 0) {
                        me.setValue(data[0]);
                    }
                }
            }
        },
        _setValue: $.noop,
        /**
         * @private
         * @description 设置组件值
         * @param {Object} value 组件值
         * @param {Boolean} isOriginalState 是否保持当前状态,如下拉框是否为展开,过滤信息是否清空等等
         * @param {Boolean} isFillValue 针对下拉列表型setValue时,是否通过value值从原数据中补全本次设置值
         */
        setValue: function(value, isOriginalState, isFillValue) {
            var me = this,
                showTxt = "";
            if (!me.tree && !me.list) {
                return;
            }
            if (me.disabled) {
                return;
            }
            me._isDoLayout = true;
            value = me._objToArray(value);
            if (isOriginalState) {
                //组件设置值
                if (true == me.options.tree || "true" == me.options.tree) {
                    me.tree.setValue(value);
                } else {
                    me.list.setValue(value, isFillValue);
                }
                me._triggerHandler(null, eventChange, me.getValue());
                return;
            }
            //恢复下拉图标
            me._initFilterImageState();
            // 清除过滤信息,还原数据
            if (me._isFilterAfterReloadData) {
                if (true == me.options.tree || "true" == me.options.tree) {
                    // 此处的过滤只是为了清除选中的值，过滤后不需要清除文本框内容
                    me.tree.filter("");
                } else {
                    // list过滤结束后不设置默认值
                    me.list.filter("");
                }
                me._isFilterAfterReloadData = false;
            }
            // 支持像文本框一样的使用   
            if (me.options.write && value.write && me.list && !me.options.multi) {
                //下拉图标设置为delete
                if (me.downArrow) {
                    me.downArrow.removeClass(comboboxArrowClass)
                        .addClass(comboboxBigDataImageClose);
                }
                showTxt = value["text"] || "";
                me._setTitle(showTxt);
                me.list.setValue(value, isFillValue);
                me._triggerHandler(null, eventChange, value);
                me.check();
                return;
            }
            //组件设置值
            if (true == me.options.tree || "true" == me.options.tree) {
                me.tree.setValue(value);
                me._doTreeSetText();
            } else {
                me.list.setValue(value, isFillValue);
                me._doListSetText();
            }
            me._triggerHandler(null, eventChange, me.getValue());
            me.check();
        },
        /**
         * @private
         * @description 获取组件值
         * @return {Object} 组件值
         */
        _getValue: function() {
            var me = this,
                value = null;
            if (!me.tree && !me.list) {
                return [];
            }
            if (true == me.options.tree || "true" == me.options.tree) {
                value = me.tree.getValue();
            } else {
                //如果为全选,则取全部的数据
                if (me.isAll()) {
                    value = me.list.getData();
                } else {
                    value = me.list.getValue();
                    if (value && value["data"] && (true == value["data"]["write"] || "true" == value["data"]["write"])) {
                        delete value["data"];
                        value.write = true;
                    }
                }
            }
            return value;
        },
        /**
         * @private
         * @description 设置组件禁用时样式
         * @param {Boolean} disabled 是否禁用
         */
        _setDisabled: function(disabled) {
            var me = this,
                comboCDiv = me.comboCDiv,
                downArrow = me.downArrow,
                arrowCls = "";
            comboCDiv.removeClass(comboboxParentClass)
                .removeClass(comboboxParentGrayClass);
            if (disabled) {
                me.formElement.attr("disabled", true);
                comboCDiv.addClass(comboboxParentGrayClass);
                arrowCls = comboboxArrowGrayClass;
                // setValue()与setDisabled()连用，setValue()后为空时，
                if (!me.comboCDiv.hasClass(me.defaultPaddingDivClass)) {
                    return;
                }
                comboCDiv.removeClass(me.defaultPaddingDivClass).addClass(me.defaultPaddingDivDisabledClass);
            } else {
                me.formElement.removeAttr("disabled");
                comboCDiv.addClass(comboboxParentClass);
                arrowCls = comboboxArrowClass;
                if (!comboCDiv.hasClass(me.defaultPaddingDivDisabledClass)) {
                    return;
                }
                comboCDiv.removeClass(me.defaultPaddingDivDisabledClass).addClass(me.defaultPaddingDivClass);
            }
            downArrow.removeClass().addClass(arrowCls);
            me.__setDisabled(disabled);
        },
        /**
         * @private
         * @description 设置组件不可编辑
         * @param {Boolean} editable 是否可编辑
         */
        _setEditable: function(editable) {
            var me = this;
            if (!editable) {
                // setValue()与setDisabled()连用，setValue()后为空时，
            } else {
                if (me.rendered) {
                    me.formElement.blur();
                }
            }
        },
        /**
         * @private
         * @description 组件配置属性校验，比如属性间互斥等(后续需要完善此规则)
         * @return {Boolean} 配置是否正确
         */
        _optionsValidate: function() {
            var me = this,
                o = me.options,
                isTree = false;
            isTree = (true == o.tree || "true" == o.tree) ? true : false;
            // 当为下拉树时不提供全选 emptyAll write
            if ((o.all || o.emptyAll || o.write) && isTree) {
                me._error("tree config is error!");
                return false;
            }

            // 多选下拉LIST不提供write
            if ((o.multi || o.sViewBar) && o.write && !isTree) {
                me._error("list config is error!");
                return false;
            }

            // 多选下拉LIST且有全选才可以配置emptyAll
            if (o.emptyAll && !(o.all && o.multi && !isTree)) {
                me._error("list config is error!");
                return false;
            }
            return true;
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            var me = this;
            // 调用父类_destroyWidget函数销毁文本框
            me._super();
            if (me.list) {
                me.list.destroy();
            } else if (me.tree) {
                me.tree.destroy();
            }
            // 销毁展开框，包括销毁dom节点，清除data中缓存数据
            if (me.dropDownEl) {
                me.dropDownEl.remove();
            }
        },
        /**
         * @private
         * @description 组件重绘
         */
        _doLayout: function() {
            var me = this;
            me._super();
            // 刷新布局时，关闭弹出层
            me._closeFloatPanel();
        },
        /**
         * @private
         * @description 创建输入框
         */
        _createInputField: function() {
            var me = this,
                formDiv1El = me.formDiv1El,
                comboCDiv = me.comboCDiv = $("<div>").attr("tabindex", -1).appendTo(formDiv1El),
                formElement = me.formElement = $("<input>"),
                downArrow = me.downArrow = $("<span>"),
                dropDownEl = me.dropDownEl = $("<div>").addClass(comboboxWinClass),
                comBodyEl = me.comBodyEl = $("<div>"),
                queryDelay = 350;
            //配置信息的校验
            if (!me._optionsValidate()) {
                return;
            }
            //过滤延时处理
            queryDelay = parseInt(me.options.queryDelay);
            if (isNaN(queryDelay)) {
                queryDelay = 350;
            }
            if (queryDelay < 0) {
                queryDelay = 0;
            }
            //展开按钮
            downArrow.addClass(comboboxArrowClass)
                .bind("click", {
                "me": me
            }, me._showFloatPanel)
                .appendTo(comboCDiv);
            //显示框
            formElement.attr("type", me.type)
                .addClass(comboboxInputClass)
                .appendTo(comboCDiv);
            if (!me.options.editable) {
                formElement.attr("disabled", true);
            }
            //combobox最外层容器DIV
            comboCDiv.addClass(me.defaultPaddingDivClass).addClass(comboboxParentClass);

            //输入框绑定的事件处理
            formElement.bind("click", {
                "me": me
            }, function(event) {
                if ("block" === me.dropDownEl.css("display")) {
                    event.stopImmediatePropagation();
                    return;
                }
                me._showFloatPanel(event);
            }).bind("keyup", function(event) {
                //过滤时延迟350毫秒过滤
                Sweet.Task.Delay.start({
                    id: me.options.id + "-combobox-filter-delay",
                    run: function(args) {
                        me._doInputKeyUp(args);
                    },
                    args: event,
                    delay: queryDelay
                });
            }).bind("focusout", function() {
                if ("block" === me.dropDownEl.css("display") && me._isTabKeydown) {
                    me._closeFloatPanel();
                }
            });

            // 下拉弹出框
            me.dropDownElId = me.options.id + "-sweet-form-combobox-body-" + (increments++);
            dropDownEl.addClass(me.floatBgClass)
                .attr({
                "tabindex": -1
            })
                .hide()
                .appendTo("body");
            comBodyEl.attr({
                "id": me.dropDownElId
            })
                .addClass(comboboxWinBodyClass)
                .appendTo(dropDownEl);
            //缩放处理
            if (me.options.resizAble) {
                me.__doCreateResizeEl();
            }
        },
        /**
         * @private
         * @description 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                listeners;
            me._super();
            listeners = me.options["listeners"];
            if (!$.isEmptyObject(listeners)) {
                for (var key in listeners) {
                    me.addListener(("" + key), listeners[key]);
                }
            }
            // 创建展开框
            me._createFloatPanel();
            // 注册事件
            me._registInitEvent();
        },
        /**
         * @private
         * @description 创建下拉列表
         */
        _createFloatPanel: function() {
            var me = this,
                dropDownEl = me.dropDownEl;
            dropDownEl.css({
                "height": "auto"
            });
            me.options.data = me._objToArray(me.options.data);
            me._dataLength = me.options.data.length;
            if (!(true == me.options.tree || "true" == me.options.tree)) {
                // 创建list下拉列表
                me._creatListFloatPanel(me.options.data);
            } else {
                // 创建tree下拉列表
                me._creatTreeFloatPanel(me.options.data);
            }
            //由于list或tree组件中保存了一份数据,为了减少内存开支,这里清空data
            me.options.data = [];
            // 防止点击展开框时，导致展开框关闭
            dropDownEl.click(function(event) {
                event.stopImmediatePropagation();
            });
        },
        /**
         * @private 
         * @description 创建下拉列表（list）
         * @param {Array} data 数据
         */
        _creatListFloatPanel: function(data) {
            var me = this;
            //数据格式的统一
            //设置不符就使用默认值
            me.options.all = (true == me.options.all || "true" == me.options.all) ? true : false;
            me.options.multi = (true == me.options.multi || "true" == me.options.multi) ? true : false;
            me.options.sViewBar = (true == me.options.sViewBar || "true" == me.options.sViewBar) ? true : false;
            me.options.tip = (true == me.options.tip || "true" == me.options.tip) ? true : false;
            me.options.tools = me.options.tools ? me.options.tools : null;

            //数据格式的统一
            me.options.value = me._objToArray(me.options.value);
            if (me.options.value.length <= 0 && me._dataLength > 0) {
                //如果为单选,则取第一条数据
                if (!me.options.multi) {
                    if (me.options.isSelectFirst) {
                        me.options.value = data[0];
                    }
                } else {
                    //如果有ALL,且为空时全选,则设置value为data
                    if (me.options.all && me.options.emptyAll) {
                        me.options.value = data;
                    }
                }
            }
            // 创建list
            me.list = new Sweet.list.OptimizeList({
                height: me._getListFloatBodyHeight(),
                data: data,
                //主要是如果用户配置了minRemains时会有问题
                value: me.options.value,
                all: me.options.all,
                multi: me.options.multi,
                tools: me.options.tools,
                sViewBar: me.options.sViewBar,
                tip: me.options.tip,
                renderTo: me.dropDownElId,
                minRemains: me.options.minRemains,
                maxRemains: me.options.maxRemains
            });
            me._doListSetText();
            me._triggerHandler(null, eventChange, me.getValue());
        },
        /**
         * @private
         * @description 创建下拉列表（tree）
         * @param {Array} data 数据
         */
        _creatTreeFloatPanel: function(data) {
            var me = this;
            //设置不符就使用默认值
            me.options.multi = (true == me.options.multi || "true" == me.options.multi) ? true : false;
            me.options.useArrows = (false == me.options.useArrows || "false" == me.options.useArrows) ? false : true;
            me.options.icon = (true == me.options.icon || "true" == me.options.icon) ? true : false;

            // 创建树形下拉列表
            me.tree = new Sweet.tree.Tree_v1({
                height: me._getTreeFloatBodyHeight(),
                widgetClass: comboboxTreeFloatPanelClass,
                multi: me.options.multi,
                search: false,
                tip: me.options.tip,
                icon: me.options.icon,
                useArrows: me.options.useArrows,
                renderTo: me.dropDownElId
            });
            me.tree.setData(data);
            me.options.value = me._objToArray(me.options.value);
            if (me.options.value.length > 0) {
                me.setValue(me.options.value);
            }
        },
        /**
         * @private
         * @description 注册事件
         */
        _registInitEvent: function() {
            var me = this;
            if (me.list) {
                me._registEventList();
            } else if (me.tree) {
                me._registEventTree();
            } else {
                return;
            }
        },
        /**
         * @private
         * @description 注册事件(list)
         */
        _registEventList: function() {
            var me = this,
                options = me.options,
                list = me.list,
                nodeCfg,
                isChecked;
            // 设置数据后调用的事件处理(不推荐使用)
            list.addListener(eventAfterSetData, function(event, data) {
                // 如果外部注册了afterSetData
                me._triggerHandler(null, eventAfterSetData, data);
            });
            // 设置值后调用的事件处理(不推荐使用)
            list.addListener(eventAfterSetValue, function(event, data) {
                // 如果外部注册了afterSetValue
                me._triggerHandler(null, eventAfterSetValue, data);
            });
            // 单选list,节占点击后关闭弹出框
            list.addListener(eventNodeClick, function(e, data) {
                if (!options.multi) {
                    me._triggerHandler($.objClone(data), eventClick);
                    me._closeFloatPanel();
                }
            });
            //checkchange处理
            list.addListener(eventCheckboxClick, function(e, data) {
                nodeCfg = $.objClone(data);
                isChecked = nodeCfg["checked"];
                delete nodeCfg["checked"];
                me._triggerHandler(nodeCfg, eventCheckChange, isChecked);
            });
            list.addListener(eventCheckboxAllClick, function(e, data) {
                nodeCfg = $.objClone(data);
                isChecked = nodeCfg["checked"];
                delete nodeCfg["checked"];
                delete nodeCfg["data"];
                me._triggerHandler(nodeCfg, eventCheckChange, isChecked);
            });
        },
        /**
         * @private
         * @description 注册事件(tree)
         */
        _registEventTree: function() {
            var me = this,
                tree = me.tree,
                nodeCfg;
            tree.addListener(eventCheckChange, function(data, treeCmp) {
                if ($.isEmptyObject(data)) {
                    me._triggerHandler(null, eventCheckChange, false);
                    return;
                }
                nodeCfg = $.objClone(data["node"]);
                me._triggerHandler(nodeCfg, eventCheckChange, data["checked"]);
            });
            tree.addListener(eventClick, function(data, treeCmp) {
                if (!me.options.multi) {
                    if (data.leaf) {
                        me._closeFloatPanel();
                    }
                    me._triggerHandler($.objClone(data), eventClick);
                }
            });
        },
        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**
         * @private
         * @description 注册事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                // 添加beforeCheckboxClick事件的监听
                if (eventName === eventBeforeCheckboxClick) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.addListener(eventBeforeCheckChange, function(node, tree) {
                            if ("function" === typeof(func)) {
                                func(node, me);
                            }
                        });
                    } else {
                        me.list.addListener(eventBeforeCheckboxClick, function(e, node) {
                            if ("function" === typeof(func)) {
                                func(e, me);
                            }
                        });
                    }
                }
                if (eventName === eventBeforeCheckChange) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.addListener(eventBeforeCheckChange, function(node, tree) {
                            if ("function" === typeof(func)) {
                                func(node, me);
                            }
                        });
                    } else {
                        me.list.addListener(eventBeforeCheckChange, function(node, list) {
                            if ("function" === typeof(func)) {
                                func(node, me);
                            }
                        });
                    }
                }
                if (eventName === eventSearch) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.addListener(eventSearch, function(data, tree) {
                            if ("function" === typeof(func)) {
                                func(data, me);
                            }
                        });
                    } else {
                        me.list.addListener(eventSearch, function(data, list) {
                            if ("function" === typeof(func)) {
                                func(data, me);
                            }
                        });
                    }
                }
            });
        },
        /**
         * @private
         * @description 删除注册监听事件
         * @param {String} eventName 事件名称
         */
        _removeListener: function(eventName) {
            var me = this;
            if (!$.isNull(eventName)) {
                // 去除beforeCheckboxClick事件的监听
                if (eventName === eventBeforeCheckboxClick) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.removeListener(eventBeforeCheckChange);
                    } else {
                        me.list.removeListener(eventBeforeCheckboxClick);
                    }
                }
                if (eventName === eventBeforeCheckChange) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.removeListener(eventBeforeCheckChange);
                    } else {
                        me.list.removeListener(eventBeforeCheckChange);
                    }
                }
                if (eventName === eventSearch) {
                    if (true == me.options.tree || "true" == me.options.tree) {
                        me.tree.removeListener(eventSearch);
                    } else {
                        me.list.removeListener(eventSearch);
                    }
                }
            }
        },
        /**
         * @private
         * @description 刷新弹出层内的布局
         */
        _doLayoutFloat: function() {
            "use strict";
            var me = this,
                listBodyWidth = 0,
                listBodyHeight = 0,
                tempTreeWidth = 15,
                listBodyHeight = 0,
                tempHeight = 10,
                tempPadding = 6;
            // 定位展开框位置
            listBodyWidth = me.comboCDiv.outerWidth(true);
            if (!me._resizeInfo) {
                me.dropDownEl.externalWidth(listBodyWidth);

                // 设置树的大小
                if (me.tree) {
                    listBodyHeight = me._getTreeFloatBodyHeight();
                    me.tree.setWH((me.comboCDiv.width() + tempTreeWidth), listBodyHeight);
                    me.comBodyEl.css({
                        "max-height": listBodyHeight,
                        "overflow": "hidden"
                    });
                } else {
                    listBodyHeight = me._getListFloatBodyHeight();
                    if (listBodyHeight == "auto") {
                        me.comBodyEl.css({
                            "max-height": "none",
                            "overflow": "hidden",
                            padding: "3px 0"
                        });
                        me.list.setWH((me.comboCDiv.innerWidth() - tempPadding), listBodyHeight);
                    } else {
                        me.comBodyEl.css({
                            "max-height": listBodyHeight,
                            "overflow": "hidden",
                            padding: "0 0 3px 0"
                        });
                        me.list.setWH((me.comboCDiv.innerWidth() - tempPadding), (listBodyHeight - tempHeight));
                    }
                }
            }
            //强制刷新
            if (me._isDoLayout) {
                if (me.tree) {
                    me.tree.doLayout(true);
                } else {
                    me.list.doLayout(true);
                }
                me._isDoLayout = false;
            }
            me.dropDownEl.unbind("resize");
            // 展开框在页面上定位
            me._orientDropDown();
        },
        /**
         * @private
         * @description 展开下拉框
         * @param {Object} event 事件对象
         */
        _showFloatPanel: function(event) {
            var me = event.data.me,
                maxIndex,
                tVal;
            if (me.downArrow.hasClass(comboboxArrowGrayClass)) {
                return;
            }
            if (me.options.isClearFilter) {
                me.formElement.removeAttr("placeholder");
                //清除过滤信息
                if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                    me._isFilterAfterReloadData = true;
                    me._isReSetShowTxt = true;
                    me.formElement.val("");
                    // 恢复默认箭头图片
                    me._initFilterImageState();
                } else {
                    tVal = me.formElement.val();
                    if (tVal && "" != tVal.trim()) {
                        me.downArrow.removeClass(comboboxArrowClass)
                            .addClass(comboboxBigDataImageClose);
                    }
                    maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                    me.dropDownEl.css("z-index", maxIndex);
                    //展开框没有打开
                    if (!$.isVisiable(me.dropDownEl)) {
                        me._triggerHandler(me, eventExpand);
                        //记录下拉时的显示信息
                        me._saveShowFloatPanelValue();
                        me.dropDownEl.show();
                    }
                    // 刷新弹出层的布局
                    me._doLayoutFloat();
                }
                me._isShowFloatPanel = true;
                me._initResizeInfo();
                return;
            }
            if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                me._isFilterAfterReloadData = false;
                //标志位: 点了清除, 收起时重新设置title
                me._isReSetShowTxt = true;
                // 恢复默认箭头图片
                me._initFilterImageState();
                me._setTitle("");
                if (true == me.options.tree || "true" == me.options.tree) {
                    me.tree.filter("");
                } else {
                    me.list.filter("");
                }
                if ("none" === me.dropDownEl.css("display")) {
                    me._triggerHandler(me, eventExpand);
                    //记录下拉时的显示信息
                    me._saveShowFloatPanelValue();
                    me.dropDownEl.show();
                }
                event.stopImmediatePropagation();
            } else {
                maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                me.dropDownEl.css("z-index", maxIndex);
                // 标志位: 是否要打开展开框标志
                me._isShowFloatPanel = false;
                //展开框没有打开
                if (!$.isVisiable(me.dropDownEl)) {
                    me._triggerHandler(me, eventExpand);
                    //记录下拉时的显示信息
                    me._saveShowFloatPanelValue();
                    me.dropDownEl.show();
                    me._isShowFloatPanel = true;
                }
                // 刷新弹出层的布局
                me._doLayoutFloat();
            }
            me._initResizeInfo();
        },
        /**
         * @private
         * @description 关闭展开框
         */
        _closeFloatPanel: function() {
            var me = this,
                isChange = false,
                newValue,
                changeValue = null,
                writeTxt = "",
                tempKey = "value";
            if (!me._isShowFloatPanel && "block" === me.dropDownEl.css("display")) {
                me.dropDownEl.hide();
                if (me.options.isClearFilter) {
                    if (me.options.emptyText) {
                        me.formElement.attr("placeholder", me.options.emptyText);
                    }
                }
                changeValue = me.getValue();
                //是否发生change
                if (me.list) {
                    //如果支持可输入
                    if (me.options.write && !me.options.multi && !me.options.sViewBar) {
                        if (me._isFilterAfterReloadData) {
                            writeTxt = me.formElement.val();
                            if ("" == writeTxt) {
                                changeValue = {};
                                me.list.setValue(null);
                            } else {
                                //说明不存在
                                if (writeTxt != changeValue["text"]) {
                                    changeValue = {
                                        value: writeTxt,
                                        text: writeTxt,
                                        data: {
                                            write: true
                                        }
                                    };
                                    me.list.setValue(changeValue);
                                }
                            }
                        }
                        newValue = {
                            data: me._objToArray(changeValue),
                            isAll: false
                        };
                    } else {
                        newValue = {
                            data: me._objToArray(changeValue),
                            isAll: me.isAll()
                        };
                    }
                    tempKey = "value";
                } else {
                    newValue = {
                        data: me._getArrayOfLeafNodesInfo(me._objToArray(changeValue)),
                        isAll: false
                    };
                    tempKey = "treeId";
                }
                isChange = me._closeFloatPanelIsChange(me._beforeShowValue, newValue, tempKey, me.formElement.val());

                //恢复默认箭头图片
                me._initFilterImageState();

                //收起时如果有过滤则清除过滤信息,还原数据
                if (me._isFilterAfterReloadData) {
                    if (me.list) {
                        //list的处理 
                        me.list.filter("");
                        me._doListSetText();
                    } else {
                        //tree的处理 
                        me.tree.filter("");
                        me._doTreeSetText();
                    }
                    me._isFilterAfterReloadData = false;
                    me._isDoLayout = true;
                } else {
                    //如果点了清除过滤信息或者较展开前发生change,则重置显示信息
                    if (me.list) {
                        //list处理
                        if (me._isReSetShowTxt) {
                            me._isReSetShowTxt = false;
                            me._doListSetText();
                        } else {
                            if (isChange) {
                                me._doListSetText();
                            }
                        }
                    } else {
                        //树的处理
                        if (me._isReSetShowTxt) {
                            me._isReSetShowTxt = false;
                            me._doTreeSetText();
                        } else {
                            if (isChange) {
                                me._doTreeSetText();
                            }
                        }
                    }
                }

                //触发change事件
                if (isChange) {
                    me._triggerHandler(null, eventChange, changeValue);
                }
                //触发关闭窗口后事件
                me._triggerHandler(null, eventCollapse, {
                    value: changeValue,
                    changed: isChange
                });
                if (me.rendered) {
                    me.formElement.blur();
                }
            }
            me._isShowFloatPanel = false;
            me._isTabKeydown = false;
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
                me._resizeInfo.isMouseDown = false;
            }
        },
        /**
         * @private
         * @description list下拉框收起时是否触发change
         * @param {Object} oldValue show时前的值
         * @param {Object} newValue hidden时的值
         * @param {String} vKey 用那个KEY的值去比较
         * @param {String} txt 当前输入框显示的文本
         */
        _closeFloatPanelIsChange: function(oldValue, newValue, vKey, txt) {
            var oldKeys = {},
            newKeys = {};
            oldValue = oldValue || {
                data: [],
                isAll: false
            };
            newValue = newValue || {
                data: [],
                isAll: false
            };
            //先根据length来判断
            if (oldValue.data.length <= 0 && newValue.data.length <= 0) {
                return false;
            }
            if (oldValue.data.length != newValue.data.length) {
                return true;
            }
            //如果都是全选
            if (true === oldValue["isAll"] && true === newValue["isAll"]) {
                if ("" != txt) {
                    return false;
                } else {
                    return true;
                }
            }
            //判断前后是否有变化
            for (var k = 0; k < oldValue.data.length; k++) {
                oldKeys[oldValue.data[k][vKey]] = "";
            }
            for (var k = 0; k < newValue.data.length; k++) {
                newKeys[newValue.data[k][vKey]] = "";
            }
            for (var key in newKeys) {
                if ("" != oldKeys[key]) {
                    oldKeys = null;
                    newKeys = null;
                    return true;
                }
            }
            oldKeys = null;
            newKeys = null;
            return false;
        },
        /**
         * @private
         * @description 输入框keyup事件处理
         * @param {Object} event 事件对象
         */
        _doInputKeyUp: function(event) {
            var me = this,
                keyCode,
                maxIndex;
            if (me.disabled) {
                return;
            }
            // 文本框不可编辑时，不过滤
            if (false === me.editable) {
                return;
            }
            keyCode = event.charCode || event.keyCode;
            if (Sweet.constants.keyCode.TAB === keyCode) {
                if ("none" === me.dropDownEl.css("display")) {
                    //标志位: 用于TAB按键来控制下拉框的展开与收起
                    me._isTabKeydown = true;
                    // 刷新弹出层的布局
                    maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                    me.dropDownEl.css({
                        "z-index": maxIndex
                    });
                    me._triggerHandler(me, eventExpand);
                    //记录下拉时的显示信息
                    me._saveShowFloatPanelValue();
                    me.dropDownEl.show();
                    me._isShowFloatPanel = false;
                    me.formElement.select();
                    me._doLayoutFloat();
                    me._initResizeInfo();
                    return;
                }
            }
            me._doFilter(me.formElement.val());
        },
        /**
         * @private
         * @description 过滤处理
         * @param {String} filterStr 过滤的字符串
         */
        _doFilter: function(filterStr) {
            var me = this,
                flag,
                tFilter;
            //标志位: 当过滤时置为true,下拉框收起时置为false;此标志位用于过滤后下拉框收起时还原数据用
            me._isFilterAfterReloadData = true;
            // 手动输入时，换成小叉图片
            if (!filterStr || "" == filterStr) {
                if (me.downArrow.hasClass(comboboxBigDataImageClose)) {
                    me.downArrow.removeClass(comboboxBigDataImageClose)
                        .addClass(comboboxArrowClass);
                }
            } else {
                if (me.downArrow.hasClass(comboboxArrowClass)) {
                    me.downArrow.removeClass(comboboxArrowClass)
                        .addClass(comboboxBigDataImageClose);
                }
            }
            tFilter = {
                filter: filterStr
            };
            flag = me._triggerHandler(tFilter, eventBeforeSearch, me);
            if (false === flag || "false" === flag) {
                return;
            }
            filterStr = tFilter["filter"];
            //list的过滤
            if (!(true == me.options.tree || "true" == me.options.tree)) {
                me.list.filter(filterStr);
                if ("none" === me.dropDownEl.css("display")) {
                    me.downArrow.click();
                }
            } else {
                me.tree.filter(filterStr);
                if ("none" === me.dropDownEl.css("display")) {
                    me.downArrow.click();
                }
                return;
            }
            if ("none" === me.dropDownEl.css("display")) {
                me._triggerHandler(me, eventExpand);
                //记录下拉时的显示信息
                me._saveShowFloatPanelValue();
                me.dropDownEl.show();
            }
            // 展开框在页面上定位
            me._orientDropDown();
            me._initResizeInfo();
        },
        /**
         * @private
         * @description 存储展开前的值,用于收起时是否要change
         */
        _saveShowFloatPanelValue: function() {
            var me = this;
            //存储展开前的值,用于收起时是否要change
            if (me.list) {
                if (me.list.totalAEl) {
                    me.list.totalAEl.click();
                    me._isDoLayout = true;
                }
                me._beforeShowValue = {
                    data: me._objToArray(me.getValue()),
                    isAll: me.isAll()
                };
            } else {
                me._beforeShowValue = {
                    data: me._getArrayOfLeafNodesInfo(me._objToArray(me.getValue())),
                    isAll: false
                };
            }
        },
        /**
         * @private
         * @description 下拉list设置显示框中的值
         */
        _doListSetText: function() {
            var me = this,
                options = me.options,
                valueObj,
                showTxt = "";
            valueObj = me.list.getValue();
            showTxt = me._arrayToObj(valueObj)["text"];
            // 没有选择数据，而且配置emptyAll，文本框应该显示all
            if ((!showTxt || "" == showTxt.trim()) && options.emptyAll && options.multi && me._dataLength > 0) {
                showTxt = ALL_TEXT;
            } else {
                if (me.list.isAll() && me.options.all) {
                    showTxt = ALL_TEXT;
                }
            }
            me._setTitle(showTxt);
            if (me.rendered) {
                me.formElement.blur();
            }
        },
        /**
         * @private
         * @description 下拉树设置显示框中的值
         */
        _doTreeSetText: function() {
            var me = this,
                txt;
            txt = me._getShowText();
            me._setTitle(txt);
            if (me.rendered) {
                me.formElement.blur();
            }
        },
        /**
         * @private
         * @description 获取tree或list的value数据的text（只获取叶子节点）
         * @param {Object} valueObj 数组对象
         * @return {String} 对象中的所有text
         */
        _getShowText: function(valueObj) {
            var me = this,
                valueArr,
                leafVal;
            valueObj = valueObj || me.getValue();
            valueArr = me._objToArray(valueObj);
            leafVal = me._getArrayOfLeafNodesInfo(valueArr);
            return me._arrayToObj(leafVal).text;
        },
        /**
         * @private
         * @description 将tree返回的数据转换为对象数组（只获取叶子节点）
         * @param {Object} treeValue 对象数组 
         * @param {Object} obj 对象 
         * @param {String} treeId 节点唯一ID 
         * @return {Object} [{"text":"1", "value":"1"},{"text":"2", "value":"2"}]
         */
        _getArrayOfLeafNodesInfo: function(treeValue, obj, treeId) {
            var me = this;
            obj = obj || [];
            if (!treeValue) {
                return obj;
            }
            //Begin----------add for DTS2014091901114
            for (var i = 0; i < treeValue.length; i++) {
                if (!treeId) {
                    treeId = "";
                }
                treeId += treeValue[i]["value"];
                treeValue[i]["treeId"] = treeId;
                if (treeValue[i].children) {
                    me._getArrayOfLeafNodesInfo(treeValue[i].children, obj, treeId);
                } else {
                    obj.push(treeValue[i]);
                }
            }
            //End----------add for DTS2014091901114
            return obj;
        },
        /**
         * @private
         * @description 将对象数组转换为一个对象
         * @param {Array} data value数组 
         * @return {Object} {"text":"1,2", "value":"ONE,TWO"}
         */
        _arrayToObj: function(data) {
            var me = this,
                text = "",
                value = "",
                tempText = "",
                tempArrayData,
                obj = {
                    value: "",
                    text: ""
                };
            if (!data) {
                return obj;
            }
            tempArrayData = me._objToArray(data);
            for (var i = 0; i < tempArrayData.length; i++) {
                if (i > 0) {
                    value += ",";
                    text += ",";
                }
                tempText = $.isUndefined(tempArrayData[i].text) ? tempArrayData[i].value : tempArrayData[i].text;
                value += tempArrayData[i].value;
                text += tempText;
            }
            obj = {
                value: value,
                text: text
            };
            return obj;
        },
        /**
         * @private
         * @description 将数据转成数组
         * @param {Object} data 待转化的数据
         * @return {Object} 转化后的数组[{"text":"1", "value":"1"}, ...]
         */
        _objToArray: function(data) {
            var value = [];
            if (!data) {
                return value;
            }
            // 对象转换为数组
            if ($.isArray(data)) {
                value = data;
            } else {
                if (!$.isUndefined(data.value)) {
                    value.push(data);
                }
            }
            return value;
        },
        /**
         * @private
         * @description 根据配置信息获得下拉框高度
         */
        _getListFloatBodyHeight: function() {
            var me = this,
                limitCount = itemLimitNumber,
                listBodyHeight = 10,
                tempAllHeight = 38,
                tempNoDatasHeight = 10,
                viewBarHeight = 28,
                dataLength = me._dataLength;
            if (dataLength > 0 && dataLength <= limitCount) {
                return "auto";
            }
            //如果有ALL,则加上ALL的高度
            if (me.options.all && me.options.multi) {
                listBodyHeight = tempAllHeight;
            }
            //如果没有配置ALL且无数据,则给一个10的高度
            if (!(true == me.options.all || "true" == me.options.all) && dataLength <= 0) {
                listBodyHeight = tempNoDatasHeight;
            }
            if (dataLength > limitCount) {
                listBodyHeight = limitCount * LIHEIGHT + listBodyHeight;
            }
            if (true == me.options.sViewBar || "true" == me.options.sViewBar) {
                listBodyHeight += viewBarHeight;
            }
            return listBodyHeight;
        },
        /**
         * @private
         * @description 根据配置信息获得下拉框高度(tree)
         */
        _getTreeFloatBodyHeight: function() {
            var me = this,
                limitCount = itemLimitNumber,
                listBodyHeight = 10,
                tempNoDatasHeight = 5,
                tempTreeHeight = 3,
                dataLength = me._dataLength;
            //如果无数据,则给一个5的高度
            if (dataLength <= 0) {
                listBodyHeight = tempNoDatasHeight;
            } else {
                listBodyHeight = limitCount * LIHEIGHT + tempTreeHeight;
            }
            return listBodyHeight;
        },
        /**
         * @private
         * @description 改变提示内容
         * @param {String} txt 提示内容
         */
        _setTitle: function(txt) {
            var me = this,
                isTip = me.options.tip;
            txt = txt || "";
            if (me.formElement) {
                if ("" == txt && me.options.emptyAll && me.options.multi && me._dataLength > 0) {
                    txt = ALL_TEXT;
                }
                me.formElement.val(txt);
                if (isTip) {
                    me.formElement.attr("title", txt);
                }
                me.options.tooltip = txt;
            } else {
                me.options.tooltip = "";
            }
        },
        /**
         * @private
         * @description 恢复默认箭头图片
         */
        _initFilterImageState: function() {
            var me = this;
            if (me.downArrow && me.downArrow.hasClass(comboboxBigDataImageClose)) {
                me.downArrow.removeClass(comboboxBigDataImageClose)
                    .addClass(comboboxArrowClass);
            }
        },
        /**
         * @private 
         * @description 缩放处理:生成相关dom
         */
        __doCreateResizeEl: function() {
            var me = this,
                dropDownEl = me.dropDownEl,
                resizeXYEl,
                resizeElXl,
                resizeElXr,
                resizeElYt,
                resizeElYb;
            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble) {
                resizeXYEl = $("<div>").addClass(comboboxWinBodyResizeXYElClass)
                    .appendTo(dropDownEl);
                resizeElYt = $("<div>").addClass(comboboxWinBodyResizeYtElClass)
                    .appendTo(dropDownEl);
                resizeElXr = $("<div>").addClass(comboboxWinBodyResizeXrElClass).css({
                    height: "calc(100% - 10px)"
                })
                    .appendTo(dropDownEl);
                resizeElYb = $("<div>").addClass(comboboxWinBodyResizeYbElClass).css({
                    width: "calc(100% - 10px)"
                })
                    .appendTo(dropDownEl);
                resizeElXl = $("<div>").addClass(comboboxWinBodyResizeXlElClass)
                    .appendTo(dropDownEl);
                me.__registResizeEvent(resizeXYEl, "xy");
                me.__registResizeEvent(resizeElYt, "yt");
                me.__registResizeEvent(resizeElXr, "xr");
                me.__registResizeEvent(resizeElYb, "yb");
                me.__registResizeEvent(resizeElXl, "xl");
            } else if ("x" == me.options.resizAble) {
                resizeElXr = $("<div>").addClass(comboboxWinBodyResizeXrElClass)
                    .appendTo(dropDownEl);
                resizeElXl = $("<div>").addClass(comboboxWinBodyResizeXlElClass)
                    .appendTo(dropDownEl);
                me.__registResizeEvent(resizeElXr, "xr");
                me.__registResizeEvent(resizeElXl, "xl");
            } else if ("y" == me.options.resizAble) {
                resizeElYt = $("<div>").addClass(comboboxWinBodyResizeYtElClass)
                    .appendTo(dropDownEl);
                resizeElYb = $("<div>").addClass(comboboxWinBodyResizeYbElClass)
                    .appendTo(dropDownEl);
                me.__registResizeEvent(resizeElYt, "yt");
                me.__registResizeEvent(resizeElYb, "yb");
            } else {
                //如果不是以上配置则不做处理
                return;
            }
        },
        /**
         * @private
         * @description 缩放处理:注册鼠标事件
         * @param {Object} rEl el对象
         * @param {String} type 类型: x, y, xy
         */
        __registResizeEvent: function(rEl, type) {
            var me = this;
            if (!rEl) {
                return;
            }
            rEl.bind("mousedown", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMousedown);
            rEl.bind("mousemove", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMousemove);
            rEl.bind("mouseup", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMouseup);
            rEl.bind("mouseover", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMouseover);
        },
        /**
         * @private
         * @description 缩放处理:鼠标点下去事件
         * @param {Object} e 事件对象
         */
        _doResizeElMousedown: function(e) {
            var me = e.data.me,
                self = $(e.target),
                obj = self.get(0),
                type = e.data.type,
                winOffer,
                wWin,
                hWin,
                bW = 0,
                _css;
            if (!me._resizeInfo) {
                var listBodyWidth = me.comboCDiv.outerWidth();
                if ($.isVisiable(me.dropDownEl)) {
                    listBodyWidth = me.dropDownEl.externalWidth();
                }
                me._resizeInfo = {
                    initWidth: listBodyWidth,
                    width: listBodyWidth,
                    initHeight: me.dropDownEl.outerHeight(),
                    height: me.dropDownEl.externalHeight()
                };
            }
            me._resizeInfo.isMouseDown = true;
            //记录点下时的X坐标值
            me._resizeInfo.leftWidth = e.pageX;
            me._resizeInfo.topHeight = e.pageY;
            if (obj.setCapture) {
                obj.setCapture();
            } else if (window.captureEvents) {
                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
            }
            //防止在滑动时,选择中其它内容
            me.dropDownEl.find("*").css({
                "-moz-user-select": "none",
                "-webkit-user-select": "none",
                "-ms-user-select": "none",
                "-khtml-user-select": "none",
                "user-select": "none"
            });
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
            }
            winOffer = me.dropDownEl.offset();
            wWin = me.dropDownEl.width() + bW;
            hWin = me.dropDownEl.height() + bW;
            //虚线框
            if ("xl" == type) {
                _css = {
                    "width": wWin,
                    "height": hWin,
                    "right": me.dropDownEl.css("right"),
                    "top": winOffer.top,
                    "z-index": me.dropDownEl.css("z-index")
                };
            } else if ("yt" == type) {
                _css = {
                    "width": wWin,
                    "height": hWin,
                    "left": winOffer.left,
                    "bottom": me.dropDownEl.css("bottom"),
                    "z-index": me.dropDownEl.css("z-index")
                };
            } else {
                _css = {
                    "width": wWin,
                    "height": hWin,
                    "left": winOffer.left,
                    "top": winOffer.top,
                    "z-index": me.dropDownEl.css("z-index")
                };
            }
            me._resizeInfo._$moveEl = $("<div>").addClass(comboboxWinBodyResizeElClass).css(_css).appendTo("body");
            return false;
        },
        /**
         * @private
         * @description 缩放处理:鼠标滑动事件
         * @param {Object} e 事件对象
         */
        _doResizeElMousemove: function(e) {
            var me = e.data.me,
                self = $(e.target),
                type = e.data.type,
                _twh2 = 2,
                _twh5 = 5,
                initLeft = 0,
                initTop,
                tempOffset,
                tempWidth,
                tempHeight,
                pgX,
                pgY,
                tw,
                th,
                mH,
                cTop,
                cBottom,
                dH,
                dW,
                flag;
            if (me._resizeInfo && me._resizeInfo.isMouseDown) {
                tempOffset = me.dropDownEl.offset();
                //用于外部适配宽高限制
                flag = me._triggerHandler({
                    offset: tempOffset,
                    resizeInfo: me._resizeInfo,
                    resizeType: type,
                    event: e
                }, eventResizeElMove, me);
                if (false == flag || "false" == flag) {
                    return;
                }
                dH = $(document).innerHeight();
                dW = $(document).innerWidth();
                initLeft = tempOffset.left;
                initTop = tempOffset.top;
                cTop = me.comboCDiv.offset().top;
                cBottom = dH - me.comboCDiv.outerHeight() - cTop;
                mH = cTop;
                if (mH < cBottom) {
                    mH = cBottom;
                }
                mH -= _twh5;
                pgX = e.pageX;
                pgY = e.pageY;
                tw = dW - _twh5;
                th = dH - _twh5;
                if (pgX > tw) {
                    pgX = tw;
                }
                if (pgY > th) {
                    pgY = th;
                }
                if (pgY <= _twh5) {
                    pgY = _twh5;
                }
                if (pgX <= _twh5) {
                    pgX = _twh5;
                }
                //刷新宽度
                if ("xy" == type || "xr" == type || "xl" == type) {
                    //计算宽度
                    if ("xl" == type) {
                        tempWidth = me._resizeInfo.width + initLeft - pgX;
                    } else {
                        tempWidth = pgX - initLeft;
                    }
                    //如果小于最小宽度值,则设置成最小宽度值
                    if (tempWidth < me._resizeInfo.initWidth) {
                        me._resizeInfo._$moveEl.width(me._resizeInfo.initWidth - _twh2);
                    } else {
                        me._resizeInfo._$moveEl.width(tempWidth);
                    }
                }
                //刷新高度
                if ("xy" == type || "yt" == type || "yb" == type) {
                    //计算宽度
                    if ("yt" == type) {
                        tempHeight = me._resizeInfo.height + initTop - pgY;
                    } else {
                        tempHeight = pgY - initTop;
                    }
                    if (mH > 0 && tempHeight > mH) {
                        tempHeight = mH;
                    }
                    //如果小于最小高度值,则设置成最小高度值
                    if (tempHeight < me._resizeInfo.initHeight) {
                        me._resizeInfo._$moveEl.height(me._resizeInfo.initHeight - _twh2);
                    } else {
                        me._resizeInfo._$moveEl.height(tempHeight);
                    }
                }
            }
            return false;
        },
        /**
         * @private
         * @description 缩放处理:鼠标移上去事件
         * @param {Object} e 事件对象
         */
        _doResizeElMouseup: function(e) {
            var me = e.data.me,
                self = $(e.target),
                type = e.data.type,
                obj = self.get(0),
                _tpd8 = 8,
                _tpd5 = 5,
                _tpd2 = 2,
                _tWidth = -1,
                _tHeight = -1,
                listBodyHeight,
                _h,
                _tpw = 0,
                _th = 0,
                _cW,
                _cH;
            me._resizeInfo.isMouseDown = false;
            if (obj.releaseCapture) {
                obj.releaseCapture();
            } else if (window.captureEvents) {
                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
            }
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                _tWidth = me._resizeInfo._$moveEl.outerWidth();
                _tHeight = me._resizeInfo._$moveEl.outerHeight();
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
            }
            //还原防止在滑动时,选择中其它内容
            me.dropDownEl.find("*").css({
                "-moz-user-select": "",
                "-webkit-user-select": "",
                "-ms-user-select": "",
                "-khtml-user-select": "",
                "user-select": ""
            });
            if (_tWidth < 0 || _tHeight < 0) {
                return;
            }
            if (_tWidth < me._resizeInfo.initWidth) {
                _tWidth = me._resizeInfo.initWidth;
            }
            if (_tHeight < me._resizeInfo.initHeight) {
                _tHeight = me._resizeInfo.initHeight;
                _h = "auto";
            }
            _cW = me._resizeInfo.width - _tWidth;
            _cH = me._resizeInfo.height - _tHeight;
            if (_cW >= -1 && _cW <= 1 && _cH >= -1 && _cH <= 1) {
                return;
            }
            me._resizeInfo.width = _tWidth;
            me._resizeInfo.height = _tHeight;
            if ("xl" == type) {
                me.dropDownEl.css({
                    left: "0px"
                });
            } else if ("yt" == type) {
                me.dropDownEl.css({
                    top: "0px"
                });
            }
            me.dropDownEl.externalWidth(me._resizeInfo.width);
            if (me.tree) {
                me.tree.resizeLayout(me._resizeInfo.width - _tpd8, me._resizeInfo.height - _tpd2);
                me.comBodyEl.css({
                    "max-height": me._resizeInfo.height - _tpd2,
                    "width": me._resizeInfo.width - _tpd8,
                    "overflow": "hidden"
                });
            } else {
                listBodyHeight = me._getListFloatBodyHeight();
                if (listBodyHeight == "auto") {
                    _tpw = 3;
                    me.comBodyEl.css({
                        padding: "3px 0"
                    });
                } else {
                    _tpw = 0;
                    me.comBodyEl.css({
                        padding: "0 0 3px 0"
                    });
                }
                if (_h == "auto" && listBodyHeight == "auto") {
                    me.comBodyEl.css({
                        "max-height": "none",
                        "width": me._resizeInfo.width - _tpd8,
                        "overflow": "hidden"
                    });
                    me.list.setWH(me._resizeInfo.width - _tpd8, _h);
                } else {
                    me.comBodyEl.css({
                        "max-height": me._resizeInfo.height - _tpd2,
                        "width": me._resizeInfo.width - _tpd8,
                        "overflow": "hidden"
                    });
                    if (me.options.all) {
                        _th = 2;
                        _h = me._resizeInfo.height - _tpd5;
                    } else {
                        _th = -1;
                        _h = me._resizeInfo.height - _tpd8;
                    }
                    if (me.options.sViewBar) {
                        _h -= _th;
                    }
                    _h -= _tpw;
                    me.list.resizeLayout(me._resizeInfo.width - _tpd8, _h);
                }
            }
            me.dropDownEl.unbind("resize");
            // 展开框在页面上定位
            me._orientDropDown();
            me._triggerHandler(me.renderEl, eventResizeLayout, me);
            return false;
        },
        /**
         * @private
         * @description 缩放处理:鼠标移上去事件
         * @param {Object} e 事件对象
         */
        _doResizeElMouseover: function(e) {
            var me = e.data.me,
                self = $(e.target);
        },
        /**
         * @private 
         * @description定位展开框位置
         */
        _orientDropDown: function() {
            var me = this,
                _left,
                _top,
                pos;
            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble || "x" == me.options.resizAble || "y" == me.options.resizAble) {
                var tw1,
                maxShown = $(document).innerHeight(),
                    maxVShown = $(document).innerWidth(),
                    targetElOffset = me.comboCDiv.offset(),
                    targetElHeight = me.comboCDiv.outerHeight(true),
                    floatElWidth = me.dropDownEl.outerWidth(true),
                    floatElHeight = me.dropDownEl.outerHeight(true);
                _top = targetElOffset.top + targetElHeight;
                _left = targetElOffset.left;
                tw1 = maxVShown - (floatElWidth + targetElOffset.left);
                if (tw1 <= 0) {
                    _left = _left + tw1;
                }
                // 下面显示不下浮动框，且上面可以显示下浮动框，才选择在上面显示
                if (maxShown - targetElOffset.top - targetElHeight <= floatElHeight) {
                    if (targetElOffset.top >= floatElHeight) {
                        _top = targetElOffset.top - floatElHeight;
                    }
                }
                me.dropDownEl.css({
                    "left": _left,
                    "top": _top
                });
            } else {
                // 展开框在页面上定位
                pos = $.getFloatOffset(me.comboCDiv, me.dropDownEl);
                me.dropDownEl.css({
                    "left": pos.left,
                    "top": pos.top
                });
            }
        },
        /**
         * @private 
         * @description 下拉框展开时刷新缩放信息
         */
        _initResizeInfo: function() {
            var me = this,
                listBodyWidth;
            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble || "x" == me.options.resizAble || "y" == me.options.resizAble) {
                listBodyWidth = me.comboCDiv.outerWidth(true);
                if (!me._resizeInfo) {
                    me._resizeInfo = {
                        initWidth: listBodyWidth,
                        width: listBodyWidth,
                        initHeight: me.dropDownEl.outerHeight(),
                        height: me.dropDownEl.externalHeight()
                    };
                } else {
                    me._resizeInfo.initWidth = listBodyWidth;
                    me._resizeInfo.leftWidth = 0;
                    me._resizeInfo.topHeight = 0;
                    me._resizeInfo.isMouseDown = false;
                    if (me._resizeInfo && me._resizeInfo._$moveEl) {
                        me._resizeInfo._$moveEl.remove();
                        me._resizeInfo._$moveEl = null;
                    }
                }
            }
        }
    });

    /**
     * 创建下拉框
     * @name Sweet.form.ComboBox_v1
     * @class 
     * @extends Sweet.form.Input
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.optimizeTree.js
     * jquery.sweet.widget.list.optimizeList.js
     * </pre>
     * @example 
     * <pre>
     *  var data = [{"value":"1", "text":"test-1"},
     *                {"value":"2", "text":"test-2"},
     *                {"value":"3", "text":"test-3"},
     *                {"value":"4", "text":"test-4"}];
     *  sweetCombobox = new Sweet.form.ComboBox_v1({
     *      label : true,
     *      width : 300,
     *      data : data,
     *      labelText : 'combobox',
     *      value : [{"value":"2", "text":"test-2"}],
     *      multi : true,
     *      renderTo : "sweet-combobox"
     * });
     * </pre>
     */
    Sweet.form.ComboBox_v1 = $.sweet.widgetFormCombobox_v1;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 列表组件
 * 2012/12/6
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    // 保存组件对象
    var defalutWidgetClass = "sweet-list-list-con";

    $.widget("sweet.widgetList", $.sweet.widget, {
        version: "1.0",
        sweetWidgetName: "[widget-list]:",
        options: {
            // 组件数据格式[{"value":"1", "text":"ONE", "data":{}}...]
            data: [],
            /**
             * 组件的最大高度
             * @type {Number}
             * @default null
             */
            maxHeight: null,
            /**
             * 组件最小高度
             * @type {Number}
             * @default null
             */
            minHeight: null
        },
        /**
         * @private
         * @description 列表组件
         */
        _createSweetWidget: function() {
            var options = this.options,
                listEl = this.listEl = $("<div>");
            listEl.addClass(options.widgetClass).width(options.width).attr("id", options.id);
            // height与maxHeight互斥
            if ($.isNotNull(options.maxHeight)) {
                listEl.css("max-height", options.maxHeight);
                if ($.isNotNull(options.minHeight)) {
                    listEl.css("min-height", options.minHeight);
                }
            } else {
                listEl.height(options.height);
            }
            this._createListWidget();
        },
        /**
         * @private
         * @description 创建列表组件, 子类可覆盖
         */
        _createListWidget: function() {
            var listDivStr = "",
                tempText,
                data = this.options.data;
            // 添加列表数据
            $.each(data, function(index, val) {
                tempText = $.htmlEscape(val.text) || "";
                listDivStr += "<div>" + tempText + "</div>";
            });
            this.listEl.html(listDivStr);
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String}
         *        id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.listEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 销毁组件
         */
        _destroyWidget: function() {
            if (this.listEl) {
                this.listEl.remove();
            }
        }
    });

    /**
     * 列表组件
     * @name Sweet.list
     * @class 
     * @extends Sweet.widget
     * @requires  
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     * </pre>
     */
    Sweet.list = $.sweet.widgetList;

}(jQuery));;
/** * @fileOverview   * <pre> * 列表组件 * 2013/6/10 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var listSelectClass = "sweet-list",
        listSelectBgClass = "sweet-list-list-con",
        listSelectUlClass = "sweet-list-list-ul",
        listSelectLiClass = "list-select",
        listSelectLazyloadClass = "sweet-list-lazyload",
        listListSelectConItem = "sweet-list-list-select-item",
        listSelectConItem = "sweet-list-select-item",
        listListAction = "sweet-list-list-action",
        listListSelectConUncheck = "sweet-form-checkbox-unchecked",
        listListSelectConCheck = "sweet-form-checkbox-checked",
        listListSeclectConCheckDisabled = "sweet-form-checkbox-checked-disabled",
        listListSeclectConUncheckDisabled = "sweet-form-checkbox-unchecked-disabled",
        listBgClass = "sweet-list-list-BK",
        listLeftClass = "left",
        listCloseClass = "close",
        listEditClass = "edit",
        listDeleteClass = "delete",
        listWindowIdPrefix = "sweet-cmp-list-list-",
        listPrefix = "sweet-list-list-",
        timerSuffix = "sweet-list-content-timer", // 内容区定时器名称
        defaultPaddingDivDisabledClass = "sweet-list-list-disabled ",
        listSearchClass = "sweet-list-search-div",
        eventChange = "change",
        eventAfterSetData = "afterSetData",
        eventAfterSetValue = "afterSetValue",
        eventCheckboxClick = "checkboxClick",
        eventCheckboxAllClick = "checkboxAllClick",
        eventNodeClick = "nodeClick",
        eventSearch = "search",
        eventBeforeCheckboxClick = "beforeCheckboxClick",
        eventDbClick = "dblclick",
        eventEditClick = "edit",
        eventDeleteClick = "delete",
        hrefScript = Sweet.constants.HREFSCRIPT,
        i18n = Sweet.core.i18n.list,
        uuid = uuid || 1000,
        loadDataRows = 200; // 分批加载每次加载条数
    $.widget("sweet.widgetListList", $.sweet.widgetList, /** @lends Sweet.list.List.prototype*/ {
        eventNames: /** @lends Sweet.list.List.prototype*/
        {
            /**             * @event             * @description 切换树节点事件,一般两个参数(evt, data)             */
            change: "切换树节点事件",
            /**             * @event             * @description 调用完setData方法后事件,一般两个参数(evt, data)             */
            afterSetData: "调用完setData方法后事件",
            /**             * @event             * @description setValue执行后触发,一般两个参数(evt, data)             */
            afterSetValue: "setValue执行后触发",
            /**             * @event             * @description 复选框点击事件,一般两个参数(evt, data)             */
            checkboxClick: "复选框点击事件",
            /**             * @event             * @description 全选复选框点击事件,一般两个参数(evt, data)             */
            checkboxAllClick: "全选复选框点击事件",
            /**             * @event             * @description 点击树列表节点,一般两个参数(evt, data)             */
            nodeClick: "点击树列表节点",
            /**             * @event             * @description 查询事件,一般两个参数(evt, data)             */
            search: "查询事件",
            /**             * @event             * @description 点击checkBox之前的事件(checkBox未选中的时候触发),一般两个参数(evt, data)             */
            beforeCheckboxClick: "点击checkBox之前的事件(checkBox未选中的时候触发)",
            /**             * @event             * @description 列表行双击事件,一般两个参数(evt, data)             */
            dblclick: "列表行双击事件",
            /**             * @event             * @description 行图片编辑事件，暂时未实现,一般两个参数(evt, data)             */
            edit: "行图片编辑事件",
            /**             * @event             * @description 行图片删除事件,一般两个参数(evt, data)             */
            delete: "行图片删除事件"
        },
        version: "1.0",
        sweetWidgetName: "[widget-list-list]",
        type: 'list',
        options: /** @lends Sweet.list.List.prototype*/
        {
            /**             * 基础数据             * @type {Object}             * @default null             */
            data: null,
            /**             * 多选属性             * @type {Boolean}             * @default false             */
            multi: false,
            /**             * 是否是后台搜索             * @type {Boolean}             * @default false             */
            remote: false,
            /**             * 是否显示搜索框             * @type {Boolean}             * @default false             */
            search: false,
            /**             * 是否有提示             * @type {Boolean}             * @default false             */
            tip: false,
            /**             * 加载数据             * @type {Object}             * @default null             */
            store: null,
            /**             * 是否禁用list组件             * @type {Boolean}             * @default false             */
            disabled: false,
            /**             * 是否延迟加载             * @type {Boolean}             * @default false             */
            lazyLoad: false,
            /**             * 是否有全选功能             * @type {Boolean}             * @default false             */
            all: false,
            /**             * 行工具栏图标，现在只支持edit、delete             * @type {Array}             * @default null             */
            tools: null,
            /**             * 多选时，必须保留选中的个数             * @type {Number}             * @default 0             */
            minRemains: 0,
            /**             * 多选时，最多保留选中个数             * @type {Number}             * @default Number.MAX_VAULE             */
            maxRemains: Number.MAX_VALUE,
            /**             * 每次加载记录数             * @type {Number}             * @default 50             */
            limit: 50,
            /**             * 单选列表数据中，是否有“请选择”选项。内部提供给下拉框组件使用。             * @private             * @type {Boolean}             * @default false             */
            _pleaseSelect: false,
            /**             * 单选列表数据中，pleaseSelect属性为true时，配置列表出现的提示字样。内部提供给下拉框组件使用。             * @private             * @type {String}             * @default 请选择             */
            _pleaseSelectText: Sweet.core.i18n.combobox.pleaseSelect,
            /**             * 配置List的背景样式             * @type boolean             * @default false             */
            isBackGround: false
        },
        /**         * @description 取得List的所有数据         * @returns {Array/Object} data 返回List的所有数据         */
        getData: function() {
            return JSON.parse(JSON.stringify(this.data));
        },
        /**         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         * @param {Boolean} isAppend 是否是追加新的树节点         * @description 设置组件中的节点         */
        setData: function(data, isAppend) {
            if ($.isNull(data)) {
                return;
            }
            var me = this,
                options = me.options,
                tData = data,
                tempData; // 延迟加载时，需要返回记录总数
            if ($.isPlainObject(data)) {
                tData = data.data;
                me._setTotalElCount(data.total);
                me.filterControlEl.show();
            } else { // 为了兼容之前的版本，如果产品不做修改，不产生影响
                if (me.filterControlEl) {
                    me.filterControlEl.hide();
                    me._doLayout();
                }
            }
            me.afterSetData = false;
            tempData = options.data = $.objClone(tData);
            me.isAppend = isAppend;
            if (!isAppend) {
                me.liEls = {};
                me.dataObjs = {};
                me.dataObjLength = 0;
                me.page = 0; // 过滤时，不清空历史条件
                if (!me._isFilterSetValue) {
                    me._reset();
                    me._recoverOldValue(); // 重新设置数据时，清空value值
                    options.value = [];
                }
                me._removeAllNodeList();
                me.data = tempData;
                me._setData();
            } else {
                me.data = me.data.concat(tData);
                me.appendData = tempData;
                me._setData(true);
            } // 如果更改延迟加载属性，需要将延迟组件隐藏
            if (me.lazyLoadEl) {
                var oldStatus = $.isVisiable(me.lazyLoadEl),
                    newStatus;
                if (options.lazyLoad) {
                    me.lazyLoadEl.show();
                } else {
                    me.lazyLoadEl.hide();
                } // 记录数小于50时，隐藏延迟加载条
                if (options.limit > tData.length) {
                    me.lazyLoadEl.hide();
                    me._lazyLoadElHideFlag = true;
                } else {
                    me._lazyLoadElHideFlag = false;
                }
                newStatus = $.isVisiable(me.lazyLoadEl);
                if (newStatus && newStatus !== oldStatus) {
                    me._doLayout();
                }
            }
            if (!options.store && !me._isFilterSetData) {
                me._filterCache();
            }
            me._isFilterSetData = false;
        },
        /**         * @description 设置组件禁用时样式         * @param {Boolean} disabled 是否禁用组件         */
        setDisabled: function(disabled) {
            var me = this,
                liEls = me.liEls;
            var checkboxEl;
            me.options.disabled = disabled;
            if (disabled) {
                if (me.allAEl) {
                    if (me.allAEl.hasClass(listListSelectConUncheck)) {
                        me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSeclectConUncheckDisabled);
                    } else if (me.allAEl.hasClass(listListSelectConCheck)) {
                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSeclectConCheckDisabled);
                    }
                }
                me.listDiv.addClass(defaultPaddingDivDisabledClass);
                $.each(liEls, function(index, obj) {
                    obj.removeClass(listSelectLiClass);
                    checkboxEl = obj.children("a");
                    if (checkboxEl) {
                        if (checkboxEl.hasClass(listListSelectConUncheck)) {
                            checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSeclectConUncheckDisabled);
                        } else if (checkboxEl.hasClass(listListSelectConCheck)) {
                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSeclectConCheckDisabled);
                        }
                    }
                });
            } else {
                if (me.allAEl) {
                    if (me.allAEl.hasClass(listListSeclectConUncheckDisabled)) {
                        me.allAEl.removeClass(listListSeclectConUncheckDisabled).addClass(listListSelectConUncheck);
                    } else if (me.allAEl.hasClass(listListSeclectConCheckDisabled)) {
                        me.allAEl.removeClass(listListSeclectConCheckDisabled).addClass(listListSelectConCheck);
                    }
                }
                me.listDiv.removeClass(defaultPaddingDivDisabledClass);
                $.each(liEls, function(index, obj) {
                    obj.addClass(listSelectLiClass);
                    checkboxEl = obj.children("a");
                    if (checkboxEl) {
                        if (checkboxEl.hasClass(listListSeclectConUncheckDisabled)) {
                            checkboxEl.removeClass(listListSeclectConUncheckDisabled).addClass(listListSelectConUncheck);
                        } else if (checkboxEl.hasClass(listListSeclectConCheckDisabled)) {
                            checkboxEl.removeClass(listListSeclectConCheckDisabled).addClass(listListSelectConCheck);
                        }
                    }
                });
            }
        },
        /**         * @description 设置是否后台搜索         * @param {Boolean} remote true：后台搜索，false：前台搜索         */
        setRemote: function(remote) {
            this.options.remote = remote;
        },
        /**         * @description 设置是否延迟加载         * @param {Boolean} lazyLoad 是否延迟加载         */
        setLazyLoad: function(lazyLoad) {
            this.options.lazyLoad = lazyLoad;
        },
        /**         * @description 设置过滤条件         * @param {String/Number} value 过滤值         */
        setFilter: function(value) {
            this._filter = value;
        },
        /**         * @description 过滤         * @param {String} value 过滤的字符串         */
        filter: function(value) {
            var me = this,
                options = me.options,
                store = options.store,
                remote = options.remote; // 增加过滤标识，过滤时设置数据，不需要再进行setValue动作
            // DTS2013082000275 过滤时，需要重新setValue，以保留历史值
            me._isFilterSetValue = true;
            me._isFilterSetData = true;
            me.oldSelectedData = $.objClone(me.selectedData);
            me.options.value = me._getValue();
            me._info("filter value: " + value);
            if (store) {
                if (remote) {
                    me.page = 0;
                    store.load(me._getAllConditions(value));
                } else {
                    var patt1 = new RegExp($.regExp.escape(value), "i");
                    store.filter(value, patt1);
                }
            } // 处理不用store的情况下过滤功能
            else {
                me.setData($.fuzzyFilter(me.filterData, value));
            }
        },
        /**         * @description 执行全选、反选操作，只适用于复选情况         * @param {boolean} all true：全选，false：全不选         */
        all: function(all) {
            var me = this,
                options = me.options,
                liEls = me.liEls;
            if (!options.multi) {
                return;
            } // 始终以最后一次设置为准
            clearInterval(me._setValueAllId);
            me._setValueAllId = setInterval(function() {
                if (me.afterSetData) {
                    var checkboxEl, data, selectedValue;
                    clearInterval(me._setValueAllId);
                    me.oldSelectedData = $.objClone(me.selectedData);
                    me._reset(); // 选中列
                    $.each(liEls, function(index, obj) {
                        checkboxEl = obj.children("a"); // 选中
                        if (all) {
                            data = me.dataObjs[obj.data("value")];
                            if (!$.isNull(data) && !$.isNull(data.value)) {
                                checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                                me.selectedliEls[data.value] = obj;
                                me.selectedData[data.value] = data;
                                me.selectedDataLength++;
                            }
                        } else {
                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        }
                    });
                    selectedValue = me._getValue(); // 判断是否触发change事件
                    if (!$.equals(me.oldSelectedData, me.selectedData)) {
                        me._triggerHandler(null, eventChange, selectedValue);
                    }
                }
            }, 100);
        },
        /**         * @private         * @description 是否全选，只适用于复选情况         * @return {Boolean} true：全选，false：未全选         */
        isAll: function() {
            var me = this,
                options = me.options,
                allData;
            if (0 === me.selectedDataLength) {
                return false;
            }
            if (options.store) {
                allData = options.store.getData() || [];
                return allData.length === me.selectedDataLength;
            } else {
                allData = me.filterData || [];
                return me.selectedDataLength === allData.length;
            }
        },
        /**         * @private         * @description 设置数据         * @param {Boolean} isAppend 是否是追加新的树节点         */
        _setData: function(isAppend) {
            var me = this,
                options = me.options; // 消除之前可能存在的定时器
            Sweet.Task.Timeout.stop(me.timerListContent); // 记录行索引
            me.dataIndex = 0; // 表格内容区定时器名称
            me.timerListContent = options.id + "-" + timerSuffix; // 启动定时器，绘制表格内容
            Sweet.Task.Timeout.start({
                id: me.timerListContent,
                run: me._buildListContent,
                scope: me,
                args: isAppend,
                interval: 10
            });
        },
        /**         * @private         * @description 删除数据         * @param {Object} data 待删除数据         */
        _removeData: function(data) {
            var me = this;
            if (me.options.store) {
                me.options.store.removeData(data);
                return;
            }
            if ($.isNull(data)) {
                me.data = [];
            } else {
                $.each(me.data, function(index, obj) {
                    if (obj && obj.value === data.value) {
                        me.data.splice(index, 1);
                    }
                });
            }
        },
        /**         * @private         * @description 删除所有节点         */
        _removeAllNodeList: function() {
            var me = this; // 删除dom节点
            if (me.listUI) {
                me.listUI.empty();
            }
        },
        /**         * @private         * @description 删除列表中的所有数据         */
        _removeAllNode: function() {
            var me = this;
            me._removeAllNodeList();
            me._removeData();
        },
        /**         * @description 删除列表组件中对应的节点数据         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _removeNode: function(data) {
            var me = this,
                liEls = me.liEls,
                selectedData = me.selectedData,
                liEl, value;
            $.each(data, function(index, obj) {
                value = obj.value + "";
                liEl = liEls[value]; // 删除选中数据
                if (liEl.data("value") === value) {
                    liEl.remove();
                    delete selectedData[value];
                    me.selectedDataLength--;
                }
                me._removeData(obj);
            });
        },
        /**         * @description 向列表组件中添加节点数据         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _addNode: function(data) {
            if ($.isNull(data)) {
                return;
            }
            var me = this,
                options = me.options,
                liEl, listUl = me.listUI; // 添加列表数据
            $.each(data, function(i, val) { // 必须有实际value值，才进行处理
                if (!val || $.isUndefined(val.value)) {
                    return;
                }
                liEl = me._addLiNode(val);
                liEl.appendTo(listUl);
                me.liEls[val.value] = liEl;
                me.dataObjs[val.value] = val;
                me.dataObjLength++;
            });
            me.setDisabled(options.disabled);
        },
        /**         * @private         * @description 生成列表li标签         * @param {Object} val 值         */
        _addLiNode: function(val) {
            var me = this,
                options = me.options,
                tools = options.tools,
                liEl, aEl, spanEl, text;
            text = $.nullToString(val.text);
            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass).data("value", val.value).bind("click", {
                "me": me,
                "data": val
            }, me._onNodeClick); // 是否可多选
            if (options.multi) {
                aEl = $("<a class=\"" + listListSelectConUncheck + "\">").appendTo(liEl);
            }
            spanEl = $("<span>").text(text).appendTo(liEl); // 是否有tip提示
            if (options.tip) {
                spanEl.attr("title", val.text);
            } // 增加操作功能图标
            if (tools && 0 < tools.length) {
                $.each(tools, function(index, picName) {
                    if ("edit" === picName) {
                        $("<span class=\"" + listEditClass + "\">").appendTo(liEl);
                    } else if ("delete" === picName) {
                        $("<span class=\"" + listDeleteClass + "\">").appendTo(liEl);
                    }
                });
            }
            return liEl;
        },
        /**         * @private         * @description 节点单击事件         * @param {Object} e 事件对象         */
        _onNodeClick: function(e) {
            var me = e.data.me,
                data = $.objClone(e.data.data),
                self = $(this),
                options = me.options,
                value, oldData; // 非多选时，保存选中数据
            if (!options.multi) {
                oldData = me._getValue();
                value = data.value;
                delete me.selectedData[oldData.value];
                me.selectedData[value] = data;
                me.selectedDataLength = 1;
                me.selectedliEls[value] = self; // 不相等时，触发change事件
                if (oldData.value !== value) {
                    $.each(me.selectedliEls, function(index, obj) {
                        obj.removeClass(listListAction).addClass(listSelectLiClass);
                    });
                    me._triggerHandler(e, eventChange, data);
                }
                self.removeClass(listSelectLiClass).addClass(listListAction);
            }
            me._triggerHandler(e, eventNodeClick, data);
        },
        /**         * @private         * @description 返回当前列表的所有节点数据         * @reurn{Array} 节点数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _getAllNodeData: function() {
            var me = this,
                store = me.options.store;
            if (store) {
                return store.getData();
            } else {
                return $.objClone(this.data);
            }
        },
        /**         * @private         * @description 获取全部显示的节点数据         * @return {Object} valueArray 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _getAllShowNodeData: function() {
            var me = this,
                tempArr = [];
            $.each(me.liEls, function(index, obj) {
                if ($.isVisiable(obj)) {
                    tempArr.push(me.dataObjs[obj.data("value")]);
                }
            });
            return tempArr;
        },
        /**         * @private         * @description 根据数据显示节点         * @param {Object} data 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _showNode: function(data) {
            var me = this,
                liEls = me.liEls;
            data = data || [];
            $.each(data, function(index, obj) {
                var liEl = liEls[obj.value];
                if (liEl) {
                    liEl.show();
                }
            });
        },
        /**         * @private         * @description 根据数据隐藏节点         * @param {Object} data 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _hideNode: function(data) {
            var me = this,
                liEls = me.liEls;
            data = data || [];
            $.each(data, function(index, obj) {
                var liEl = liEls[obj.value];
                if (liEl) {
                    liEl.hide();
                }
            });
        },
        /**         * @description 选中组件中的指定节点         * @private         * @param {Array} value 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                liEls = me.liEls,
                filters;
            value = value || [];
            if (!$.isArray(value)) {
                value = [$.objClone(value)];
            } else {
                value = $.objClone(value);
            }
            me._saveOldValue(); // 始终以最后一次设置为准
            clearInterval(me._setValueIntervalId);
            me._setValueIntervalId = setInterval(function() {
                var selectedValue;
                if (me.afterSetData) {
                    clearInterval(me._setValueIntervalId); // 如果存在搜索框，清空搜索条件
                    if (me.searchField && !me._isFilterSetValue) {
                        filters = me.searchField.getValue();
                        if ($.isNotNull(filters.value)) {
                            me.searchField.setValue({
                                "text": "",
                                "value": ""
                            }); // 重新加载数据 DTS2013090400576 表格清除过滤条件后，列表值未清除问题
                            me.selectedData = {};
                            me.selectedDataLength = 0;
                            me.filter("");
                            return;
                        }
                    } // 先清空已选列表
                    $.each(me.selectedliEls, function(index, obj) {
                        var checkboxEl = obj.children("a");
                        if (checkboxEl && 0 < checkboxEl.length) {
                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        } else {
                            obj.removeClass(listListAction);
                        }
                    }); // 保存历史数据
                    me.oldSelectedData = $.objClone(me.selectedData);
                    if (!options.multi || !me._isFilterSetValue) {
                        me._reset();
                    }
                    me._isFilterSetValue = false; // 选中列
                    $.each(value, function(index, obj) {
                        if ($.isNull(obj)) {
                            return;
                        }
                        var checkboxEl, data = me.dataObjs[obj.value],
                            liEl = liEls[obj.value];
                        if (liEl) {
                            checkboxEl = liEl.children("a");
                            if (checkboxEl && 0 < checkboxEl.length) {
                                checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                            } else {
                                liEl.addClass(listListAction);
                            }
                            me.selectedliEls[obj.value] = liEl;
                            me.selectedData[obj.value] = data;
                        }
                    });
                    me._reCaculateDataLength(); // 设置已选个数
                    me._setSelectedSpanElCount();
                    selectedValue = me._getValue(); // 判断是否触发change事件
                    if (!$.equals(me.oldSelectedData, me.selectedData)) {
                        me._triggerHandler(null, eventChange, selectedValue);
                    } // 触发afterSetValue事件
                    me._triggerHandler(null, eventAfterSetValue, selectedValue); // 如果有全选复选框，判断是否全部选中
                    if (options.all && options.multi) {
                        if (me.selectedDataLength === me.dataObjLength) {
                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                        } else {
                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        }
                    }
                }
            }, 100);
        },
        /**         * @private         * @description 重新计算组件中已选择数据长度         */
        _reCaculateDataLength: function() {
            var me = this;
            me.selectedDataLength = 0;
            $.each(me.selectedData, function() {
                me.selectedDataLength++;
            });
        },
        /**         * @private         * @description 内部组件间接口，设置第一条数据选中         */
        _setFirstValue: function() {
            var me = this,
                value;
            if (me.data && 0 < me.data.length) {
                value = me.data[0];
                me.setValue(value);
                return value;
            }
        },
        /**         * @private         * @description 设置宽度         * @param {String/Number} width 宽度         */
        _setWidth: function(width) {
            var me = this;
            me.listEl.externalWidth(width);
        },
        /**         * @private         * @description 设置高度         * @param {String/Number} height 高度         */
        _setHeight: function(height) {
            var me = this;
            me.listEl.externalHeight(height);
        },
        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me.listEl.externalWidth(width).externalHeight(height);
        },
        /**         * @private         * @description 获取宽度         * @returns {Number} 返回宽度         */
        _getWidth: function() {
            var me = this;
            return me.listEl.externalWidth();
        },
        /**         * @private         * @description 获取高度         * @returns {Number} 返回高度         */
        _getHeight: function() {
            var me = this;
            return me.listEl.externalHeight();
        },
        /**         * @description 获取组件中选择的节点数据         * @private         * @return {Array}         *  节点对应的节点数据数组，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _getValue: function() {
            var me = this,
                options = me.options,
                data; // 多选并且是延迟加载
            if (options.multi && options.lazyLoad) {
                return me.realSelectedData;
            }
            data = me._getSelectedData();
            if (options.multi) {
                return data;
            } else {
                if (0 === data.length) {
                    return {};
                }
                return data[0];
            }
        },
        /**         * @description 组件重绘         * @private         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                width = me.listEl.width(),
                height = me.listEl.height(),
                searchHeight = 0,
                allHeight = 0,
                filterControlHeight = me.filterControlEl && $.isVisiable(me.filterControlEl) ? me.filterControlEl.externalHeight() : 0,
                lazyLoadElHeight = me.lazyLoadEl && $.isVisiable(me.lazyLoadEl) ? 18 : 0,
                bottom = me.lazyLoadEl && $.isVisiable(me.lazyLoadEl) ? 21 : 0,
                listHeight; // 如果有搜索框
            if (options.search) {
                me.searchField.setWidth(width);
                searchHeight = me.searchFiedlDiv.outerHeight(true);
            } // 是否有全选框
            if (options.all && options.multi) {
                allHeight = me.allEl.outerHeight() + me.separateEl.outerHeight();
            }
            me.listDiv.externalWidth(width); // maxHeight与height互斥
            if ($.isNull(options.maxHeight)) {
                listHeight = height - searchHeight;
            } else {
                listHeight = options.maxHeight - searchHeight;
                me.listDiv.css("max-height", listHeight);
            }
            me.listUI.externalWidth(width).css("max-height", listHeight - allHeight - lazyLoadElHeight - filterControlHeight);
            me.listUI.css("margin-bottom", bottom); // 设置延迟加载宽度
            // 设置选中后数据呈现标签宽度和高度
            if (me.selectedUlEl) {
                me.selectedUlEl.externalWidth(width).css("max-height", listHeight - allHeight - filterControlHeight);
            }
        },
        /**         * @private         * @description 保存历史value值         */
        _saveOldValue: function() {
            var me = this;
            if (me.options.multi && !me.options.lazyLoad) {
                me.oldValue = $.objClone(me.options.value);
            }
        },
        /**         * @private         * @description 恢复value值         */
        _recoverOldValue: function() {
            var me = this;
            if (me.options.multi && !me.options.lazyLoad) {
                me.options.value = $.objClone(me.oldValue);
            }
        },
        /**         * @private         * @description 组件配置属性校验，比如属性间互斥等         */
        _optionsValidate: function() {
            var me = this,
                o = me.options; // 延迟加载时不能全选
            if (o.all && o.lazyLoad) {
                me._error("Lazy loading can not select all!");
                return false;
            }
            return true;
        },
        /**         * @description 创建列表组件         * @private         */
        _createListWidget: function() {
            var me = this,
                options = me.options,
                id = options.id,
                data = $.objClone(options.data),
                listDiv = me.listDiv = $("<div>");
            if (!me._optionsValidate()) {
                return;
            } // 保存li对象
            me.liEls = {}; // setData动作是否完成标识
            me.afterSetData = false; // 页数
            me.page = 0;
            me.data = data || []; // 存储全部数据对象
            me.dataObjs = {};
            me.dataObjLength = 0; // 保存选中的li对象
            me.selectedliEls = {}; // 选中数据
            me.selectedData = {};
            me.selectedDataLength = 0; // 保存历史选中数据，用于setValue、all操作时触发change事件
            me.oldSelectedData = {}; // 保存历史value值
            me._saveOldValue(); // 增加搜索框
            if (options.search) {
                me.searchFiedlDiv = $("<div>").attr("id", id + listPrefix + uuid + "search").appendTo(me.listEl).addClass(listSearchClass);
                me.searchField = new Sweet.form.SearchField({
                    width: options.width,
                    emptyText: Sweet.core.i18n.tree.search
                });
                me.searchField.addListener("click", function(e, data) {
                    if (options.remote) {
                        me.filter(data.value);
                        me._triggerHandler(e, eventSearch, data);
                    }
                });
                me.searchField.addListener("keyup", function(e, data) {
                    if (!options.remote) {
                        Sweet.Task.Delay.start({
                            id: id + "-list-delay",
                            run: function(args) {
                                me.filter(args.value);
                                me._triggerHandler(e, eventSearch, args);
                            },
                            args: data,
                            delay: 350
                        });
                    }
                });
                listDiv.addClass(listSelectBgClass);
            }
            if (options.isBackGround) {
                me.listEl.addClass(listBgClass);
            }
            listDiv.appendTo(me.listEl); // 是否有全选功能
            if (options.all && options.multi) {
                me.allEl = me._addLiNode({
                    "value": "sweet-all",
                    "text": Sweet.core.i18n.combobox.checkAll
                }).appendTo(listDiv); // 绑定全选事件
                me.allAEl = me.allEl.find("a");
                me.allEl.bind("click", {
                    "me": me
                }, me._onAllClick); // 分隔线
                me.separateEl = $("<div>").addClass("sweet-form-combobox-partitionLine").appendTo(listDiv);
            }
            me.listUI = $("<ul>").bind("click", function(e) {
                me._click(e);
            }).bind("dblclick", function(e) {
                me._dbClick(e);
            }).addClass(listSelectUlClass).appendTo(listDiv);
            me._createLazyLoadEl();
            me._setData(); // 如果配置store，给store注册回调
            if (options.store) {
                options.store.addListener({
                    "setData": me.setData,
                    "scope": this
                });
            } else {
                me._filterCache();
            }
        },
        /**         * @private         * @description 创建延迟加载         */
        _createLazyLoadEl: function() {
            var me = this,
                options = me.options,
                temp; // 是否延迟加载
            if (options.lazyLoad && $.isNotNull(options.store)) {
                temp = "<ul><li><span>" + i18n.total + "</span><a href=" + hrefScript + ">0</a></li>" + "<li><span>" + i18n.selected + "</span><a href=" + hrefScript + ">0</a></li></ul>";
                me.filterControlEl = $("<div class=\"sweet-list-filtercontrol\">").insertBefore(me.listUI).html(temp);
                me.totalAEl = me.filterControlEl.find("a:eq(0)");
                me.filterControlEl.find("li:eq(0)").bind("click", function() {
                    me._onTotalSpanClick();
                });
                me.selectedAEl = me.filterControlEl.find("a:eq(1)");
                me.filterControlEl.find("li:eq(1)").bind("click", function() {
                    me._onSelectedSpanClick();
                });
                me.selectedUlEl = $("<ul class=\"" + listSelectUlClass + "\">").bind("click", function(e) {
                    var el = $(e.target),
                        value, targetEl; // 点击删除图标
                    if (el.hasClass(listCloseClass)) {
                        value = el.attr("value"); // 将options.value中数据删除
                        me._delFromOptionsValue(value); // 将me.selectedData中数据删除
                        if (me.selectedData[value]) {
                            delete me.selectedData[value];
                            me.selectedDataLength--;
                        } // 将列表中选中数据设置为未选中
                        targetEl = me.listUI.find("li[value=" + value + "]");
                        if (targetEl) {
                            targetEl.children("a").removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        } // 移除自身
                        el.parent().remove(); // 刷新选中个数计数器
                        me._setSelectedSpanElCount();
                    }
                }).appendTo(me.listDiv).hide(); // 延迟加载条
                me.lazyLoadEl = $("<div>").text("...").bind("click", function(e) {
                    me._onLazyLoad(e);
                }).addClass(listSelectLazyloadClass).appendTo(me.listDiv);
            }
        },
        /**         * @private         * @description 从options.value中删除指定值         * @param {String/Number} value 值         */
        _delFromOptionsValue: function(value) {
            var me = this,
                options = me.options;
            value += ""; // 可能是Number型，转成字符串
            if (options.value) {
                if ($.isArray(options.value)) {
                    $.each(options.value, function(index, obj) {
                        if ($.isUndefined(obj)) {
                            return;
                        }
                        var temp = $.isNumber(obj.value) ? obj.value + "" : obj.value;
                        if (temp === value) {
                            options.value.splice(index, 1);
                        }
                    });
                } else {
                    var temp = $.isNumber(options.value.value) ? options.value.value + "" : options.value.value;
                    if (temp === value) {
                        options.value = null;
                    }
                }
            }
        },
        /**         * @private         * @description 点击total的事件处理         */
        _onTotalSpanClick: function() {
            var me = this;
            me.listUI.show();
            if (!me._lazyLoadElHideFlag) {
                me.lazyLoadEl.show();
            }
            me.selectedUlEl.hide();
        },
        /**         * @private         * @description 点击selected的事件处理         */
        _onSelectedSpanClick: function() {
            var me = this,
                tempText, temp = "";
            if (!me.realSelectedData || 0 === me.realSelectedData.length) {
                return;
            }
            me.listUI.hide();
            me.lazyLoadEl.hide();
            me.selectedUlEl.empty().show();
            $.each(me.realSelectedData || [], function(index, obj) {
                tempText = $.htmlEscape($.isUndefined(obj.text) ? obj.value : obj.text) || "";
                temp += "<li class=\"" + listListSelectConItem + " " + listSelectLiClass + "\"><span>" + tempText + "</span><span class=\"" + listCloseClass + "\" value=\"" + obj.value + "\"></span></li>";
            });
            me.selectedUlEl.html(temp);
        },
        /**         * @private         * @description 设置总数         * @param {Number} count 总数         */
        _setTotalElCount: function(count) {
            var me = this;
            if (me.totalAEl) {
                me.totalAEl.text(count);
            }
        },
        /**         * @private         * @description 设置选中记录数         */
        _setSelectedSpanElCount: function() {
            var me = this,
                data = me._mergeData();
            if (me.selectedAEl) {
                me.selectedAEl.text(data.length);
            }
        },
        /**         * @private         * @description 将options.value值和me.selectedData值合并         */
        _mergeData: function() {
            var me = this,
                options = me.options,
                value = options.value,
                selectedData = me.selectedData,
                tempArr = [];
            if (value) {
                if (!$.isArray(value)) {
                    value = [value];
                }
                $.each(value, function(index, obj) {
                    if ($.isUndefined(selectedData[obj.value])) {
                        tempArr.push(obj);
                    }
                });
            }
            tempArr = tempArr.concat(me._getSelectedData());
            me.realSelectedData = options.value = tempArr;
            return tempArr;
        },
        /**         * @private         * @description 重置list设置的条件         */
        _reset: function() {
            var me = this; // 保存选中的li对象
            me.selectedliEls = {}; // 选中数据
            me.selectedData = {};
            me.selectedDataLength = 0;
        },
        /**         * @private         * @description 在没有配置store情况下，缓存数据供过滤使用         */
        _filterCache: function() {
            var me = this;
            me.filterData = $.objClone(me.data);
        },
        /**         * @private         * @description 延迟加载提交请求         * @param {Object} e 事件对象         */
        _onLazyLoad: function(e) {
            var me = this,
                options = me.options,
                store = options.store;
            if (options.disabled) {
                return;
            }
            me.page++;
            me._isLazyLoadSetValue = true; // 以追加的形式添加
            store.loadRecords(me._getAllConditions(me._filter), true, null, true);
        },
        /**         * @private         * @description 获取所有条件         * @param {String/Number} value 过滤值         */
        _getAllConditions: function(value) {
            var me = this,
                options = me.options,
                limit = options.limit,
                filter, obj = {
                    "start": me.page * limit,
                    "limit": limit
                };
            if (options.search) {
                filter = me.searchField.getValue();
                if (filter) {
                    obj.filter = filter.value;
                }
            } else if (!$.isUndefined(value)) {
                obj.filter = value;
            }
            return obj;
        },
        /**         * @private         * @description 全选事件         * @param {Object} e 事件对象         */
        _onAllClick: function(e) {
            var me = e.data.me,
                options = me.options,
                parent = $(e.target),
                self, value, checked;
            if (options.disabled) {
                return;
            }
            if ((parent.parent("li")).hasClass(listListSelectConItem)) {
                parent = parent.parent("li");
            }
            self = parent.children("a");
            if (self.hasClass(listListSelectConUncheck)) {
                checked = true;
                self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
            } else if (self.hasClass(listListSelectConCheck)) { // 如果存在必须保留选择项，则不允许反选
                if (0 !== options.minRemains) {
                    return;
                }
                checked = false;
                self.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
            } else {
                return;
            }
            me.all(checked);
            me.oldValue = value = me._getSelectedData(); // 触发全选事件
            me._triggerHandler(e, eventCheckboxAllClick, {
                "checked": checked,
                "data": value
            });
        },
        /**         * @private         * @description 获取列表行数据         * @param {Object} liEl 行对象         * @return {Object} 返回行数据         */
        _getLiValue: function(liEl) {
            var me = this;
            return $.objClone(me.dataObjs[liEl.data("value")]) || {};
        },
        /**         * @private         * @description 列表面板事件处理         * @param {Object} e 事件对象         */
        _click: function(e) {
            var me = this,
                options = me.options,
                self = $(e.target),
                result, checked, value, selectedData, liEl = self.parent(),
                data, msg, result;
            if (options.disabled) {
                return;
            } // 处理图片点击
            if (self.hasClass(listEditClass)) {
                me._triggerHandler(e, eventEditClick, me._getLiValue(liEl));
            } else if (self.hasClass(listDeleteClass)) {
                result = me._triggerHandler(e, eventDeleteClick, me._getLiValue(liEl));
                if (result || $.isUndefined(result)) {
                    liEl.remove();
                }
            } else {
                if (options.tools && 0 < options.tools.length) {
                    if (self.parent("li").hasClass(listListSelectConItem)) {
                        self = self.parent("li");
                        self = self.children("a");
                    }
                } else {
                    if (self.parent("li").hasClass(listListSelectConItem)) {
                        self = self.parent("li");
                    }
                    self = self.children("a");
                }
                liEl = self.parent();
            } // 最少保留个数校验
            if (self.hasClass(listListSelectConCheck) && options.multi && me.selectedDataLength === options.minRemains) {
                msg = i18n.minRemains;
                Sweet.Msg.warn(msg.replace("{0}", options.minRemains));
                return;
            } // 最多保留个数校验
            if (self.hasClass(listListSelectConUncheck) && options.multi && me.selectedDataLength === options.maxRemains) {
                msg = i18n.maxRemains;
                Sweet.Msg.warn(msg.replace("{0}", options.maxRemains));
                return;
            } // 复选框点击事件
            if (self.hasClass(listListSelectConUncheck) || self.hasClass(listListSelectConCheck)) {
                checked = self.hasClass(listListSelectConUncheck) ? true : false;
                data = me._getLiValue(liEl);
                value = data.value;
                data.checked = checked; //先触发beforeCheckboxClick事件，beforeCheckboxClick事件只在未选中之前触发，反选节点不会触发
                if (self.hasClass(listListSelectConUncheck)) {
                    result = me._triggerHandler(e, eventBeforeCheckboxClick, data);
                }
                if (result || $.isUndefined(result)) {
                    if (checked) {
                        self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                        me.selectedData[value] = $.objClone(data);
                        me.selectedDataLength++;
                        me.selectedliEls[value] = liEl;
                    } else {
                        self.addClass(listListSelectConUncheck).removeClass(listListSelectConCheck);
                        me._delFromOptionsValue(value);
                        delete me.selectedData[value];
                        me.selectedDataLength--;
                        delete me.selectedliEls[value];
                    }
                    me.oldValue = selectedData = me._getSelectedData(); // 设置选中个数值
                    me._setSelectedSpanElCount(); // 触发checkbox的click事件
                    me._triggerHandler(e, eventCheckboxClick, $.objClone(data)); // 触发change事件
                    me._triggerHandler(e, eventChange, selectedData);
                } // 如果有全选复选框，判断是否全部选中
                if (options.all && options.multi) {
                    if (me.selectedDataLength === me.dataObjLength) {
                        me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                    } else {
                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                    }
                }
            }
        },
        /**         * @private         * @description 双击事件处理         * @param {Object} e 事件对象         */
        _dbClick: function(e) {
            var me = this,
                self = $(e.target);
            if (me.options.disabled) {
                return;
            }
            if (!(self.hasClass(listEditClass)) && !(self.hasClass(listDeleteClass))) {
                if (self.parent("li").hasClass(listListSelectConItem)) {
                    self = self.parent("li");
                    me._triggerHandler(e, eventDbClick, me._getLiValue(self));
                } else if (self.hasClass(listListSelectConItem)) {
                    me._triggerHandler(e, eventDbClick, me._getLiValue(self));
                }
            }
        },
        /**         * @private         * @description 获取列表选中数据         * @return {Array} 返回选中数据         */
        _getSelectedData: function() {
            var me = this,
                selectedData = me.selectedData,
                tempArr = [];
            if ($.isNull(selectedData)) {
                return tempArr;
            }
            $.each(selectedData, function(index, obj) {
                if (!obj) {
                    return;
                }
                delete obj.checked;
                tempArr.push(obj);
            });
            return tempArr;
        },
        /**         * @description 生成列表内容区         * @private         * @param {Boolean} isAppend 是否是追加新的树节点         */
        _buildListContent: function(isAppend) {
            var me = this,
                options = me.options,
                start, end, data, timeBegin, timeEnd;
            timeBegin = $.date.getMilliseconds(); // 防止越界查找，并关闭定时器
            if (0 === me.data.length || me.dataIndex >= me.data.length) {
                Sweet.Task.Timeout.stop(me.timerListContent, function() {
                    var value = me.options.value;
                    if ($.isArray(value) && 0 === value.length) {
                        value = null;
                    }
                    me.afterSetData = true;
                    if ($.isNotNull(value)) {
                        me._setValue(value);
                    } else { // 判断是否触发change事件
                        if (!me.isAppend && !$.equals(me.oldSelectedData, me.selectedData)) {
                            me._triggerHandler(null, eventChange, me._getValue());
                        }
                        me._isFilterSetValue = false;
                    } // 延迟加载触发的数据加载不触发afterSetData事件
                    if (!me._isLazyLoadSetValue) {
                        me._triggerHandler(null, eventAfterSetData, $.objClone(me.data));
                    }
                    me._isLazyLoadSetValue = false;
                });
                return;
            }
            start = me.dataIndex;
            end = me.dataIndex + loadDataRows; // 单选且pleaseSelect配置为true时，列表中增加“请选择”
            if (!options.multi && options._pleaseSelect) {
                me.data = [{
                    "value": options._pleaseSelectText,
                    "text": options._pleaseSelectText
                }].concat(me.data);
            }
            if (isAppend) {
                data = me.appendData.slice(start, end);
            } else {
                data = me.data.slice(start, end);
            }
            me._addNode(data); //每次生成100条数据
            me.dataIndex = end;
            timeEnd = $.date.getMilliseconds();
            me._info("_buildListContent() Time-consuming = " + (timeEnd - timeBegin) + "ms");
        },
        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) { // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**         * @private         * @description 渲染         * @param {String} id 宿主ID         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            } // 渲染搜索框
            if (me.searchField) {
                me.searchField.render(me.searchFiedlDiv.attr("id"));
            }
            return true;
        },
        /**         * @private         * @description 销毁组件         */
        _destroyWidget: function() {
            var me = this;
            me._removeAllNode(); // 删除定时器
            Sweet.Task.Timeout.stop(me.timerListContent);
            clearInterval(me._setValueIntervalId);
            me._super();
        }
    });
    /**     * 创建列表     * @name Sweet.list.List     * @class      * @extends Sweet.list     * @requires      * <pre>     *  jquery.ui.core.js     *  jquery.ui.widget.js     *  jquery.sweet.widget.js     *  jquery.sweet.widget.list.js     * </pre>     * @example      * <pre>     *  var data = [{"value":"1", "text":"ONE"},     *                {"value":"2", "text":"TWO"},     *                {"value":"3", "text":"THREE"},     *                {"value":"4", "text":"FOUR"}];     *  sweetList = new Sweet.list.List({     *               width : 100,     *               height : 150,     *               multi : true,     *               data : data,     *               renderTo :"sweet-list"     *           })     * sweetList.render("sweet-list");     * </pre>     */
    Sweet.list.List = $.sweet.widgetListList;
}(jQuery));;
/** * @fileOverview   * <pre> * 列表组件 * 2013/12/28 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var listSelectBgClass = "sweet-list-optimizelist-body",
        listBodyResizeElClass = "sweet-form-body-resizeEl",
        listBodyResizeXYElClass = "sweet-form-body-resizeXYEl",
        listBodyResizeXlElClass = "sweet-form-body-resizeXlEl",
        listBodyResizeXrElClass = "sweet-form-body-resizeXrEl",
        listBodyResizeYtElClass = "sweet-form-body-resizeYtEl",
        listBodyResizeYbElClass = "sweet-form-body-resizeYbEl",
        listSelectBgBorderClass = "sweet-list-optimizelist-body-border",
        listViewBarUlClass = "sweet-list-optimizelist-viewbar-body",
        listSelectUlClass = "sweet-list-optimizelist-ul",
        listScrollDivClass = "sweet-list-optimizelist-scorll",
        listSelectLiClass = "list-select",
        listSelectLiAll = "sweet-list-optimizelist-select-all",
        listListSelectConItem = "sweet-list-optimizelist-select-item",
        listListAction = "sweet-list-optimizelist-action",
        listListSelectConUncheck = "sweet-form-checkbox-unchecked",
        listListSelectConCheck = "sweet-form-checkbox-checked",
        listPrefix = "sweet-list-optimizelist-",
        defaultPaddingDivDisabledClass = "sweet-list-optimizelist-disabled",
        listSearchClass = "sweet-list-optimizelist-search",
        listListSeclectConCheckDisabled = "sweet-form-checkbox-checked-disabled",
        listListSeclectConUncheckDisabled = "sweet-form-checkbox-unchecked-disabled",
        listLeftClass = "left",
        listCloseClass = "close",
        listEditClass = "edit",
        listDeleteClass = "delete",
        eventChange = "change",
        eventAfterSetData = "afterSetData",
        eventAfterSetValue = "afterSetValue",
        eventCheckboxClick = "checkboxClick",
        eventCheckboxAllClick = "checkboxAllClick",
        eventCheckChange = "checkchange",
        eventBeforeCheckChange = "beforecheckchange",
        eventNodeClick = "nodeClick",
        eventBeforeCheckboxClick = "beforeCheckboxClick",
        eventDbClick = "dblclick",
        eventEditClick = "edit",
        eventDeleteClick = "delete",
        eventBeforeSearch = "beforesearch",
        eventSearch = "search",
        eventResizeLayout = "resizeLayout",
        eventResizeElMove = "resizeElMove",
        i18n = Sweet.core.i18n.list,
        hrefScript = Sweet.constants.HREFSCRIPT,
        uuid = uuid || 1000;
    $.widget("sweet.widgetListList", $.sweet.widgetList, /** @lends Sweet.list.OptimizeList.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-list-OptimizeList]",
        type: 'list',
        eventNames: /** @lends Sweet.list.OptimizeList.prototype*/
        {
            /**             * @event             * @description 值改变时事件,一般两个参数(evt, data)             */
            change: "值改变时事件",
            /**             * @event             * @description 调用完setData方法后事件,一般两个参数(evt, data)             */
            afterSetData: "调用完setData方法后事件",
            /**             * @event             * @description setValue执行后触发,一般两个参数(evt, data)             */
            afterSetValue: "setValue执行后触发",
            /**             * @event             * @description 复选框状态改变时事件,一般两个参数(evt, data)             */
            checkboxClick: "复选框状态改变时事件",
            /**             * @event             * @description 全选复选框点击事件,一般两个参数(evt, data)             */
            checkboxAllClick: "全选复选框点击事件",
            /**             * @event             * @description 节点状态改变时事件,一般参数为({node: node, checked: checked}, this)             */
            checkchange: "节点状态改变时事件",
            /**             * @event             * @description 节点状态改变前事件,一般参数为({node: node, checked: checked}, this)             */
            beforecheckchange: "节点状态改变前事件",
            /**             * @event             * @description 点击树列表节点,一般两个参数(evt, data)             */
            nodeClick: "点击树列表节点",
            /**             * @event             * @description 查询前事件,如果返回为false则不做过滤处理,一般两个参数({filter: xxxx}, tree/list, me)             */
            beforesearch: "查询前事件",
            /**             * @event             * @description 查询事件,一般两个参数({filter: xxxx}, tree/list, me)             */
            search: "查询事件",
            /**             * @event             * @description 点击checkBox之前的事件(checkBox状态改变前的时候触发),一般两个参数(evt, data)             */
            beforeCheckboxClick: "点击checkBox之前的事件(checkBox状态改变前的时候触发)",
            /**             * @event             * @description 列表行双击事件,一般两个参数(evt, data)             */
            dblclick: "列表行双击事件",
            /**             * @event             * @description 行图片编辑事件，暂时未实现,一般两个参数(evt, data)             */
            edit: "行图片编辑事件",
            /**             * @event             * @description 行图片删除事件,一般两个参数(evt, data)             */
            delete: "行图片删除事件",
            /**             * @event             * @description 缩放刷新后事件,一般两个参数(renderEl, me)             */
            resizeLayout: "缩放刷新后事件",
            /**             * @event             * @description 虚线框缩放事件,一般两个参数({offset: offset, resizeInfo: resizeInfo, resizeType: "xy"}, me)             */
            resizeElMove: "虚线框缩放事件"
        },
        options: /** @lends Sweet.list.OptimizeList.prototype*/
        {
            /**             * 基础数据             * @type {Object}             * @default null             */
            data: null,
            /**             * 多选属性             * @type {Boolean}             * @default false             */
            multi: false,
            /**             * 是否显示搜索框             * @type {Boolean}             * @default false             */
            search: false,
            /**             * 是否有提示             * @type {Boolean}             * @default false             */
            tip: false,
            /**             * 是否禁用list组件             * @type {Boolean}             * @default false             */
            disabled: false,
            /**             * 是否有全选功能             * @type {Boolean}             * @default false             */
            all: false,
            /**             * 多选时，必须保留选中的个数             * @type {Number}             * @default 0             */
            minRemains: 0,
            /**             * 多选时，最多保留选中个数             * @type {Number}             * @default Number.MAX_VAULE             */
            maxRemains: Number.MAX_VALUE,
            /**             * 行工具栏图标，现在只支持delete             * @type {Array}             * @default null             */
            tools: null,
            /**             * 查看已选择操作条             * @type {Boolean}             * @default false             */
            sViewBar: false,
            /**             * 最外层是否有边框             * @type {Boolean}             * @default false             */
            isBorder: false,
            /**             * 下拉框是否支持缩放,支持三种情况: 全缩放(true/"xy"),宽度缩放"x",高度缩放"y"             * @type {Boolean/String}             * @default false             */
            resizAble: false,
            /**             * 以毫秒表示的从开始输入到发出查询语句过滤下拉列表的时长, 默认350毫秒               * @type {Number}             * @default 350             */
            queryDelay: 350
        },
        /**         * @description 创建列表组件         * @private         */
        _createListWidget: function() {
            var me = this,
                queryDelay = 350,
                id = me.options.id,
                listDiv = me.listDiv = $("<div>"),
                listBodyDiv = me.listBodyDiv = $("<div>"); // 总数据
            me.data = me.options.data || []; // 操作时的数据
            me.opDatas = me.options.data || []; // 设置为null,减小内存开支
            me.options.data = null; // 数据总长度
            me.dataLength = me.data.length; // 存储全部数据对象
            me.valueObjs = {}; // 每个选项的高度
            me.liHeight = 22; //每个编辑项的宽度
            me.editItemWidth = 30; // 搜索框高
            me.searchFieldHeight = 25; // 每页渲染条数
            me.renderSize = 10; // 保存选中数据
            me.selectedData = {}; // 选中数据个数
            me.selectedDataLength = 0; // 如果超过这个数,则延迟渲染,否则一次性渲染
            me.limitCount = 300; // 标识可编辑下,当delete到第一次达到一次性渲染count时设为true
            me.isFirstDelLimitCount = false; // 标识查看已选中项时,选中项的个数少于count时设为true
            me.isFirstSLimitCount = false; // 临时LI的TOP,用于LI预渲染时取最大宽度用
            me.tempRenderTop = -100; // 增加搜索框
            if (me.options.search) { //过滤延时处理
                queryDelay = parseInt(me.options.queryDelay);
                if (isNaN(queryDelay)) {
                    queryDelay = 350;
                }
                if (queryDelay < 0) {
                    queryDelay = 0;
                }
                me.searchFiedlDiv = $("<div>").attr("id", id + listPrefix + uuid + "search").appendTo(me.listEl).addClass(listSearchClass);
                me.searchField = new Sweet.form.SearchField({
                    width: me.options.width,
                    emptyText: Sweet.core.i18n.tree.search
                });
                me.searchField.addListener("keyup", function(e, data) {
                    Sweet.Task.Delay.start({
                        id: me.options.id + "-optmizeList-filter-delay1",
                        run: function(args) {
                            me.filter(args);
                        },
                        args: data.value,
                        delay: queryDelay
                    });
                });
                me.searchField.addListener("click", function(e, data) {
                    Sweet.Task.Delay.start({
                        id: me.options.id + "-optmizeList-filter-delay2",
                        run: function(args) {
                            me.filter(args);
                        },
                        args: data.value,
                        delay: queryDelay
                    });
                });
                listDiv.addClass(listSelectBgClass);
            }
            if (me.options.isBorder) {
                listDiv.addClass(listSelectBgBorderClass);
            }
            listDiv.appendTo(me.listEl); // 是否有显示条功能
            if (me.options.sViewBar) {
                me._createSViewBar();
            } // 是否有全选功能
            if (me.options.all && me.options.multi) {
                me.allEl = me._addAllLiNode({
                    "value": "sweet-all",
                    "text": Sweet.core.i18n.combobox.checkAll
                }).appendTo(listDiv); // 绑定全选事件
                me.allEl.bind("click", {
                    "me": me,
                    data: {
                        "value": "sweet-all",
                        "text": Sweet.core.i18n.combobox.checkAll
                    }
                }, me._onAllClick);
                me.allAEl = me.allEl.find("a"); // 分隔线
                me.separateEl = $("<div>").addClass("sweet-form-combobox-partitionLine").appendTo(listDiv);
            }
            listBodyDiv.addClass(listScrollDivClass);
            me.listUI = $("<ul>").addClass(listSelectUlClass).appendTo(listBodyDiv);
            listBodyDiv.appendTo(listDiv); //缩放处理
            if (me.options.resizAble) {
                me.__doCreateResizeEl();
            } // 滚动条事件处理
            if (me.opDatas.length > me.limitCount) {
                me._doScrollEvent();
            }
        },
        /**         * @description 设置组件中的节点         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         * @param {Boolean} isAppend 是否是追加新的树节点         * @param {Number} total 总条数         */
        setData: function(data, isAppend, total) {
            var me = this,
                value = me.options.value;
            if (me.options.disabled) {
                return;
            }
            if ($.isNull(data)) {
                data = [];
            }
            me.isAppend = isAppend;
            total = parseInt(total);
            if (isNaN(total)) {
                total = null;
            }
            me._total = total;
            me._reset();
            value = value || [];
            if (!$.isArray(value)) {
                value = [value];
            }
            me.selectedDataLength = value.length;
            for (var i = 0; i < me.selectedDataLength; i++) {
                me.selectedData[value[i]["value"]] = value[i];
            }
            me._removeAllNodeList();
            if (!isAppend) {
                me.data = data;
                me.opDatas = data;
                me.dataLength = data.length;
            } else {
                me.data = me.data.concat(data);
                me.opDatas = $.objClone(me.data);
                me.dataLength = me.data.length;
            } // 如果有search框,则清除过滤信息
            if (me.searchField) {
                me.searchField.setValue({
                    value: "",
                    text: ""
                });
            }
            me._setData(me.opDatas); // 如果没有value则不setValue,如果有value则setValue并触发change事件
            if (me.selectedDataLength > 0) {
                me.setValue(value);
            } else { // 如果有全选复选框，将全选框勾选去掉
                if (me.options.all && me.options.multi) {
                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                }
            }
            if (me.options.sViewBar) {
                if (me._total && me._total > 0) {
                    me._setTotalElCount(me._total);
                } else {
                    me._setTotalElCount(me.dataLength);
                }
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
            me._triggerHandler(null, eventAfterSetData, $.objClone(me.data));
        },
        /**         * @description 取得List的所有数据         * @returns {Array/Object} data 返回List的所有数据         */
        getData: function() {
            return $.objClone(this.data);
        },
        /**         * @description 设置值         * @param {Array} value 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text2',value:'value2'},...]         * @param {Boolean} isFillValue 针对下拉列表型setValue时,是否通过value值从原数据中补全本次设置值         */
        setValue: function(value, isFillValue) {
            var me = this,
                vLength, liEls, checkboxEl, isCheck, msg, tLength;
            if (me.options.disabled) {
                return;
            }
            value = value || [];
            if (!$.isArray(value)) {
                value = [$.objClone(value)];
            }
            vLength = value.length; // 对于单选,如果设置了多个值,则取第一个
            if (!me.options.multi && vLength > 1) {
                value = [value[0]];
                vLength = 1;
            }
            if (isFillValue) {
                for (var i = 0; i < value.length; i++) {
                    for (var j = 0; j < me.data.length; j++) {
                        if (me.data[j]["value"] == value[i]["value"]) {
                            $.extend(value[i], me.data[j]);
                        }
                    }
                }
            } // 最少保留个数校验
            if (me.options.multi && vLength < me.options.minRemains) {
                msg = Sweet.core.i18n.list.minRemains;
                Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));
                return;
            } // 最多保留个数校验
            if (me.options.multi && vLength > me.options.maxRemains) {
                msg = Sweet.core.i18n.list.maxRemains;
                Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));
                return;
            }
            me._reset();
            me.selectedDataLength = vLength;
            for (var i = 0; i < me.selectedDataLength; i++) {
                me.selectedData[value[i]["value"]] = value[i];
            } // 如果有全选复选框，判断是否全部选中
            if (me.options.all && me.options.multi) {
                tLength = me.dataLength;
                if (me._total && me._total > 0) {
                    tLength = me._total;
                }
                if (me.dataLength > 0 && me.selectedDataLength >= tLength) {
                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                } else {
                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                }
            }
            if (me.options.sViewBar) {
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
            liEls = me.listUI.find("li"); // 选中列
            if (me.options.multi) {
                $.each(liEls, function(index, obj) {
                    isCheck = me.selectedData[$(obj).data("value")] ? true : false;
                    checkboxEl = $(obj).children("a");
                    if (checkboxEl && checkboxEl.length > 0) {
                        if (isCheck) {
                            checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                        } else {
                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        }
                    }
                });
            } else {
                $.each(liEls, function(index, obj) {
                    isCheck = me.selectedData[$(obj).data("value")] ? true : false;
                    $(obj).removeClass(listListAction);
                    if (isCheck) {
                        $(obj).addClass(listListAction);
                    }
                });
            }
            if (me.listBodyDiv) {
                me.listBodyDiv.triggerHandler("scroll");
            } // 触发change事件
            me._triggerHandler(null, eventChange, me._getValue()); // 触发afterSetValue事件
            me._triggerHandler(null, eventAfterSetValue, me._getValue());
        },
        /**         * @description 过滤         * @param {String} value 过滤的字符串         */
        filter: function(value) {
            var me = this,
                filterDatas = [],
                patt, flag, tFilter, tLength;
            me._info("filter value: " + value);
            tFilter = {
                filter: value
            };
            flag = me._triggerHandler(tFilter, eventBeforeSearch, me);
            if (false === flag || "false" === flag) {
                return;
            }
            if (me.searchField) {
                me.searchField.setDisabled(true);
            }
            value = tFilter["filter"];
            if (!$.isNotNull(value)) {
                me.opDatas = me.data;
            } else {
                patt = new RegExp($.regExp.escape(value), "i");
                for (var i = 0; i < me.data.length; i++) {
                    if (patt.test(me.data[i]["text"])) {
                        filterDatas.push(me.data[i]);
                    }
                }
                me.opDatas = filterDatas;
            }
            if (me.options.all && me.options.multi) {
                tLength = me.dataLength;
                if (me._total && me._total > 0) {
                    tLength = me._total;
                }
                if (me.dataLength > 0 && me.selectedDataLength >= tLength) {
                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                } else {
                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                }
            }
            me._triggerHandler(me.opDatas, eventSearch, me);
            me._setData(me.opDatas);
            if (me.searchField) {
                me.searchField.setDisabled(false);
            }
        },
        /**         * @public         * @description 返回当前界面看到的数据,例如过滤后，此方法可以取得所有过滤出来的数据         * @returns {Array} 返回当前界面看到的数据         */
        getCurrentData: function() {
            return $.objClone(this.opDatas);
        },
        /**         * @private         * @description 拿到当前值,不包含隐藏选中的数据         * @returns {Array} result 值array         */
        getCurrentValue: function() {
            var me = this,
                result = [],
                value = me._getValue(),
                currentData = me.opDatas,
                tempObjData = {};
            if (!value || value.length <= 0) {
                return result;
            }
            if (!currentData || currentData.length <= 0) {
                return result;
            }
            for (var i = 0; i < currentData.length; i++) {
                tempObjData[currentData[i]["value"]] = currentData[i];
            }
            for (var i = 0; i < value.length; i++) {
                if (tempObjData[value[i]["value"]]) {
                    result.push(value[i]);
                }
            }
            tempObjData = null;
            return result;
        },
        /**         * @private         * @description 设置宽度         * @param {String/Number} width 宽度         */
        _setWidth: function(width) {
            var me = this;
            if (!width || width < 0) {
                return;
            }
            me.width = width;
            me.listEl.externalWidth(width);
        },
        /**         * @private         * @description 设置高度         * @param {String/Number} height 高度         */
        _setHeight: function(height) {
            var me = this;
            if (!height || height < 0) {
                return;
            }
            me.height = height;
            me.listEl.externalHeight(height);
        },
        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me.width = width;
            me.height = height;
            me.listEl.externalWidth(width).externalHeight(height);
        },
        /**         * @private         * @description 获取宽度         * @returns {Number} 返回宽度         */
        _getWidth: function() {
            var me = this;
            return me.listEl.externalWidth();
        },
        /**         * @private         * @description 获取高度         * @returns {Number} 返回高度         */
        _getHeight: function() {
            var me = this;
            return me.listEl.externalHeight();
        },
        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */
        resizeLayout: function(width, height) {
            var me = this,
                listBodyDiv = me.listBodyDiv[0],
                _scrollTop = listBodyDiv.scrollTop,
                _scrollLeft = listBodyDiv.scrollLeft,
                _sscrollTop = 0,
                _sscrollLeft = 0,
                isSViewBar = false;
            if (me.options.sViewBar && me.sListBodyDiv && me.sListBodyDiv.length > 0) {
                isSViewBar = true;
                _sscrollTop = me.sListBodyDiv[0].scrollTop;
                _sscrollLeft = me.sListBodyDiv[0].scrollLeft;
            }
            me.setWH(width, height);
            listBodyDiv.scrollTop = _scrollTop;
            listBodyDiv.scrollLeft = _scrollLeft;
            if (isSViewBar) {
                me.sListBodyDiv[0].scrollTop = _sscrollTop;
                me.sListBodyDiv[0].scrollLeft = _sscrollLeft;
            }
            me._triggerHandler(me.renderEl, eventResizeLayout, me);
        },
        /**         * @private         * @description 设置数据         */
        _setData: function() {
            var me = this,
                listUI = me.listUI,
                listBodyDiv = me.listBodyDiv; // 初始化时让滚动条置顶				
            listBodyDiv[0].scrollTop = 0;
            listUI.find("li").remove(); // 恢复到初始值
            me.isFirstDelLimitCount = false;
            me._doLayout();
        },
        /**         * @private         * @description 生成列表全选的li标签         * @param {Object} nodeCfg 节点信息         * @returns {Object} liEl 当前操作的LI         */
        _addAllLiNode: function(nodeCfg) {
            var me = this,
                liEl, aEl, spanEl, text, qtip, listUI = me.listUI;
            text = $.nullToString(nodeCfg.text);
            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass + " " + listSelectLiAll); // 创建时需要判断全选是否选中
            aEl = $("<a>").addClass(listListSelectConUncheck).appendTo(liEl);
            spanEl = $("<span>").text(text).appendTo(liEl); // 是否有tip提示
            if (me.options.tip) {
                qtip = nodeCfg["qtip"];
                if (undefined === qtip || null === qtip) {
                    qtip = nodeCfg.text;
                }
                spanEl.attr("title", qtip);
            }
            liEl.appendTo(listUI);
            return liEl;
        },
        /**         * @private         * @description 主区域滚动加载事件处理         */
        _doScrollEvent: function() {
            var me = this,
                sScrollHight = 0,
                sScrollTop = 0,
                sDivHight = 0,
                startIndex = 0,
                listBodyDiv = me.listBodyDiv,
                rDatas = [],
                isLast = false,
                tempStart = 0; // 先清楚绑定的scroll事件
            listBodyDiv.unbind("scroll");
            listBodyDiv.scroll(function(e) { // 如果是横向滚动条滚动,则不处理
                if (sScrollTop == $(this)[0].scrollTop) {
                    return false;
                }
                isLast = false;
                sDivHight = $(this)[0].clientHeight;
                sScrollHight = $(this)[0].scrollHeight;
                sScrollTop = $(this)[0].scrollTop;
                startIndex = Math.floor(sScrollTop / me.liHeight);
                rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize)); // 加载到最后一页数据的处理
                if (sScrollTop > 0 && (sScrollTop + sDivHight) >= sScrollHight) {
                    isLast = true;
                    tempStart = me.opDatas.length - me.renderSize;
                    if (tempStart < 0) {
                        tempStart = 0;
                        sScrollTop = 0;
                    }
                    rDatas = me.opDatas.slice(tempStart);
                } else {
                    isLast = false;
                    if (sScrollTop <= 0 || startIndex < 0) {
                        startIndex = 0;
                        sScrollTop = 0;
                        rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));
                    }
                }
                me._doScrollLoad(rDatas, sScrollTop, isLast);
                e.stopImmediatePropagation();
                return false;
            });
        },
        /**         * @private         * @description 主区域滚动加载数据处理         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */
        _doScrollLoad: function(datas, sScrollTop, isLast, isRenderAll) {
            var me = this,
                liDoms, tempLi, sDivHight, listUI = me.listUI,
                paddingWidth = 20,
                listUIScrollLeft = 0,
                tempTop = me.tempRenderTop,
                maxWidth = 0,
                tempEditWidth = 0; // 如果为一次性渲染
            if (isRenderAll) {
                me.listBodyDiv.unbind("scroll");
                listUIScrollLeft = me.listBodyDiv.get(0).scrollLeft;
                listUI.find("li").remove();
                for (var i = 0; i < datas.length; i++) {
                    tempLi = me._addLiNode(datas[i], (i * me.liHeight));
                }
                maxWidth = me._getLiMaxWidth(listUI); // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                if (me.listBodyDiv[0].clientWidth >= maxWidth) {
                    if (me.options.tools && me.options.tools.length > 0) {
                        tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));
                    }
                    if (tempEditWidth < 0) {
                        tempEditWidth = 0;
                    }
                    maxWidth = me.listBodyDiv[0].clientWidth - paddingWidth;
                } else {
                    if (me.options.tools && me.options.tools.length > 0) {
                        tempEditWidth = (me.options.tools.length * me.editItemWidth);
                    }
                }
                maxWidth += tempEditWidth;
                liDoms = listUI.find("li");
                $.each(liDoms, function(index, obj) {
                    $(obj).width(maxWidth).css({
                        top: "",
                        position: "relative"
                    });
                });
                me.listBodyDiv.get(0).scrollLeft = listUIScrollLeft;
                return;
            } // 先预渲染下,取出本次渲染的最宽LI的宽度
            for (var i = 0; i < datas.length; i++) {
                tempLi = me._addLiNode(datas[i], tempTop);
                if (tempLi.get(0).scrollWidth >= maxWidth) {
                    maxWidth = tempLi.get(0).scrollWidth - paddingWidth;
                }
                tempLi.remove();
            } // 如果到底,将滚动条设置到底部
            if (isLast) {
                me.listBodyDiv[0].scrollTop = listUI.height() - me.listBodyDiv[0].clientHeight;
            } // 由于本次要渲染的LI可能会出现横向滚动条,固高度重新计算,应减去底部横向滚动条所占的高
            if (sScrollTop > 0) {
                sDivHight = me.listBodyDiv[0].clientHeight + sScrollTop; // Y坐标
                sScrollTop = sDivHight - datas.length * me.liHeight;
            }
            liDoms = listUI.find("li");
            for (var i = 0; i < datas.length; i++) {
                me._renderLiNode(datas[i], (sScrollTop + i * me.liHeight), liDoms[i]);
            }
            if (me.options.tools && me.options.tools.length > 0) {
                tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));
            }
            liDoms = listUI.find("li"); // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
            if (me.listBodyDiv[0].clientWidth >= maxWidth) {
                if (me.options.tools && me.options.tools.length > 0) {
                    tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));
                }
                if (tempEditWidth < 0) {
                    tempEditWidth = 0;
                }
                maxWidth = me.listBodyDiv[0].clientWidth - paddingWidth;
            } else {
                if (me.options.tools && me.options.tools.length > 0) {
                    tempEditWidth = (me.options.tools.length * me.editItemWidth);
                }
            }
            maxWidth += tempEditWidth;
            $.each(liDoms, function(index, obj) {
                $(obj).width(maxWidth);
            });
        },
        /**         * @private         * @description 渲染主区域列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liDom LI         * @returns {Object} liEl 当前操作的LI         */
        _renderLiNode: function(nodeCfg, top, liDom) {
            var me = this,
                selectData, liEl, aEla, spanEl, text, qtip, disabled = me.options.disabled;
            if (!liDom) {
                me._addLiNode(nodeCfg, top, 0);
                return;
            }
            liEl = $(liDom);
            liEl.css("top", top).data("value", nodeCfg.value); // 重新绑定事件
            liEl.unbind("click");
            liEl.unbind("dblclick");
            liEl.bind("click", {
                "me": me,
                "data": nodeCfg
            }, me._onNodeClick).bind("dblclick", {
                "me": me,
                "data": nodeCfg
            }, me._dbClick); // 勾选处理
            if (me.options.multi) {
                aEla = liEl.find("a");
                aEla.addClass(listListSelectConUncheck);
                aEla.removeClass(listListSelectConCheck);
                if (me.selectedData[nodeCfg.value]) {
                    aEla.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                }
            } else {
                selectData = me._getValue();
                liEl.removeClass(listListAction);
                if (nodeCfg.value == selectData.value) {
                    liEl.addClass(listListAction);
                }
            } // 显示文本处理
            text = $.nullToString(nodeCfg.text);
            spanEl = liEl.find("span"); // 如果为可编辑,则取第一个span
            spanEl = $(spanEl[0]);
            spanEl.text(text); // 是否有tip提示
            if (me.options.tip) {
                qtip = nodeCfg["qtip"];
                if (undefined === qtip || null === qtip) {
                    qtip = nodeCfg.text;
                }
                spanEl.attr("title", qtip);
            }
            if (disabled) {
                me.setDisabled(disabled);
            }
            return liEl;
        },
        /**         * @private         * @description 生成主列表区域li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liWidth LI的宽度         * @returns {Object} liEl 当前操作的LI         */
        _addLiNode: function(nodeCfg, top, liWidth) {
            var me = this,
                tools = me.options.tools,
                selectData, liEl, aEl, spanEl, text, qtip, listUI = me.listUI,
                paddingWidth = 20,
                disabled = me.options.disabled;
            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass).css("top", top).data("value", nodeCfg.value).bind("click", {
                "me": me,
                "data": nodeCfg
            }, me._onNodeClick).bind("dblclick", {
                "me": me,
                "data": nodeCfg
            }, me._dbClick);
            if (liWidth && liWidth > 0) { // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                if (me.listBodyDiv[0].clientWidth >= liWidth) {
                    liWidth = me.listBodyDiv[0].clientWidth - paddingWidth;
                }
                if (tools && tools.length > 0) {
                    liWidth += (me.editItemWidth * tools.length);
                }
                liEl.width(liWidth);
            } // 勾选处理 
            if (me.options.multi) {
                aEl = $("<a>").addClass(listListSelectConUncheck).appendTo(liEl);
                if (me.selectedData[nodeCfg.value]) {
                    aEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                }
            } else {
                selectData = me._getValue();
                if (nodeCfg.value == selectData.value) {
                    liEl.addClass(listListAction);
                } else {
                    liEl.addClass(listSelectLiClass);
                }
            }
            text = $.nullToString(nodeCfg.text);
            spanEl = $("<span>").text(text).appendTo(liEl); // 是否有tip提示
            if (me.options.tip) {
                qtip = nodeCfg["qtip"];
                if (undefined === qtip || null === qtip) {
                    qtip = nodeCfg.text;
                }
                spanEl.attr("title", qtip);
            } // 增加操作功能图标
            if (tools && 0 < tools.length) {
                $.each(tools, function(index, picName) {
                    if ("edit" === picName) {
                        $("<span class=\"" + listEditClass + "\">").appendTo(liEl);
                    } else if ("delete" === picName) {
                        $("<span class=\"" + listDeleteClass + "\">").appendTo(liEl);
                    }
                });
            }
            liEl.appendTo(listUI);
            if (disabled) {
                me.setDisabled(disabled);
            }
            return liEl;
        },
        /**         * @private         * @description 组件重绘         */
        _doLayout: function() {
            var me = this,
                width = me.listEl.width(),
                height = me.listEl.height(),
                searchHeight = 0,
                tempSHeight = 8,
                allHeight = 0,
                viewBarHeight = 0,
                searchMarginBottom = 5,
                borderHeight = 1,
                viewBarPadding = 7,
                viewBarMargin = 3,
                liHeight = me.liHeight,
                listHeight, sListHeight, renderDatas, sOptDatas, rDatas, tWidth, _initH = 0,
                _initW = 0; // 如果有搜索框
            if (me.options.search) {
                me.searchField.setWidth(width);
                searchHeight = me.searchFiedlDiv.outerHeight(true);
                searchHeight += searchMarginBottom;
            } // 是否有已选择信息框
            if (me.options.sViewBar) {
                viewBarHeight = me.viewBarEl.outerHeight() + viewBarMargin;
            } // 是否有全选框
            if (me.options.all && me.options.multi) {
                allHeight = me.allEl.outerHeight() + me.separateEl.outerHeight();
            }
            me.listDiv.externalWidth(width);
            tWidth = me.listDiv.innerWidth(); // maxHeight与height互斥
            if (!$.isNull(me.options.height)) {
                height = me.options.height;
            }
            if (!(height == "100%" || height == "auto")) {
                if (me.options.isBorder) {
                    height = height - (borderHeight * 2);
                }
                listHeight = height - searchHeight - allHeight - viewBarHeight;
                if (listHeight < 0) {
                    listHeight = 0;
                }
                me.renderSize = Math.ceil(listHeight / liHeight);
            } else {
                listHeight = "auto";
                if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble || "x" == me.options.resizAble || "y" == me.options.resizAble) {
                    me.options.height = "auto";
                    _initH = borderHeight * 2;
                    _initW = borderHeight * 2;
                }
                me.renderSize = me.opDatas.length;
            }
            me.listUI.height(me.opDatas.length * liHeight);
            if (me.renderSize <= 0) {
                me.renderSize = 1;
            }
            me.listBodyDiv.externalWidth(tWidth).css({
                height: listHeight,
                margin: "3px 0px"
            });
            me.listBodyDiv[0].scrollTop = 0;
            renderDatas = me.opDatas.slice(0, me.renderSize);
            if (me.opDatas.length <= me.limitCount) {
                me.isFirstDelLimitCount = true;
                renderDatas = me.opDatas;
            } else {
                me.isFirstDelLimitCount = false;
                me._doScrollEvent();
            }
            me._createListNode(renderDatas, 0, false, me.isFirstDelLimitCount); //修正相关宽高度
            if ("auto" == listHeight) {
                height = me.listEl.outerHeight();
                if (height <= 0) {
                    height = me.listBodyDiv.outerHeight();
                }
                listHeight = height - searchHeight - allHeight - viewBarHeight;
                me.listBodyDiv.css({
                    height: listHeight
                });
                me.listEl.externalHeight(height);
            }
            if (me.options.sViewBar) {
                sListHeight = height - viewBarHeight - viewBarPadding;
                if (sListHeight < 0) {
                    sListHeight = 0;
                }
                if (me.options.isBorder) {
                    tempSHeight -= borderHeight * 2;
                }
                me.sListBodyDiv.externalWidth(tWidth).css("height", sListHeight + tempSHeight);
                me.sListUI.height(me.selectedDataLength * liHeight);
                me.sRenderSize = Math.ceil(sListHeight / liHeight);
                if (me.sRenderSize <= 0) {
                    me.sRenderSize = 1;
                }
                if ("block" == me.sListBodyDiv.css("display")) {
                    me.sListBodyDiv[0].scrollTop = 0;
                    sOptDatas = me._getSelectedData();
                    if (sOptDatas.length > me.limitCount) {
                        me._doSScrollEvent();
                        me.isFirstSLimitCount = false;
                        rDatas = sOptDatas.slice(0, (0 + me.sRenderSize));
                    } else {
                        me.isFirstSLimitCount = true;
                        rDatas = sOptDatas;
                    }
                    me.sListUI.find("li").remove();
                    me._doSScrollLoad(rDatas, 0, false, me.isFirstSLimitCount);
                }
            }
            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble || "x" == me.options.resizAble || "y" == me.options.resizAble) {
                _initH += me.listDiv.outerHeight();
                _initW += me.listDiv.outerWidth(true);
                if (!me._resizeInfo || !me._resizeLayout) {
                    me._resizeInfo = {
                        initWidth: _initW,
                        width: _initW,
                        initHeight: _initH,
                        height: _initH
                    };
                } else {
                    me._resizeInfo.leftWidth = 0;
                    me._resizeInfo.topHeight = 0;
                    me._resizeInfo.isMouseDown = false;
                    if (me._resizeInfo && me._resizeInfo._$moveEl) {
                        me._resizeInfo._$moveEl.remove();
                        me._resizeInfo._$moveEl = null;
                    }
                }
                me._resizeLayout = false;
            }
        },
        /**         * @private         * @description 生成列表内容区         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */
        _createListNode: function(datas, sScrollTop, isLast, isRenderAll) {
            var me = this;
            if ($.isNull(datas)) {
                return;
            }
            me.listUI.find("li").remove();
            me._doScrollLoad(datas, sScrollTop, isLast, isRenderAll);
        },
        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         * @returns {Boolean} result 执行的结果         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) { // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**         * @description 执行全选、反选操作,只适用于复选情况         * @param {boolean} all true：全选，false：全不选         * @param {Object} e 事件对象         */
        all: function(all, e) {
            var me = this,
                checkboxEl, selectedValue, liEls = [],
                isFireChange = false;
            if (!me.options.multi) {
                return;
            }
            liEls = me.listUI.find("li"); // 选中列
            $.each(liEls, function(index, obj) {
                checkboxEl = $(obj).children("a"); // 选中
                if (all) {
                    checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                } else {
                    checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                }
            });
            if (all) {
                $.each(me.opDatas, function(index, obj) {
                    if (!me.selectedData[obj["value"]]) {
                        me.selectedData[obj["value"]] = obj;
                        me.selectedDataLength++;
                        isFireChange = true;
                    }
                });
            } else {
                $.each(me.opDatas, function(index, obj) {
                    if (me.selectedData[obj["value"]]) {
                        delete me.selectedData[obj["value"]];
                        me.selectedDataLength--;
                        isFireChange = true;
                    }
                });
            } // 如果有全选复选框，判断是否全部选中
            if (me.options.all && me.options.multi) {
                if (all) {
                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                } else {
                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                }
            }
            if (me.options.sViewBar) {
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
            selectedValue = me._getValue(); // 判断是否触发change事件
            if (isFireChange) {
                me._triggerHandler(e, eventChange, selectedValue);
            }
        },
        /**         * @description 是否全选，只适用于复选情况         * @return {Boolean} true：全选，false：未全选         */
        isAll: function() {
            var me = this;
            if (me.dataLength <= 0) {
                return false;
            }
            if (me._total && me._total > 0) {
                if (me.selectedDataLength >= me._total) {
                    return true;
                } else {
                    return false;
                }
            }
            if (me.selectedDataLength > 0 && me.selectedDataLength >= me.dataLength) {
                return true;
            } else {
                return false;
            }
        },
        /**         * @description 设置组件禁用时样式         * @param {Boolean} disabled 是否禁用组件         */
        setDisabled: function(disabled) {
            var me = this,
                checkboxEl, liEls = me.listUI.find("li");
            me.options.disabled = disabled;
            if (disabled) {
                me.listDiv.addClass(defaultPaddingDivDisabledClass);
            } else {
                me.listDiv.removeClass(defaultPaddingDivDisabledClass);
            }
            if (me.searchField) {
                me.searchField.setDisabled(disabled);
            }
            if (disabled) {
                if (me.allAEl) {
                    if (me.allAEl.hasClass(listListSelectConUncheck)) {
                        me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSeclectConUncheckDisabled);
                    } else if (me.allAEl.hasClass(listListSelectConCheck)) {
                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSeclectConCheckDisabled);
                    }
                }
                me.listDiv.addClass(defaultPaddingDivDisabledClass);
                $.each(liEls, function(index, obj) {
                    $(obj).removeClass(listSelectLiClass);
                    checkboxEl = $(obj).children("a");
                    if (checkboxEl) {
                        if (checkboxEl.hasClass(listListSelectConUncheck)) {
                            checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSeclectConUncheckDisabled);
                        } else if (checkboxEl.hasClass(listListSelectConCheck)) {
                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSeclectConCheckDisabled);
                        }
                    }
                });
            } else {
                if (me.allAEl) {
                    if (me.allAEl.hasClass(listListSeclectConUncheckDisabled)) {
                        me.allAEl.removeClass(listListSeclectConUncheckDisabled).addClass(listListSelectConUncheck);
                    } else if (me.allAEl.hasClass(listListSeclectConCheckDisabled)) {
                        me.allAEl.removeClass(listListSeclectConCheckDisabled).addClass(listListSelectConCheck);
                    }
                }
                me.listDiv.removeClass(defaultPaddingDivDisabledClass);
                $.each(liEls, function(index, obj) {
                    $(obj).addClass(listSelectLiClass);
                    checkboxEl = $(obj).children("a");
                    if (checkboxEl) {
                        if (checkboxEl.hasClass(listListSeclectConUncheckDisabled)) {
                            checkboxEl.removeClass(listListSeclectConUncheckDisabled).addClass(listListSelectConUncheck);
                        } else if (checkboxEl.hasClass(listListSeclectConCheckDisabled)) {
                            checkboxEl.removeClass(listListSeclectConCheckDisabled).addClass(listListSelectConCheck);
                        }
                    }
                });
            }
        },
        /**         * @private         * @description 获取组件中选择的节点数据         * @return {Array} 节点对应的节点数据数组，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */
        _getValue: function() {
            var me = this;
            if (me.options.multi) {
                return me._getSelectedData();
            } else {
                if (me._getSelectedData().length <= 0) {
                    return {};
                }
                return me._getSelectedData()[0];
            }
        },
        /**         * @private         * @description 获取列表选中数据         * @return {Array} 返回选中数据         */
        _getSelectedData: function() {
            var me = this,
                tempArr = [],
                tempObj;
            if ($.isNull(me.selectedData)) {
                return tempArr;
            }
            for (var key in me.selectedData) {
                tempObj = me.selectedData[key];
                if (tempObj) {
                    delete tempObj.checked;
                    tempArr.push(tempObj);
                }
            }
            return tempArr;
        },
        /**         * @private         * @description 全选事件         * @param {Object} e 事件对象         */
        _onAllClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                checked, vLength, msg;
            if (me.options.disabled) {
                return;
            }
            if (self.hasClass(listSelectLiAll)) {
                self = self.find("a");
            } else {
                self = self.parent("li");
                self = self.children("a");
            }
            if (self.hasClass(listListSelectConUncheck)) {
                vLength = me.selectedDataLength;
                $.each(me.opDatas, function(index, obj) {
                    if (!me.selectedData[obj["value"]]) {
                        vLength++;
                    }
                }); // 最多保留个数校验
                if (me.options.multi && vLength > me.options.maxRemains) {
                    msg = Sweet.core.i18n.list.maxRemains;
                    Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));
                    return;
                }
                checked = true;
                self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
            } else if (self.hasClass(listListSelectConCheck)) { // 最少保留个数校验
                if (me.options.multi && me.options.minRemains > 0) {
                    msg = Sweet.core.i18n.list.minRemains;
                    Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));
                    return;
                }
                checked = false;
                self.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
            } else {
                return;
            }
            me.all(checked, e); // 触发全选事件
            me._triggerHandler(e, eventCheckboxAllClick, {
                "value": "sweet-all",
                "text": Sweet.core.i18n.combobox.checkAll,
                "checked": checked,
                "data": me._getSelectedData()
            });
            me._triggerHandler({
                node: {
                    "value": "sweet-all",
                    "text": Sweet.core.i18n.combobox.checkAll,
                    "checked": checked
                },
                checked: checked
            }, eventCheckChange, me);
        },
        /**         * @private         * @description 双击事件处理         * @param {Object} e 事件对象         */
        _dbClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                data = $.objClone(e.data.data);
            if (me.options.disabled) {
                return;
            }
            if (!(self.hasClass(listEditClass)) && !(self.hasClass(listDeleteClass))) {
                if (self.parent("li").hasClass(listListSelectConItem)) {
                    self = self.parent("li");
                    me._triggerHandler(e, eventDbClick, data);
                } else if (self.hasClass(listListSelectConItem)) {
                    me._triggerHandler(e, eventDbClick, data);
                }
            }
        },
        /**         * @private         * @description 列表面板事件处理         * @param {Object} e 事件对象         */
        _onNodeClick: function(e) {
            var me = e.data.me,
                self = $(e.target),
                liEls, result, checked, value, oldData, data = $.objClone(e.data.data),
                checkData, msg, deleteValue, sDivHight, sScrollHight, sScrollTop, startIndex, rDatas, listBodyDiv = me.listBodyDiv,
                isLast = false,
                isRenderAll = false,
                isDeleteFireChangeEvent = false,
                deleteLi, tempStart, tempMaxWidth = 0,
                tempEditWidth = 0,
                txtWidth = 0,
                txtEl, tempLIs, tempLI, scrollLeft = 0,
                scrollTop = 0,
                flag, tLength;
            if (me.options.disabled) {
                return;
            } // 处理图片点击
            if (self.hasClass(listEditClass)) {
                me._triggerHandler(e, eventEditClick, data);
                return;
            } else if (self.hasClass(listDeleteClass)) {
                result = me._triggerHandler(e, eventDeleteClick, data);
                if (result || $.isUndefined(result)) { // 删除
                    deleteValue = data["value"];
                    if (me.selectedData[deleteValue]) {
                        isDeleteFireChangeEvent = true;
                        delete me.selectedData[deleteValue];
                        me.selectedDataLength--;
                    }
                    me.opDatas = me._deleteItemByValue(deleteValue, me.opDatas);
                    me.data = me._deleteItemByValue(deleteValue, me.data);
                    me.dataLength = me.data.length;
                    me.listUI.height(me.listUI.height() - me.liHeight); // 如果
                    if (me.opDatas.length > me.limitCount) { //start:有横向滚动条时,解决scrollHeight不变问题
                        liEls = me.listUI.find("li");
                        for (var i = 0; i < liEls.length; i++) {
                            $(liEls[i]).css({
                                top: (parseInt($(liEls[i]).css("top")) - 22) + "px"
                            });
                        } //End
                        sDivHight = listBodyDiv.get(0).clientHeight;
                        sScrollHight = listBodyDiv.get(0).scrollHeight;
                        sScrollTop = listBodyDiv.get(0).scrollTop;
                        startIndex = Math.floor(sScrollTop / me.liHeight);
                        rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));
                        if (sScrollTop > 0 && (sScrollTop + sDivHight) >= sScrollHight) {
                            isLast = true;
                            tempStart = me.opDatas.length - me.renderSize;
                            if (tempStart < 0) {
                                tempStart = 0;
                                sScrollTop = 0;
                            }
                            rDatas = me.opDatas.slice(tempStart);
                        } else {
                            isLast = false;
                            if (sScrollTop <= 0 || startIndex < 0) {
                                startIndex = 0;
                                sScrollTop = 0;
                                rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));
                            }
                        }
                        me._doScrollLoad(rDatas, sScrollTop, isLast, isRenderAll);
                    } else {
                        if (me.isFirstDelLimitCount) {
                            deleteLi = self.parent("li");
                            if (!deleteLi.is("li")) {
                                deleteLi = $(this);
                            } //记录滚动条位置
                            scrollLeft = listBodyDiv[0].scrollLeft;
                            scrollTop = listBodyDiv[0].scrollTop;
                            deleteLi.remove();
                            txtWidth = 0;
                            tempMaxWidth = 0;
                            tempLIs = me.listUI.find("li").width("");
                            for (var i = 0; i < tempLIs.length; i++) {
                                tempLI = tempLIs[i];
                                if (tempLI.scrollWidth > tempMaxWidth) {
                                    tempMaxWidth = tempLI.scrollWidth;
                                }
                                txtEl = $(tempLI).find("span:eq(0)");
                                if (txtEl.width() > txtWidth) {
                                    txtWidth = txtEl.width();
                                }
                            } // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                            if (txtWidth >= tempMaxWidth) {
                                if (me.options.tools) {
                                    tempEditWidth = (me.options.tools.length * me.editItemWidth);
                                } else {
                                    tempEditWidth = 0;
                                }
                                tempMaxWidth = txtWidth;
                            } else {
                                if (me.options.tools) {
                                    tempEditWidth = (me.options.tools.length * me.editItemWidth) - Math.abs(tempMaxWidth - txtWidth);
                                } else {
                                    tempEditWidth = 0;
                                }
                                if (tempEditWidth < 0) {
                                    tempEditWidth = 0;
                                }
                                tempMaxWidth = tempMaxWidth - 20;
                            }
                            tempMaxWidth += tempEditWidth;
                            me.listUI.height(me.listUI.height() - me.liHeight);
                            tempLIs.width(tempMaxWidth);
                            listBodyDiv[0].scrollLeft = scrollLeft;
                            listBodyDiv[0].scrollTop = scrollTop;
                        } else {
                            rDatas = me.opDatas;
                            isRenderAll = true;
                            sScrollTop = 0;
                            me._doScrollLoad(rDatas, sScrollTop, isLast, isRenderAll);
                            me.isFirstDelLimitCount = true;
                        }
                    } // 如果有全选复选框，判断是否全部选中
                    if (me.options.all && me.options.multi) {
                        if (me.dataLength > 0 && me.selectedDataLength >= me.dataLength) {
                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                        } else {
                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        }
                    }
                    if (me.options.sViewBar) {
                        if (me._total && me._total > 0) {
                            me._total--;
                            me._setTotalElCount(me._total);
                            if (me.options.all && me.options.multi) {
                                if (me.dataLength > 0 && me.selectedDataLength >= me._total) {
                                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                                } else {
                                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                                }
                            }
                        } else {
                            me._setTotalElCount(me.dataLength);
                        }
                        me._setSelectedSpanElCount(me.selectedDataLength);
                    } // 触发change事件
                    if (isDeleteFireChangeEvent) {
                        me._triggerHandler(e, eventChange, me._getSelectedData());
                    }
                    return;
                }
            } else { // 多选时self为a元素,单选时为li元素
                if (me.options.multi) {
                    if (self.hasClass(listListSelectConItem)) {
                        self = self.children("a");
                    } else {
                        self = self.parent("li");
                        self = self.children("a");
                    }
                } else {
                    if (!self.hasClass(listListSelectConItem)) {
                        self = self.parent("li");
                    }
                }
            } // 非多选时，保存选中数据
            if (!me.options.multi) {
                oldData = me._getValue();
                value = data.value;
                me.selectedData = {};
                me.selectedData[value] = data;
                me.selectedDataLength = 1;
                liEls = me.listUI.find("li"); // 不相等时，触发change事件
                if (oldData.value !== value) {
                    $.each(liEls, function(index, obj) {
                        $(obj).removeClass(listListAction);
                    });
                    me._triggerHandler(e, eventChange, data);
                }
                self.addClass(listListAction);
                me._triggerHandler(e, eventNodeClick, data);
            } else { // 取消选择操作	
                if (self.hasClass(listListSelectConCheck)) { // 最少保留个数校验
                    if (me.options.multi && me.options.minRemains > 0 && me.selectedDataLength <= me.options.minRemains) {
                        msg = Sweet.core.i18n.list.minRemains;
                        Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));
                        return;
                    }
                } else { // 最多保留个数校验
                    if (me.options.multi && me.selectedDataLength >= me.options.maxRemains) {
                        msg = Sweet.core.i18n.list.maxRemains;
                        Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));
                        return;
                    }
                } // 复选框点击事件
                if (self.hasClass(listListSelectConUncheck) || self.hasClass(listListSelectConCheck)) {
                    checked = self.hasClass(listListSelectConUncheck) ? true : false;
                    value = data.value; // 先触发beforeCheckboxClick事件，beforeCheckboxClick事件只在未选中之前触发，反选节点不会触发
                    if (self.hasClass(listListSelectConUncheck)) {
                        result = me._triggerHandler(e, eventBeforeCheckboxClick, data);
                    }
                    checkData = $.objClone(data);
                    checkData.checked = !self.hasClass(listListSelectConUncheck);
                    flag = me._triggerHandler({
                        node: checkData,
                        checked: checked
                    }, eventBeforeCheckChange, me);
                    if (false === flag || "false" === flag) {
                        return;
                    }
                    if (result || $.isUndefined(result)) {
                        if (checked) {
                            self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck); // 如果不存在则加入,length++
                            if (!me.selectedData[value]) {
                                me.selectedData[value] = $.objClone(data);
                                me.selectedDataLength++;
                            }
                        } else {
                            self.addClass(listListSelectConUncheck).removeClass(listListSelectConCheck);
                            if (me.selectedData[value]) {
                                delete me.selectedData[value];
                                me.selectedDataLength--;
                            }
                        } // 触发checkbox的click事件
                        checkData = $.objClone(data);
                        checkData.checked = checked;
                        me._triggerHandler(e, eventCheckboxClick, checkData);
                        me._triggerHandler({
                            node: checkData,
                            checked: checked
                        }, eventCheckChange, me); // 触发change事件
                        me._triggerHandler(e, eventChange, me._getSelectedData());
                    } // 如果有全选复选框，判断是否全部选中
                    if (me.options.all && me.options.multi) {
                        tLength = me.dataLength;
                        if (me._total && me._total > 0) {
                            tLength = me._total;
                        }
                        if (me.selectedDataLength >= tLength) {
                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);
                        } else {
                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                        }
                    }
                }
            }
            if (me.options.sViewBar) {
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
        },
        /**         * @private         * @description 删除所有节点         */
        _removeAllNodeList: function() {
            var me = this; // 删除dom节点
            if (me.listUI) {
                me.listUI.empty();
            }
        },
        /**         * @private         * @description 重置list设置的条件         */
        _reset: function() {
            var me = this; // 选中数据
            me.selectedData = {};
            me.selectedDataLength = 0;
            if (me.options.sViewBar) {
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
        },
        /**         * @private         * @description 渲染         * @param {String} id 宿主ID         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            } // 渲染搜索框
            if (me.searchField) {
                me.searchField.render(me.searchFiedlDiv.attr("id"));
            }
            me.setValue(me.options.value);
            me._setData(me.opDatas);
            if (me.options.sViewBar) {
                me._setTotalElCount(me.dataLength);
                me._setSelectedSpanElCount(me.selectedDataLength);
            }
            me.setDisabled(me.options.disabled);
            me.rendered = true;
            return true;
        },
        /**         * @description 删除数组中的的某一个元素         * @param {String} value 为此值时删除此元素         * @param {Array} tArray 待从此数组中删除         * @return {Array} result 返回删除后的数组         */
        _deleteItemByValue: function(value, tArray) {
            var result = [],
                length, sliceIndex, tempBData, tempAData;
            if ($.isNull(tArray)) {
                return [];
            }
            sliceIndex = length = tArray.length;
            for (var i = 0; i < length; i++) {
                if (value == tArray[i]["value"]) {
                    sliceIndex = i;
                    break;
                }
            }
            tempBData = tArray.slice(0, sliceIndex);
            tempAData = tArray.slice(sliceIndex + 1);
            result = tempBData.concat(tempAData);
            return result;
        },
        /**         * @private         * @description 创建选择操作条         */
        _createSViewBar: function() {
            var me = this,
                sSScrollTop = 0,
                sScrollHight = 0,
                sDivHight = 0,
                startIndex = 0,
                sOptDatas = [],
                rDatas = [],
                vbSpanEL, deValue, isLast = false,
                tempStart = 0,
                listDiv = me.listDiv,
                tempInnerHTML, tempLIs, tempLI, tempMaxWidth = 0,
                paddingWidth = 20,
                tempDeletePaddingWidth = 40,
                tempDeletWidth = 0,
                txtWidth = 0,
                txtEl, scrollLeft = 0,
                scrollTop = 0;
            tempInnerHTML = "<ul><li><span>" + i18n.total + "</span><a href=" + hrefScript + ">0</a></li>" + "<li><span>" + i18n.selected + "</span><a href=" + hrefScript + ">0</a></li></ul>";
            me.viewBarEl = $("<div>").addClass(listViewBarUlClass).html(tempInnerHTML).appendTo(listDiv);
            me.totalAEl = me.viewBarEl.find("a:eq(0)");
            me.totalAEl.bind("click", function() {
                me._onTotalSpanClick();
            });
            me.selectedAEl = me.viewBarEl.find("a:eq(1)");
            me.selectedAEl.bind("click", function() {
                me._onSelectedSpanClick();
            });
            me.sListBodyDiv = $("<div>").addClass(listScrollDivClass);
            me.sListUI = $("<ul>").addClass(listSelectUlClass).bind("click", function(e) {
                if (me.options.disabled) {
                    return;
                }
                tempMaxWidth = 0;
                vbSpanEL = $(e.target); // 点击删除图标
                if (vbSpanEL.hasClass(listCloseClass)) {
                    deValue = vbSpanEL.data("value");
                    e.data = {
                        data: {
                            value: deValue
                        }
                    };
                    if (!me.selectedData[deValue]) {
                        return;
                    }
                    tempMaxWidth = 0;
                    tempDeletWidth = 0;
                    txtWidth = 0;
                    delete me.selectedData[deValue];
                    me.selectedDataLength--; // 选中列
                    $.each(me.listUI.find("li"), function(index, obj) {
                        if ($(obj).data("value") == deValue) {
                            if (me.options.multi) {
                                $(obj).children("a").removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                            } else {
                                $(obj).removeClass(listListAction);
                            }
                        }
                    });
                    if (me.allAEl) {
                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);
                    }
                    me._setSelectedSpanElCount(me.selectedDataLength);
                    if (me.isFirstSLimitCount) {
                        scrollLeft = me.sListBodyDiv[0].scrollLeft;
                        scrollTop = me.sListBodyDiv[0].scrollTop;
                        vbSpanEL.parent("li").remove();
                        tempLIs = $(this).find("li").width("");
                        for (var i = 0; i < tempLIs.length; i++) {
                            tempLI = tempLIs[i];
                            if (tempLI.scrollWidth > tempMaxWidth) {
                                tempMaxWidth = tempLI.scrollWidth;
                            }
                            txtEl = $(tempLI).find("span:eq(0)");
                            if (txtEl.width() > txtWidth) {
                                txtWidth = txtEl.width();
                            }
                        } // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                        if (txtWidth >= tempMaxWidth) {
                            tempDeletWidth = tempDeletePaddingWidth;
                            tempMaxWidth = txtWidth;
                        } else {
                            tempDeletWidth = tempDeletePaddingWidth - Math.abs(tempMaxWidth - txtWidth);
                            if (tempDeletWidth < 0) {
                                tempDeletWidth = 0;
                            }
                            tempMaxWidth = tempMaxWidth - paddingWidth;
                        }
                        tempMaxWidth += tempDeletWidth;
                        $(this).height($(this).height() - me.liHeight);
                        tempLIs.width(tempMaxWidth);
                        me.sListBodyDiv[0].scrollLeft = scrollLeft;
                        me.sListBodyDiv[0].scrollTop = scrollTop; // 触发change事件
                        me._triggerHandler(e, eventChange, me._getSelectedData());
                        return;
                    }
                    sOptDatas = me._getSelectedData();
                    if (sOptDatas.length <= me.limitCount) {
                        rDatas = sOptDatas;
                        sSScrollTop = 0;
                        isLast = false;
                        me.isFirstSLimitCount = true;
                        me._doSScrollLoad(rDatas, sSScrollTop, isLast, true);
                    } else {
                        sDivHight = me.sListBodyDiv[0].clientHeight;
                        sScrollHight = me.sListBodyDiv[0].scrollHeight;
                        sSScrollTop = me.sListBodyDiv[0].scrollTop;
                        startIndex = Math.floor(sSScrollTop / me.liHeight);
                        rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));
                        if (sSScrollTop > 0 && (sSScrollTop + sDivHight) >= sScrollHight) {
                            isLast = true;
                            tempStart = sOptDatas.length - me.sRenderSize;
                            if (tempStart < 0) {
                                tempStart = 0;
                                sSScrollTop = 0;
                            }
                            rDatas = sOptDatas.slice(tempStart);
                        } else {
                            isLast = false;
                            if (sSScrollTop <= 0 || startIndex < 0) {
                                startIndex = 0;
                                sSScrollTop = 0;
                                rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));
                            }
                        }
                        me._doSScrollLoad(rDatas, sSScrollTop, isLast);
                    } // 触发change事件
                    me._triggerHandler(e, eventChange, me._getSelectedData());
                }
            }).appendTo(me.sListBodyDiv);
            me.sListBodyDiv.appendTo(listDiv);
            me.sListBodyDiv.hide();
        },
        /**         * @private         * @description 设置总数         * @param {Number} count 总数         */
        _setTotalElCount: function(count) {
            var me = this;
            if (me.totalAEl) {
                me.totalAEl.text(count);
            }
        },
        /**         * @private         * @param {Number} count 设置选中记录数         */
        _setSelectedSpanElCount: function(count) {
            var me = this;
            if (me.selectedAEl) {
                me.selectedAEl.text(count);
            }
            if (me.sListUI) {
                me.sListUI.height(count * me.liHeight);
            }
        },
        /**         * @private         * @description 点击total的事件处理         */
        _onTotalSpanClick: function() {
            var me = this,
                disabled = me.options.disabled;
            if (disabled) {
                return;
            } //如果显示则不做处理
            if ("block" == me.listBodyDiv.css("display")) {
                return;
            }
            if (me.sListBodyDiv) {
                me.sListBodyDiv.hide();
            }
            if (me.searchField) {
                me.searchField.show();
            }
            if (me.separateEl) {
                me.separateEl.show();
            }
            if (me.allEl) {
                me.allEl.show();
            }
            if (me.listBodyDiv) {
                me.listBodyDiv.show();
            }
            me._doLayout();
        },
        /**         * @private         * @description 点击selected的事件处理         */
        _onSelectedSpanClick: function() {
            var me = this,
                disabled = me.options.disabled,
                sOptDatas, rDatas;
            if (disabled) {
                return;
            } // 如果显示则不做处理
            if ("block" == me.sListBodyDiv.css("display")) {
                return;
            }
            if (me.searchField) {
                me.searchField.hide();
            }
            if (me.separateEl) {
                me.separateEl.hide();
            }
            if (me.allEl) {
                me.allEl.hide();
            }
            if (me.listBodyDiv) {
                me.listBodyDiv.hide();
            }
            if (me.sListBodyDiv) {
                me.sListBodyDiv.show();
            }
            me.sListBodyDiv[0].scrollTop = 0;
            sOptDatas = me._getSelectedData();
            if (sOptDatas.length > me.limitCount) {
                me._doSScrollEvent();
                me.isFirstSLimitCount = false;
                rDatas = sOptDatas.slice(0, (0 + me.sRenderSize));
            } else {
                me.isFirstSLimitCount = true;
                rDatas = sOptDatas;
            }
            me.sListUI.find("li").remove();
            me._doSScrollLoad(rDatas, 0, false, me.isFirstSLimitCount);
        },
        /**         * @private         * @description 滚动加载事件处理         */
        _doSScrollEvent: function() {
            var me = this,
                sSScrollTop = 0,
                sScrollHight = 0,
                sDivHight = 0,
                startIndex = 0,
                sOptDatas = [],
                rDatas = [],
                isLast = false,
                tempStart = 0; // 先清楚绑定的scroll事件
            me.sListBodyDiv.unbind("scroll");
            me.sListBodyDiv.scroll(function(e) {
                if (sSScrollTop == $(this).get(0).scrollTop) {
                    return false;
                }
                isLast = false;
                sDivHight = $(this)[0].clientHeight;
                sScrollHight = $(this)[0].scrollHeight;
                sSScrollTop = $(this)[0].scrollTop;
                startIndex = Math.floor(sSScrollTop / me.liHeight);
                sOptDatas = me._getSelectedData();
                rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));
                if (sSScrollTop > 0 && (sSScrollTop + sDivHight) >= sScrollHight) {
                    isLast = true;
                    tempStart = sOptDatas.length - me.sRenderSize;
                    if (tempStart < 0) {
                        tempStart = 0;
                        sSScrollTop = 0;
                    }
                    rDatas = sOptDatas.slice(tempStart);
                } else {
                    isLast = false;
                    if (sSScrollTop <= 0 || startIndex < 0) {
                        startIndex = 0;
                        sSScrollTop = 0;
                        rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));
                    }
                }
                me._doSScrollLoad(rDatas, sSScrollTop, isLast);
                e.stopImmediatePropagation();
                return false;
            });
        },
        /**         * @private         * @description 生成LI选项         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */
        _doSScrollLoad: function(datas, sScrollTop, isLast, isRenderAll) {
            var me = this,
                liDoms, tempLi, sDivHight, listUI = me.sListUI,
                tempTop = me.tempRenderTop,
                paddingWidth = 20,
                listUIScrollLeft = 0,
                maxWidth = 0; // 如果为一次性渲染
            if (isRenderAll) {
                me.sListBodyDiv.unbind("scroll");
                listUIScrollLeft = me.sListBodyDiv.get(0).scrollLeft;
                listUI.find("li").remove();
                for (var i = 0; i < datas.length; i++) {
                    tempLi = me._addSLiNode(datas[i], (i * me.liHeight));
                    if (tempLi.get(0).scrollWidth > maxWidth) {
                        maxWidth = tempLi.get(0).scrollWidth;
                    }
                } // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                if (me.sListBodyDiv[0].clientWidth >= maxWidth) {
                    maxWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;
                }
                liDoms = listUI.find("li");
                $.each(liDoms, function(index, obj) {
                    $(obj).width(maxWidth).css({
                        top: "",
                        position: "relative"
                    });
                });
                me.sListBodyDiv.get(0).scrollLeft = listUIScrollLeft;
                return;
            } // 先预渲染下,取出本次渲染的最宽LI的宽度
            for (var i = 0; i < datas.length; i++) {
                tempLi = me._addSLiNode(datas[i], tempTop);
                if (tempLi.get(0).scrollWidth > maxWidth) {
                    maxWidth = tempLi.get(0).scrollWidth;
                }
                tempLi.remove();
            } // 如果到底,将滚动条设置到底部
            if (isLast) {
                me.sListBodyDiv[0].scrollTop = listUI.height() - me.sListBodyDiv[0].clientHeight;
            } // 由于本次要渲染的LI可能会出现横向滚动条,固高度重新计算,应减去底部横向滚动条所占的高
            if (sScrollTop > 0) {
                sDivHight = me.sListBodyDiv[0].clientHeight + sScrollTop; // Y坐标
                sScrollTop = sDivHight - datas.length * me.liHeight;
            }
            liDoms = listUI.find("li");
            for (var i = 0; i < datas.length; i++) {
                me._renderSLiNode(datas[i], (sScrollTop + i * me.liHeight), liDoms[i]);
            } // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
            if (me.sListBodyDiv[0].clientWidth >= maxWidth) {
                maxWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;
            }
            liDoms = listUI.find("li");
            $.each(liDoms, function(index, obj) {
                $(obj).width(maxWidth);
            });
        },
        /**         * @private         * @description 渲染列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liDom LI         * @returns {Object} liEl 当前操作的LI         */
        _renderSLiNode: function(nodeCfg, top, liDom) {
            var me = this,
                liEl, spanEls, textSpanEl, optSpanEl, text, qtip, disabled = me.options.disabled;
            if (!liDom) {
                me._addSLiNode(nodeCfg, top, 0);
                return;
            }
            liEl = $(liDom);
            liEl.css("top", top); // 显示文本处理
            text = $.nullToString(nodeCfg.text);
            spanEls = liEl.find("span"); // 取第一个span
            textSpanEl = $(spanEls[0]);
            textSpanEl.text(text); // 是否有tip提示
            if (me.options.tip) {
                qtip = nodeCfg["qtip"];
                if (undefined === qtip || null === qtip) {
                    qtip = nodeCfg.text;
                }
                textSpanEl.attr("title", qtip);
            }
            if (spanEls[1]) {
                optSpanEl = $(spanEls[1]);
                optSpanEl.data("value", nodeCfg.value);
            }
            if (disabled) {
                me.setDisabled(disabled);
            }
            return liEl;
        },
        /**         * @private         * @description 生成列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liWidth LI的宽度         * @returns {Object} liEl 当前操作的LI         */
        _addSLiNode: function(nodeCfg, top, liWidth) {
            var me = this,
                liEl, spanEl, text, qtip, listUI = me.sListUI,
                paddingWidth = 20,
                disabled = me.options.disabled;
            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass).css("top", top);
            if (liWidth && liWidth > 0) { // 如果主区域的宽大于LI最大宽,则设置主区域的宽		
                if (me.sListBodyDiv[0].clientWidth >= liWidth) {
                    liWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;
                }
                liEl.width(liWidth);
            }
            text = $.nullToString(nodeCfg.text);
            spanEl = $("<span>").text(text).appendTo(liEl); // 是否有tip提示
            if (me.options.tip) {
                qtip = nodeCfg["qtip"];
                if (undefined === qtip || null === qtip) {
                    qtip = nodeCfg.text;
                }
                spanEl.attr("title", qtip);
            }
            $("<span>").addClass(listCloseClass).data("value", nodeCfg.value).appendTo(liEl);
            liEl.appendTo(listUI);
            if (disabled) {
                me.setDisabled(disabled);
            }
            return liEl;
        },
        /**         * @private         * @description 获取区域中li最宽的宽度         * @param {Object} listUL list面板         * @return {Number} maxWidth 最大宽度         */
        _getLiMaxWidth: function(listUL) {
            var maxWidth = 0,
                tempWidth = 0,
                liDoms, tEl;
            if (!listUL) {
                return maxWidth;
            }
            liDoms = listUL.find("li"); //计算最大宽度
            for (var k = 0; k < liDoms.length; k++) {
                if ("none" == $(liDoms[k]).css("display")) {
                    continue;
                }
                tEl = $(liDoms[k]).children();
                tempWidth = 0;
                for (var t = 0; t < tEl.length; t++) {
                    if ("none" != $(tEl[t]).css("display")) {
                        tempWidth += $(tEl[t]).externalWidth();
                    }
                }
                if (tempWidth > maxWidth) {
                    maxWidth = tempWidth;
                }
            }
            return maxWidth;
        },
        /**         * @private         * @description 销毁组件         */
        _destroyWidget: function() {
            var me = this;
            if (me.listEl) {
                me.listEl.remove();
            }
            if (me._resizeInfo) {
                if (me._resizeInfo._$moveEl) {
                    me._resizeInfo._$moveEl.remove();
                }
                me._resizeInfo = null;
            }
        },
        /**         * @private         * @description 销毁缩放框         */
        destroyMoveEl: function() {
            var me = this;
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
                me._resizeInfo.isMouseDown = false;
            }
        },
        /**         * @private         * @description 缩放处理:生成相关dom         */
        __doCreateResizeEl: function() {
            var me = this,
                listDiv = me.listDiv,
                resizeXYEl, resizeElXl, resizeElXr, resizeElYt, resizeElYb;
            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble) {
                listDiv.css({
                    "position": "absolute"
                });
                resizeXYEl = $("<div>").addClass(listBodyResizeXYElClass).appendTo(listDiv);
                resizeElYt = $("<div>").addClass(listBodyResizeYtElClass).appendTo(listDiv);
                resizeElXr = $("<div>").addClass(listBodyResizeXrElClass).css({
                    height: "calc(100% - 10px)"
                }).appendTo(listDiv);
                resizeElYb = $("<div>").addClass(listBodyResizeYbElClass).css({
                    width: "calc(100% - 10px)"
                }).appendTo(listDiv);
                resizeElXl = $("<div>").addClass(listBodyResizeXlElClass).appendTo(listDiv);
                me.__registResizeEvent(resizeXYEl, "xy");
                me.__registResizeEvent(resizeElYt, "yt");
                me.__registResizeEvent(resizeElXr, "xr");
                me.__registResizeEvent(resizeElYb, "yb");
                me.__registResizeEvent(resizeElXl, "xl");
            } else if ("x" == me.options.resizAble) {
                listDiv.css({
                    "position": "absolute"
                });
                resizeElXr = $("<div>").addClass(listBodyResizeXrElClass).appendTo(listDiv);
                resizeElXl = $("<div>").addClass(listBodyResizeXlElClass).appendTo(listDiv);
                me.__registResizeEvent(resizeElXr, "xr");
                me.__registResizeEvent(resizeElXl, "xl");
            } else if ("y" == me.options.resizAble) {
                listDiv.css({
                    "position": "absolute"
                });
                resizeElYt = $("<div>").addClass(listBodyResizeYtElClass).appendTo(listDiv);
                resizeElYb = $("<div>").addClass(listBodyResizeYbElClass).appendTo(listDiv);
                me.__registResizeEvent(resizeElYt, "yt");
                me.__registResizeEvent(resizeElYb, "yb");
            }
        },
        /**         * @private         * @description 缩放处理:注册鼠标事件         * @param {Object} rEl el对象         * @param {String} type 类型: x, y, xy         */
        __registResizeEvent: function(rEl, type) {
            var me = this;
            if (!rEl) {
                return;
            }
            rEl.bind("mousedown", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMousedown);
            rEl.bind("mousemove", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMousemove);
            rEl.bind("mouseup", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMouseup);
            rEl.bind("mouseover", {
                "me": me,
                "rEl": rEl,
                "type": type
            }, me._doResizeElMouseover);
        },
        /**         * @private         * @description 缩放处理:鼠标点下去事件         * @param {Object} e 事件对象         */
        _doResizeElMousedown: function(e) {
            var me = e.data.me,
                self = $(e.target),
                obj = self.get(0),
                type = e.data.type,
                winOffer, _tw1 = 1,
                _tw2 = 2,
                _tOffer = 0,
                _right, _bottom, _left, _top, _width, _height, _css, _zIndex;
            me._resizeInfo.isMouseDown = true; //记录点下时的X坐标值
            me._resizeInfo.leftWidth = e.pageX;
            me._resizeInfo.topHeight = e.pageY;
            if (obj.setCapture) {
                obj.setCapture();
            } else if (window.captureEvents) {
                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
            } //防止在滑动时,选择中其它内容
            me.listDiv.find("*").css({
                "-moz-user-select": "none",
                "-webkit-user-select": "none",
                "-ms-user-select": "none",
                "-khtml-user-select": "none",
                "user-select": "none"
            });
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
            }
            if (!me.options.isBorder) {
                _tOffer = 1;
            }
            winOffer = me.listDiv.offset();
            _width = me.listDiv.width();
            _height = me.listDiv.height();
            _zIndex = $.getMaxZIndex(me.listDiv.css("z-index")); //虚线框
            if ("xl" == type) {
                _right = me.listDiv.css("right");
                if (me.renderEl && "absolute" == me.renderEl.css("position")) {
                    _right = me.renderEl.css("right");
                }
                _right = parseInt(_right) - _tOffer;
                _top = winOffer.top - _tOffer;
                _css = {
                    "width": _width,
                    "height": _height,
                    "right": _right,
                    "top": _top,
                    "z-index": _zIndex
                };
            } else if ("yt" == type) {
                _top = winOffer.top;
                _bottom = $("body").height() - _top - _height;
                if (!me.options.isBorder) {
                    _bottom -= _tw1;
                } else {
                    _bottom -= _tw2;
                }
                _left = winOffer.left - _tOffer;
                _css = {
                    "width": _width,
                    "height": _height,
                    "left": _left,
                    "bottom": _bottom,
                    "z-index": _zIndex
                };
            } else {
                _left = winOffer.left - _tOffer;
                _top = winOffer.top - _tOffer;
                _css = {
                    "width": _width,
                    "height": _height,
                    "left": _left,
                    "top": _top,
                    "z-index": _zIndex
                };
            }
            me._resizeInfo._$moveEl = $("<div>").addClass(listBodyResizeElClass).css(_css).appendTo("body");
            return false;
        },
        /**         * @private         * @description 缩放处理:鼠标滑动事件         * @param {Object} e 事件对象         */
        _doResizeElMousemove: function(e) {
            var me = e.data.me,
                self = $(e.target),
                type = e.data.type,
                bW = 0,
                initLeft = 0,
                initTop, tempOffset, tempWidth, tempHeight, pgX, pgY, tw, th, _twh5 = 5,
                flag;
            if (me._resizeInfo.isMouseDown) {
                tempOffset = me.listDiv.offset(); //用于外部适配宽高限制
                flag = me._triggerHandler({
                    offset: tempOffset,
                    resizeInfo: me._resizeInfo,
                    resizeType: type,
                    event: e
                }, eventResizeElMove, me);
                if (false == flag || "false" == flag) {
                    return;
                }
                initLeft = tempOffset.left;
                initTop = tempOffset.top;
                pgX = e.pageX;
                pgY = e.pageY;
                tw = $(document).innerWidth() - _twh5;
                th = $(document).innerHeight() - _twh5;
                if (pgX > tw) {
                    pgX = tw;
                }
                if (pgY > th) {
                    pgY = th;
                }
                if (pgY <= _twh5) {
                    pgY = _twh5;
                }
                if (pgX <= _twh5) {
                    pgX = _twh5;
                }
                if (me.options.isBorder) {
                    bW = 2;
                } //刷新宽度
                if ("xy" == type || "xr" == type || "xl" == type) { //计算宽度
                    if ("xl" == type) {
                        tempWidth = me._resizeInfo.width + initLeft - pgX;
                    } else {
                        tempWidth = pgX - initLeft;
                    } //如果小于最小宽度值,则设置成最小宽度值
                    if (tempWidth < me._resizeInfo.initWidth) {
                        me._resizeInfo._$moveEl.width(me._resizeInfo.initWidth - bW);
                    } else {
                        me._resizeInfo._$moveEl.width(tempWidth);
                    }
                } //刷新高度
                if ("xy" == type || "yt" == type || "yb" == type) { //计算宽度
                    if ("yt" == type) {
                        tempHeight = me._resizeInfo.height + initTop - pgY;
                    } else {
                        tempHeight = pgY - initTop;
                    } //如果小于最小高度值,则设置成最小高度值
                    if (tempHeight < me._resizeInfo.initHeight) {
                        me._resizeInfo._$moveEl.height(me._resizeInfo.initHeight - bW);
                    } else {
                        me._resizeInfo._$moveEl.height(tempHeight);
                    }
                }
            }
            return false;
        },
        /**         * @private         * @description 缩放处理:鼠标移上去事件         * @param {Object} e 事件对象         */
        _doResizeElMouseup: function(e) {
            var me = e.data.me,
                self = $(e.target),
                obj = self.get(0),
                searchMarginBottom = 5,
                _th1 = 1,
                _th2 = 2,
                _tWidth = -1,
                _tHeight = -1,
                _h, _w, _cW, _cH;
            me._resizeInfo.isMouseDown = false;
            if (obj.releaseCapture) {
                obj.releaseCapture();
            } else if (window.captureEvents) {
                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
            }
            if (me._resizeInfo && me._resizeInfo._$moveEl) {
                _tWidth = me._resizeInfo._$moveEl.width();
                _tHeight = me._resizeInfo._$moveEl.height();
                me._resizeInfo._$moveEl.remove();
                me._resizeInfo._$moveEl = null;
            } //还原防止在滑动时,选择中其它内容
            me.listDiv.find("*").css({
                "-moz-user-select": "",
                "-webkit-user-select": "",
                "-ms-user-select": "",
                "-khtml-user-select": "",
                "user-select": ""
            });
            if (_tWidth < 0 || _tHeight < 0) {
                return;
            }
            if (_tWidth < me._resizeInfo.initWidth) {
                _tWidth = me._resizeInfo.initWidth;
            }
            if (_tHeight < me._resizeInfo.initHeight) {
                _tHeight = me._resizeInfo.initHeight;
            }
            _cW = me._resizeInfo.width - _tWidth;
            _cH = me._resizeInfo.height - _tHeight;
            if (_cW >= -1 && _cW <= 1 && _cH >= -1 && _cH <= 1) {
                return;
            }
            me._resizeInfo.width = _tWidth;
            me._resizeInfo.height = _tHeight;
            _w = me._resizeInfo.width + _th2;
            _h = me._resizeInfo.height - searchMarginBottom;
            _h += _th1;
            if (!me.options.isBorder) {
                _h -= _th2;
                _w -= _th2;
            }
            if (me.options.search) {
                _h += me.searchFiedlDiv.outerHeight(true) + searchMarginBottom;
            }
            if (me.options.sViewBar) {
                _h += _th1;
                if (me.options.all && me.options.multi) {
                    _h -= _th2;
                }
            }
            me._resizeLayout = true;
            me.resizeLayout(_w, _h);
            me.listDiv.unbind("resize");
            return false;
        },
        /**         * @private         * @description 缩放处理:鼠标移上去事件         * @param {Object} e 事件对象         */
        _doResizeElMouseover: function(e) {
            var me = e.data.me,
                self = $(e.target);
        }
    });
    /**     * 创建列表     * @name Sweet.list.OptimizeList     * @class      * @extends Sweet.list     * @requires      * <pre>     *  jquery.ui.core.js     *  jquery.ui.widget.js     *  jquery.sweet.widget.js     *  jquery.sweet.widget.list.js     * </pre>     * @example      * <pre>     *  var data = [{"value":"1", "text":"ONE"},     *                {"value":"2", "text":"TWO"},     *                {"value":"3", "text":"THREE"},     *                {"value":"4", "text":"FOUR"}];     *  sweetList = new Sweet.list.OptimizeList({     *               width : 100,     *               height : 150,     *               multi : true,     *               data : data,     *               renderTo :"sweet-list"     *           })     * sweetList.render("sweet-list");     * </pre>     */
    Sweet.list.OptimizeList = $.sweet.widgetListList;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * win组件
 * 2013/3/7
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    'use strict';

    var titleClass = "sweet-dialog-title",
        titleCloseClass = "sweet-dialog-title-close",
        contentClass = "sweet-dialog-content",
        contentHeadlessClass = "sweet-dialog-content-headless",
        bottomClass = "sweet-dialog-bottom",
        buttonClass = "sweet-form-button",
        visibleClass = "sweet-window-visible-",
        invisibleClass = "sweet-window-invisible-";

    // 容器显示隐藏动画的时长
    var toggleDuration = {
        normal: 0,
        rotateY: 700
    };

    $.widget("sweet.widgetWindow", $.sweet.widget, /** @lends Sweet.Window.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-win]",
        defaultElement: "<div>",
        defaultWindowBg: "sweet-dialog-bg",
        // window组件公共配置参数
        options: /** @lends Sweet.Window.prototype*/
        {
            /**
             * window宽度
             * @type String/Number
             * @default 330px
             */
            width: 330,
            /**
             * win高度
             * @type String/Number
             * @default 137px
             */
            height: 137,
            /**
             * 是否模态窗口
             * @type Boolean
             * @default true
             */
            modal: true,
            /**
             * 自定义底部按钮，如果不指定，缺省显示ok/cancel;如果不需要底部按钮，buttons : []
             * @type Array
             * @default null
             */
            buttons: null,
            /**
             * 窗口显示内容对象
             * @type Object
             * @default null
             */
            content: null,
            /**
             * 窗口显示、隐藏方式。当前支持：normal/rotateY
             * @type String
             * @default "normal"
             */
            toggleMethod: "normal",
            /**
             * 缺省按钮点击事件的回调函数。可以指定ok/cancel监听缺省按钮和关闭按钮的点击事件
             * @type Array
             * @default []
             */
            listeners: [],
            /**
             * 是否显示标题栏
             * @type Boolean
             * @default true
             */
            header: true,
            /**
             * 窗口内补丁，顺序是上、右、下、左
             * @type Array
             * @default null, 由CSS指定，SweetUI2.0的缺省值是[20, 10, 20, 10]
             */
            padding: null,
            /**
             * 指定遮罩住的元素id(默认遮罩住整个body，这里可以用户自己指定，以便保留出现在body上的滚动条)
             * @type String
             * @default ""
             */
            maskId: ""
        },
        /**
         * @description 设置弹出窗口标题
         * @param {String} title 标题
         */
        setTitle: function(title) {
            if ($.isString(title)) {
                var me = this;
                me.titleTextEl.text(title);
            }
        },
        /**
         * @description 显示win
         */
        show: function(x, y) {
            var self = this,
                zIndex = 0;
            var maskConfig;
            var toggleMethod = this.options.toggleMethod;
            var duration = toggleDuration[toggleMethod] || 0;

            // 是否模态对话框
            if (self.options.modal) {
                // 如果显示方式为动画方式，需要遮罩以淡入淡出的效果显示和隐藏，以配合窗口的旋转效果
                maskConfig = {
                    maskAll: true,
                    duration: duration
                };

                // 显示遮罩
                if (self.options.maskId && $("#" + self.options.maskId)) {
                    maskConfig.maskAll = false;
                    $("#" + self.options.maskId).sweetMask(maskConfig);
                } else {
                    self.winEl.sweetMask(maskConfig);
                }
            }

            // 保证窗口在最上显示
            zIndex = $.getMaxZIndex();
            self.winEl.css("z-index", zIndex);

            // 切换为“可见”样式
            self.winEl.addClass(visibleClass + toggleMethod);
            self._doLayout(x, y);

            self.visible = true;

            // 允许按ESC关闭
            $(window).unbind("keydown", self._onKeyDown).bind("keydown", {
                me: self
            }, self._onKeyDown);
        },
        /**
         * @description 隐藏win
         */
        hide: function() {
            this._closeWindow();
        },
        /**
         * @description 关闭窗口
         */
        close: function(event) {
            var self = this;
            if (event) {
                self = event.data.me || self;
            }

            self._closeWindow();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            if (this.winEl) {
                this.winEl.externalWidth(width);
            }
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            if (this.winEl) {
                this.winEl.externalHeight(height);
            }
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * @description 返回组件宽度
         * @return {Number} 返回组件宽度
         */
        _getWidth: function() {
            if (this.winEl) {
                return this.winEl.externalWidth();
            }
        },
        /**
         * @description 返回组件高度
         * @return {Number} 返回组件高度
         */
        _getHeight: function() {
            if (this.winEl) {
                return this.winEl.externalHeight();
            }
        },
        /**
         * @private
         * @description 重新绘制window窗口
         */
        _doLayout: function(x, y) {
            var me = this,
                options = me.options,
                width = options.width,
                height = options.height,
                doc = $("body"),
                docWidth,
                docHeight,
                top,
                left;

            // 窗口隐藏状态不调用doLayout
            if (!me.winEl.hasClass(visibleClass + options.toggleMethod)) {
                return;
            }

            // 组件初始化调用时document还未完成，捕获异常，不做处理
            try {
                docWidth = doc.width();
                docHeight = doc.height();
            } catch (e) {
                return;
            }

            // 居中显示
            if (typeof x === 'undefined' || typeof y === 'undefined') {
                top = Math.floor((docHeight - height) / 3) + doc.scrollTop();
                left = Math.floor((docWidth - width) / 2) + doc.scrollLeft();
            } else {
                top = y;
                left = x;
            }

            me.winEl.css({
                "top": top < 0 ? 0 : top,
                "left": left
            }).width(width).height(height);

            // 调整content区域（宽度为Auto，不处理）
            height = me.winEl.height() - me.titleEl.externalHeight();
            if (options.buttons === null || options.buttons.length > 0) {
                var bottomOffset = parseInt(me.bottomEl.css("bottom"), 10);
                if (isNaN(bottomOffset)) {
                    bottomOffset = 0;
                }
                height = height - me.bottomEl.externalHeight() - bottomOffset;
            }
            me.contentEl.externalHeight(height);

            // 刷新内部子组件
            if (options.content) {
                try {
                    options.content.doLayout();
                } catch (e) {}
            }
        },
        /**
         * 渲染窗口到页面
         * @private
         */
        _render: function() {
            var me = this;
            var options = me.options;
            var bottomEl = me.bottomEl;
            var buttonCss = {
                "width": "65px",
                "margin-left": "5px"
            };
            var id = options.id + "-content-div";

            // 插入DOM
            me.winEl.appendTo("body");

            // 创建内容
            if (options.content !== null) {
                if (!$.isNull(options.content.html)) {
                    // 创建html内容
                    me.contentEl.html(options.content.html);
                } else {
                    // 渲染子组件
                    options.content.render(id);
                }
            }

            // 创建按钮
            // 缺省按钮
            if ($.isNull(options.buttons)) {
                var id = options.vID ? options.vID : options.id;
                var okButtonEl = me.okButtonEl = $("<button>").attr("id", id + "_ok")
                    .addClass(buttonClass);
                var cancelButtonEl = me.cancelButtonEl = $("<button>").attr("id", id + "_cancel")
                    .addClass(buttonClass);

                okButtonEl.css(buttonCss).text(Sweet.core.i18n.dialog.ok).appendTo(bottomEl);
                cancelButtonEl.css(buttonCss).text(Sweet.core.i18n.dialog.cancel).appendTo(bottomEl);

                me.okButtonEl.unbind().bind("click", {
                    "me": me
                }, me._onOK);
                me.cancelButtonEl.unbind().bind("click", {
                    "me": me
                }, me._onCancel);
            } else {
                // 自定义按钮
                for (var i in options.buttons) {
                    var btn = options.buttons[i];
                    //添加判空
                    if (btn && $.isFunction(btn.render)) {
                        var btnId = options.id + "-btn-" + i;
                        $("<div></div>").attr("id", btnId)
                            .css("float", "left")
                            .css("margin-left", "5px")
                            .appendTo(bottomEl);
                        btn.render(btnId);
                    }
                }
            }

            // 增加拖动功能
            if (me.options.header === true) {
                me.winEl.draggable({
                    handle: "#" + me.titleId,
                    containment: "document",
                    scroll: false,
                    start: function() {
                        // 开始拖动时，向Body发送click事件，以关闭容器内的浮动层
                        $("body").trigger("click");
                    }
                });
            }

            // 缺省隐藏窗口
            me.winEl.css({
                "top": -2000,
                "z-index": -1
            });
        },
        /**
         * 按下ESC键，调用关闭处理
         * @param e
         * @private
         */
        _onKeyDown: function(e) {
            var me = e.data.me;
            var key = e.which;
            var visible = me.isVisible();
            // 27是ESC键的编码
            if (key === 27 && visible) {
                me._onCancel(e);
            }
        },
        /**
         * @private
         * @description 确定事件
         * @param {Object} e
         */
        _onOK: function(e) {
            var me = e.data.me,
                okFun = me.options.listeners.ok || $.noop,
                result;
            result = okFun.call(null, e);
            if (false === result) {
                return;
            }
            me.close(e);
        },
        /**
         * @private
         * @description 取消事件
         * @param {Object} e
         */
        _onCancel: function(e) {
            var me = e.data.me,
                cancelFun = me.options.listeners.cancel || $.noop,
                result;
            result = cancelFun.call(null, e);
            if (false === result) {
                return;
            }
            me.close(e);
        },
        /**
         * @private
         * @description 关闭win
         */
        _closeWindow: function() {
            var me = this;
            var modal = this.options.modal;
            var toggleMethod = this.options.toggleMethod;
            var duration = toggleDuration[toggleMethod] || 0;

            // 切换样式，使窗口不可见
            this.winEl.removeClass(visibleClass + toggleMethod);
            //隐藏需要设置visible
            this.visible = false;
            // 延迟1秒，调整窗口的top/z-index，防止覆盖其它内容
            setTimeout(function() {
                me.winEl.css({
                    "top": -2000,
                    "z-index": -1
                });
            }, duration);

            //关闭window上面的浮动框
            if (Sweet._closeFloatPanel) {
                setTimeout(Sweet._closeFloatPanel, 20);
            }
            // 关闭遮罩
            if (modal) {
                if (me.options.maskId && $("#" + me.options.maskId)) {
                    $("#" + me.options.maskId).unSweetMask();
                } else {
                    me.winEl.unSweetMask();
                }
            }
        },
        /**
         * @private
         * @description 绘制对话框组件
         */
        _createSweetWidget: function() {
            var me = this,
                options = me.options,
                winEl = me.winEl = $("<div>");

            winEl.addClass(me.defaultWindowBg + " " + options.widgetClass)
                .height(options.height)
                .width(options.width)
                .attr("id", me.options.id);

            winEl.addClass(invisibleClass + this.options.toggleMethod);

            // 添加标题
            me._createTitle();

            // 添加提示内容
            me._createContent();

            // 添加按钮
            me._createButtons();
        },
        /**
         * @private
         * @description 创建win标题
         */
        _createTitle: function() {
            var me = this,
                options = me.options,
                titleEl = me.titleEl = $("<div>"),
                closeSpan = me.closeSapn = $("<span>").addClass(titleCloseClass),
                titleTextEl = me.titleTextEl = $("<em>"),
                titleId = me.titleId = options.id + "-win-title";

            closeSpan.unbind().bind("click", {
                "me": me
            }, me._onCancel).appendTo(titleEl);

            titleTextEl.text(options.title).appendTo(titleEl);
            titleEl.attr("id", titleId)
                .addClass(titleClass)
                .appendTo(this.winEl);

            if (this.options.header !== true) {
                titleEl.height(0).hide();
            }
        },
        /**
         * @private
         * @description 添加win主体内容
         */
        _createContent: function() {
            var me = this,
                options = me.options,
                contentEl = me.contentEl = $("<div>");

            var id = options.id + "-content-div";
            contentEl.attr("id", id).addClass(contentClass).appendTo(me.winEl);
            if ($.isArray(options.padding)) {
                var attrs = ["padding-top", "padding-right", "padding-bottom", "padding-left"];
                for (var i = 0; i < options.padding.length && i < attrs.length; i++) {
                    contentEl.css(attrs[i], options.padding[i] === 0 ? "0" : options.padding[i] + "px");
                }
            }

            if (me.options.header !== true) {
                contentEl.addClass(contentHeadlessClass);
            }
        },
        /**
         * @private
         * @description 给win添加按钮
         */
        _createButtons: function() {
            var me = this;
            me.bottomEl = $("<div>").addClass(bottomClass).appendTo(me.winEl);
        },
        /**
         * 销毁组件
         * @private
         */
        _destroyWidget: function() {
            // 关闭遮罩
            if (this.options.modal) {
                if (this.options.maskId && $("#" + this.options.maskId)) {
                    $("#" + this.options.maskId).unSweetMask();
                } else {
                    this.winEl.unSweetMask();
                }
            }
            // 解除事件绑定
            this.closeSapn.unbind();
            if ($.isNull(this.options.buttons)) {
                this.okButtonEl.unbind();
                this.cancelButtonEl.unbind();
            } else {
                $.each(this.options.buttons, function(index, button) {
                    if ($.isFunction(button.destroy)) {
                        button.destroy();
                    }
                });
            }

            $(window).unbind("keydown", this._onKeyDown);

            // 删除子组件
            if (this.options.content) {
                if ($.isFunction(this.options.content.destroy)) {
                    this.options.content.destroy();
                }
            }

            // 销毁Dom元素
            this.winEl.remove();
        }
    });

    /**
     * @description window对象
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.widget
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建提示对话框：
     * var sweetWnd = new Sweet.Window({
     *     width: 500,
     *     height: 300,
     *     modal: false,
     *     listeners: {
     *         "ok": function() {
     *             alert("prompt OK");
     *             sweetWnd.close();
     *         }
     *     }
     * });
     */
    Sweet.Window = $.sweet.widgetWindow;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * listBox组件
 * 2013/04/03
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var listBoxDiv2Cls = "sweet-listbox-div2",
        listBoxLiCls = "sweet-listbox-li",
        listBoxClearPicCls = "sweet-listbox-clearPic",
        defaultEmptyDivClass = "sweet-listbox-emptyDiv",
        increments = 0;

    $.widget("sweet.widgetListBox", $.sweet.widget, /** @lends Sweet.ListBox.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widgetListBox]",
        defaultElement: "<input>",
        widgetClass: "sweet.widgetListBox", // 表明是listBox类组件
        // listBox组件公共配置参数
        options: /** @lends Sweet.ListBox.prototype*/
        {
            /**
             * @description 组件宽度
             * @type {String/Number}
             * @default 25px
             */
            width: 650,
            /**
             * @description 组件高度
             * @type {String/Number}
             * @default 25px
             */
            height: 100,
            /**
             * @description 是否支持去不删除
             * @type {Boolean}
             * @default true
             */
            clearAll: true,
            /**
             * @description 为空显示的文字
             * @type {String}
             * @default ""
             */
            emptyText: "",
            /**
             * @description 子组件
             * @type {Array}
             * @default ""
             */
            items: [],
            /**
             * @description 是否有label
             * @type Boolean
             * @default false
             */
            label: false,
            /**
             * @description label文字
             * @type {String}
             * @default null
             */
            labelText: null,
            /**
             * @description label宽度
             * @type {String/Number}
             * @default 0.3
             */
            labelWidth: 0.3,
            /**
             * @description 是否显示tip提示
             * @type {Boolean}
             * @default false
             */
            tip: false,
            /**
             * box内的组件是否可以拖动
             * @type boolean
             * @default true
             */
            draggable: true,
            /**
             * @description 关闭的回调函数，使用时自己定义
             * @type Function
             * @default false
             */
            closeItem: function() {
                return false;
            }
        },
        /**
         * @description 添加指标或维度
         * @param {Object} value 数据
         */
        addItems: function(value) {
            var me = this;
            if ("object" !== typeof value) {
                return;
            }
            if (!value.length) {
                me._addOneItem(value);
            } else {
                for (var i = 0; i < value.length; i++) {
                    me._addOneItem(value[i]);
                }
            }
            me._setEmptyText();
        },
        /**
         * @description 删除所有的lableItem
         * @param {String} itemID labelItemID
         */
        removeItems: function(itemID) {
            var me = this;
            if (itemID) {
                if (me.btnObj[itemID]) {
                    me.btnObj[itemID].renderEl.remove();
                    delete me.btnObj[itemID];
                }
            } else {
                for (var id in me.btnObj) {
                    me.btnObj[id].renderEl.remove();
                    delete me.btnObj[id];
                }
                me.btnObj = {};
            }
            if ($.isEmptyObject(me.btnObj)) {
                me._setEmptyText();
            }
        },
        /**
         * @description 返回widget对象
         */
        widget: function() {
            return this.boxElement;
        },
        /**
         * @description 获取ofrm组件对象，返回jquery对象
         */
        getContainerObj: function() {
            return this.boxElement;
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;

            if ($.type(width) === "string") {
                this.listBoxEl.onResize(function() {
                    me.doLayout();
                });
            }

            me.listBoxEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;

            if ($.type(height) === "string") {
                this.listBoxEl.onResize(function() {
                    me.doLayout();
                });
            }

            me.listBoxEl.externalHeight(height);
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.listBoxEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.listBoxEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        },
        /**
         * @private
         * @description 获取组件值
         * @param {Object} value 组件值，格式为{value: 值, text: 文本}
         */
        _setValue: function(value) {
            if ($.isNull(value)) {
                return;
            }
            this.boxElement.val(value.value);
        },
        /**
         * @private
         * @description 设置组件值
         * @return 返回值，格式为{value: 值, text: 文本}
         */
        _getValue: function() {
            var me = this;
            var val = [];
            for (var id in me.btnObj) {
                val.push(me.btnObj[id].getValue());
            }
            return val;
        },
        /**
         * @description 刷新布局，子类继承实现，并调用super
         * @private
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                listBoxElWidth = me.listBoxEl.width(),
                listBoxElHieght = me.listBoxEl.height(),
                labelWidth = me.labelWidth = me._doLabelLayout(listBoxElWidth),
                listBoxDiv1ElWidth = listBoxElWidth,
                listBoxClearPicWidth = 0;
            me.listBoxDiv1El.css({
                "padding-left": labelWidth,
                "position": "relative"
            })
                .externalWidth(listBoxDiv1ElWidth)
                .externalHeight(listBoxElHieght);
            if (me.options.clearAll) {
                listBoxClearPicWidth = me.clearAllBtn.externalWidth();
            }
            me.listBoxDiv2El.externalWidth(me.listBoxDiv1El.width() - listBoxClearPicWidth)
                .externalHeight(me.listBoxDiv1El.height());
            me.boxElement.css("overflow", "auto").externalWidth("100%")
                .externalHeight("100%");
        },
        /**
         * @private
         * @description 创建listBox组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                listBoxEl = me.listBoxEl = $("<div>"),
                options = me.options;

            listBoxEl.width(options.width)
                .height(options.height)
                .attr("id", options.id);

            me._beforeCreateBoxWidget();
            me._createListBoxWidget();
            me._afterCreateBoxWidget();
        },
        /**
         * @private
         * @description 支持box内组件的拖动
         * @param {bool} draggable 是否支持拖动，默认支持
         * @param {object}liId：被拖动li对象
         * @param {object}labelItemObj 被拖动的item对象
         */
        _createDraggable: function(draggable, liId, labelItemObj) {
            var me = this;
            var itemNode = liId;
            //支持box内组件的拖动
            if (draggable) {
                itemNode.parent().sortable({
                    start: function(event, ui) {
                        if (!me.options.tip) {
                            return;
                        }
                        for (var key in labelItemObj) {
                            labelItemObj[key].setTip(false);
                        }
                    },
                    stop: function(event, ui) {
                        if (!me.options.tip) {
                            return;
                        }
                        for (var key in labelItemObj) {
                            labelItemObj[key].setTip(true);
                        }
                        var liObjs = me.boxElement.children("li").children("div"),
                            tempBtnObj = {},
                            id;
                        for (var i = 0; i < liObjs.length; i++) {
                            id = liObjs[i].id;
                            tempBtnObj[id] = me.btnObj[id];
                        }
                        me.btnObj = tempBtnObj;
                    }
                });
                itemNode.parent().disableSelection();
            }
        },
        /**
         * @private
         * @description 创建listBox组件
         */
        _createListBoxWidget: function() {
            var me = this,
                options = me.options;
            // 创建label标签
            me._createLabel();
            // 创建listBox组件
            me._createBoxField();
        },
        /**
         * @private
         * @description 创建基本文本框前label标签
         */
        _createLabel: function() {
            if (!this.options.label) {
                return;
            }
            var me = this,
                options = me.options,
                labelClass = "sweet-form-label",
                label = me.label = $("<label>").addClass(labelClass),
                labelText = '';
            if (!$.isNull(options.labelText)) {
                labelText += options.labelText + Sweet.constants.symbol.COLON;
            } else {
                return;
            }
            label.html($.nullToString(labelText)).appendTo(me.listBoxEl);
        },
        /**
         * @private
         * @description 创建listBox组件
         */
        _createBoxField: function() {
            var me = this,
                options = me.options,
                // 外层div
                listBoxDiv1El = me.listBoxDiv1El = $("<div>").appendTo(me.listBoxEl),
                // 里层div
                listBoxDiv2El = me.listBoxDiv2El = $("<div>").addClass(listBoxDiv2Cls),
                // box div
                boxElement = me.boxElement = $("<ul>").appendTo(listBoxDiv2El);
            // clear button
            if (me.options.clearAll) {
                me.clearAllBtn = $("<a>").attr("title", Sweet.core.i18n.listbox.clearAll)
                    .addClass(listBoxClearPicCls)
                    .appendTo(listBoxDiv1El);
            }
            listBoxDiv2El.appendTo(listBoxDiv1El);
            me.emptyDiv = $("<div>").html(me.options.emptyText).addClass(defaultEmptyDivClass)
                .appendTo(me.listBoxDiv2El);
        },
        /**
         * @private
         * @description 计算label宽度
         * @param {Number} width 外层容器宽度
         */
        _addOneItem: function(val) {
            if (!val.data) {
                return;
            }

            var me = this,
                liId = "listBox-li-" + increments,
                labelItemId = "listBox-labelItem-" + increments++,
                liObj = $("<li>").attr("id", liId)
                    .addClass(listBoxLiCls)
                    .appendTo(me.boxElement),
                itemClosable = val.data.closable === false ? false : true;

            var labelItem = me.labelItem = new Sweet.form.LabelItem({
                id: labelItemId,
                value: val,
                imageType: val.data.type,
                closable: itemClosable,
                width: 150,
                tip: me.options.tip,
                renderTo: liId,
                close: function(e, data) {
                    labelItem.renderEl.remove();
                    delete me.btnObj[labelItemId];
                    // delete应该在回调之前，这样保证业务人员在回调中使用getValue时，得到删除后的值
                    // 单号：DTS2013090202615
                    me.options.closeItem.call(this, data);
                    me._setEmptyText();
                }
            });
            labelItem.options.value = val;
            me.btnObj[labelItemId] = labelItem;

            //支持组件内拖动
            me._createDraggable(me.options.draggable, liObj, me.btnObj);
        },
        /**
         * @private
         * @description 计算label宽度
         * @param {Number} width 外层容器宽度
         */
        _doLabelLayout: function(width) {
            var me = this,
                options = me.options,
                labelWidth;
            if (me.label) {
                // 按百分比设定
                if (1 > options.labelWidth) {
                    labelWidth = Math.floor(width * options.labelWidth);
                } else {
                    labelWidth = options.labelWidth;
                }
                me.label.width(labelWidth).height(options.height);
            } else {
                labelWidth = 0;
            }

            return labelWidth;
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.listBoxEl.appendTo(me.renderEl);
            // 初始化
            if (me.options.items) {
                me.addItems(me.options.items);
            }
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 销毁listBox组件
         */
        _destroyWidget: function() {
            if (this.renderEl) {
                this.renderEl.remove();
            }
        },
        /**
         * @private
         * @description 创建listBox组件前操作，子类继承实现
         */
        _beforeCreateBoxWidget: function() {
            var me = this;
            me.btnObj = {};
        },
        /**
         * @private
         * @description 创建listBox组件后操作，子类继承实现
         */
        _afterCreateBoxWidget: function() {
            var me = this;
            // 全部删除
            if (!me.options.clearAll) {
                return;
            }
            // 清除按钮点击事件
            me.clearAllBtn.bind("click", function() {
                var value = me.getValue();
                me.removeItems();
                me.options.closeItem.call(this, value, true);
            });
        },
        /**
         * @private
         * @description 创建listBox组件后操作，子类继承实现
         */
        _setEmptyText: function() {
            var me = this;
            if (me.boxElement.html()) {
                me.emptyDiv.hide();
            } else {
                me.emptyDiv.show();
            }
        }
    });

    /**
     * 创建listBox组件基类
     * @name Sweet.ListBox
     * @class 
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     * var value = [{value: "dim", text: "维度", data: {type: "dim"}}, 
     *              {value: "index", text: "指标", data: {type: "index"}}];
     *  sweetListBox = new Sweet.ListBox({
     *      width : "60%",
     *      height: 100,
     *      clearAll: true,//默认就为true
     *      items: value,
     *      emptyText : "请拖动一个组件过来...",
     *      label : true,
     *      labelText : '维度/指标',
     *      labelWidth: 70,
     *      tip: true,
     *      renderTo: "sweet-listbox"
     * });
     * </pre>
     */
    Sweet.ListBox = $.sweet.widgetListBox;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * DashboardWidget组件-portal
 * 2013/2/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 * @history zhanglie@2013/4/20 重构适应Sweet风格
 */

(function($, undefined) {
    "use strict";

    var containerClass = "sweet-widgetpanel-container", //外部盒子div样式
        titleClass = "sweet-widgetpanel-title", //标题div样式
        toolsClass = "sweet-widgetpanel-tools", // 工具组
        contentClass = "sweet-widgetpanel-content", // 内容区域
        titleTextClass = "sweet-widgetpanel-header", // 标题文本
        stateClass = "sweet-widgetpanel-state",
        alwaysShowToolClass = "sweet-widgetpanel-tools-always-show",
        arrowClass = "sweet-widgetpanel-arrow",
        widgetPanelUlParentClass = "sweet-widgetpanel-ulParent",
        widgetPanelSelectWinRadio = "sweet-widgetpanel-selectWinRadio",
        increments = 0;

    var toolItemWidth = 21; // 每个工具按钮占用的宽度

    $.widget("sweet.widgetpanel", $.sweet.widget, /** @lends Sweet.WidgetPanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-widgetpanel]",
        eventNames: /** @lends Sweet.WidgetPanel.prototype*/
        {
            /**
             * @event
             * @description 工具按钮点击事件
             */
            tool: "工具按钮点击事件",
            /**
             * @event
             * @description 切换标题事件
             */
            switchTitle: "切换标题事件"
        },
        type: "WidgetPanel",
        //panel 类输入组件公共配置参数
        options: /** @lends Sweet.WidgetPanel.prototype*/
        {
            /**
             * 组件宽度
             * @type Number/String
             * @default '100%'
             */
            width: '100%',
            /**
             * 组件高度
             * @type Number/String
             * @default '100%'
             */
            height: '100%',
            /**
             * 组件标题
             * @type String/Array
             * @default ''
             */
            panelTitle: '',
            /**
             * 工具栏图标，现在只支持setting、close
             * @type Array
             * @default ['zoom','refresh', 'setting', 'close']
             */
            tools: ['zoom', 'refresh', 'setting', 'close'],
            /**
             * 工具栏图标是否自动隐藏，鼠标移上去后再显示出来
             * @type Boolean
             * @default true
             */
            autoHideTools: true,
            /**
             * 标题是否可切换
             * @type Boolean
             * @default false
             */
            switchable: false,
            /**
             * 子组件
             * @type Array
             * @default null
             */
            items: null
        },
        /**
         * @description 更新工具按钮
         * @param {Array} tools 工具名称数组
         * @param {Boolean} autoHide 是否自动隐藏
         */
        updateTools: function(tools, autoHide) {
            var me = this;
            var tool, toolEl;
            var tools2Show = [],
                tools2Hide = [];

            if (!me.toolsEl) {
                return;
            }

            if (tools !== null) {
                // 根据新列表刷新按钮显示状态
                var count = 0;
                me.toolsEl.children().each(function(index, el) {
                    toolEl = $(el);
                    tool = toolEl.attr("tool");
                    if (tools.indexOf(tool) >= 0) {
                        count++;
                        toolEl.show();
                    } else {
                        toolEl.hide();
                    }
                });

                // 如果所有工具都不显示，隐藏整个工具栏
                if (count > 0) {
                    me.toolsEl.css("opacity", ""); // 用透明度来实现，避免和setState冲突

                    // 个数变化后，重新计算按钮区域宽度
                    me.toolsEl.width(count * toolItemWidth);
                } else {
                    me.toolsEl.css("opacity", "0");
                }
            }

            // 是否自动隐藏
            if (autoHide === true) {
                me.options.autoHideTools = autoHide;
                me.toolsEl.removeClass(alwaysShowToolClass);
            } else if (autoHide === false) {
                me.options.autoHideTools = autoHide;
                me.toolsEl.addClass(alwaysShowToolClass);
            }
        },
        /**
         * @description 修改组件标题文本
         * @param title
         */
        setTitle: function(title) {
            if ($.isNull(title)) {
                return;
            }

            var text = "";
            if (Array.isArray(title)) {
                title.forEach(function(item) {
                    if (item.isDefault) {
                        text = item.text;
                    }
                });
                this.list.setData(title);
                this._listDoLayout();
            } else {
                text = title;
            }

            this.titleEl.find(">em").attr("title", text).text(text);
            this.options.panelTitle = title;

            this.list.setValue({
                "text": text,
                "value": text
            });
        },

        /**
         * @param switchable
         * @description 切换标题功能的开关
         */
        setSwitchable: function(switchable) {
            var me = this;

            if (switchable === true) {
                me.downArrow.show();
                me._downArrowHide = false;
            } else if (switchable === false) {
                me.downArrow.hide();
                me._downArrowHide = true;
            }
            me._listDoLayout();
        },
        _getCanvasObject: function() {
            var me = this,
                result = null,
                opt = me.options,
                item = opt.items[0];
            if ($.isNotNull(item) && $.isFunction(item.getCanvasObject)) {
                result = item.getCanvasObject();
            }
            return result;
        },
        /**
         * @private
         * @description 创建widgetpanel模板
         */
        _createSweetWidget: function() {
            var me = this,
                i18n = Sweet.core.i18n.widgetPanel,
                panelTitle = me.options.panelTitle,
                title = "",
                valueTitle = null;

            if (me.options.items === null) {
                me.options.items = [];
            }

            if (Array.isArray(panelTitle)) {
                panelTitle.forEach(function(item) {
                    if (item.isDefault) {
                        title = item.text;
                        valueTitle = $.objClone(item);
                    }
                });
            } else {
                title = panelTitle;
            }

            // 一级容器
            me.container = $("<div>").attr("id", me.options.id).addClass(containerClass);

            // 标题栏
            var titleEl = me.titleEl = $("<div>");
            titleEl.addClass(titleClass).appendTo(me.container);

            // 标题文本
            var headerEl = me.headerEl = $("<em>");
            headerEl.text(title).addClass(titleTextClass).appendTo(titleEl).attr("title", title);

            //标题下拉箭头
            var downArrow = me.downArrow = $("<span>");
            downArrow.addClass(arrowClass)
                .bind("click", {
                "me": me
            }, me._showDropDownList)
                .appendTo(titleEl);
            me._downArrowHide = false;
            if (!Array.isArray(panelTitle) || !me.options.switchable) {
                downArrow.hide();
                me._downArrowHide = true;
            }

            //Dashboard有可能创建不带tools的组件
            var toolsEl = me.toolsEl = $("<div>");
            toolsEl.addClass(toolsClass).appendTo(titleEl);
            // 工具栏
            if ($.isArray(me.options.tools) && me.options.tools.length > 0) {
                $.each(me.options.tools, function(index, tool) {
                    $("<span>").addClass(tool).attr("title", i18n[tool] || "").attr("tool", tool).appendTo(toolsEl);
                });

                toolsEl.width(toolItemWidth * me.options.tools.length);

                if (!me.options.autoHideTools) {
                    toolsEl.addClass(alwaysShowToolClass);
                }
            }

            // 状态图标
            me.stateEl = $("<div><span></span></div>").addClass(stateClass).appendTo(titleEl).hide();

            // 内容
            var contentEl = me.contentEl = $("<div>");
            contentEl.addClass(contentClass).attr('id', me.options.id + "-content").appendTo(me.container);

            //创建下拉框
            var dropDownElId = "widgetPanelDropdown" + increments++,
                dropDownEl = me.dropDownEl = $("<div>").attr({
                    "tabindex": -1
                })
                    .hide()
                    .appendTo("body");

            $("<div>").attr({
                "id": dropDownElId
            })
                .appendTo(dropDownEl).addClass(widgetPanelUlParentClass);

            var list = me.list = new Sweet.list.OptimizeList({
                multi: false,
                data: Array.isArray(panelTitle) ? panelTitle : [],
                tip: true,
                width: 103,
                renderTo: dropDownElId
            });
            if (valueTitle) {
                list.setValue(valueTitle);
            }
            list.addListener("change", function(event, val) {
                me._switchTitle(val.text);
                dropDownEl.hide();
            });
            list.addListener("nodeClick", function(node, data) {
                dropDownEl.hide();
            });
            $("body").bind("click", function(e, data) {
                if ($(e.target).hasClass(arrowClass) === false) {
                    dropDownEl.hide();
                }
            });
            dropDownEl.addClass(widgetPanelSelectWinRadio);
        },
        /**
         * @parivate
         * @description 渲染到相应的到div
         * @param {String} id 目标元素ID
         */
        _render: function(id) {
            var me = this;

            if (!me._super(id)) {
                return false;
            }

            // 把创建的Dom附着到渲染容器
            me.container.appendTo(me.renderEl);

            if ($.isArray(me.options.items) && me.options.items.length > 0) {
                var item = me.options.items[0];

                if ($.isFunction(item.render)) {
                    item.render(me.options.id + "-content");
                }
            }

            me.rendered = true;
            return true;
        },

        /**
         * @description 登记事件
         * @param {String} eventName 事件名称
         * @returns {boolean}
         * @private
         */
        _addListener: function(eventName) {
            var evt = '';
            var me = this;

            if ($.type(eventName) === 'undefined') {
                evt = 'tool';
            } else {
                evt = eventName;
            }

            // 目前只支持tool消息
            if (evt === 'tool') {
                if ($.isNull(this.toolsEl)) {
                    return false;
                }

                this.toolsEl.children().unbind().bind('click', function(event) {
                    me._trigger('tool', event, event.target.className);
                });
            } else {
                return false;
            }

            return true;
        },
        /**
         * @description 触发事件
         * @param {String} eventName 事件名
         * @param {Object} event 事件对象
         * @param {Object} args 参数
         * @private
         */
        _trigger: function(eventName, event, args) {
            if ($.isNull(this.handlers)) {
                return;
            }

            // 查找回调函数
            var fn = this.handlers[eventName];
            if (!$.isFunction(fn)) {
                return;
            }

            // 执行回调
            fn(event, args, this);
        },

        /**
         * @description 添加sweet控件，一般为图表展示控件
         * @param {Object/Array} items 为sweet类对象
         */
        addItems: function(items) {
            var me = this;
            var item;

            if (typeof items !== 'object') {
                return false;
            }
            if (!$.isArray(me.options.items)) {
                me.options.items = [];
            }

            if (me.options.items.length > 0) {
                me._error('widgetpanel can only hold 1 sub item. #' + me.options.id);
                return false;
            }

            if ($.isArray(items) && items.length >= 1) {
                item = items[0];
            } else {
                item = items;
            }

            if (this.rendered) {
                item.render(me.options.id + "-content");
            }
            me.options.items.push(item);

            return true;
        },

        /**
         * @description 删除子组件
         */
        removeItems: function() {
            var item;

            if (this.options.items.length === 0) {
                return;
            } else {
                item = this.options.items[0];
            }

            // 销毁子组件
            if ($.isFunction(item.destroy)) {
                try {
                    item.destroy();
                } catch (e) {
                    this._error(e);
                }
            }

            // 清除列表
            this.options.items = [];
        },

        /**
         * @description 销毁组件
         * @private
         */
        _destroyWidget: function() {
            var me = this;

            // 释放定时器
            if (this.stateTimer && this.stateTimer >= 0) {
                window.clearInterval(this.stateTimer);
                this.stateTimer = -1;
            }
            //使tip消失
            if (this.toolsEl.children(".close")) {
                this.toolsEl.children(".close").trigger("mouseout");
            }
            // 解除事件绑定
            this.toolsEl.children().unbind();

            // 销毁子组件
            $.each(me.options.items, function(index, item) {
                if ($.isFunction(item.destroy)) {
                    try {
                        item.destroy();
                    } catch (e) {}
                }
            });

            // 清理组件对象列表和Dom
            me.options.items = [];
            me.container.remove();
        },
        /**
         * @description 刷新布局
         * @private
         */
        _doLayout: function() {
            var me = this;
            if (!me.rendered) {
                return;
            }

            $.each(this.options.items, function(index, item) {
                if ($.isFunction(item.setWH)) {
                    item.setWH(me.contentEl.width(), me.contentEl.height());
                }
            });
            me._listDoLayout();
        },
        /**
         * @description 刷新list布局
         * @private
         */
        _listDoLayout: function() {
            var me = this,
                listDatas,
                _liHeight = 22,
                _titleElHeight = me.titleEl.outerHeight(true),
                _containerHeight = me.container.height(),
                _containerWidth = me.container.width(),
                _toolsElWidth = me.toolsEl.outerWidth(),
                _listHeight = _containerHeight - _titleElHeight - _liHeight,
                _listDataLength = 0,
                _maxWidth,
                _tWidth,
                _padW10 = 10,
                _padW6 = 6,
                dwrW = 13;
            if (!me.list) {
                return;
            }
            listDatas = me.list.getData();
            if (_listHeight <= 0) {
                _listHeight = _liHeight;
            } else {
                _listDataLength = listDatas.length;
                if ((_listHeight >= _listDataLength * _liHeight)) {
                    _listHeight = "auto";
                }
            }
            _maxWidth = me._getLiMaxWidth(listDatas);
            _tWidth = (_maxWidth + 4 * _padW10 + dwrW) - (_containerWidth - _toolsElWidth - _padW10);
            if (_tWidth > 0) {
                _tWidth = _maxWidth - _tWidth;
            } else {
                _tWidth = _maxWidth;
            }
            me.downArrow.css({
                left: _tWidth + 4 * _padW10 + _padW6
            });
            me.list.setWH(_tWidth + 4 * _padW10 + dwrW + _padW6, _listHeight);
            if (!me._downArrowHide) {
                me.headerEl.width(_tWidth + 3 * _padW10 + _padW6);
            } else {
                me.headerEl.css({
                    "width": "calc(100% - 20px)"
                });
            }
        },
        /**
         * @private
         * @description 获取区域中li最宽的宽度
         * @param {Array} datas 数据
         */
        _getLiMaxWidth: function(datas) {
            var maxWidth = 60,
                tempWidth = 0,
                _span;
            _span = $("<span>").css({
                left: "-10000px",
                position: "absolute"
            }).appendTo("body");
            for (var i = 0; i < datas.length; i++) {
                _span.text(datas[i].text);
                tempWidth = _span.outerWidth();
                if (tempWidth > maxWidth) {
                    maxWidth = tempWidth;
                }
            }
            _span.remove();
            return maxWidth;
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            return this.container.externalWidth();
        },

        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            return this.container.externalHeight();
        },

        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.container.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.container.externalHeight(height);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * 展开下拉框
         * @private
         * @param {Object} 事件
         */
        _showDropDownList: function(event) {
            var me = event.data.me;

            if (!$.isVisiable(me.dropDownEl)) {
                var maxIndex = $.getMaxZIndex(me.dropDownEl.css("z-index"));
                me.dropDownEl.css("z-index", maxIndex);

                var pos = $.getFloatOffset(me.titleEl, me.dropDownEl);

                me.dropDownEl.css({
                    "left": pos.left,
                    "top": pos.top
                });
                me.dropDownEl.show();
                if (me.list) {
                    me.list.doLayout(true);
                }
            } else {
                me.dropDownEl.hide();
            }

        },
        /**
         * 切换title
         * @param {type} state
         * @returns {undefined}
         */
        _switchTitle: function(val) {
            var me = this;

            if (val !== me.options.panelTitle) {
                me.setTitle(val);
                me.options.panelTitle = val;
                me._trigger('switchTitle', null, val);
            }
        },
        /**
         * 设置状态
         * @param {String} state 状态名
         */
        setState: function(state) {
            if (state === "loading") {
                this.toolsEl.hide();
                this.stateEl.show();

                if (this.stateTimer && this.stateTimer >= 0) {
                    window.clearInterval(this.stateTimer);
                    this.stateTimer = -1;
                }

                var offset = 0;
                var stateEl = this.stateEl.children().first();

                stateEl.addClass(state);
                stateEl.css("background-position", "0px");
                this.stateTimer = window.setInterval(function() {
                    offset += 22;
                    if (offset >= 22 * 8) {
                        offset = 0;
                    }

                    stateEl.css("background-position", -offset + "px");
                }, 100);
            } else {
                this.toolsEl.show();
                this.stateEl.hide();

                if (this.stateTimer && this.stateTimer >= 0) {
                    window.clearInterval(this.stateTimer);
                    this.stateTimer = -1;
                }
            }
        },
        /**
         * @event
         * @description 工具按钮点击事件
         * @name Sweet.WidgetPanel#tool
         * @param {Event} event 事件对象
         * @param {String} tool 按钮名称
         * @param {Object} panel WidgetPanel对象
         */
        tool: function(event, tool, panel) {
            $.log(event + "," + tool + "," + panel);
        }
    });

    /**
     * 创建widgetpanel组件类
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.widget
     * @requires <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建WidgetPanel容器：
     * var sweetWidgetPanel = Sweet.WidgetPanel({});
     */
    Sweet.WidgetPanel = $.sweet.widgetpanel;
})(jQuery);


;
/**
 * @fileOverview
 * <pre>
 * DashboardWidget组件-portal
 * 2013/2/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */


/**
 * 创建widgetpanel组件类
 * @name Sweet.widgetslipepanel
 * @class
 * @extends Sweet.widget
 * @requires 
 * <pre>
 *  jquery.ui.core.js
 *  jquery.ui.widget.js
 *  jquery.sweet.widget.js
 * </pre>
 */
(function($, undefined) {

    $.widget("sweet.widgetslidepanel", $.sweet.widget, /** @lends Sweet.WidgetslidePanel.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-slidepanel]",
        //panel 类输入组件公共配置参数
        options: /** @lends Sweet.WidgetslidePanel.prototype*/
        {
            /**
             * 每页多少列
             * @type number
             * @default 3
             */
            columnperpage: 3, //每页多少列
            /**
             * 每页宽度
             * @type number
             * @default 300
             */
            pagewidth: "300",
            /**
             * 每页高度
             * @type number
             * @default 100
             */
            pageheight: "100",
            /**
             * 当前的索引
             * @type number
             * @default 0
             */
            currentindex: 0
        },
        /**
         * @private
         * @description 生成Guid函数
         * @param 无
         */
        _newGuid: function() {
            var guid = "",
                n;
            for (var i = 1; i <= 32; i++) {
                n = Math.floor(Math.random() * 16.0).toString(16);
                guid += n;
                if ((8 === i) || (12 === i) || (16 === i) || (20 === i)) {
                    guid += "-";
                }
            }
            return guid;
        },
        /**
         * @private
         * @description 创建widgetslidepanel模板
         * @param 无
         */
        _createSweetWidget: function() {
            var me = this;
            me.container = $("<div style='width: 100%;height: 100%;'>");
            me.sweetEl = {};
            me.sweetEl.id = me._newGuid();
            me.sweetEl.Dom = $("<div class='PageDom'>");
            me.sweetEl.Pages = $("<div class='Pages'>");
            me.container.attr("id", me.options.id).append(me.sweetEl.Dom);
            me.sweetEl.Dom.append(me.sweetEl.Pages);
        },
        /**
         *@private
         * @description  定义所有dom的css
         *
         */
        _widgetSlideCSS: function() {
            var me = this;
            me.sweetEl.Dom.css({
                position: "relative",
                overflow: "hidden",
                width: me.options.pagewidth,
                height: me.options.pageheight
            });
            me.sweetEl.page[0].css({
                width: me.options.pagewidth,
                height: me.options.pageheight
            });
            me.sweetEl.page[1].css({
                width: me.options.pagewidth,
                height: me.options.pageheight
            });
            me.sweetEl.page[2].css({
                width: me.options.pagewidth,
                height: me.options.pageheight
            });
        },
        /**
         * @public
         * @description 添加sweet控件，一般为图表展示控件
         * @param item  为sweet类对象数组
         */
        addItems: function(item) {
            var me = this;
            me.sweetEl.page = [];

            me.sweetEl.page[0] = $("<div class='Page'>").html("a1");
            me.sweetEl.page[1] = $("<div class='Page'>").html("a2");
            me.sweetEl.page[2] = $("<div class='Page'>").html("a3");

            me.sweetEl.Pages.append(me.sweetEl.page[0])
                .append(me.sweetEl.page[1])
                .append(me.sweetEl.page[2]);
        },
        /**
         * @private
         * @description 注册控件内部事件，外部调用该函数注册
         * @param 无
         */
        _addEvent: function() {
            var me = this;
            me.sweetEl.Dom.mousedown(function(event) {
                var orix = event.clientX;
                var tarx = event.clientX;

                var oril = me.options.currentindex * me.sweetEl.Dom.innerWidth();

            });



        },
        _destroyWidget: function() {
            var me = this;
            me.container.remove();
        },
        /**
         * @public
         * @description 修改widgetslidepanel长宽
         * @param 长宽对象,{"width":"100","height":"50"}
         */

        reSize: function(data) {
            var me = this;
            var pWidth = data.width,
                pHeight = data.height;

            me.renderEl.width(data.width);
            me.renderEl.height(data.height);
        },
        _doLayout: function() {
            var me = this;
            if (!me.rendered) {
                return;
            }
            var curW = me.container.width();
            var curH = me.container.height();

            me.sweetEl.Dom.externalWidth(curW);
            me.sweetEl.Dom.externalHeight(curH);



        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            return this.container.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            return this.container.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            if ($.type(width) === "string") {
                this.container.onResize(function() {
                    me.doLayout();
                });
            }
            me.container.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            if ($.type(height) === "string") {
                this.container.onResize(function() {
                    me.doLayout();
                });
            }
            me.container.externalHeight(height);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },
        /**
         * @parivate
         * @description 渲染饼图到相应的到div
         * @param {String} id 目标元素ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.renderEl.append(me.container);

            var WH = $.isNull(me.options.width) || (me.options.width === "100%") ? "100%" : me.options.width + "px";
            var HT = $.isNull(me.options.height) || (me.options.width === "100%") ? "100%" : me.options.height + "px";

            me.renderEl.width(WH);
            me.renderEl.height(HT);

            // 记录当前渲染时容器的宽度和高度
            me.preWH = {
                width: me.renderEl.width(),
                height: me.renderEl.height()
            };
            me.sweetEl.Dom.externalWidth(me.preWH.width);
            me.sweetEl.Dom.externalHeight(me.preWH.height);

            me._widgetSlideCSS();

            me.rendered = true;
            return true;
        }
    });
    Sweet.WidgetslidePanel = $.sweet.widgetslidepanel;
})(jQuery);


;
/**
 * @fileOverview  
 * <pre>
 * 组件--阵列指示灯
 * 2013.7.1
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    "use strict";
    /**
     * 保存组件对象
     * 
     */
    var arrComponent = "sweet-arrayindicator-widget",
        arrContent = "sweet-arrayindicator-content",
        arrImage = "sweet-arrayindicator-image",
        arrServerGreen = "sweet-arrayindicator-serverGreen",
        arrServerRed = "sweet-arrayindicator-serverRed",
        arrServerGray = "sweet-arrayindicator-serverGray",
        arrRaidGreen = "sweet-arrayindicator-raidGreen",
        arrRaidRed = "sweet-arrayindicator-raidRed",
        arrRaidGray = "sweet-arrayindicator-raidGray",
        arrInfoDiv = "sweet-arrayindicator-infoDiv",
        arrInfoTable = "sweet-arrayindicator-infoUl",
        arrinfoTr = "sweet-arrayindicator-infoTr",
        arrInfoTrName = "sweet-arrayindicator-infoTrName",
        arrInfoTrValue = "sweet-arrayindicator-infoTrValue",
        arrInfoTrValueGreen = "sweet-arrayindicator-infoTrValue-green",
        arrInfoTrValueRed = "sweet-arrayindicator-infoTrValue-red",
        arrInfoLabelClassServer = "sweet-arrayindicator-label-server",
        arrInfoLabelClassRaid = "sweet-arrayindicator-label-raid";

    $.widget("sweet.widgetArrayIndicator", $.sweet.widget, /** @lends Sweet.ArrayIndicator.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-bxCarousel]",
        type: "bxCarousel",
        eventNames: /** @lends Sweet.ArrayIndicator.prototype*/
        {
            /**
             * @event
             * @description 点击图片事件
             * @param {Event} evt 事件对象
             * @param {Object} data 点击的节点的数据信息
             */
            click: "点击图片事件"
        },
        options: /** @lends Sweet.ArrayIndicator.prototype*/
        {
            /**
             * 基础数据
             * @type Number
             * @default auto
             */
            height: "auto",
            /**
             * 基础数据
             * @type Object
             * @default null
             */
            data: null,
            /**
             * @description 是否有label
             * @type Boolean
             * @default false
             */
            label: true,

            /**
             * @description label文字
             * @type String
             * @default null
             */
            labelText: null,
            /**
             * @description label宽度
             * @type String/Number
             * @default 0.2
             */
            labelWidth: 0.2,
            /**
             * @description 显示类型，1：表示服务器, 2：表示磁阵
             * @type Number 
             * @default 1 
             */
            type: 1,
            /**
             * @description label文字是否显示符号
             * @type Boolean
             * @default :
             */
            symbol: true
        },
        /**
         * 重新设置基础数据
         * @param {object} 组件data值
         */
        setData: function(data) {
            var me = this,
                options = me.options;

            options.data = data || options.data;
            me._removeTips();
            me._initData();
            me.arrayIndicatorUl.text("");
            me._createArrayIndicatorLi();
            me._doLayout();
        },

        /**
         * @description 设置输入类组件LabelText
         * @param {String} text Label Text
         */
        setLabelText: function(text) {
            var me = this;
            if (me.options.symbol) {
                text += Sweet.constants.symbol.COLON;
            }
            me.label.text(text);
        },

        /**
         * @description 返回输入类组件LabelText
         * @return {String} text Label Text
         */
        getLabelText: function() {
            var me = this;
            return me.label.text();
        },

        /**
         * @private
         * @description 创建组件总入口
         */
        _createSweetWidget: function() {
            var me = this,
                options = this.options,
                arrayIndicatorEl = me.arrayIndicatorEl = $("<div>").addClass(arrComponent).attr("id", options.id);
            // 数据初始化
            me._initData();
            // 创建label标签
            me._createLabel();
            // 创建组件
            me._createArrayIndicator();
        },

        /**
         * @private
         * @description 数据初始化
         */
        _initData: function() {
            var me = this,
                options = me.options,
                data = options.data,
                dataMap = me.dataMap = {},
                liObjMap = me.liObjMap = {};

            if (!$.isArray(data) || 1 > data.length) {
                return;
            }

            $.each(data, function(index, val) {
                dataMap[val.value] = val;
            });
        },

        /**
         * @private
         * @description 创建基本文本框前label标签
         */
        _createLabel: function() {
            if (!this.options.label) {
                return;
            }
            var me = this,
                options = me.options,
                label = me.label = $("<label>"),
                labelText = '';
            if (!$.isNull(options.labelText)) {
                labelText += $.htmlEscape(options.labelText);
                if (options.symbol) {
                    labelText += Sweet.constants.symbol.COLON;
                }
            } else {
                return;
            }

            label.html(labelText).appendTo(me.arrayIndicatorEl);
        },

        /**
         * @private
         * @description 创建阵列指示灯组件
         */
        _createArrayIndicator: function() {
            var me = this,
                options = me.options,
                data = options.data,
                arrayIndicatorDiv = me.arrayIndicatorDiv = $("<div>").addClass(arrContent)
                    .appendTo(me.arrayIndicatorEl),
                arrayIndicatorUl = me.arrayIndicatorUl = $("<ul>").appendTo(arrayIndicatorDiv);

            me._createArrayIndicatorLi();
        },

        /**
         * @private
         * @description 创建Li
         */
        _createArrayIndicatorLi: function() {
            var me = this,
                options = me.options,
                data = options.data;

            if (!$.isArray(data) || 1 > data.length) {
                return;
            }
            var imageClass = "";
            $.each(data, function(index, val) {
                imageClass = me._getImageClass(val);
                var liEl = $("<li>").data("info", val.text)
                    .data("value", val.value)
                    .addClass(imageClass)
                    .bind("click", {
                    "me": me
                }, me._clickImage)
                    .bind("mouseover", {
                    "me": me
                }, me._showInfo)
                    .bind("mouseout", {
                    "me": me
                }, me._closeInfo)
                    .appendTo(me.arrayIndicatorUl);
                me.liObjMap[val.value] = liEl;
            });
        },

        /**
         * @private
         * @description 计算图片的样式
         * @param {Object} value
         * @return {String} 样式名称
         */
        _getImageClass: function(value) {
            var me = this,
                options = me.options,
                imageClass = arrImage + " ",
                status = parseInt(value.status, 10);

            if (1 === options.type) {
                if (1 === status) {
                    imageClass += arrServerGreen;
                } else if (2 === status) {
                    imageClass += arrServerRed;
                } else {
                    imageClass += arrServerGray;
                }
                if (me.label) {
                    me.label.addClass(arrInfoLabelClassServer);
                }
            } else {
                if (1 === status) {
                    imageClass += arrRaidGreen;
                } else if (2 === status) {
                    imageClass += arrRaidRed;
                } else {
                    imageClass += arrRaidGray;
                }
                if (me.label) {
                    me.label.addClass(arrInfoLabelClassRaid);
                }
            }
            return imageClass;
        },

        /**
         * @private
         * 点击图片事件
         * @param {Object} event
         */
        _clickImage: function(event) {
            var me = event.data.me,
                options = me.options,
                obj = $(event.currentTarget),
                value = me.dataMap[obj.data("value")];

            me._triggerHandler(event, "click", value);
        },

        /**
         * @private
         * 显示状态信息
         * @param {Object} event
         */
        _showInfo: function(event) {
            var me = event.data.me,
                options = me.options,
                obj = $(event.currentTarget),
                infoObj = obj.data("info");

            if (!$.isArray(infoObj) || 1 > infoObj.length) {
                return;
            }

            var infoDiv = $("<div>").addClass(arrInfoDiv).appendTo("body");
            var infoUl = $("<table>").addClass(arrInfoTable).appendTo(infoDiv);
            var status = 0;
            $.each(infoObj, function(index, info) {
                var infoTr = $("<tr>").addClass(arrinfoTr).appendTo(infoUl);
                var infoTrName = $("<td>").html(info.label).addClass(arrInfoTrName).appendTo(infoTr);
                var infoTrValue = $("<td>").html(info.desc).addClass(arrInfoTrValue).appendTo(infoTr);
                status = parseInt(info.status, 10);
                // 只有"状态"才会彩色显示
                if (1 === status) {
                    infoTrValue.addClass(arrInfoTrValueGreen);
                } else if (2 === status) {
                    infoTrValue.addClass(arrInfoTrValueRed);
                }
            });
            infoDiv.position({
                my: "left-20 top",
                at: "right bottom",
                of: obj,
                collision: "flipfit flipfit"
            });
            obj.data("infoDiv", infoDiv);
        },

        /**
         * @private
         * 显示状态信息
         * @param {Object} event
         */
        _closeInfo: function(event) {
            var me = event.data.me,
                obj = $(event.currentTarget);
            if (obj.data("infoDiv")) {
                obj.data("infoDiv").remove();
            }
        },

        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });

            return result;
        },

        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this;
            return;
        },

        /**
         * 组件渲染
         * @private
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.arrayIndicatorEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },

        /**
         * 设置组件值
         * @private
         * @param {object} 组件值
         */
        _setValue: function(data) {
            var me = this,
                valObj = [];
            if (!$.isArray(valObj)) {
                valObj.push(data);
            } else {
                valObj = data;
            }
            var imageClass = "";
            $.each(valObj, function(index, val) {
                if (!me.liObjMap[val.value]) {
                    return;
                }
                imageClass = me._getImageClass(val);
                var liEl = me.liObjMap[val.value].data("info", val.text)
                    .removeClass()
                    .addClass(imageClass);
                me.dataMap[val.value] = val;
                me.liObjMap[val.value] = liEl;
            });
        },

        /**
         * 获取组件值
         * @private
         * @return {function} me._getSelectedText()
         */
        _getValue: function() {
            var me = this;
            return;
        },

        /**
         * Input类组件布局刷新基本处理
         * @private
         */
        _doLayout: function() {
            var me = this,
                options = me.options;
            // 渲染前禁止进入
            if (!me.rendered) {
                return;
            }

            var arrayIndicatorElWidth = me.arrayIndicatorEl.width() - $.getPaddingRight(me.arrayIndicatorEl) - $.getPaddingLeft(me.arrayIndicatorEl),
                labelWidth = me.labelWidth = me._doLabelLayout(arrayIndicatorElWidth);

            if (me.label) {
                me.label.width(labelWidth);
            }
            me.arrayIndicatorDiv.width(arrayIndicatorElWidth - labelWidth);
            if ("auto" === options.height) {
                me.arrayIndicatorEl.height(me.arrayIndicatorDiv.height());
            } else {
                me.arrayIndicatorDiv.height(options.height);
            }
        },

        /**
         * @private
         * @description 计算label宽度
         * @param {Number} width 外层容器宽度
         */
        _doLabelLayout: function(width) {
            var me = this,
                options = me.options,
                labelWidth;
            if (me.label) {
                // 按百分比设定
                if (1 > options.labelWidth) {
                    labelWidth = Math.floor(width * options.labelWidth);
                } else {
                    labelWidth = options.labelWidth;
                }
            } else {
                labelWidth = 0;
            }

            return labelWidth;
        },

        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.arrayIndicatorEl.externalWidth(width);
        },

        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.arrayIndicatorEl.externalWidth();
        },

        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.arrayIndicatorEl.externalHeight();
        },

        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        },

        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.arrayIndicatorEl.externalHeight(height);
        },

        /**
         * @private
         * @description 移除提示
         */
        _removeTips: function() {
            var me = this;
            // 取消提示
            if (!$.isNull(me.liObjMap)) {
                $.each(me.liObjMap, function(index, obj) {
                    obj.trigger("mouseout");
                });
            }
        },
        /**
         * 销毁组件
         * @private
         */
        _destroyWidget: function() {
            var me = this;
            me._removeTips();
            me.arrayIndicatorEl.remove();
            delete me.liObjMap;
            delete me.dataMap;
        }
    });

    /**
     * 阵列指示灯
     * @name Sweet.ArrayIndicator
     * @class 
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     */
    Sweet.ArrayIndicator = $.sweet.widgetArrayIndicator;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 *比率指示灯组件
 * 2013/7/2
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved
 * </pre>
 * @version 1.0
 */

(function($, undefined) {
    var colorCommonClass = "sweet-ratioIndicator-color-common",
        colorGreenLeftClass = "sweet-ratioIndicator-color-green-left",
        colorYellowLeftClass = "sweet-ratioIndicator-color-yellow-left",
        colorShadowClass = "sweet-ratioIndicator-color-shadow",
        colorGrayRightClass = "sweet-ratioIndicator-color-gray-right",
        loadingClass = "sweet-ratioIndicator-loading",
        colorGreenAllClass = "sweet-ratioIndicator-color-green-all",
        colorGrayAllClass = "sweet-ratioIndicator-color-gray-all",
        colorRedAllClass = "sweet-ratioIndicator-color-red-all",
        colorRedClass = "sweet-ratioIndicator-color-red-left",
        yellowTextClass = "yellowtext",
        loadingTextClass = "sweet-ratioIndicator-loading-text";

    $.widget("sweet.widgetRatioIndicator", $.sweet.widget, /** @lends Sweet.RatioIndicator.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-ratioindicator]:",
        type: "ratioindicator",
        eventNames: /** @lends Sweet.RatioIndicator.prototype*/
        {
            /**
             * @event
             * @description 比率指示灯数据改变事件
             */
            change: "比率指示灯数据改变事件"
        },
        // ratioindicator组件公共配置参数
        options: /** @lends Sweet.RatioIndicator.prototype*/
        {
            /**
             * @description 组件值
             * @param {Number}
             * @default null
             */
            value: null,
            /**
             * @description 最大值
             * @param {Number}
             * @default 100
             */
            maxValue: 100,
            /**
             * @description 阈值，如果只配置threshhold，则只显示红绿两种显示条
             * @param {Number}
             * @default null
             */
            threshhold: null,
            /**
             * @description 阈值，如果配置secondThreshhold，则显示红黄绿三种显示条
             * @param {Number}
             * @default null
             */
            secondThreshhold: null,
            /**
             * @description 值标签
             * @param {String}
             * @default ""
             */
            valueLabel: "",
            /**
             * @description 最大值标签
             * @param {String}
             * @default ""
             */
            maxValueLabel: "",
            /**
             * @description 组件默认宽度
             * @type {Number}
             * @default 287px
             */
            width: 287,
            /**
             * @description 大于阈值显示红色，还是显示绿色（从红色开始，还是从绿色开始）,参数提供"red"、 "green"
             * 默认是绿色
             * @type {String}
             * @default  "green"
             */
            from: "green"
        },
        /**
         * @description 组件属性动态改变时使用此方法，如果只有value改变，使用setValue方法
         * @param {object} data 参数是一个对象，属性是类提供的属性值，如：threshhold，value等
         */
        setData: function(data) {
            if ($.isNull(data) || $.isArray(data)) {
                return;
            }
            var me = this,
                temp = $.objClone(data);
            //如果除value属性外其它属性也改变时，更新所有改变的属性值
            for (var key in data) {
                me.options[key] = temp[key];
            }
            //需要避开options中的width，使用用户更新的width，否则不变
            if (!$.isNull(data.width)) {
                me.width = data.width;
            }
            me._setValue(me.options.value);
        },
        /**
         * @description 设置组件的值
         * @private
         * @param {Number} value 组件对应的数据 
         */
        _setValue: function(value) {
            if ($.isNull(value)) {
                return;
            }
            var me = this;
            //数据有改变发生change事件
            if (!$.equals(me.currentValue, value)) {
                if (!$.isNull(me.eventMap.change)) {
                    me.eventMap.change.call(null, null, value);
                }
            }
            me.currentValue = value;
            //移除添加的div
            me.ratioIndicatorLeftDivEl.remove();
            me.ratioIndicatorRightDivEl.remove();
            me.ratioIndicatorContentEl.remove();
            //重新生成Div
            me._createRatioIndicator();
        },
        /**
         * @description 获取组件的值
         * @private
         * @return {Number} 返回获取的值
         */
        _getValue: function() {
            var me = this;
            return me.options.value;
        },
        /**
         * @private
         * @description 重绘组件
         */
        _doLayout: function() {
            var me = this,
                options = me.options,
                width = me.width,
                ratioIndicatorEl = me.ratioIndicatorEl;
            ratioIndicatorEl.width(width);
        },
        /**
         * @private
         * @description 创建RatioIndicator组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                options = me.options,
                ratioIndicatorEl = me.ratioIndicatorEl = $("<div>");
            me.eventMap = [];
            //记录宽度，因为options中的宽度会改变
            me.width = options.width;
            ratioIndicatorEl.addClass(options.widgetClass + " " + loadingClass)
                .width(options.width)
                .attr("id", options.id);
            // 创建ratioIndicator组件
            me._createRatioIndicatorWidget();
        },
        /**
         * @private
         * @description 创建RatioIndicator组件
         */
        _createRatioIndicatorWidget: function() {
            var me = this,
                options = me.options,
                contentEl;
            contentEl = me.contentEl = $("<div>").appendTo(me.ratioIndicatorEl)
                .addClass(options.widgetClass)
                .width(me.width);

            me._createRatioIndicator();
        },
        /**
         * @private
         * @description 创建RatioIndicator组件
         */
        _createRatioIndicator: function() {
            var me = this,
                options = me.options,
                ratioIndicatorLeftDivEl,
                ratioIndicatorContentEl,
                value = options.value,
                threshhold = options.threshhold,
                dataError = false,
                valueLabel = $.htmlEscape(options.valueLabel),
                maxValueLabel = $.htmlEscape(options.maxValueLabel),
                maxValue = $.htmlEscape(options.maxValue),
                textValue = $.htmlEscape(value.value),
                secondThreshhold = options.secondThreshhold,
                leftWidth,
                rightWidth,
                ratioIndicatorRightDivEl;
            //判断value是否为空或者不是数字
            if ($.isNull(value) || $.isNull(value.value) || !$.isNumeric(value.value)) {
                dataError = true;
                value = {
                    "value": 0,
                    "text": null
                };
            }
            //参数校验
            if (value.value > maxValue || threshhold > maxValue || 0 > value.value) {
                dataError = true;
            }
            //阈值，如果未配置与maxValue相等
            if ($.isNull(threshhold)) {
                threshhold = options.maxValue;
            }
            // 设置第二个阈值,判断阈值是否越界
            if (!$.isNull(secondThreshhold)) {
                if (secondThreshhold < threshhold || secondThreshhold > maxValue) {
                    dataError = true;
                }
            }
            //保存当前value
            me.currentValue = $.objClone(value);
            //计算比率指示灯左右侧的宽度
            if (0 === value.value || 0 === options.maxValue || 0 === threshhold) {
                leftWidth = 0;
                rightWidth = me.width;
            } else {
                leftWidth = me.width * (value.value / options.maxValue);
                rightWidth = me.width * ((options.maxValue - value.value) / options.maxValue);
            }

            //创建比率指示灯左侧
            me.ratioIndicatorLeftDivEl = ratioIndicatorLeftDivEl = $("<div>").appendTo(me.contentEl)
                .width(leftWidth)
                .addClass(colorCommonClass)
                .addClass(colorShadowClass);
            //创建比率指示灯右侧
            me.ratioIndicatorRightDivEl = ratioIndicatorRightDivEl = $("<div>").appendTo(me.contentEl)
                .width(rightWidth)
                .addClass(colorCommonClass)
                .addClass(colorGrayRightClass);
            //创建比率指示灯下面文字
            me.ratioIndicatorContentEl = ratioIndicatorContentEl = $("<div>").appendTo(me.contentEl)
                .width(me.width)
                .html(valueLabel + "/ " + maxValueLabel +
                "<em>" + textValue + "</em>/" + maxValue)
                .addClass(loadingTextClass);

            //错误数据的显示
            if (dataError) {
                ratioIndicatorRightDivEl.addClass(colorGrayAllClass);
                ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                    "--" + "/" + "--");
                return;
            }
            //当前值为0 
            if (0 === value.value) {
                ratioIndicatorRightDivEl.addClass(colorGrayAllClass);
                ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" + textValue + "/" + maxValue);
                return;
            }
            //创建RatioIndicator组件内容
            me._createRatioIndicatorContent();
        },
        /**
         * @private
         * @description 创建RatioIndicator组件内容
         */
        _createRatioIndicatorContent: function() {
            var me = this,
                options = me.options,
                ratioIndicatorLeftDivEl = me.ratioIndicatorLeftDivEl,
                ratioIndicatorContentEl = me.ratioIndicatorContentEl,
                value = options.value,
                from = options.from,
                threshhold = options.threshhold,
                valueLabel = $.htmlEscape(options.valueLabel),
                maxValueLabel = $.htmlEscape(options.maxValueLabel),
                maxValue = $.htmlEscape(options.maxValue),
                textValue = $.htmlEscape(value.value),
                secondThreshhold = options.secondThreshhold;
            if ("green" === from) {
                //如果当前值等于最大值，from参数为green ，显示全部绿色，
                if (value.value === maxValue) {
                    ratioIndicatorLeftDivEl.addClass(colorGreenAllClass);
                    ratioIndicatorContentEl.html(maxValueLabel + "：" + "<em>" + textValue + "</em>");
                    return;
                }
                if (value.value <= threshhold) {
                    //如果value小于阈值,from参数为green ，显示左边 绿色，右边显示灰色
                    ratioIndicatorLeftDivEl.addClass(colorGreenLeftClass);
                    ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                        "<em>" + textValue + "</em>/" + maxValue);
                }
                //如果存在第二个阈值
                if (!$.isNull(secondThreshhold)) {
                    if (value.value > threshhold && value.value < secondThreshhold) {
                        ratioIndicatorLeftDivEl.addClass(colorYellowLeftClass);
                        ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                            "<span class = " + yellowTextClass + ">" + textValue + "</span>/" + maxValue);
                        return;
                    }
                }
                //如果value大于阈值,from参数为green ，显示左边红色，右边显示灰色
                if (value.value > threshhold) {
                    ratioIndicatorLeftDivEl.addClass(colorRedClass);
                    ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                        "<i>" + textValue + "</i>/" + maxValue);
                }
            } else {
                //如果当前值等于最大值，from参数为green ，显示全部绿色，
                if (value.value === maxValue) {
                    ratioIndicatorLeftDivEl.addClass(colorRedAllClass);
                    ratioIndicatorContentEl.html(maxValueLabel + "：" + "<i>" + textValue + "</i>");
                    return;
                }
                //如果value小于阈值,from参数为red ，显示左边红色，右边显示灰色
                if (value.value < threshhold) {
                    ratioIndicatorLeftDivEl.addClass(colorRedClass);
                    ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                        "<i>" + textValue + "</i>/" + maxValue);
                }
                //如果存在第二个阈值
                if (!$.isNull(secondThreshhold)) {
                    if (value.value > threshhold && value.value < secondThreshhold) {
                        ratioIndicatorLeftDivEl.addClass(colorYellowLeftClass);
                        ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                            "<span class = " + yellowTextClass + ">" + textValue + "</span>/" + maxValue);
                        return;
                    }
                }
                //如果value大于阈值,from参数为red ,左边显示绿色，右边显示灰色
                if (value.value > threshhold) {
                    ratioIndicatorLeftDivEl.addClass(colorGreenLeftClass);
                    ratioIndicatorContentEl.html(valueLabel + "/ " + maxValueLabel + "：" +
                        "<em>" + textValue + "</em>/" + maxValue);
                }
            }
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String}
         *        id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.ratioIndicatorEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 销毁calculator组件
         */
        _destroyWidget: function() {
            if (this.ratioIndicatorEl) {
                this.ratioIndicatorEl.remove();
            }
        },
        /**
         * @description 取消事件
         * @private
         */
        _removeListener: function() {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(eventName, func) {
                if ("change" === eventName) {
                    me.eventMap.change = null;
                    delete me.handlers.change;
                    me.eventMap.length--;
                }
            });
        },
        /**
         * @description 注册事件
         * @private
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if ("change" === eventName) {
                    me.eventMap.change = func;
                    me.eventMap.length++;
                }
            });
        }
    });

    /**
     * 创建比率指示灯组件
     * @name Sweet.RatioIndicator
     * @class
     * @extends Sweet.widget
     * @requires 
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     * sweetCalculator =new Sweet.RatioIndicator({
     *      width: 480,
     *      value: {"value": 600, "text": null},
     *      maxValue: 1000,
     *      renderTo: "sweet-indicator"
     * });
     * </pre>
     */
    Sweet.RatioIndicator = $.sweet.widgetRatioIndicator;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 地图组件
 * 2013/09/01
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var mapContainClass = "sweet-mapContainer-cls";
    $.widget("sweet.widgetMap", $.sweet.widget, /** @lends Sweet.Map.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-map]",
        eventNames: /** @lends Sweet.Map.prototype*/
        {
            /**
             * @event
             * @description 单击事件,一般参数为两个(evt, data)
             */
            click: "单击事件",
            /**
             * @event
             * @description 地图已加载事件,一般参数为两个(evt, data)
             */
            MapIsOk: "地图已加载完事件",

            /**
             * @event
             * @description 地图层级放大缩小事件,一般参数为两个(evt, data)
             */
            mapZoomEnd: "地图层级放大缩小事件",

            /**
             * @event
             * @description 指标切换事件一般参数为两个(evt, data)
             */
            kqiChange: "指标切换事件"
        },
        //地图组件公共配置参数
        options: /** @lends Sweet.Map.prototype*/
        {
            /**
             * 地图宽度
             * @type {String/Number}
             * @default 660px
             */
            width: 600,
            /**
             * 地图高度
             * @type {String/Number}
             * @default 600px
             */
            height: 600,
            /**
             * 小区的集合信息，例如：[{"value":"01","text":"成功率：96%，通话率：98%，拥塞率：0.00%","data":["x":"112" , "y":"115", "angle":null, "color":"#adadad"]}]
             * @type Array
             * @default []
             */
            cellData: [],
            /**
             * 地图的业务图层的编号id
             * @type number
             * @default null
             */
            layerId: null,
            /**
             * 具体图层的数据及提示信息及图层指定的颜色，及多指标时着色指标的名称
             * @example [{"value":"1190","text":"成功率:96%,通话率:98%,拥塞率:0.00%","data":{"kpiname":"通话率","color":"0xA1D9F0"}},...]
             * @type Array
             * @default []
             */
            layerData: [],
            /**
             * 图层的默认颜色值
             * @type String
             * @default ""
             */
            layerDefaultColor: "",

            /**
             * 图层的图例,图例的顺序，从左到右依次对应数组的0,1,2
             * @example [{"color":"0xFF0000","text":"严重告警"},{"color":"0xFFA500","text":"一般告警"},{"color":"0x00FF00","text":"正常"}]
             * @type Array
             * @default []
             */
            layerLengedInfo: [],


            /**
             * 图层的kqiList
             * @example [{"text":"指标1"},{"text":"指标1"},{"text":"指标1"},{"text":"指标1"}]
             * @type Array
             * @default []
             */
            kqiList: [],
            /**
             * 图层是否添加过滤查询控件
             * @type Boolean
             * @default false
             */
            isFilter: false,
            /**
             * 图层是否已点显示控件
             * @type Boolean
             * @default false
             */
            isCircle: false,
            /**
             * 图层自动切换集合
             * @type Boolean
             * @default false
             */
            dashboardMapLayer: {}
        },
        /**
         * @description 清除地图的当前图层
         */
        clearLayer: function() {
            var me = this;
            if (me.mapObj) {
                me.mapObj.clearLayer();
            }
        },
        /**
         * @description 清除地图的当前图层
         */
        setKqiList: function(data) {
            var me = this;
            if (me.mapObj) {
                me.mapObj.setKqiList(data);
            }
        },
        /**
         * 图层的图例,图例的顺序，从左到右依次对应数组的0,1,2
         * @example [{"color":"0xFF0000","text":"严重告警"},{"color":"0xFFA500","text":"一般告警"},{"color":"0x00FF00","text":"正常"}]
         * @type Array
         * @default []
         */
        setLenged: function(data) {
            var me = this;
            if (me.mapObj) {
                me.mapObj.setLenged(data);
            }
        },
        /**
         * 给地图设置或更新数据(图层更新或指标tips提示信息更新，图层的颜色，小区信息)
         * @param {Object/Array} data 
         */
        setData: function(data) {
            var me = this;
            if ($.isArray(data)) {
                me.options.layerData = $.objClone(data);
            } else {
                for (var key in data) {
                    me.options[key] = JSON.parse(JSON.stringify(data[key]));
                }
            }

            if (me.mapObj) {
                me.mapObj.setLayerId(me.options.layerId);
                if (me.options.layerDefaultColor) {
                    me.mapObj.setLayerDefaultCorlor(me.options.layerDefaultColor);
                }
                me.mapObj.setLayerData(me.options.layerData);
            }
        },
        /**
         * @private
         * @description 设置组件宽度，子类继承实现
         * @param {number} w description
         */
        _setWidth: function(w) {
            this.mapContainerEl.externalWidth(w);
            if (this.mapObj) {
                this.mapObj.setWidth(w);
            }
        },
        /**
         * @private
         * @description 设置组件高度，子类继承实现
         * @param {number} h description
         */
        _setHeight: function(h) {
            this.mapContainerEl.externalHeight(h);
            if (this.mapObj) {
                this.mapObj.setHeight(h);
            }
        },
        /**
         * @private
         * @description 设置组件宽度、高度，子类继承实现
         * @param {number} w description
         * @param {number} h description
         */
        _setWH: function(w, h) {
            this._setWidth(w);
            this._setHeight(h);
        },
        /*
         * @description 获取小区信息
         */
        getCellData: function() {
            return $.objClone(this.options.cellData);
        },
        /*
         * @public
         * @description  生成小区的扇形图
         * @param {Array} data 小区的信息 value:小区id, text:小区提示显示 ,data:小区经纬度，例如：
         * data = [{"value":"01","text":"成功率：96%，通话率：98%，拥塞率：0.00%","data":["x":"112" , "y":"115", "angle":null]}]
         */
        creatPointLayer: function(data) {
            var me = this;
            //调用flex中的添加小区方法
            me.options.cellData = $.objClone(data);
            if (me.mapObj) {
                me.mapObj.addCell(data, "noTest");
            }
        },

        /*
         * @public
         * @description  生成线图
         * @param {Array} data 小区的信息 id:线id, color:线颜色 ,alpha:线透明度，weight：线宽度，points:坐标数组{x:x坐标，y：坐标}例如：
         * data =[{"id":"1","color":"0x2E8B57","alpha":"1","weight":"5","points":[{"x":"39820745.83898479","y":"21406294.299312293"},{"x":"39818157","y":"21408233"}]},{"id":"2","color":"0x2E8B57","points":[{"x":"39900130.60206777","y":"21395739.383323033"},{"x":"39897717.542758045","y":"21394142.77265194"}]}]
         */
        addLine: function(data) {
            var me = this;
            //调用flex中的添加线方法                        
            if (me.mapObj) {
                me.mapObj.addLine(data);
            }
        },

        /*
         * @public
         * @description  刷新线样式
         * @param {Array} {Array} data 小区的信息 id:线id, color:线颜色 ,alpha:线透明度，weight：线宽度，例如：
         * data = [{"id":"1","color":"0x2E8B57","alpha":"1","weight":"5"},{"id":"2","color":"0x2E8B57"}]
         */
        reFreshLine: function(data) {
            var me = this;
            //调用flex中的刷新线方法                        
            if (me.mapObj) {
                me.mapObj.reFreshLine(data);
            }
        },

        /*
         * @public
         * @description  刷新cell样式
         * @param {Array} {Array} data 小区的信息 id:线id, color:线颜色 ,alpha:线透明度，weight：线宽度，例如：
         * data = [{"id":"1","color":"0x2E8B57","alpha":"1","weight":"5"},{"id":"2","color":"0x2E8B57"}]
         */
        reFreshCell: function(data) {
            var me = this;
            //调用flex中的刷新线方法                        
            if (me.mapObj) {
                me.mapObj.reFreshCell(data);
            }
        },


        /**
         * @public
         * @description 移除线图层
         *
         */
        clearLine: function() {
            var me = this;
            //调用flex中的移除小区
            if (me.mapObj) {
                me.mapObj.clearLine();
            }
        },
        /**
         * @public
         * @description 移除点图层
         *
         */
        removePointLayer: function() {
            var me = this;
            //调用flex中的移除小区
            if (me.mapObj) {
                me.mapObj.removePointLayer();
            }
        },

        /**
         * @public
         * @description 业务地图cell区域定位
         * @param {String/Number} layerId 当前图层的recid
         */
        setPosition: function(layerId) {
            var me = this;
            if ($.isNull(layerId)) {
                return;
            }
            if (me.mapObj) {
                me.mapObj.setPosition(layerId);
            }
        },

        /**
         * @public
         * @description 业务地图区域(BSC,RNC,SGSN...)定位
         * @param {String/Number} layerId 当前图层的recid
         */
        setPositionLayer: function(layerId) {
            var me = this;
            if ($.isNull(layerId)) {
                return;
            }
            if (me.mapObj) {
                me.mapObj.setPositionLayer(layerId);
            }
        },



        /**
         * @private
         * @description 组件渲染, 子类继承实现
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.mapContainerEl.appendTo(me.renderEl);
            me.rendered = true;
            me.options.renderTo = id;
            me._createMapWidget();
            return true;
        },
        /**
         * @private
         * @description 创建map组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }

            var me = this,
                opt = me.options;
            me.mapContainerEl = $("<div>").attr("id", opt.id)
                .width(opt.width)
                .height(opt.height)
                .addClass(opt.widgetClass);
            me.mapId = opt.id + "-map";
            me.mapEl = $("<div>").attr("id", me.mapId)
                .width(opt.width)
                .height(opt.height)
                .appendTo(me.mapContainerEl);
        },

        /**
         * @private
         * @description 创建map组件
         */
        _createMapWidget: function() {
            var me = this,
                opt = me.options,
                w = opt.width,
                h = opt.height;
            //此处嵌入地图flex工程
            me.mapObj = new Supermapflex(me, me.mapId, me.mapId, w, h, opt.cellData, opt.layerLengedInfo, opt.kqiList, opt.isCircle, opt.isFilter, opt.dashboardMapLayer);
            if (me.mapObj && me.options.layerId) {
                me.mapObj.setLayerId(me.options.layerId);
                if (me.options.layerDefaultColor) {
                    me.mapObj.setLayerDefaultCorlor(me.options.layerDefaultColor);
                }
                me.mapObj.setLayerData(me.options.layerData);
            }
        },
        /**
         * @private
         * @description 销毁MAP组件
         */
        _destroyWidget: function() {},
        /**
         * @private
         * @description 组件布局刷新基本处理
         */
        _doLayout: function() {
            var me = this,
                w = me.mapContainerEl.width(),
                h = me.mapContainerEl.height();

            me._setWH(w, h);
            //给地图添加border，如果在setWidth,height之前加，计算出来的宽度和高度会小于实际的宽度和高度
            //me.mapContainerEl.addClass(mapContainClass);
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            return this.mapContainerEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            return this.mapContainerEl.externalHeight();
        }
    });

    /**
     * @description 地图
     * @class
     * @extends jquery.sweet.widget
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建地图：
     * var sweetmap = new Sweet.Map({
     *      width : 600,
     *      height : 400,
     *      renderTo : "map-div"
     * });
     */
    Sweet.Map = $.sweet.widgetMap;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 状态块组件
 * 2013/9/22
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

$(function($, undefined) {
    "use strict";
    var tipsDivClass = "sweet-arrayindicator-infoDiv";
    $.widget("sweet.widgetStatuBar", $.sweet.widget, /** @lends Sweet.StatuBar.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-StatuBar]:",
        eventNames: /** @lends Sweet.StatuBar.prototype*/
        {
            /**
             * @event
             * @description 点击事件,只有注册了些事件，鼠标移动到上面时才显示为手型，表示可点击
             * @param {Event} evt 点击事件对象
             * @param {Object} data 当前点击的小方块的对象数据信息
             */
            click: "小方块点击事件"
        },
        type: "StatuBar",
        options: /** @lends Sweet.StatuBar.prototype*/
        {
            /**
             * 状态组件的高度
             * @type number
             * @default 10px
             */
            height: 10,
            /**
             * 状态组件的宽度
             * @type number
             * @default 100%
             */
            width: "100%",
            /**
             * 每一个小状态块的宽度
             * @type number
             * @default 10px
             */
            barWidth: 10,
            /**
             * 每一个小状态块的高度
             * @type number
             * @default 10px
             */
            barHeight: 10,
            /**
             * 画状态块的方向：从左往右/从右往左
             * @type string
             * @default "right"   可选值为: "left","right"
             */
            direction: "right",
            /**
             * 状态行数据信息，结构如下：[{value : "11",text : "aa", color : "#f56161",data:[]},...]
             * @type Array
             * @default []
             */
            data: [],
            /**
             * 鼠标移动到方格中时显示提示信息，提示信息来自data中的text
             * @type boolean
             * @default false
             */
            tip: false,
            /**
             * 状态块前面的文字描述,只支持direction:"left"的情况
             * @type string
             * @default ""
             */
            label: "",
            /**
             * 如果有文字，此值有效，表示文字与状态块之间的间距
             * @type number
             * @default 30
             */
            labelSpaceWidth: 30,
            /**
             * 如果有文字，此值有效，表示文字的一些样式，具体参看其中的值
             * @type object
             * @default {labelWidth : 100,color : "#3c3c3c", font : "12px Tahoma"}
             */
            lableStyle: {
                /**
                 * 如果有文字，此值有效，表示文字的宽度，大于此宽度，出"..."加提示，且要配置tip为true
                 * @type number
                 * @default 100
                 */
                labelWidth: 100,
                /**
                 * 如果有文字，此值有效，表示文字的颜色值，轻易不要修改
                 * @type string
                 * @default "#3c3c3c"
                 */
                color: "#3c3c3c",
                /**
                 * 如果有文字，此值有效，表示文字大小和字体，一般只需要修改大小，不要修改字体
                 * @type string
                 * @default "12px Tahoma"
                 */
                font: "12px Tahoma"
            },
            /**
             * 状态块中是否有半透明遮罩
             * @type boolean
             * @default false
             */
            isShadow: false,
            /**
             * 半透明遮罩的起始位置信息和宽度信息
             * @type object
             * @default null
             */
            shadowPosInfo: null,
            /**
             * 用户自己定义的数据，在发生点击事件时带给用户
             * @type object
             * @default null
             */
            userData: null
        },
        /**
         * @public
         * @description 更新或设置状态块的状态，必须为array,红:"#f56161",黄:"#f1b32c",绿:"#57aa4f"
         * @param {Array} data 状态块的数据，值应为Array: [{value : "11",text : "aa", color : "#f56161",data:[]},...]
         * @param {String} label 可选项，如果有label或者需要更新或者重新设置label，请配置此值
         */
        setData: function(data, label) {
            var me = this,
                options = me.options;
            //防止提示不消失的情况
            if (!$.isNull(me.tipDiv)) {
                me.tipDiv.remove();
            }
            if ($.isNull(data) || !$.isArray(data)) {
                return;
            }
            options.data.length = 0;
            options.data = $.objClone(data);
            options.label = label;
            /** 清空状态块信息，重绘时再添加*/
            me.nodeInfo.length = 0;
            me.preInfo = null;
            me._drawStatuBar();
        },
        /**
         * @public
         * @description 用户自己定义的数据，在发生点击事件时带给用户
         * @param {Object} data 
         */
        setUserData: function(data) {
            this.options.userData = data ? $.objClone(data) : data;
        },
        /**
         * @public
         * @description 滑动块移动时设置更新状态块的位置
         * @param {Object} pos 状态块的位置信息,例如： {left:200, top: 10}
         */
        setPosition: function(pos) {
            var me = this;

            if (!$.isNull(pos)) {
                if (!$.isNull(pos.left)) {
                    me.canvasEl.css("left", pos.left + "px");
                }

                if (!$.isNull(pos.top)) {
                    me.canvasEl.css("top", pos.top + "px");
                }
            }
        },
        /**
         * @private
         * @description 子类继承实现, 绘制组件
         */
        _createSweetWidget: function() {
            var me = this,
                space = 10,
                options = me.options,
                sbarId = options.id + "-canvas";
            /** 宽度减去10px，主要是为了适应将此组件放在grid中时，grid的单元格设置有padding为5px*/
            options.width = options.width - space;
            /** 此变量存储每一个小方块的坐标信息，高度和宽度，方便小方块的点击事件时使用*/
            me.nodeInfo = [];
            /** 为小方块绑定事件的集合*/
            me.eventMap = {};
            if (options.height - options.barHeight < space) {
                options.height = options.barHeight + space;
            }
            me.sbarEl = $("<div>").attr({
                id: options.id
            })
                .height(options.height).width(options.width)
                .css("overflow", "hidden").css("position", "relative");
            /** 定义canvas对象*/
            me.canvasEl = $("<Canvas>")
                .attr({
                id: sbarId,
                height: options.height,
                width: options.width
            })
                .appendTo(me.sbarEl);
            /** 取得context对象*/
            me.c = me.canvasEl.get(0).getContext('2d');
            /** 为画布绑定事件*/
            me._bindEvent();
            /** 画相应的状态块*/
            me._drawStatuBar();
        },
        /**
         * @private
         * @param {Event} evt 事件对象
         * @param {Array} nodes 所有实线上的文字坐标等记录的集合
         * @returns {object} 返回鼠标是否在指定的node范围内
         */
        _isScope: function(evt, nodes) {
            var me = this,
                cx = 0,
                cy = 0,
                temp, i = 0;
            if ($.isFirefox()) {
                cx = evt.pageX - me.canvasEl.offset().left;
                cy = evt.pageY - me.canvasEl.offset().top;
            } else if ($.isChrome() || $.isIE()) {
                cx = evt.offsetX;
                cy = evt.offsetY;
            }
            //根据鼠标当前坐标是否在其相应的坐标范围内
            for (i = 0; i < nodes.length; i++) {
                temp = nodes[i];
                if (cx >= temp.left && cx <= temp.left + temp.width && cy >= temp.top && cy <= temp.top + temp.height) {
                    return {
                        isScope: true,
                        node: temp
                    };
                }
            }
            return false;
        },
        _onClick: function(e) {
            var me = e.data.me;
            //说明在范围内，调用用户注册的click事件,同时需要改变字体样式
            if ($.isFunction(me.eventMap.click)) {
                //根据文字的坐标范围找到相应点击的文字信息
                var info = me._isScope(e, me.nodeInfo);
                if (info && info.isScope && info.node.clickable) {
                    //说明在范围内，调用用户注册的click事件,同时需要改变字体样式
                    var d = info.node.node;
                    if (me.options.isShadow) {
                        d = {
                            userData: me.options.userData,
                            data: me.options.data,
                            curNode: info.node.node
                        };
                    }
                    me.eventMap.click(e, d);
                }
            }
        },
        _onMousemove: function(e) {
            var me = e.data.me,
                tip = me.options.tip;
            var info = me._isScope(e, me.nodeInfo);
            me._removeTipDiv();
            if (info && info.isScope) {
                //说明在范围内且注册了点击事件，改变鼠标样式为手形
                if ($.isFunction(me.eventMap.click) && info.node.clickable) {
                    me.canvasEl.css("cursor", "pointer");
                }
                //如果有text信息且配置需要显示提示信息时，显示提示信息
                if (tip && info.node && info.node.node && !$.isNull(info.node.node.text)) {
                    var maxzindex = $.getMaxZIndex(undefined, tipsDivClass);
                    me.tipDiv = $("<div>").addClass(tipsDivClass).css("z-index", maxzindex).appendTo("body");
                    $("<span>").html(info.node.node.text).appendTo(me.tipDiv);
                    me.tipDiv.position({
                        my: "left+5 bottom-10",
                        of: e,
                        collision: "flipfit"
                    });
                }
            } else {
                me._removeTipDiv();
                me.canvasEl.css("cursor", "default");
            }
        },
        _onMouseout: function(e) {
            var me = e.data.me;
            me._removeTipDiv();
        },
        _bindEvent: function() {
            var me = this;
            //绑定点击事件
            me.canvasEl.bind("click", {
                "me": me
            }, me._onClick)
            //绑定mousemove事件，改变鼠标移动上去的样式为手形,同时显示网元和线上文字的tips提示
            .bind("mousemove", {
                "me": me
            }, me._onMousemove)
                .bind("mouseout", {
                "me": me
            }, me._onMouseout);
        },
        _removeTipDiv: function() {
            var me = this;
            if (!$.isNull(me.tipDiv)) {
                me.tipDiv.remove();
                me.tipDiv = null;
            }
        },
        _closeFloatPanel: function() {
            this._removeTipDiv();
        },
        /**
         * @private
         * @description 如果最大宽度存在且文字实际宽度大于最大宽度，返回最大宽度，否则返回实际宽度
         * @param {string} label   文字
         * @param {number} maxWidth   限制的最大宽度
         * @returns {Number} 返回文字的宽度
         */
        _calcLabelWidth: function(label, maxWidth) {
            var me = this,
                c = me.c,
                temp;
            c.save();
            c.textAlign = "start";
            c.fillStyle = me.options.lableStyle.color;
            c.font = me.options.lableStyle.font;
            temp = c.measureText(label).width;
            c.restore();
            //如果最大宽度存在且文字实际宽度大于最大宽度，返回最大宽度
            if ($.isNotNull(maxWidth) && temp > maxWidth) {
                temp = maxWidth;
            }
            return temp;
        },
        /**
         * @private
         * @description 根据数据画相应的状态块
         */
        _drawStatuBar: function() {
            var me = this,
                options = me.options,
                dir = options.direction,
                c = me.c,
                len = options.data.length,
                sbel = me.sbarEl,
                cw = sbel.width(),
                ch = sbel.height(),
                w = options.barWidth,
                h = options.barHeight,
                space = w + 1,
                i = 0,
                x = 0,
                y = (ch - h) / 2,
                lw = 0,
                padding = 5,
                hp = h / 2,
                labelW = 0,
                temp;
            /** 重新设置canvas的宽度和高度, 同时清除画布上的内容*/
            //如果有文字，先计算文字长度
            if ($.isNotNull(options.label)) {
                labelW = padding + options.lableStyle.labelWidth;
                lw = labelW + options.labelSpaceWidth;
            }
            me.cw = cw = len * space + lw;
            me.canvasEl.attr({
                height: ch,
                width: cw
            });
            //如果有文字，先画文字
            if ($.isNotNull(options.label)) {
                me._createText(options.label, x + padding, y + hp, {
                    maxTextWidth: options.lableStyle.labelWidth
                });
                me.nodeInfo.push({
                    node: {
                        value: options.label,
                        text: options.label
                    },
                    left: x + padding,
                    top: y,
                    width: labelW,
                    height: h,
                    clickable: false
                });
                x = x + lw;
            }
            if (dir === "right") {
                me.canvasEl.css("position", "relative");
                me.canvasEl.css("left", -me.canvasEl.attr("width") + me.sbarEl.width() + "px");
                space = -space;
                x = cw + space;
            }
            for (i = 0; i < len; i++) {
                temp = options.data[i];
                /*** 颜色值用户自己指定*/
                c.fillStyle = temp.color;
                c.fillRect(x, y, w, h);
                /** 保留相关信息，在小方块点击事件时需要使用*/
                me.nodeInfo.push({
                    node: temp,
                    left: x,
                    top: y,
                    width: w,
                    height: h,
                    clickable: true
                });
                /** 准备下一个方块的坐标值*/
                x += space;
            }
            /** 只有设置需要半透明遮罩时才画半透明遮罩 */
            if (options.isShadow) {
                me.drawShadow({
                    /** 半透明遮罩的宽度 */
                    width: options.shadowPosInfo ? options.shadowPosInfo.width : space * 8,
                    /** 半透明遮罩的起始位置 */
                    left: options.shadowPosInfo ? options.shadowPosInfo.left : 0
                });
            }
        },
        /**
         * @description 每次点击slider的时间范围时，进行半透明遮罩范围的切换
         * @param {object} info 设置半透明遮罩的起始位置(x轴的值)和宽度:{left : 324, width: 88},宽度默认为88px
         */
        drawShadow: function(info) {
            var me = this,
                w = info.width ? info.width : 88,
                ch = me.sbarEl.height(),
                x = me.cw - Math.abs(info.left ? info.left : 0) - w,
                c = me.c;
            me.options.shadowPosInfo = info;
            if (me.preInfo && me.preInfo.imgData) {
                c.putImageData(me.preInfo.imgData, me.preInfo.x, me.preInfo.y);
                delete me.preInfo;
            }
            //记录当前半透明遮罩的imageData和位置信息
            me.preInfo = {
                imgData: c.getImageData(x, 0, w, ch),
                x: x,
                y: 0,
                width: w,
                height: ch
            };
            c.fillStyle = "black";
            c.globalAlpha = 0.2;
            c.fillRect(x, 0, w, ch);
        },
        _createText: function(text, x, y, attr) {
            var me = this,
                textWidth = 0,
                tempText = text,
                tempLen = 0,
                c = me.c;
            attr = attr || {};
            c.save();
            c.textAlign = attr.textAlign ? attr.textAlign : "start";
            c.fillStyle = me.options.lableStyle.color;
            c.font = me.options.lableStyle.font;
            c.textBaseline = attr.textBaseline ? attr.textBaseline : "middle";
            c.translate(x, y);
            if ($.isNull(attr.maxTextWidth)) {
                c.fillText(tempText, 0, 0);
            } else {
                textWidth = c.measureText(text).width;
                if (textWidth > attr.maxTextWidth) {
                    tempLen = Math.ceil(text.length * attr.maxTextWidth / textWidth);
                    tempText = String(text).substr(0, tempLen - 4) + "...";
                }
                c.fillText(tempText, 0, 0, attr.maxTextWidth);
            }
            c.restore();
            return textWidth;
        },
        /**
         * @private
         * @description layout时进行重新绘制
         */
        _doLayout: function() {
            var me = this;
            me._drawStatuBar();
        },
        /**
         * @private
         * @description 返回图组件最外层jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        _getWidgetEl: function(original) {
            this.renderEl = this.sbarEl;
            return original ? this.sbarEl[0] : this.sbarEl;
        },
        /**
         * @private
         * @description 注册小方块的点击事件
         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    me.eventMap.click = func;
                }
            });
        },
        /**
         * @private
         * @description 删除小方块的点击事件
         */
        _removeListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (eventName === "click") {
                    delete me.eventMap.click;
                }
            });
        },
        _destroyWidget: function() {
            var me = this;
            if (me.canvasEl) {
                me.canvasEl.unbind();
            }
            me._removeTipDiv();
        },
        /**
         * @private
         * @description 组件渲染
         * @param {string} id 渲染到相应容器的id
         */
        _render: function(id) {
            var me = this;
            if ($.isNull(id) || me.rendered) {
                return;
            }

            if (!me.renderEl) {
                me._createRenderEl(id);
            }
            me.sbarEl.appendTo(me.renderEl);
            me.options.renderTo = id;
            me.rendered = true;
        }
    });
    /**
     * @description 以行显示状态块
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.widget
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建滑动块组件：
     * var sBar = Sweet.StatuBar({
     * });
     */
    Sweet.StatuBar = $.sweet.widgetStatuBar;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 记分卡组件
 * 2013/9/13
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var unitClass = "sweet-scoreCard-unit",
        offsetClass = "sweet-scoreCard-offset",
        diffClass = "sweet-scoreCard-diff",
        textORClass = "sweet-scoreCard-textOR",
        textTRClass = "sweet-scoreCard-textTR",
        cardClass = "sweet-scoreCard-card",
        cardClassClick = "sweet-scoreCard-card-click",
        numClass = "sweet-scoreCard-num",
        valueClass = "sweet-scoreCard-value",
        iconClass = "sweet-scoreCard-icon",
        iconClass2 = "sweet-scoreCard-icon2",
        noValueClass = "sweet-scoreCard-noValue",
        noValueClass2 = "sweet-scoreCard-noValue2",
        colorObj = {},
        iconTypeObj = {};
    colorObj[Sweet.constants.numColor.YELLOW] = "sweet-scoreCard-yellow";
    colorObj[Sweet.constants.numColor.GREEN] = "sweet-scoreCard-green";
    colorObj[Sweet.constants.numColor.RED] = "sweet-scoreCard-red";
    iconTypeObj[Sweet.constants.differType.EQUAL] = "sweet-scoreCard-equal";
    iconTypeObj[Sweet.constants.differType.INCREASE] = "sweet-scoreCard-increase";
    iconTypeObj[Sweet.constants.differType.DECREASE] = "sweet-scoreCard-decrease";
    $.widget("sweet.widgetScoreCard", $.sweet.widget, /**lends Sweet.ScoreCard.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-ScoreCard]",
        eventNames: /** @lends Sweet.form.ComboBox.prototype*/
        {
            /**
             * @event
             * @description 值改变的事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            click: "点击事件"
        },
        options: /** @lends Sweet.ScoreCard.prototype*/
        {
            /**
             * 文字描述的位置，可选值为: "down","up", 默认为"down"
             * @type String
             * @default "down"
             */
            textPosition: "down",
            /**
             * 记分卡显示的值和指标名称
             * @type {Object}
             * @default {value:"", text:"",data:{unit:""},options:{color:"",trend:"",offset:"",microLine:[]}}
             */
            value: {
                /**
                 * 记分卡值
                 * @type string
                 * @default undefined
                 */
                value: undefined,
                /**
                 * 记分卡显示的指标名称
                 * @type string
                 * @default ""
                 */
                text: "",
                /**
                 * 业务相关信息，其中unit代表单位
                 * @type {Object}
                 * @default {unit:""}
                 */
                data: {
                    unit: ""
                },
                options: {
                    /**
                     * 记分卡值的颜色，没有配置默认为绿色,可选值：green/red/yellow
                     * @type string
                     * @default ""
                     */
                    color: "",
                    /**
                     * 走向值，在图上使用三角表示，可选值：equal/increase/decrease
                     * @type string
                     * @default ""
                     */
                    trend: "",
                    /**
                     * 相对于上周期的增值,例如"+1,234"、"-234"
                     * @type string
                     * @default undefined
                     */
                    offset: undefined
                }
            }
        },
        /**
         * @private
         * @description 设置记分卡显示的值和指标名称等
         * @param {Object} value 记分卡显示的值和指标名称
         */
        _setValue: function(value) {
            if ($.isNull(value)) {
                return;
            }
            var me = this;
            me.options.value = JSON.parse(JSON.stringify(value));
            me._clearWidget();
            me._createScoreCard();
            me._doLayout();
        },
        /**
         * 获取组件值
         * @private
         * @return {Object} 组件值
         */
        _getValue: function() {
            var me = this,
                options = me.options;

            return options.value;
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            if (!id || this.rendered) {
                return;
            }
            if (!this.renderEl) {
                // 创建宿主元素               
                this._createRenderEl(id);
            }
            this.cardEl.appendTo(this.renderEl);
            this.rendered = true;
        },
        /**
         * @private
         * @description 实现widget接口
         */
        _createSweetWidget: function() {
            var me = this,
                options = me.options,
                width = options.width;
            me.cardEl = $("<div>").addClass(cardClass)
                .addClass(options.widgetClass)
                .attr("id", me.options.id)
                .css("width", width);
            //创建记分卡组件
            me._createScoreCard();
        },
        /**
         * @private
         * @description 创建记分卡组件
         */
        _createScoreCard: function() {
            var me = this,
                options = me.options.value,
                option = options.options,
                value = options.value,
                txtPos = me.options.textPosition,
                data = options.data;
            //添加名称部分
            if (txtPos === "up" && $.isNotNull(options.text)) {
                me.titleEl = $("<div>").appendTo(me.cardEl)
                    .text(options.text)
                    .attr("title", options.text)
                    .addClass(textORClass);
            }
            //添加值部分
            if (!$.isUndefined(value)) {
                me._addValueEl();
                me.numEl = $("<span>").appendTo(me.valueEl);
                if (value !== "") {
                    me.numEl.text(value).addClass(numClass);
                    if ($.isNotNull(option) && $.isNotNull(option.color)) {
                        me.numEl.addClass(colorObj[option.color]);
                    } else {
                        me.numEl.addClass(colorObj[Sweet.constants.numColor.GREEN]);
                    }
                    //value为空，显示"--"
                } else {
                    me.numEl.text(Sweet.constants.scoreCard.NO_VALUE).addClass(noValueClass);
                }
            }
            //添加单位部分
            if ($.isNotNull(data)) {
                if ($.isNotNull(data.unit)) {
                    me._addValueEl();
                    me.unitEl = $("<span>").appendTo(me.valueEl)
                        .text(data.unit)
                        .addClass(unitClass);
                }
            }
            if ($.isNotNull(option)) {
                //添加折线图部分
                //添加增值部分
                if (typeof(option.offset) !== 'undefined') {
                    me._addOffsetEl();
                    me.diffNumEl = $("<span>").appendTo(me.offsetEl);
                    if (option.offset !== "") {
                        me.diffNumEl.text(option.offset)
                            .addClass(offsetClass);
                        //若offset为空，则显示"--"
                    } else {
                        me.diffNumEl.text(Sweet.constants.scoreCard.NO_VALUE)
                            .addClass(noValueClass2);
                    }
                }
                //添加图标部分
                if ($.isNotNull(option.trend)) {
                    me._addOffsetEl();
                    me.iconEl = $("<span>").appendTo(me.offsetEl)
                        .addClass(iconTypeObj[option.trend]);
                    if (typeof(option.offset) !== 'undefined') {
                        me.iconEl.addClass(iconClass);
                    } else {
                        me.iconEl.addClass(iconClass2);
                    }
                }
            }

            //添加名称部分
            if (txtPos === "down" && $.isNotNull(options.text)) {
                me.titleEl = $("<div>").appendTo(me.cardEl)
                    .text(options.text)
                    .attr("title", options.text)
                    .addClass(textORClass);
            }
        },
        //组件重绘
        _doLayout: function() {
            var me = this,
                options = me.options,
                valueW = 0,
                cardH = 0,
                valueH = 0,
                offsetH = 0,
                titleH2 = 0,
                numW = 0,
                unitW = 0,
                textH = 0,
                titleT = 0,
                titleW = 0,
                titleL = 0,
                subLength = 0,
                titleH = 0,
                numW2 = 0,
                numT = 0,
                numL = 0,
                subLen = 0,
                numText = "",
                titleText = 0;
            if (me.valueEl) {
                valueW = me.valueEl.width();
            }
            if ($.isNotNull(options.value.value)) {
                numW = me.numEl.width();
            }
            if ($.isNotNull(options.value.data) && $.isNotNull(options.value.data.unit)) {
                unitW = me.unitEl.width();
            }
            //单行溢出文本显示省略号"..."
            if (valueW < numW + unitW) {
                numW2 = valueW - unitW;
                numT = me.numEl.text();
                numL = numT.length;
                subLen = Math.floor((numL * numW2) / numW - Sweet.constants.scoreCard.CHAR_NUM);
                numText = numT.substr(0, subLen) + "...";
                me.numEl.attr("title", numT)
                    .text(numText);
            }
            if ($.isNotNull(options.value.text)) {
                //一行文字的高度
                textH = me.titleEl.height();
                titleT = me.titleEl.text();
                titleW = me.titleEl.width();
            }
            titleL = titleT.length;
            //粗略估计两行文本能容纳的字符数
            subLength = (Sweet.constants.scoreCard.ROW * me.cardEl.width() * titleL) / titleW;
            //使文本自动换行
            if ($.isNotNull(options.value.text)) {
                me.titleEl.addClass(textTRClass);
                titleH = me.titleEl.height();
            }
            //最多显示两行，超出两行显示省略号"..."
            if (titleH > Sweet.constants.scoreCard.ROW * textH) {
                titleText = titleT.substr(0, subLength - 10) + "...";
                if ($.isNotNull(options.value.text)) {
                    me.titleEl.text(titleText)
                        .attr("title", titleT);
                    titleH = me.titleEl.height();
                }
            }
            //绘制折线图
            //动态设定组件高度
            if ($.isNotNull(options.value.text)) {
                titleH2 = me.titleEl.outerHeight();
            }
            if (me.offsetEl) {
                offsetH = me.offsetEl.outerHeight();
            }
            if (me.valueEl) {
                valueH = me.valueEl.outerHeight();
            }
            cardH = titleH2 + offsetH + valueH;
            me.cardEl.css("height", cardH);
        },
        /**
         * @private
         * @description 添加第一行DIV
         */
        _addValueEl: function() {
            var me = this;
            if (!me.valueEl) {
                me.valueEl = $("<div>").appendTo(me.cardEl)
                    .addClass(valueClass);
            }
        },
        /**
         * @private
         * @description 添加第二行DIV
         */
        _addOffsetEl: function() {
            var me = this;
            if (!me.offsetEl) {
                me.offsetEl = $("<div>").appendTo(me.cardEl)
                    .addClass(diffClass);
            }
        },
        /**
         * @private
         * @description 清空組件
         */
        _clearWidget: function() {
            var me = this;
            me.cardEl.empty();
            me.valueEl = null;
            me.offsetEl = null;
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.cardEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.cardEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.cardEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.cardEl.externalHeight(height);
        },

        /**
         * @private
         * @description 触发注册事件
         * @param {Object} e 事件对象
         * @param {String} eName 事件名称
         * @param {Object} data 数据
         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) {
                // 回调注册事件
                if (eName === handlerName) {
                    me._info(eName + " event occured!");
                    result = func.call(null, e, data);
                }
            });

            return result;
        },

        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                options = me.options;

            me.cardEl.bind("click", function() {
                me._triggerHandler(null, "click", me.getValue());
            });
        }
    });

    /**
     * 记分卡
     * @name Sweet.ScoreCard
     * @class 
     * @extends Sweet.widget
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sparkline.js
     * </pre>
     * @example 
     * <pre>
     * sweetScoreCard = new Sweet.ScoreCard({
     *     value:{
     *         value:"5335",
     *         text:"Page Response Delay",
     *         data:{unit:"ms"},
     *         options:{
     *             color:"red",
     *             trend:"increase",
     *             offset:"+1,234",
     *             microLine:[23,4,54,3,32]
     *         }
     *     }
     * });
     * </pre>
     */
    Sweet.ScoreCard = $.sweet.widgetScoreCard;
}(jQuery));

;
/**
 * @fileOverview
 * <pre>
 * 分数卡组件
 * 2013/9/13
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var cardMainPanelClass = "sweet-numcard-panel",
        cardBodyClass = "sweet-numcard-body",
        cardLabelPanelClass = "sweet-numcard-label-panel",
        cardLabelTextClass = "sweet-numcard-label-text",
        cardBodyActiveClass = "sweet-numcard-body-active",
        numBodyClass = "sweet-numcard-num-body",
        numPanelClass = "sweet-numcard-num-panel",
        numItemClass = "sweet-numcard-num-item",
        cardTitleClass = "sweet-numcard-title",
        cardTitleDataClass = "sweet-numcard-titledata",
        eventClick = "click",
        KEY_VALUE = "value",
        KEY_TEXT = "text",
        KEY_TITLEDATA = "titleData",
        KEY_COLOR = "color",
        KEY_TIP = "tip",
        KEY_TEXTALIGN = "textAlign",
        KEY_LABEL = "label",
        KEY_ISLABELTIP = "isLabelTip",
        KEY_ISLABESYMBOL = "isLabelSymbol",
        KEY_LABELWIDTH = "labelWidth",
        SYMBOLTEXT = ":",
        //考虑到渐变色,其每个color值为一数组,若无渐变色则这个数组给一个值
        NUM_COLOR = {
            "0": ["#f17268", "#ec3b2d"],
            "1": ["#51bd51", "#0ca20c"],
            "2": ["#F5F32B", "#F6DC04"]
        },
        //无数据时给的一个默认数据
        NUM_VALUE = {
            value: [
                [{
                    value: "",
                    color: "0"
                }, {
                    value: "",
                    color: "1"
                }],
                [{
                    value: "",
                    color: "0"
                }, {
                    value: "",
                    color: "1"
                }]
            ],
            text: "",
            textAlign: "top",
            label: "",
            isLabelTip: false,
            isLabelSymbol: false,
            labelWidth: 0
        },
        STYLE = {
            //label宽
            labelWidth: 80,
            //显示块间的间距
            itemMargin: 5,
            //第一个显示块距外层左侧的间距
            paddingLeft: 10
        };
    $.widget("sweet.widgetNumCard", $.sweet.widget, /**lends Sweet.NumCard.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-NumCard]",
        eventNames: /** @lends Sweet.NumCard.prototype*/
        {
            /**
             * @event
             * @description 单击时事件,一般两个参数(evt, data)
             */
            click: "单击事件"
        },
        options: /** @lends Sweet.NumCard.prototype*/
        {
            /**
             * 宽度
             * @type {Number}
             * @default 205
             */
            width: 262,
            /**
             * 高度
             * @type {Number}
             * @default 252
             */
            height: 105,
            /**
             * 分数卡显示的值和指标名称
             * @type {Object}
             * @default {text: "", value: [{value: "", color: "0"}, {value: "", color: "1"}], tip: null}
             */
            data: {
                /**
                 * 分数卡值
                 * @type Array
                 * @default []
                 */
                value: [{
                    value: "",
                    color: "0"
                }, {
                    value: "",
                    color: "1"
                }],
                /**
                 * 分数卡显示的指标名称
                 * @type String
                 * @default ""
                 */
                text: "",
                /**
                 * 分数卡TIP提示信息
                 * @type String
                 * @default null
                 */
                tip: null,
                /**
                 * 指标名称的位置,默认显示在上方
                 * @type String
                 * @default "top"
                 */
                textAlign: "top",
                /**
                 * 指标名称前的label提示
                 * @type Array
                 * @default []
                 */
                label: [],
                /**
                 * label提示的宽
                 * @type Number
                 * @default 80
                 */
                labelWidth: STYLE.labelWidth,
                /**
                 * label是否有提示
                 * @type Boolean
                 * @default false
                 */
                isLabelTip: false,
                /**
                 * label文本后是否有":"
                 * @type Boolean
                 * @default false
                 */
                isLabelSymbol: false
            },
            /**
             * 分数卡颜色
             * @type {Object}
             * @default {"0": ["#f17268", "#ec3b2d"], "1": ["#51bd51", "#0ca20c"], "2": ["#FFCC00", "#FFA500"]}
             */
            color: NUM_COLOR
        },
        /**
         * @description 更新分数卡数据信息
         * @param {Array} data 组件对应的数据，格式和配置数据一样
         */
        setData: function(data) {
            var me = this;
            me.options.data = data;
            me._createNumCard(data);
            me._doLayout();
        },
        /**
         * @description 设置分数卡值,和更新时数据格式一样
         * @param {Array} value 组件对应的数据，格式和配置数据一样
         */
        setValue: function(value) {
            var me = this;
            me.setData(value);
        },
        /**
         * @private
         * @description 获取组件值
         * @return {Object} 组件值
         */
        getValue: function() {
            var me = this;
            return $.objClone(me.options.data);
        },
        /**
         * @private
         * @description 获取组件数据
         * @return {Object} 组件数据
         */
        getData: function() {
            var me = this;
            return $.objClone(me.options.data);
        },
        /**
         * @private
         * @description 激活或去掉激活
         * @param {Boolean} isActive 是否激活
         */
        active: function(isActive) {
            var me = this;
            isActive = (true == isActive || "true" == isActive) ? true : false;
            if (!me.numCardEl) {
                return;
            }
            if (isActive) {
                me.numCardEl.addClass(cardBodyActiveClass);
                me._triggerHandler(null, eventClick, {
                    "me": me,
                    data: me.getValue()
                });
            } else {
                me.numCardEl.removeClass(cardBodyActiveClass);
            }
        },
        /**
         * @private
         * @description 获取当前状态,是否是激活
         * @returns {Boolean} active 是否激活
         */
        isActive: function() {
            var me = this;
            if (!me.numCardEl) {
                return false;
            }
            return me.numCardEl.hasClass(cardBodyActiveClass);
        },
        /**
         * @private
         * @description 设置数据显示块颜色
         * @param {Object} color 颜色值
         */
        setColor: function(color) {
            var me = this;
            if (!color) {
                color = {};
            }
            me.options.color = color;
            me.setData(me.options.data);
        },
        /**
         * @private
         * @description 获取组件宽度
         * @returns {Number/String} width 组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.options.width;
        },
        /**
         * @private
         * @description 获取组件高度
         * @returns {Number/String} height 组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.options.height;
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.options.width = width;
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.options.height = height;
        },
        /**
         * @private
         * @description 设置宽度、高度
         * @param {String/Number} width 宽度
         * @param {String/Number} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me.options.width = width;
            me.options.height = height;
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.numCardPanelEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 实现widget接口
         */
        _createSweetWidget: function() {
            var me = this;
            //创建分数卡组件
            me._createNumCard(me.options.data);
        },
        /**
         * @private
         * @description 数据校验
         * @param {Object} data 数据信息
         * @returns {Array} data 校验后的数据信息
         */
        _initData: function(data) {
            var me = this,
                resultData;
            resultData = $.objClone(data);
            //数据校验
            if (!resultData) {
                resultData = NUM_VALUE;
                return resultData;
            }
            if (!resultData[KEY_TEXT]) {
                resultData[KEY_TEXT] = "";
            }
            if (!resultData[KEY_VALUE] || resultData[KEY_VALUE].length <= 0) {
                resultData[KEY_VALUE] = NUM_VALUE[KEY_VALUE];
            }
            if (!resultData[KEY_LABEL]) {
                resultData[KEY_LABEL] = [];
            }
            if (resultData[KEY_TEXTALIGN] && "BOTTOM" == resultData[KEY_TEXTALIGN].toUpperCase()) {
                resultData[KEY_TEXTALIGN] = "bottom";
            } else {
                resultData[KEY_TEXTALIGN] = "top";
            }
            if (resultData[KEY_ISLABELTIP] && (true == resultData[KEY_ISLABELTIP] || "true" == resultData[KEY_ISLABELTIP])) {
                resultData[KEY_ISLABELTIP] = true;
            } else {
                resultData[KEY_ISLABELTIP] = false;
            }
            if (resultData[KEY_ISLABESYMBOL] && (true == resultData[KEY_ISLABESYMBOL] || "true" == resultData[KEY_ISLABESYMBOL])) {
                resultData[KEY_ISLABESYMBOL] = true;
            } else {
                resultData[KEY_ISLABESYMBOL] = false;
            }
            resultData[KEY_LABELWIDTH] = parseInt(resultData[KEY_LABELWIDTH]);
            if (isNaN(resultData[KEY_LABELWIDTH])) {
                resultData[KEY_LABELWIDTH] = STYLE.labelWidth;
            }
            return resultData;
        },
        /**
         * @private
         * @description 创建分数卡组件
         * @param {Object} data 组件信息
         */
        _createNumCard: function(data) {
            var me = this,
                tempData,
                tempLabelTextEl;
            me.labelTextEls = [];
            me.itemEls = [];
            if (me.numCardPanelEl) {
                me.numCardPanelEl.remove();
            }
            me.data = tempData = me._initData(data);
            //主DIV
            me.numCardPanelEl = $("<div>").attr("id", me.options.id).addClass(cardMainPanelClass);
            if (me.options.widgetClass && "" != me.options.widgetClass) {
                me.numCardPanelEl.addClass(me.options.widgetClass);
            }
            //如果配置了label则创建
            me.numLabelEl = $("<div>").addClass(cardLabelPanelClass).appendTo(me.numCardPanelEl);
            if (tempData[KEY_LABEL] && tempData[KEY_LABEL].length > 0) {
                for (var i = 0; i < tempData[KEY_LABEL].length; i++) {
                    tempLabelTextEl = $("<span>").addClass(cardLabelTextClass).addClass(cardLabelTextClass + "-00" + (i + 1)).appendTo(me.numLabelEl);
                    if (tempData[KEY_ISLABESYMBOL]) {
                        tempLabelTextEl.text(tempData[KEY_LABEL][i] + SYMBOLTEXT);
                    } else {
                        tempLabelTextEl.text(tempData[KEY_LABEL][i]);
                    }
                    if (tempData[KEY_ISLABELTIP]) {
                        tempLabelTextEl.attr("title", (tempData[KEY_LABEL][i] ? tempData[KEY_LABEL][i] : ""));
                    }
                    me.labelTextEls.push(tempLabelTextEl);
                }
            }
            //最外层容器DIV
            me.numCardEl = $("<div>").addClass(cardBodyClass)
                .bind(eventClick, {
                "me": me,
                data: me.getValue()
            }, me._onClick)
                .appendTo(me.numCardPanelEl);
            if (tempData[KEY_TIP]) {
                me.numCardEl.attr("title", tempData[KEY_TIP]);
            }
            //label
            me.numTitlelEl = $("<div>").text(tempData[KEY_TEXT]).addClass(cardTitleClass);
            //数据显示容器DIV
            me.numBodyEl = $("<div>").addClass(numBodyClass);
            if ("bottom" == tempData[KEY_TEXTALIGN]) {
                me.numBodyEl.appendTo(me.numCardEl);
                if (!(typeof tempData[KEY_TITLEDATA] === "undefined")) {
                    me.numTitleDataEl = $("<div>").text(tempData[KEY_TITLEDATA]).addClass(cardTitleDataClass);
                    me.numTitleDataEl.appendTo(me.numCardEl);
                }
                me.numTitlelEl.appendTo(me.numCardEl);
            } else {
                me.numTitlelEl.appendTo(me.numCardEl);
                if (!(typeof tempData[KEY_TITLEDATA] === "undefined")) {
                    me.numTitleDataEl = $("<div>").text(tempData[KEY_TITLEDATA]).addClass(cardTitleDataClass);
                    me.numTitleDataEl.appendTo(me.numCardEl);
                }
                me.numBodyEl.appendTo(me.numCardEl);
            }

            //数值显示块EL集合
            for (var i = 0; i < tempData[KEY_VALUE].length; i++) {
                me.itemEls.push(me._createItemEls(tempData[KEY_VALUE][i]));
            }
            if (me.rendered) {
                me.numCardPanelEl.appendTo(me.renderEl);
            }
        },
        /**
         * @private
         * @description 单击事件
         * @param {Object} e 事件对象
         */
        _onClick: function(e) {
            var me = e.data.me;
            me.active(true);
        },
        /**
         * @private
         * @description 创建分数卡值显示部分
         * @param {Object} datas 组件信息
         * @returns {Array} itemEls 显示部分EL的集合
         */
        _createItemEls: function(datas) {
            var me = this,
                itemValue,
                itemColorKey,
                color = me.options.color,
                sColor,
                eColor,
                tempColor,
                itemTip,
                tempItemEls,
                itemEls = [],
                numPanel;
            if (!color) {
                color = NUM_COLOR;
            }
            numPanel = $("<div>").addClass(numPanelClass).appendTo(me.numBodyEl);
            for (var i = 0; i < datas.length; i++) {
                itemValue = ("" + datas[i][KEY_VALUE]) || "";
                itemColorKey = datas[i][KEY_COLOR] || ("" + i);
                itemTip = datas[i][KEY_TIP] || itemValue;
                tempItemEls = $("<div>").addClass(numItemClass)
                    .text(itemValue)
                    .attr("title", itemTip);
                tempColor = color[itemColorKey];
                //如果有颜色则设置渐变颜色
                if (tempColor && tempColor.length > 0) {
                    //如果只有一种则用这一种
                    sColor = tempColor[0];
                    if (tempColor[1]) {
                        eColor = tempColor[1];
                    } else {
                        eColor = sColor;
                    }
                    tempItemEls.css({
                        "background": "-moz-linear-gradient(center top , " + sColor + ", " + eColor + ") repeat scroll 0 0 transparent"
                    });
                    tempItemEls.css({
                        "background": "-webkit-linear-gradient(top , " + sColor + ", " + eColor + ") repeat scroll 0 0 transparent"
                    });
                }
                tempItemEls.addClass(numItemClass).appendTo(numPanel);
                itemEls.push(tempItemEls);
            }
            return itemEls;
        },
        //组件重绘
        _doLayout: function() {
            var me = this,
                tempData = me.data,
                itemEls = me.itemEls,
                itemWidth,
                itemHeight,
                width = parseInt(me.options.width),
                height = parseInt(me.options.height),
                titleHeight = me.numTitlelEl.externalHeight(),
                titleDataHeight = 0,
                labelWidth = 0,
                labelHeight = 0,
                borderWidth = 2,
                numCardBodyHeight,
                numCardBodyWdith,
                isTop = true;
            if (tempData) {
                labelWidth = tempData[KEY_LABELWIDTH] ? tempData[KEY_LABELWIDTH] : 0;
                if ("bottom" == tempData[KEY_TEXTALIGN]) {
                    isTop = false;
                }
            }
            if (me.numTitleDataEl) {
                titleDataHeight = me.numTitleDataEl.externalHeight();
            }
            labelHeight = numCardBodyHeight = height - titleHeight - titleDataHeight;
            if (me.labelTextEls && me.labelTextEls.length > 0) {
                me.numLabelEl.width(labelWidth).height(labelHeight);
                if (isTop) {
                    me.numLabelEl.css({
                        "padding-top": (titleHeight + titleDataHeight)
                    });
                    me.numBodyEl.css({
                        "padding-bottom": STYLE.itemMargin
                    });
                } else {
                    me.numLabelEl.css({
                        "padding-top": (2 * STYLE.itemMargin)
                    });
                    me.numBodyEl.css({
                        "padding-top": STYLE.itemMargin
                    });
                }
            } else {
                me.numLabelEl.width(0).height(0);
            }
            labelWidth = me.numLabelEl.externalWidth();
            me.numCardPanelEl.width(width).height(height);
            numCardBodyWdith = width - labelWidth - borderWidth;
            me.numCardEl.width(numCardBodyWdith - 1).height(height);
            if (itemEls && itemEls.length > 0) {
                if (itemEls[0] && itemEls[0].length > 0) {
                    itemWidth = Math.floor((numCardBodyWdith - (2 * STYLE.paddingLeft)) / itemEls[0].length);
                }
                itemHeight = Math.floor((numCardBodyHeight - (itemEls.length * STYLE.itemMargin) - STYLE.itemMargin) / itemEls.length);
                for (var i = 0; i < itemEls.length; i++) {
                    if (itemEls[i] && itemEls[i].length > 0) {
                        for (var j = 0; j < itemEls[i].length; j++) {
                            if (isTop) {
                                itemEls[i][j].width(itemWidth).height(itemHeight).css({
                                    "line-height": (itemHeight + "px"),
                                    "margin-bottom": (STYLE.itemMargin + "px")
                                });
                            } else {
                                itemEls[i][j].width(itemWidth).height(itemHeight).css({
                                    "line-height": (itemHeight + "px"),
                                    "margin-top": (STYLE.itemMargin + "px")
                                });
                            }

                        }
                    }
                }
            }
            if (me.labelTextEls && me.labelTextEls.length > 0) {
                for (var i = 0; i < me.labelTextEls.length; i++) {
                    me.labelTextEls[i].height(itemHeight).css({
                        "line-height": (itemHeight + "px")
                    });
                }
            }
        }
    });

    /**
     * 分数卡
     * @name Sweet.NumCard
     * @class 
     * @extends Sweet.widget
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     * sweetNumCard = new Sweet.NumCard({
     *     data: {
     *         text: "语音",                                    //title
     *         titleData: "0%",
     *         value: [                                         //数据为二维数组,控制渲染多少行与每行多少个
     *                  [{value: "171"}, {value: "0"}],
     *                  [{value: "258"}, {value: "30"}]
     *         ],
     *         data: "这是用户自定义数据",                       //用户自定义数据
     *         tip: "这是组件的tip提示信息",                     //组件TIP提示   
     *         label: ["2014-04-01", "Select Time Period"],     //组件前label信息
     *         labelWidth: 120,                                 //label宽度    
     *         isLabelSymbol: true,                             //label文本后面是否加上":"
     *         isLabelTip: true                                 //label是否出提示    
     *     }
     * });
     * </pre>
     */
    Sweet.NumCard = $.sweet.widgetNumCard;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 滑动块组件
 * 2013/9/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

$(function($, undefined) {
    "use strict";
    var perWidth = 10,
        timer;
    var stickContentClass = "sweet-slider-stick",
        containerCalss = "sweet-slider-container",
        sliderContentClass = "sweet-slider",
        ticksDivClass = "sweet-tick-div",
        sliderTickClass = "sweet-slider-tick",
        sliderTextClass = "sweet-text-div",
        textContentClass = "sweet-text-content",
        sliderBlockClass = "sweet-slider-block",
        sliderShadowClass = "sweet-slider-shadow",
        moveAllClass = "sweet-all-move-slider",
        moveAllRealClass = "sweet-all-move-real-slider";

    $.widget("sweet.widgetSlider", $.sweet.widget, /** @lends Sweet.Slider.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-slider]:",
        eventNames: /** @lends Sweet.Slider.prototype*/
        {
            /**
             * @event
             * @description 点击Slider的事件
             * @param {Event} evt 事件对象
             * @param {Object} data 滑块移动的坐标值
             */
            clickSlider: "点击Slider的事件",
            /**
             * @event
             * @description 滑块拖动事件
             * @param {Event} evt 事件对象
             * @param {Object} data 滑块移动的坐标值
             */
            move: "滑块拖动事件"
        },
        type: "slider",
        options: /** @lends Sweet.Slider.prototype*/
        {
            /**
             * 滑块的高度
             * @type number
             * @default 60
             */
            height: 60,
            /**
             * 滑动块的宽度
             * @type number
             * @default 100%
             */
            width: "100%",
            /**
             * 刻度上的文字描述信息，例如：["00:00","01:00","02:00","03:00","04:00",...]
             * @type Array
             * @default []
             */
            data: [],
            /**
             * 滑动块下面一起移动的遮罩的高度,因为一般和表格一起使用，表格数据行数乘以行高30
             * @type number
             * @default 300
             */
            shadowHeight: 300,
            /**
             * 滑动块下面一起移动的遮罩的顶点到滑块的距离，需要自己设置合适的值
             * @type number
             * @default 0
             */
            offsetTop: 0,
            /**
             * 刻度的步长， 1表示刻度为1小时, 2表示刻度为天，现在只支持小时
             * @type number
             * @default 1
             */
            step: 1,
            /**
             * 时间粒度,以秒数表示，900表示15分钟，现在只支持15分钟
             * @type number
             * @default 900 
             */
            interval: 900,
            /**
             * 设置时间的跨度值，默认为一天(即一天内的数据值展现)
             * @type Number
             * @default 1
             */
            dayCount: 1
        },
        /**
         * @description 取得用户设置的所有数据
         * @returns {Array} 返回用户原来设置的数据
         */
        getData: function() {
            return JSON.parse(JSON.stringify(this.options.data || []));
        },
        /**
         * @description 更新设置刻度上的文字描述值，例如：["00:00","01:00","02:00","03:00","04:00",...]
         * @param {Array} data 刻度的文字描述值
         */
        setData: function(data) {
            var me = this;
            if ($.isNull(data) || !$.isArray(data)) {
                return;
            }
            me.options.data = JSON.parse(JSON.stringify(data));
            me.textEl.empty();
            me.tickEl.empty();
            me._createTicks();
            //恢复滚动条等到最右边初始情况
            me.containerEl.css("left", me.sliderEl.width() - me.blockWidth * me.intervalCount + "px");
            me.moveAllEl.scrollLeft(me.moveAllEl.get(0).scrollWidth);
            me.blockEl.css("left", "0px");
            /** 触发事件进行 */
            me._triggerHandler(null, "clickSlider", {
                left: 0,
                width: me.blockWidth,
                times: me.options.data,
                startTime: me.options.data[1],
                endTime: me.options.data[0]
            });
            me.preStart = undefined;
        },
        /**
         * @public
         * @description 取得当前滑动块的位置，用于更新状态块的位置
         * @return {object} {left : 44}   无top值，因为top值现在无用
         */
        getPosition: function() {
            var me = this;
            return {
                left: parseFloat(me.containerEl.css("left"))
            };
        },
        /**
         * @description 返回时间slider的位置信息，包含left和width的信息
         * @returns {Object} 返回时间slider的位置信息，包含left和width的信息
         */
        getTimeRangPos: function() {
            return {
                left: this.preStart,
                width: this.blockWidth
            };
        },
        /**
         * @private
         * @description 子类继承实现, 绘制具体组件
         */
        _createSweetWidget: function() {
            var me = this,
                options = me.options,
                sliderId = options.id;
            /** 刻度*/
            me.ticks = [];
            me.tickHeight = 4;
            me.stickHeight = 15;
            me.textHeight = options.height - 25 - me.stickHeight - me.tickHeight;
            me.sliderHeight = options.height;
            options.width = options.width - 10;
            /** 整个slider对象*/
            me.sliderId = sliderId;
            me.sliderEl = $("<div>").attr({
                id: sliderId
            }).height(me.sliderHeight).width(options.width)
                .addClass(sliderContentClass);
            /** 创建滑杆,刻度和刻度上的文字*/
            me._createStick();
            /** 创建滑块*/
            me._createBlock();
            /** 创建刻度*/
            me._createTicks();
        },
        /**
         * @private
         * @description 创建滑动轴,文字描述，刻度的容器对象
         */
        _createStick: function() {
            var me = this,
                sWidth = 0,
                options = me.options;

            me.blockWidth = 20;
            /** 一天24小时，但是2个小时显示一个刻度，总共12个刻度*/
            me.intervalCount = 12 * options.dayCount;
            /** 2个小时为一个刻度，15分钟粒度，故2个小时内共8个15分钟*/
            me.count = 8;
            /** 计算滑块的宽度，主要根据时间粒度和刻度值来计算*/
            if (options.step === 1) {
                if (options.interval === 900) {
                    me.blockWidth = (perWidth + 1) * me.count;
                }
            }

            /** 计算滑杆的长度(需要根据数据来计算)*/
            me.realWidth = sWidth = me.blockWidth * me.intervalCount;
            me.containerEl = $("<div>").attr({
                id: options.id + "-container"
            }).width(sWidth)
                .addClass(containerCalss).appendTo(me.sliderEl).css("left", me.sliderEl.width() - sWidth + "px");
            me.textEl = $("<div>").height(me.textHeight).width(sWidth)
                .addClass(sliderTextClass).appendTo(me.containerEl);
            me.tickEl = $("<div>").height(me.tickHeight).width(sWidth)
                .addClass(ticksDivClass).appendTo(me.containerEl);
            /** 滑杆对象，高度一般为10px，也可以用户配置*/
            me.stickEl = $("<div>").attr({
                id: me.sliderId + "-stick"
            }).height(me.stickHeight).width(sWidth)
                .addClass(stickContentClass).appendTo(me.containerEl)
                .css("cursor", "pointer")
                .bind("click", function(e) {
                var x = e.pageX;
                var moveToRight = sWidth - Math.abs(me.stickEl.offset().left);
                var offX = moveToRight - x;
                var count = Math.ceil(offX / me.blockWidth);
                var start = (count - 1) * me.blockWidth;
                var left = -start;
                if (start !== me.preStart) {
                    me.blockEl.css("left", left + "px");
                    /** 触发事件进行 */
                    me._triggerHandler(e, "clickSlider", {
                        left: left,
                        width: me.blockWidth,
                        times: options.data,
                        startTime: options.data[count],
                        endTime: options.data[count - 1]
                    });
                }
                me.preStart = start;
            });
        },
        /**
         * @description 取得移动滚动条的位置信息
         * @returns {number} 返回移动滚动条的位置，和move事件传递的位置信息一样
         */
        getMoveBarPos: function() {
            return this.moveBarPos;
        },
        /**
         * @private
         * @description 创建滑块对象
         */
        _createBlock: function() {
            var me = this,
                options = me.options;
            /** 滑块对象*/
            me.blockEl = $("<div>").addClass(sliderBlockClass).attr({
                id: me.sliderId + "-block"
            })
                .height(me.stickHeight).width(me.blockWidth).appendTo(me.stickEl);
            //创建全部的滑块，宽度保持和options.width一致
            me.moveAllEl = $("<div>").width(options.width).addClass(moveAllClass)
                .scroll(function(e) {
                var left = $(e.target).scrollLeft();
                var info = {
                    left: -left
                };
                me._triggerHandler(e, "move", info);
                me.moveBarPos = info;
                /* containerEl的left的值*/
                me.containerEl.css("left", -left);
            }).appendTo(me.sliderEl);

            me.moveRealEl = $("<div>").width(me.realWidth)
                .addClass(moveAllRealClass).appendTo(me.moveAllEl);
        },
        /**
         * @private
         * @description 创建文字描述内容和相应的刻度
         */
        _createTicks: function() {
            var me = this,
                options = me.options,
                texts = options.data,
                i = 0,
                w = 0,
                temp, temp1;
            me.textDivs = [];
            me.curText = [];
            for (i = 0; i < me.intervalCount; i++) {
                /** 创建文字描述内容*/
                temp1 = $("<div>").attr({
                    id: i + "-text"
                }).addClass(textContentClass).text(texts[i])
                    .height(me.textHeight).width(me.blockWidth).appendTo(me.textEl);
                /** 创建刻度对象*/
                temp = $("<div>").attr({
                    id: i + "-tick"
                }).addClass(sliderTickClass)
                    .height(me.tickHeight).width(me.blockWidth - 1).appendTo(me.tickEl);
            }
        },
        /**
         * @private
         * @description 组件渲染
         * @param {string} id 渲染的id
         */
        _render: function(id) {
            var me = this;
            if ($.isNull(id) || me.rendered) {
                return;
            }

            if (!me.renderEl) {
                me._createRenderEl(id);
            }
            me.sliderEl.appendTo(me.renderEl);
            me.options.renderTo = id;
            me.rendered = true;
            me.moveAllEl.scrollLeft(me.moveAllEl.get(0).scrollWidth);
        }
    });
    /**
     * @description 滑动块组件
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.widget
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建滑动块组件：
     * var sweetSlider = Sweet.Slider({
     * });
     */
    Sweet.Slider = $.sweet.widgetSlider;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 状态选项组件
 * 2013/9/13
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var stateItemBodyClass = "sweet-stateitem-body",
        stateItemHeaderClass = "sweet-stateitem-header",
        stateItemHeaderTextClass = "sweet-stateitem-header-text",
        stateItemHeaderAddClass = "sweet-stateitem-header-add",
        stateItemListBodyClass = "sweet-stateitem-list-body",
        stateItemListULClass = "sweet-stateitem-list-ul",
        stateItemListItemClass = "sweet-stateitem-list-item",
        stateItemListItemTextClass = "sweet-stateitem-list-item-text",
        stateItemListErrorClass = "sweet-stateitem-list-error",
        stateItemListDeleteClass = "sweet-stateitem-list-delete",
        stateItemListCheckClass = "sweet-stateitem-list-check",
        stateItemSelectedClass = "sweet-stateitem-list-item-selected",
        stateItemCheckedClass = "sweet-stateitem-list-item-checked",
        eventSelect = "select",
        eventBeforeAdd = "beforeadd",
        eventBeforeDelete = "beforedelete",
        eventDelete = "delete",
        eventBeforeTextChange = "beforetextchange",
        eventTextChange = "textchange",
        i18n = Sweet.core.i18n.stateItem,
        uuid = 1;
    $.widget("sweet.widgetStateItem", $.sweet.widget, /**lends Sweet.StateItem.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-StateItem]",
        eventNames: /** @lends Sweet.StateItem.prototype*/
        {
            /**
             * @event
             * @description 选中时事件,一般两个参数(evt, data)
             */
            select: "选中事件",
            /**
             * @event
             * @description 删除前时事件,一般两个参数(data, me)
             */
            beforedelete: "删除前事件",
            /**
             * @event
             * @description 删除时事件,一般两个参数(data, me)
             */
            delete: "删除事件",
            /**
             * @event
             * @description 选项文本发生变化前时事件,一般两个参数(data, me)
             */
            beforetextchange: "选项文本发生变化前事件",
            /**
             * @event
             * @description 选项文本发生变化事件,一般两个参数(data, me)
             */
            textchange: "选项文本发生变化事件"
        },
        options: /** @lends Sweet.StateItem.prototype*/
        {
            /**
             * 数据
             * @type {Array}
             * @default []
             */
            data: [],
            /**
             * 最大选项个数
             * @type {Number}
             * @default null
             */
            maxCount: -1,
            /**
             * 列头显示文本
             * @type {String}
             * @default 105
             */
            headerText: i18n.headerText,
            /**
             * 相关tip提示信息
             * @type {String}
             * @default 105
             */
            tipInfo: {
                add: i18n.plus,
                delete: i18n["delete"],
                check: i18n.check
            }
        },
        /**
         * @description 更新数据信息
         * @param {Array} data 组件对应的数据，格式和配置数据一样
         */
        setData: function(data) {
            var me = this;
            data = data || [];
            if (me.stateItemsUL) {
                me.stateItemsUL.find("li").remove();
            }
            me.options.data = data;
            me._setData(data);
        },
        /**
         * @description 设置值,和更新时数据格式一样
         * @param {Array} value 组件对应的数据，格式和配置数据一样
         */
        setValue: function(value) {
            var me = this;
            me.setData(value);
        },
        /**
         * @private
         * @description 获取组件值
         * @return {Object} 组件值
         */
        getValue: function() {
            var me = this,
                vDatas = [],
                liDoms;
            if (!me.stateItemsUL) {
                return;
            }
            liDoms = me.stateItemsUL.find("li");
            for (var i = 0; i < liDoms.length; i++) {
                vDatas.push($(liDoms[i]).data("data"));
            }
            return $.objClone(vDatas);
        },
        /**
         * @private
         * @description 获取组件值
         * @return {Object} 组件值
         */
        getData: function() {
            var me = this;
            return me.getValue();
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            return this.stateItemEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            return this.stateItemEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 宽度
         */
        _setWidth: function(width) {
            this.stateItemEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 高度
         */
        _setHeight: function(height) {
            this.stateItemEl.externalHeight(height);
        },
        /**
         * @private
         * @description 设置组件宽度、高度
         * @param {Number/String} width 宽度
         * @param {Number/String} height 高度
         */
        _setWH: function(width, height) {
            var me = this;
            me.stateItemEl.externalWidth(width);
            me.stateItemEl.externalHeight(height);
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.stateItemEl.appendTo(me.renderEl);
            me.rendered = true;
            return true;
        },
        /**
         * @private
         * @description 实现widget接口
         */
        _createSweetWidget: function() {
            var me = this,
                listBodyEl;
            me.options.data = me.options.data || [];
            me.selected = null;
            me.checked = null;
            me.maxCount = -1;
            if (me.options.maxCount && me.options.maxCount > 0) {
                me.maxCount = parseInt(me.options.maxCount);
            }
            //最外层容器DIV
            me.stateItemEl = $("<div>").addClass(stateItemBodyClass)
                .attr("id", me.options.id);
            if (me.options.widgetClass && "" != me.options.widgetClass) {
                me.stateItemEl.addClass(me.options.widgetClass);
            }
            //创建列头
            me.headerEl = $("<div>").addClass(stateItemHeaderClass).appendTo(me.stateItemEl);
            //列头显示的文本
            $("<span>").text(me.options.headerText).attr("title", me.options.headerText).addClass(stateItemHeaderTextClass).appendTo(me.headerEl);
            //列头新增按钮
            me.addEl = $("<span>").attr("title", me.options.tipInfo.add).addClass(stateItemHeaderAddClass).bind("click", {
                "me": me
            }, me._addStateItem).appendTo(me.headerEl);
            listBodyEl = $("<div>").addClass(stateItemListBodyClass).appendTo(me.stateItemEl);
            me.stateItemsUL = $("<ul>").addClass(stateItemListULClass).appendTo(listBodyEl);
            me._setData(me.options.data);
        },
        /**
         * @description 更新数据信息
         * @param {Array} data 组件对应的数据，格式和配置数据一样
         */
        _setData: function(data) {
            var me = this,
                optData;
            data = data || [];
            me.selected = null;
            me.checked = null;
            optData = $.objClone(data);
            for (var i = 0; i < optData.length; i++) {
                me._createStateItem(optData[i]);
            }
            if (me.addEl && me.maxCount > -1 && optData.length >= me.maxCount) {
                me.addEl.hide();
            }
            if (me.addEl && me.maxCount > -1 && optData.length < me.maxCount) {
                me.addEl.show();
            }
            if (me.selected) {
                me._doSelected(me.selected);
            }
        },
        /**
         * @private
         * @description 创建分数卡组件
         * @param {Object} data 组件信息
         * @return {Object} liEl 返回新增的li
         */
        _createStateItem: function(data) {
            var me = this,
                liEl,
                textEl,
                deleteEl,
                checkedEl,
                errorEl;
            if ($.isEmptyObject(data)) {
                return;
            }
            liEl = $("<li>").addClass(stateItemListItemClass)
                .data("data", data)
                .bind("click", {
                "me": me
            }, me._onClick)
                .bind("dblclick", {
                "me": me
            }, me._onDbClick)
                .appendTo(me.stateItemsUL);
            textEl = $("<span>").text(data["text"]).attr("title", data["text"]).addClass(stateItemListItemTextClass).appendTo(liEl);
            errorEl = $("<span>").attr({
                name: "error"
            }).addClass(stateItemListErrorClass).appendTo(liEl);
            deleteEl = $("<span>").attr({
                name: "deleted",
                title: me.options.tipInfo["delete"]
            }).addClass(stateItemListDeleteClass).appendTo(liEl);
            checkedEl = $("<span>").attr({
                name: "checked",
                title: me.options.tipInfo.check
            }).addClass(stateItemListCheckClass).appendTo(liEl);
            if (data["selected"]) {
                me.selected = liEl;
            }
            if (data["checked"]) {
                liEl.addClass(stateItemCheckedClass);
                me.checked = liEl;
            }
            return liEl;
        },
        /**
         * @private
         * @description 新增状态
         * @param {Object} e 事件对象
         */
        _addStateItem: function(e) {
            var me = e.data.me,
                flag,
                el,
                tempTxt = uuid++;
            flag = me._triggerHandler(me, eventBeforeAdd);
            if ("false" === flag || false === flag) {
                return;
            }
            el = me._createStateItem({
                value: me.options.id + "-stateitem-" + tempTxt,
                text: i18n.stateText + tempTxt
            });
            me._doSelected(el);
            if (me.addEl && me.maxCount > -1 && me.stateItemsUL && me.stateItemsUL.find("li").length >= me.maxCount) {
                me.addEl.hide();
            }
        },
        /**
         * @private
         * @description 双击事件
         * @param {Object} e 事件对象
         */
        _onDbClick: function(e) {
            var me = e.data.me,
                el = $(e.target),
                oldText,
                liEl,
                editInputEl;
            if ("deleted" == el.attr("name") || "checked" == el.attr("name")) {
                return;
            }
            if (el.hasClass(stateItemListItemClass) || !el.hasClass(stateItemListItemTextClass)) {
                liEl = el;
                el = el.find("." + stateItemListItemTextClass);
            } else {
                liEl = el.parent("li");
            }
            oldText = el.text();
            el.text("");
            editInputEl = $("<input type='text'>").attr({
                value: oldText
            }).css({
                width: "100%",
                height: "22px"
            });
            editInputEl.appendTo(el)
                .bind("blur", {
                me: me,
                liEl: liEl,
                el: el,
                self: editInputEl,
                oldText: oldText
            }, me._doEdit)
                .bind("focus", {
                me: me,
                liEl: liEl,
                el: el,
                self: editInputEl,
                oldText: oldText
            }, me._doInputFocus);
            editInputEl.focus();
        },
        /**
         * @private
         * @description 输入框获得焦点时处理
         * @param {Object} e 事件对象
         */
        _doInputFocus: function(e) {
            var me = e.data.me,
                inputEl;
            if (e.data.self) {
                inputEl = e.data.self.get(0);
                if (inputEl) {
                    inputEl.selectionStart = inputEl.value.length;
                }
            }
        },
        /**
         * @private
         * @description 双击时编辑处理
         * @param {Object} e 事件对象
         */
        _doEdit: function(e) {
            var me = e.data.me,
                data,
                oldText,
                newText,
                liEl,
                flag = false;
            oldText = e.data["oldText"];
            newText = e.data.self.val();
            liEl = e.data["liEl"];
            data = liEl.data("data") || {};
            //修改text值
            if (oldText != newText) {
                flag = me._triggerHandler({
                    data: $.objClone(data),
                    text: newText,
                    oldText: oldText
                }, eventBeforeTextChange, me);
                if (false === flag || "false" === flag) {
                    flag = false;
                    newText = oldText;
                } else {
                    flag = true;
                    data["text"] = newText;
                    e.data.el.attr("title", newText);
                }
            }
            e.data.self.remove();
            e.data.el.text(newText);
            if (flag) {
                me._triggerHandler({
                    data: $.objClone(data),
                    text: newText,
                    oldText: oldText
                }, eventTextChange, me);
            }
        },
        /**
         * @private
         * @description 单击事件
         * @param {Object} e 事件对象
         */
        _onClick: function(e) {
            var me = e.data.me,
                self = $(e.target);
            switch (self.attr("name")) {
                case "deleted":
                    me._doDeleted(self);
                    break;
                case "checked":
                    me._doChecked(self);
                    break;
                default:
                    me._doSelected(self);
                    return;
            }
        },
        /**
         * @private
         * @description 删除操作
         * @param {Object} el delete对象
         */
        _doDeleted: function(el) {
            var me = this,
                data,
                sData,
                cData,
                liDom,
                selected,
                flag;
            if (!el) {
                return;
            }
            liDom = el.parent("li");
            data = liDom.data("data");
            selected = data["select"] ? true : false;
            flag = me._triggerHandler({
                data: $.objClone(data),
                selected: selected
            }, eventBeforeDelete, me);
            if ("false" === flag || false === flag) {
                return;
            }
            if (me.selected) {
                sData = me.selected.data("data");
                if (data && sData && (sData["value"] == data["value"] || sData["text"] == data["text"])) {
                    me.selected = null;
                }
            }
            if (me.checked) {
                cData = me.checked.data("data");
                if (data && cData && (cData["value"] == data["value"] || cData["text"] == data["text"])) {
                    me.checked = null;
                }
            }
            if (liDom) {
                liDom.remove();
            }
            if (me.addEl && me.maxCount > -1 && me.stateItemsUL && me.maxCount > me.stateItemsUL.find("li").length) {
                me.addEl.show();
            }
            me._triggerHandler({
                data: $.objClone(data),
                selected: selected
            }, eventDelete, me);
        },
        /**
         * @private
         * @description 或得选项校验结果
         * @param {Object} data {value: "xxx", tip: "xxx", checked: true}
         * @return {Boolean} checked true表示校验通过,false为不通过
         */
        isValidate: function(data) {
            var me = this,
                liEl,
                errorEl;
            liEl = me._doFindLi(data);
            if (liEl) {
                errorEl = liEl.find("span[name='error']");
            }
            if (!errorEl) {
                return false;
            }
            if ("block" == errorEl.css("display") && "error" == errorEl.attr("tiptype")) {
                return false;
            }
            return true;
        },
        /**
         * @private
         * @description 对某个选项进行校验
         * @param {Object} data {value: "xxx", tip: "xxx", checked: true}
         */
        doValidate: function(data) {
            var me = this,
                liEl,
                errorEl;
            liEl = me._doFindLi(data);
            if (liEl) {
                errorEl = liEl.find("span[name='error']");
            }
            if (!errorEl) {
                return;
            }
            if (false === data["checked"] || "false" === data["checked"]) {
                errorEl.attr({
                    tiptype: "error"
                });
                if (data["tip"]) {
                    errorEl.attr({
                        title: data["tip"]
                    });
                }
                errorEl.css({
                    "display": "block"
                });
            } else {
                errorEl.removeAttr("tiptype");
                errorEl.removeAttr("title");
                errorEl.css({
                    "display": "none"
                });
            }
        },
        /**
         * @private
         * @description 选项设置默认值操作
         * @param {Object} data 选项信息
         */
        doChecked: function(data) {
            var me = this,
                liEl;
            liEl = me._doFindLi(data);
            if (liEl) {
                me._doChecked(liEl.find("span[name='checked']"));
            }
        },
        /**
         * @private
         * @description 设置默认值操作
         * @param {Object} el 设置默认值对象
         */
        _doChecked: function(el) {
            var me = this,
                data,
                liEl;
            if (!el) {
                return;
            }
            liEl = el.parent("li");
            if (me.checked) {
                data = me.checked.data("data");
                if (!$.isEmptyObject(data)) {
                    delete data["checked"];
                }
                me.checked.removeClass(stateItemCheckedClass);
            }
            data = liEl.data("data");
            if (data) {
                data["checked"] = true;
            }
            me.checked = liEl;
            liEl.addClass(stateItemCheckedClass);
        },
        /**
         * @private
         * @description 选项选中处理
         * @param {Object} data 选项信息
         */
        doSelected: function(data) {
            var me = this,
                liEl;
            liEl = me._doFindLi(data);
            if (liEl) {
                me._doSelected(liEl);
            }
        },
        /**
         * @private
         * @description 选项选中处理
         * @param {Object} el li对象
         */
        _doSelected: function(el) {
            var me = this,
                data;
            if (!el) {
                return;
            }
            if (!el.hasClass(stateItemListItemClass) || el.hasClass(stateItemListItemTextClass)) {
                el = el.parent("li");
            }
            if (me.selected) {
                data = me.selected.data("data");
                if (!$.isEmptyObject(data)) {
                    delete data["selected"];
                }
                me.selected.removeClass(stateItemSelectedClass);
            }
            data = el.data("data");
            if (data) {
                data["selected"] = true;
            }
            me.selected = el;
            el.addClass(stateItemSelectedClass);
            me._triggerHandler($.objClone(el.data("data")), eventSelect, me);
        },
        /**
         * @private
         * @description 通过选项信息查找对应的li
         * @param {Object} data 选项信息
         */
        _doFindLi: function(data) {
            var me = this,
                data,
                liEls,
                tempData;
            if (!me.stateItemsUL) {
                return null;
            }
            if ($.isEmptyObject(data) || !data["value"]) {
                return null;
            }
            liEls = me.stateItemsUL.find("li");
            for (var i = 0; i < liEls.length; i++) {
                tempData = $(liEls[i]).data("data");
                if (tempData && data["value"] == tempData["value"]) {
                    return $(liEls[i]);
                }
            }
            return null;
        },
        //组件重绘
        _doLayout: function() {
            var me = this,
                width = me.stateItemEl.width(),
                height = me.stateItemEl.height(),
                headerHeight = me.headerEl.externalHeight(),
                tempWidth = 75,
                headerTextDom,
                textDoms;
            if (me.headerEl) {
                headerTextDom = me.headerEl.find("." + stateItemHeaderTextClass);
                if (headerTextDom && headerTextDom.length > 0) {
                    headerTextDom.width(width - tempWidth);
                }
            }
            if (me.stateItemsUL) {
                me.stateItemsUL.height(height - headerHeight);
                textDoms = me.stateItemsUL.find("li ." + stateItemListItemTextClass);
                if (textDoms && textDoms.length > 0) {
                    textDoms.width(width - tempWidth);
                }
            }
        }
    });
    /**
     * 状态选项
     * @name Sweet.StateItem
     * @class 
     * @extends Sweet.widget
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     * </pre>
     * @example 
     * <pre>
     * sweetstateItem = new Sweet.StateItem({
     *   headerText: "State",
     *   tipInfo: {
     *       add: "add"
     *   },
     *   data: [
     *       {text: "state1", value: "state1"},
     *       {text: "state2", value: "state2", selected: true},
     *       {text: "state3", value: "state3", checked: true},
     *       {text: "state4", value: "state4"}
     *   ],
     *   renderTo:"stateItemDemo"
     });
     * </pre>
     */
    Sweet.StateItem = $.sweet.widgetStateItem;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 进度条组件
 * 2013/11/26
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */

$(function($, undefined) {
    "use strict";
    var progressBgCls = "sweet-progress-bg";
    var progressCls = "sweet-progress";
    var spanCls = "sweet-progress-span";
    $.widget("sweet.widgetProgressBar", $.sweet.widget, /** @lends Sweet.ProgressBar.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-ProgressBar]:",
        eventNames: /** @lends Sweet.ProgressBar.prototype*/
        {
            /**
             * @event
             * @description 点进度条改变事件
             * @param {Event} evt 点击事件对象
             * @param {Object} data {preData : 45, curData : 67}当前对象数据信息
             */
            change: "进度条改变事件"
        },
        type: "ProgressBar",
        options: /** @lends Sweet.ProgressBar.prototype*/
        {
            /**
             * 状态组件的宽度
             * @type number
             * @default 100%
             */
            width: "100%",
            /**
             * 进度条的数值，为0-100之间的数值，代表百分比值
             * @type number
             * @default 0
             */
            value: 0,
            /**
             * 进度条上显示的文字，默认为当前的百分比值，用户可自定义
             * @type string
             * @default ""
             */
            progressText: ""
        },
        /**
         * @public
         * @description 设置进度条的数值
         * @param {Number} value 进度条的数值
         * @param {string} progressText 进度条上显示的文字,只有用户自定义时需要更新
         */
        setValue: function(value, progressText) {
            var me = this,
                options = me.options,
                preData = options.value;

            if (!me._check(value) || preData === value) {
                return;
            }
            options.value = value;
            me._updateProgressData(progressText);

            me._triggerHandler(null, "change", {
                preData: preData,
                curData: value
            });
        },
        /**
         * @private
         * @description 检查进度条数值的合法性
         * @param {Number} value 进度条数值
         */
        _check: function(value) {
            if ($.isNull(value) || !$.isNumeric(value)) {
                return false;
            }
            if (value < 0 || value > 100) {
                return false;
            }
            return true;
        },
        /**
         * @private
         * @description 更新进度条的数值
         * @param {string} progressText 进度条上显示的文字，默认为当前的百分比值，用户可自定义
         */
        _updateProgressData: function(progressText) {
            var me = this,
                opt = me.options,
                v = opt.value + "%",
                txt = $.isNotNull(progressText) ? progressText : v;
            me.progressEl.css("width", v);
            me.spanEl.text(txt);
        },
        /**
         * @private
         * @description 子类继承实现, 绘制组件
         */
        _createSweetWidget: function() {
            var me = this,
                options = me.options,
                value = options.value,
                v = value + "%",
                txt = $.isNotNull(options.progressText) ? options.progressText : v;

            if (!me._check(value)) {
                return;
            }

            me.pbarEl = $("<div>").attr("id", options.id)
                .width(options.width).height(20)
                .addClass(progressBgCls);
            me.spanEl = $("<span>").text(txt)
                .addClass(spanCls).appendTo(me.pbarEl);
            me.progressEl = $("<div>").attr("id", options.id + "-progress")
                .css("width", v)
                .addClass(progressCls).appendTo(me.pbarEl);
        },
        /**
         * @private
         * @description layout时进行重新绘制
         */
        _doLayout: function() {},
        /**
         * @private
         * @description 返回图组件最外层jquery对象
         * @param {Boolean} original true 返回原生html对象，false 返回jquery对象
         */
        _getWidgetEl: function(original) {
            return original ? this.pbarEl[0] : this.pbarEl;
        },
        /**
         * @private
         * @description 组件渲染
         * @param {string} id 渲染到相应容器的id
         */
        _render: function(id) {
            var me = this;
            if ($.isNull(id) || me.rendered) {
                return;
            }

            if (!me.renderEl) {
                me._createRenderEl(id);
            }
            me.pbarEl.appendTo(me.renderEl);
            me.options.renderTo = id;
            me.rendered = true;
        }
    });
    /**
     * @description 进度条组件
     * @class
     * @param {Object} options 配置项
     * @extends Sweet.widget
     * @requires <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * </pre>
     * @example
     * 创建进度条组件：
     * var sBar = Sweet.ProgressBar({
     *      value : 0,
     *      width : 500,
     *      progressText : "已经处理0个，总共220个",
     *      renderTo : "progress-bar"
     * });
     */
    Sweet.ProgressBar = $.sweet.widgetProgressBar;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 数据处理类组件
 * 2013/4/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * @description 数据处理类组件基类
     * @name Sweet.Base
     * @class
     * @extends base.js
     * @requires
     * <pre>
     * base.js
     * </pre>
     * @example
     */
    Sweet.Base = Class.extend( /** @lends Sweet.Base.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Base]",
        /**
         * @description 注册监听
         * @param {Object} handler 注册监听，格式为{eventName: Function, scope: }
         */
        addListener: function(handler) {
            this.handlers = $.extend({}, this.handlers || {}, handler);
        },
        /**
         * @description 删除监听
         * @param {String} eventName 事件名称
         */
        removeListener: function(eventName) {
            if ($.isNull(eventName)) {
                this.handlers = null;
            } else {
                delete this.handlers[eventName];
            }
        },
        /**
         * @description 销毁组件, 释放资源
         */
        destroy: function() {
            this.removeListener();
            this._destroyWidget();
            for (var v in this) {
                if (this.hasOwnProperty(v)) {
                    this[v] = null;
                }
            }
        },
        /**
         * @private
         * @description 子类继承实现
         */
        _destroyWidget: $.noop,
        /**
         * @private
         * @description error级别日志打印
         * @param {String} msg 打印信息
         */
        _error: function(msg) {
            if (!sweetDebug) {
                return;
            }
            $.error("[ERROR]" + this.sweetWidgetName + msg);
        },
        /**
         * @private
         * @description info级别日志打印
         * @param {String} msg 打印信息
         */
        _info: function(msg) {
            if (!sweetDebug) {
                return;
            }
            if (Sweet.constants.logLevel.INFO === Sweet.logLevel) {
                $.log("[INFO]" + this.sweetWidgetName + msg);
            }
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 解析数据类组件
 * 2013/4/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var beforeReadKey = "beforeRead",
        afterReadKey = "afterRead";

    /**
     * @description 解析类组件基类
     * @name Sweet.Reader
     * @class
     * @extends Sweet.Base
     * @requires
     * <pre>
     * base.js
     * sweet.base.js
     * </pre>
     * @example
     */
    Sweet.Reader = Sweet.Base.extend( /** @lends Sweet.Reader.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Reader]",
        /**
         * @description 初始化对象时调用，用于设置解析参数格式，由子类继承实现
         */
        init: function() {},
        /**
         * @description 解析数据
         * @param {Object} data 待处理数据
         */
        read: function(data) {
            // 触发beforeRead事件
            var tempData = this._beforeRead(data);
            var tempCloneData = $.objClone(tempData);
            tempCloneData = this._parse(tempCloneData);
            // 触发afterRead事件
            this._afterRead($.objClone(tempCloneData));
            return tempCloneData;
        },
        /**
         * @private
         * @description 数据返回前预处理
         * @param {Object} data 待处理数据
         */
        _beforeRead: function(data) {
            var tempData = data;
            if (this.handlers) {
                var beforeReadFunc = this.handlers[beforeReadKey];
                if (beforeReadFunc && $.isFunction(beforeReadFunc)) {
                    tempData = beforeReadFunc.call(this, data);
                }
            }
            return tempData;
        },
        /**
         * @private
         * @description 数据返回后处理
         * @param {Object} data 处理后数据
         */
        _afterRead: function(data) {
            if (this.handlers) {
                var afterReadFunc = this.handlers[afterReadKey];
                if (afterReadFunc && $.isFunction(afterReadFunc)) {
                    afterReadFunc.call(null, data);
                }
            }
        },
        /**
         * @private
         * @description 解析数据，由子类扩展具体解析功能
         * @param {Object} data 待处理数据
         */
        _parse: function(data) {
            return data;
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 解析数据类组件
 * 2013/4/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * @description 解析JSON格式组件
     * @name Sweet.Reader.JsonReader
     * @class
     * @extends Sweet.Reader
     * @requires
     * <pre>
     * base.js
     * sweet.base.js
     * sweet.reader.js
     * </pre>
     * @example
     */
    Sweet.Reader.JsonReader = Sweet.Reader.extend( /** @lends Sweet.Reader.JsonReader.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Reader-JsonReader]",
        /**
         * @description 设置解析JSON格式
         * @param {Object} format 格式
         */
        init: function(format) {
            if ($.isNotNull(format)) {
                this.format = format;
            } else {
                // 采用默认格式定义
                this.format = {
                    "root": "root",
                    "data": [{
                        "name": "text",
                        mapping: "text"
                    }, {
                        "name": "value",
                        mapping: "value"
                    }, {
                        "name": "data",
                        mapping: "data"
                    }, {
                        "name": "children",
                        mapping: "children",
                        "children": true
                    }]
                };
                // 是否采用默认格式
                this.defaultFormat = true;
            }
        },
        /**
         * @private
         * @description 解析JSON格式数据
         * @param {Object} data 待处理数据
         */
        _parse: function(data) {
            var me = this;
            if ($.isNull(data)) {
                this._error("Input data is null.");
                return;
            }

            // 如果采用默认格式，不需要再次解析
            if (this.defaultFormat) {
                return data;
            }

            // 解析转换数据
            var destData = data[this.format.root];
            var tempData = [];
            me._parseData(destData, tempData);

            return tempData;
        },
        /**
         * @private
         * @description 解析JSON格式数据
         * @param {Object} data 待处理数据
         * @param {Object} destData 处理后目标数据
         */
        _parseData: function(data, destData) {
            var me = this;
            if (!me.format.data) {
                return;
            }
            $.each(data, function(index, dataObj) {
                var tempObj = {};
                $.each(me.format.data, function(index, fObj) {
                    // 递归遍历子节点
                    if (fObj.children && dataObj[fObj.mapping]) {
                        var tempData = [];
                        me._parseData(dataObj[fObj.mapping], tempData);
                        tempObj[fObj.name] = tempData;
                    } else {
                        if ($.isNotNull(dataObj[fObj.mapping])) {
                            tempObj[fObj.name] = dataObj[fObj.mapping];
                        }
                    }
                });
                destData.push(tempObj);
            });
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 获取存储数据类组件，并对数据进行管理,其中allData和data需要说明：allData是所有的数据，是原始数据;而data是对allData
 * 进行操作后的数据，比如翻页或过滤后的数据。而getData接口是返回的allData
 * 2013/4/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var beforeLoadKey = "beforeLoad",
        afterLoadKey = "afterLoad",
        defaultContentType = "application/json;charset=UTF-8";

    /**
     * @description 获取存储数据组件
     * @name Sweet.Store
     * @class
     * @extends Sweet.Base
     * @requires
     * <pre>
     * base.js
     * sweet.base.js
     * </pre>
     * @example
     */
    Sweet.Store = Sweet.Base.extend( /** @lends Sweet.Store.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Store]",
        eventNames: /** @lends Sweet.Store.prototype*/
        {
            /**
             * @event 填充组件值事件
             */
            setData: "填充组件值"
        },
        /**
         * @description 设置发送请求数据
         * @param {Object} params JSON格式参数，格式
         *  {
         *      baseParams: baseParams,     // 基本参数，每次请求都会携带
         *      reader: reader,             // 解析数据reader
         *      url: url,                   // 请求URL
         *      timeout : null,             //默认不设置超时时间
         *      loadMask: true,             // 是否有遮罩，默认有且是全局遮罩，局部遮罩由各widget单独实现
         *      contentType: "",            // conetentType，默认application/json;charset=UTF-8
         *      async: true,                // 是否异步请求
         *      failCallBack : function(){},//发送请求时，如果返回error中时的回调处理函数
         *      cache: Boolean,             // 是否需要缓存数据，默认false，如果设置为true，store只会发送一次请求
         *                                  // 约定设置为cache后，需要在baseParams或params中设置start、limit值
         *      beforeSend ： function,     //为了满足发送ajax请求时，需要拼不同的参数时，注册的回调
         *      isRequest : boolean         //只有设置cache : true时才有效，表示store是否需要发送一次请求
         *                                  //false : 不发送一次请求，数据全由用户设置到store中
         *                                  //true : 只发送一次请求
         *  }
         */
        init: function(params) {
            if ($.isNull(params)) {
                return;
            }
            this.baseParams = params.baseParams;
            this.params = null;
            this.reader = params.reader;
            this.url = params.url;
            this.failCallBack = params.failCallBack;
            this.loadMask = (undefined !== params.loadMask) ? params.loadMask : true;
            this.contentType = params.contentType || defaultContentType;
            this.async = $.isUndefined(params.async) ? true : params.async;
            this.cache = (undefined !== params.cache) ? params.cache : false;
            /**
             * 只有设置cache : true时才有效，表示store是否需要发送一次请求
             * false : 不发送一次请求，数据全由用户设置到store中
             * true : 只发送一次请求
             */
            this.isRequest = (undefined !== params.isRequest) ? params.isRequest : true;
            /**
             * 为了满足发送ajax请求时，需要拼不同的参数时，注册的回调
             */
            this.beforeSend = $.isNull(params.beforeSend) ? "" : params.beforeSend;
            this.timeout = $.isNull(params.timeout) ? "" : params.timeout;
            this.data = [];
            this.allData = [];
            this.handlers = {};
        },
        /**
         * @private
         * @description 主要是给gridStore继承实现使用，进行清空过滤值
         */
        clearFilters: $.noop,
        /**
         * @private
         * @description 主要是给gridStore继承实现使用，进行清空排序值
         */
        clearOrders: $.noop,
        /**
         * @description 更新store中的基础参数，如果不再需要baseParams，设置为{}即可
         * @param {Object/Array} baseParams 基础的参数
         */
        setBaseParams: function(baseParams) {
            this.baseParams = baseParams;
        },
        /**
         * @private
         * @description 发送请求，加载数据
         * @param {Object} params 提交参数
         * @param {Boolean} add 追加还是覆盖，默认覆盖
         * @param {String} eventName 指定触发的事件名称
         * @param {Object} anotherParams 传递给注册函数的参数
         */
        _loadRemoteData: function(params, add, eventName, anotherParams) {
            var me = this,
                config = {},
                tempParams;
            if (params) {
                me.params = params;
            }
            tempParams = $.extend({}, me.baseParams, me.params);
            if (!$.isNull(me.beforeSend) && $.isFunction(me.beforeSend)) {
                tempParams = me.beforeSend(tempParams);
            }
            config = {
                url: me.url,
                async: me.async,
                loadMask: me.loadMask,
                data: defaultContentType === me.contentType ? JSON.stringify(tempParams) : tempParams,
                contentType: me.contentType,
                success: function(data) {
                    me._pretreatmentData(data, add, eventName);
                    me._callBack(eventName, anotherParams);
                },
                error: function(XMLHttpRequest, status, errorThrown) {
                    if (me.failCallBack && $.isFunction(me.failCallBack)) {
                        me.failCallBack(XMLHttpRequest, status, errorThrown);
                    }
                }
            };
            if (!$.isNull(me.timeout)) {
                config.timeout = me.timeout;
            }
            // 发送请求
            Sweet.Ajax.request(config);
        },
        /**
         * @private
         * @description 对返回数据处理，判断是否追加数据
         * @param {Boolean} add true 追加
         * @param {Object/Array} data 数据
         * @param {String} eventName 事件名称
         */
        _pretreatmentData: function(data, add, eventName) {
            // 缓存请求加载的数据
            var me = this,
                tempData1 = me.reader.read(data),
                tempData2 = me._dealForList(tempData1);
            if (add) {
                if ($.isPlainObject(me.allData)) {
                    me.allData = me.allData.data.concat(tempData2);
                } else {
                    me.allData = me.allData.concat(tempData2);
                }
            } else {
                me.allData = tempData2;
            }
            me.data = tempData1;
        },
        /**
         * @private
         * @description list延迟加载时，返回{total: 100, data: []}结构数据
         * @param {Object/Array} data 数据
         */
        _dealForList: function(data) {
            if ($.isNull(data)) {
                return [];
            }
            if ($.isPlainObject(data)) {
                return data.data;
            } else {
                return data;
            }
        },
        /**
         * @private
         * @description 构造list延迟加载返回数据，返回{total: 100, data: []}结构数据
         */
        _returnForList: function(data) {
            var me = this;
            if ($.isPlainObject(me.data)) {
                return {
                    "total": me.data.total,
                    "data": data
                };
            } else {
                return data;
            }
        },
        /**
         * @private
         * @description 回调注册的函数
         * @param {String} eventName 指定触发的事件名称
         * @param {Object} anotherParams 传递给注册函数的参数
         * @param {Boolean} add 是否不刷新表格,否则如果有分页条只刷新分页信息
         */
        _callBack: function(eventName, anotherParams, add) {
            var me = this,
                data = me._dealData();
            //如果是filter调用
            if (anotherParams && anotherParams[0] && anotherParams[0].filter) {
                data = anotherParams[0].data;
            }
            // 优先触发指定的事件
            if (me.handlers[eventName]) {
                if (anotherParams && anotherParams[0].filter) {
                    me.handlers.scope.options.expand = true;
                } else {
                    me.handlers.scope.options.expand = false;
                }
                anotherParams = undefined;
                me.handlers[eventName].call(me.handlers.scope, data, anotherParams);
            } else if (me.handlers.setData) {
                me.handlers.setData.call(me.handlers.scope, data, anotherParams, add);
            }

            me._afterLoad();
        },
        /**
         * @private
         * @description 处理数据，区分缓存加载和后台加载
         */
        _dealData: function() {
            var me = this,
                data;

            if (me.cache) {
                var start,
                limit,
                params = {},
                tempData = me._dealForList(me.data);
                // 优先查看this.params参数
                if (me.params && !$.isUndefined(me.params.start)) {
                    params = me.params;
                    // 再查看this.baseParams参数
                } else if (me.baseParams && !$.isUndefined(me.baseParams.start)) {
                    params = me.baseParams;
                }
                start = params.start || 0;
                limit = params.limit || tempData.length;
                data = tempData.slice(start, start + limit);
            } else {
                data = me._dealForList(me.data);
            }

            return me._returnForList(data);
        },
        /**
         * @description 加载数据，该方法必须在load、loadData、reload方法之后调用
         * @param {Object} params 参数
         * @param {Boolean} add 追加还是覆盖，默认覆盖
         * @param {String} eventName 指定触发的事件名称
         * @param {Object} anotherParams 传递给注册函数的参数
         */
        loadRecords: function(params, add, eventName, anotherParams) {
            var me = this;
            me.params = params;
            if (me.cache) {
                me._callBack(eventName, anotherParams, add);
            } else {
                me.load(params, add, eventName, anotherParams);
            }
        },
        /**
         * @description 为组件注入数据
         * @param {Array} data 数据
         * @param {Boolean} add 追加还是覆盖，默认覆盖
         * @param {String} eventName 指定触发的事件名称
         * @param {Object} anotherParams 传递给注册函数的参数
         * @param {boolean} isResetParams 是否不重置翻页信息(表格翻页时设置的值)，默认重置:false，如果不需要重置，设置true
         */
        loadData: function(data, add, eventName, anotherParams, isResetParams) {
            var me = this;
            //前台缓存，但用户自己发请求使用loadData设置数据，且监控翻页后仍然需要显示当前页面时使用
            if (!isResetParams) {
                me._resetParamStart();
            }
            me._pretreatmentData(data, add);
            me._callBack(eventName, anotherParams, add);
        },
        /**
         * @description 加载数据
         * @param {Object} params 发送请求时可以追加参数
         * @param {Boolean} add 追加还是覆盖，默认覆盖
         * @param {String} eventName 指定触发的事件名称，可选
         * @param {Object} anotherParams 传递给注册函数的参数
         */
        load: function(params, add, eventName, anotherParams) {
            var me = this;
            me._beforeLoad();
            me._loadRemoteData(params, add, eventName, anotherParams);
        },
        /**
         * @description 重新加载数据，无参数，参数是上一次load时传递的参数
         */
        reload: function() {
            this._resetParamStart();
            this._beforeLoad();
            this._loadRemoteData(this.params);
        },
        /**
         * @description 返回所有的数据
         */
        getData: function() {
            if (this.allData) {
                return $.objClone(this.allData);
            }
            return null;
        },
        /**
         * @description 删除数据
         * @param {Object} data 待删除数据
         */
        removeData: function(data) {
            var me = this;
            // 如果参数为空，进行全部删除操作
            if ($.isNull(data)) {
                me.allData = [];
            } else {
                $.each(me.allData, function(index, obj) {
                    if (obj && obj.value === data.value) {
                        me.allData.splice(index, 1);
                    }
                });
            }
        },
        /**
         * @description 返回过滤后的数据
         * @param {String} field 将过滤的目标字段
         * @param {String/RegExp} value 过滤值或正则
         * @param {Boolean} filterDir description
         * @param {Array} data 传入过滤的数据
         * @return {Array} 返回过滤后的数据
         */
        filter: function(field, value, filterDir, data) {
            var me = this,
                filter = true,
                testResult,
                text,
                allNull;
            filterDir = filterDir || false;
            me._beforeLoad();
            if ($.isNull(data)) {
                data = $.objClone(me.allData);
            }

            $.each(data, function(index, childData) {
                if (!$.isNull(childData)) {
                    if (childData.children && childData.children.length > 0) {
                        //filterDir:true为带目录过滤，否则为叶子节点过滤
                        if (filterDir) {
                            //判断目录是否匹配
                            testResult = false;
                            text = childData.text;
                            testResult = value.test(text);
                            //判断是否包含过滤字符串
                            if (testResult) {
                                return;
                            } else {
                                me.filter(field, value, filterDir, childData.children);
                            }
                        } else {
                            me.filter(field, value, filterDir, childData.children);
                        }
                        //判断chilData.children是否都为空
                        allNull = false;
                        $.each(childData.children, function(index, child) {
                            if (!$.isNull(child)) {
                                allNull = true;
                            }
                        });
                        //删除没有叶子的节点
                        if (!allNull) {
                            delete data[index];
                        }
                    } else {
                        testResult = false;
                        text = childData.text;
                        testResult = value.test(text);
                        //判断是否包含过滤字符串
                        if (!testResult) {
                            delete data[index];
                        }
                    }
                }
            });

            me.data = data;
            me._callBack("setData", [{
                "data": $.deleteUndefinedData(data),
                "filter": filter
            }]);
        },
        /**
         * @TODO 待实现
         * @description 实现数据排序功能
         * @param {String/Array} field 排序目标字段或数组，如果是数组，格式约定为[{key: , order: }, ...]
         * @param {String} order 排序类型，取值范围 ASC:升序，DESC:降序，默认升序
         */
        sort: function(field, order) {
            this._beforeLoad();
            var me = this;
            var sorts = [];
            var sortType = order || Sweet.constants.sortType.ASC;

            if ("string" === $.type(field)) {
                sorts.push({
                    "key": field,
                    "order": sortType
                });
            } else if ("array" === $.type(field)) {
                sorts = field;
            } else {
                throw new Error("Store.sort() Unsupported type!");
            }

            // 将start值清零
            me._resetParamStart();

            // 对me.data数据进行排序
            // TODO 暂支持单列，需要扩展支持多列排序
            if (me.cache) {
                me.data.sort($.objSort(field, sortType));
            }

            // 加载数据
            me.loadRecords({
                "orders": sorts
            });
        },
        /**
         * @private
         * @description 加载数据前处理，可以修改提交参数，直接覆盖this.baseParams和this.params即可
         */
        _beforeLoad: function() {
            if (this.handlers) {
                var beforeLoadFunc = this.handlers[beforeLoadKey];
                if (beforeLoadFunc && $.isFunction(beforeLoadFunc)) {
                    beforeLoadFunc.call(this);
                }
            }
        },
        /**
         * @private
         * @description 加载数据后处理
         */
        _afterLoad: function() {
            if (this.handlers) {
                var afterLoadFunc = this.handlers[afterLoadKey];
                if (afterLoadFunc && $.isFunction(afterLoadFunc)) {
                    afterLoadFunc.call(this);
                }
            }
        },
        /**
         * @private
         * @description 重新设置params参数值
         * @param {Object} obj 参数
         */
        _resetParams: function(obj) {
            var me = this;
            // 将start值清零
            if (me.params) {
                if (me.params.start && me.params.limit) {
                    me.params.start = obj.start;
                    me.params.limit = obj.limit;
                }
            }
        },
        /**
         * @private
         * @description 将开始值清零
         */
        _resetParamStart: function() {
            var me = this;
            // 优先查看this.params参数
            if (me.params) {
                if (me.params.start) {
                    me.params.start = 0;
                }
            }
            // 再查看this.baseParams参数
            else if (me.baseParams) {
                if (me.baseParams.start) {
                    me.baseParams.start = 0;
                }
            }
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 获取存储数据类组件，适用于表格组件
 * 2013/4/16
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    var symbol = Sweet.constants.symbol;

    /**
     * @description 获取存储数据组件，适用于表格组件
     * @name Sweet.Store.GridStore
     * @class
     * @extends Sweet.Store
     * @requires
     * <pre>
     * base.js
     * sweet.base.js
     * sweet.store.js
     * </pre>
     * @example
     */
    Sweet.Store.GridStore = Sweet.Store.extend( /** @lends Sweet.Store.GridStore.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Store-GridStore]",
        /**
         * @description 设置当前页
         * @param {Number} currentPage 当前页
         */
        setCurrentPage: function(currentPage) {
            this._currentPage = currentPage;
        },
        /**
         * @description 返回操作后的数据，如过滤或排序后的数据
         * @returns {Array} 返回操作后的数据，如过滤或排序后的数据
         */
        getCurrentData: function() {
            var me = this;
            if (me.data && me.data.data) {
                return $.objClone(me.data.data);
            }
            return null;
        },
        /**
         * @description 加载数据
         * @param {Object} params 发送请求时可以追加参数
         * @param {Boolean} add 追加还是覆盖，默认覆盖
         * @param {String} eventName 指定触发的事件名称，可选
         * @param {Object} anotherParams 传递给注册函数的参数
         */
        load: function(params, add, eventName, anotherParams) {
            var me = this,
                filters,
                orders;

            me._beforeLoad();
            if (me.cache && !me.isRequest) {
                me._resetParams(params);
                if ($.isNotNull(params)) {
                    filters = params.filter;
                    orders = params.order;
                }
                /**
                 * 如果有过滤，先进行过滤
                 */
                if ($.isNotNull(filters) && filters.length > 0) {
                    me.filter(params);
                    me.curFilters = filters;
                } else {
                    //如果清空过滤时，数据应该为缓存的所有数据
                    me.data.data = $.objClone(me.allData.data);
                    me.curFilters = [];
                }
                /**
                 * 如果有排序，进行排序
                 */
                if ($.isNotNull(orders) && orders.length > 0) {
                    me.sort(params);
                    me.curOrders = orders;
                } else {
                    me.curOrders = [];
                }
                /**
                 * 加载数据
                 */
                me.loadRecords(params);
            } else {
                if (me.cache) {
                    me.isRequest = false;
                }
                /**
                 * 如果设置了cache，只发一次请求
                 */
                me._loadRemoteData(params, add, eventName, anotherParams);
            }
        },
        clearFilters: function() {
            var me = this;
            me.curFilters = [];
        },
        clearOrders: function() {
            var me = this;
            me.curOrders = [];
        },
        /**
         * @private
         * @description 设置数据分页信息
         * @param {Object} page 分页信息
         */
        _setPage: function(page) {
            var me = this;
            $.extend(me.baseParams, {
                "start": page.start,
                "limit": page.limit
            });
        },
        /**
         * @private
         * @description 设置数据分页信息
         * @param {Object} page 分页信息
         */
        _setDataPage: function(page) {
            var me = this;
            $.extend(me.data.page, page);
            me._setPage(page);
        },
        /**
         * @private
         * @description 设置数据分页信息
         * @param {Object} page 分页信息
         */
        setDataPage: function(page) {
            var me = this;
            me._setDataPage(page);
        },
        /**
         * @private
         * @description 处理数据，区分缓存加载和后台加载
         */
        _dealData: function() {
            var me = this;

            if (me.cache) {
                var start, limit, params = {};
                var data;
                var tempData = me.data.data || [];
                var finalData;

                //更新total值
                if (me.data.page) {
                    me.data.page.total = tempData.length;
                }
                // 先删除me.data的数据部分
                delete me.data.data;
                finalData = $.objClone(me.data);

                // 优先查看this.params参数
                if (me.params) {
                    params = me.params;
                    // 再查看this.baseParams参数
                } else if (me.baseParams) {
                    params = me.baseParams;
                }
                start = params.start || 0;
                limit = params.limit || tempData.length;

                // 如果是第一页
                if (me._currentPage && 1 === me._currentPage) {
                    start = 0;
                    me._currentPage = null;
                    if (!finalData.page) {
                        finalData.page = {};
                    }
                    finalData.page.currentPage = 1;
                } else if (finalData.page && 1 === finalData.page.currentPage) {
                    start = 0;
                }

                data = tempData.slice(start, start + limit);
                finalData.data = data;
                me.data.data = tempData;

                return finalData;
            }

            return me.data;
        },
        /**
         * @private
         * @description 对返回数据处理，判断是否追加数据
         * @param {Boolean} add true 追加
         * @param {Object/Array} data 数据
         * @param {String} eventName 事件名称
         */
        _pretreatmentData: function(data, add, eventName) {
            // 缓存请求加载的数据
            var me = this,
                tempData = me.reader.read(data) || [];
            me._saveAllData(tempData, add);
            me._saveCurrentData(tempData, add, eventName);
            if (add) {
                var filters = me.curFilters;
                var orders = me.curOrders;
                /**
                 * 如果有过滤，对追加完成的先进行过滤
                 */
                if ($.isNotNull(filters) && filters.length > 0) {
                    me.filter({
                        filter: filters
                    });
                }
                /**
                 * 如果有排序，进行排序
                 */
                if ($.isNotNull(orders) && orders.length > 0) {
                    me.sort({
                        order: orders
                    });
                }
            }
        },
        /**
         * @private
         * @description 保存所有数据
         * @param {Object/Array} data 数据
         * @param {Boolean} add true 追加
         */
        _saveAllData: function(data, add) {
            var me = this,
                temp = JSON.parse(JSON.stringify(data));
            if (add) {
                // 保存所有数据
                if ($.isPlainObject(me.allData)) {
                    if ($.isPlainObject(temp)) {
                        me.allData.data = me.allData.data.concat(temp.data);
                    } else {
                        me.allData.data = me.allData.data.concat(temp);
                    }
                } else {
                    if ($.isPlainObject(temp)) {
                        me.allData = me.allData.concat(temp.data);
                    } else {
                        me.allData = me.allData.concat(temp);
                    }
                }
            } else {
                me.allData = temp;
            }
        },
        /**
         * @private
         * @description 保存所有数据
         * @param {Object/Array} data 数据
         * @param {Boolean} add true 追加
         * @param {String} eventName 事件名称
         */
        _saveCurrentData: function(data, add, eventName) {
            var me = this,
                temp = data;
            if (add && eventName !== "setTreeData") {
                // 保存所有数据
                if ($.isPlainObject(me.data)) {
                    if ($.isPlainObject(temp)) {
                        me.data.data = me.data.data.concat(temp.data);
                    } else {
                        me.data.data = me.data.data.concat(temp);
                    }
                } else {
                    if ($.isPlainObject(temp)) {
                        me.data = me.data.concat(temp.data);
                    } else {
                        me.data = me.data.concat(temp);
                    }
                }
            } else {
                me.data = temp;
            }
        },
        /**
         * @description 返回过滤后的数据
         * @param {Object} obj 参数，格式为
         *  {
         *      start: {Number},
         *      limit: {Number},
         *      filter: [Array],  例[{name: , type: , value: {symbol: , value: }}, ...]
         *      order: [Array]    例[{name: , order: }, ...]
         *  }
         * @return {Array} 返回过滤后的数据
         */
        filter: function(obj) {
            this._beforeLoad();
            var me = this,
                i = 0,
                j = 0,
                filters = obj.filter,
                type, value, key, temp, text,
                dataType = Sweet.constants.dataType,
                tempData = me.allData.data || [];

            if (me.cache) {
                if (tempData.length === 0) {
                    tempData = me.data.data || [];
                }
                for (i = 0; i < filters.length; i++) {
                    temp = filters[i];
                    key = temp.name;
                    type = temp.type;
                    value = temp.value;
                    text = temp.text;
                    switch (type) {
                        // 列表
                        case dataType.LIST:
                            if ($.isNotNull(text)) {
                                var fdata = [];
                                for (j = 0; j < tempData.length; j++) {
                                    var tv = tempData[j][key];
                                    if ($.isPlainObject(tv)) {
                                        tv = tv.text;
                                    }
                                    //由于前台过滤，value使用其中的text，后台时使用其中的value
                                    if (me._filterList(tv, text.value)) {
                                        fdata.push(tempData[j]);
                                    }
                                }
                                tempData = fdata;
                            }
                            break;
                            // 字符串
                        case dataType.STRING:
                            if ($.isNotNull(value)) {
                                var fdata = [];
                                for (j = 0; j < tempData.length; j++) {
                                    var tv = tempData[j][key];
                                    if ($.isPlainObject(tv)) {
                                        tv = tv.text;
                                    }
                                    if (me._filterString(tv, value.symbol, value.value)) {
                                        fdata.push(tempData[j]);
                                    }
                                }
                                tempData = fdata;
                            }
                            break;
                            // 数值
                        case dataType.NUMBER:
                            if ($.isNotNull(value)) {
                                var fdata = [];
                                for (j = 0; j < tempData.length; j++) {
                                    var tv = tempData[j][key];
                                    if ($.isPlainObject(tv)) {
                                        tv = tv.text;
                                    }
                                    if (me._filterNumber(tv, value)) {
                                        fdata.push(tempData[j]);
                                    }
                                }
                                tempData = fdata;
                            }
                            break;
                            // 日期
                        case dataType.DATE:
                            if ($.isNotNull(value)) {
                                var fdata = [];
                                for (j = 0; j < tempData.length; j++) {
                                    var tv = tempData[j][key];
                                    if ($.isPlainObject(tv)) {
                                        tv = tv.text;
                                    }
                                    if (me._filterDate(tv, value)) {
                                        fdata.push(tempData[j]);
                                    }
                                }
                                tempData = fdata;
                            }
                            break;
                        default:
                            me._error("Unsupported filter type [" + type + "].");
                    }
                }
                //如果清空过滤时，数据应该为缓存的所有数据
                me.data.data = tempData;
                if (me.data.page) {
                    //更新page中的total,并且跳转到第一页
                    me.setCurrentPage(1);
                    me.data.page.total = tempData.length;
                    me.data.page.currentPage = 1;
                }
            }
        },
        /**
         * @description 实现表格数据排序功能
         * @param {Object} obj 参数
         */
        sort: function(obj) {
            this._beforeLoad();
            var me = this,
                sorts = obj.order,
                len = $.isNotNull(sorts) ? sorts.length : 0,
                sort, tempData = me.data.data || [];
            // 对me.data数据进行排序
            // TODO 暂支持单列，需要扩展支持多列排序
            if (me.cache && len > 0) {
                if (1 === len) {
                    sort = sorts[0];
                    if ("number" === sort.dataType) {
                        tempData.sort($.objNumberSort(sort.name, sort.order));
                    } else {
                        tempData.sort($.objSort(sort.name, sort.order));
                    }
                }
                // 多列排序
                else {
                    tempData.sort($.objMultiSort(sorts));
                }
                me.data.data = tempData || [];
            }
        },
        /**
         * @private
         * @description 过滤list
         * @param {String/Number/Object} data 数据
         * @param {Array} list 列表
         * @return {Boolean} true：存在，false：不存在
         */
        _filterList: function(data, list) {
            var value;

            /**
             * @private
             * @description 比较value在list中是否存在
             * @param {String/Number} value 值
             * @param {Array} list 列表
             * @return {Boolean} true：存在，false：不存在
             */
            function compare(value, list) {
                for (var i = 0; i < list.length; i++) {
                    if (value === list[i]) {
                        return true;
                    }
                }

                return false;
            }

            /**
             * 处理列显示值与实际值不一致情况，例如列可能显示省份名称，实际比较的是省份ID，
             * 此种数据推荐使用{value:, text:}表示
             */
            if ($.isPlainObject(data)) {
                value = data.value;
            }

            return compare(data, list);
        },
        /**
         * @private
         * @description 字符串过滤
         * @param {String} data 数据
         * @param {String} s 符号
         * @param {String} value 比较值
         * @return {Boolean} true条件成立，false不成立
         */
        _filterString: function(data, s, value) {
            var result = false,
                patt;
            switch (s) {
                case symbol.EQUAL:
                    if (data === value) {
                        result = true;
                    }
                    break;
                case symbol.LIKE:
                    patt = new RegExp($.regExp.escape(value), "i");
                    if ($.isNotNull(data) && patt.test(data)) {
                        result = true;
                    }
                    break;
                case symbol.NOTEQUAL:
                    if (data !== value) {
                        result = true;
                    }
                    break;
                case symbol.EQNULL:
                    if ($.isNull(data)) {
                        result = true;
                    }
                    break;
                case symbol.NOTNULL:
                    if ($.isNotNull(data)) {
                        result = true;
                    }
                    break;
                default:
                    break;
            }

            return result;
        },
        /**
         * @private
         * @description 数值型比较
         * @param {Number} data 数据
         * @param {Array} value 数值
         * @returns {Boolean} true条件成立，false不成立
         */
        _filterNumber: function(data, value) {
            var me = this,
                result = false,
                i = 0,
                len = value.length;

            if (typeof data !== "number") {
                data = parseFloat(data);
                if (isNaN(data)) {
                    return false;
                }
            }
            // 只有一条，认为是
            if (1 === len) {
                if (value[0].symbol === symbol.EQUAL && data === Number(value[0].value)) {
                    result = true;
                } else if (value[0].symbol === symbol.GT && data > Number(value[0].value)) {
                    result = true;
                } else if (value[0].symbol === symbol.LT && data < Number(value[0].value)) {
                    result = true;
                }
            } else {
                /**
                 * //由于等于只能单独存在，所以最多只有两个且一定是大于和小于
                 */
                result = me._numberBetween(data, value[0], value[1]);
            }

            return result;
        },
        /**
         * @private
         * @description 判断值是否在两个值之间或者在两个值之外
         * @param {number} data
         * @param {object} v1  值1
         * @param {object} v2  值2
         * @returns {Boolean} 返回true,表示值是否在两个值之间或者在两个值之外; false表示都不满足
         */
        _numberBetween: function(data, v1, v2) {
            var me = this,
                s1 = v1.symbol,
                s2 = v2.symbol,
                n1 = Number(v1.value),
                n2 = Number(v2.value),
                result = false,
                r;

            if ((symbol.GT === s1 && n1 > n2) || (symbol.LT === s1 && n1 < n2)) {
                /**
                 * 第二种情况: x > 500 || x < 222 , 取两头的值
                 */
                r = me._minMax(n1, n2);
                if (data < Number(r[0]) || data > Number(r[1])) {
                    result = true;
                }
            } else if ((symbol.LT === s1 && n1 > n2) || (symbol.GT === s1 && n1 < n2)) {
                /**
                 * 第一种情况: 222 < x < 500, 过滤交集
                 */
                r = me._minMax(n1, n2);
                if (data < Number(r[1]) && data > Number(r[0])) {
                    result = true;
                }
            }

            return result;
        },
        /**
         * @private
         * @description 日期比较
         * @param {Number} data 数据
         * @param {Array} value 数值
         * @returns {Boolean} true条件成立，false不成立
         */
        _filterDate: function(data, value) {
            var me = this,
                result = false,
                r = me.__getMaxMin(value, "text");
            if (data) {
                data = $.date.format(new Date(String(data).replace(/-/g, "/")), "yyyy-MM-dd hh:mm:ss");
            }

            if (data < r[0] && data >= r[1]) {
                result = true;
            }

            return result;
        },
        /**
         * @private
         * @description 返回数组 [小值，大值]
         * @param {type} v1 值1
         * @param {type} v2 值2
         * @returns {Array} 返回数组 [小值，大值]
         */
        _minMax: function(v1, v2) {
            v1 = Number(v1);
            v2 = Number(v2);
            return v1 > v2 ? [v2, v1] : [v1, v2];
        },
        /**
         * 
         * @param {Array} value 数值
         * @return {Object} 返回最大最小值，格式{max: , min: }
         */
        __getMaxMin: function(value, key) {
            var max, min;
            key = key || "value";
            if (symbol.GT === value[0].symbol) {
                min = value[0][key];
                max = value[1][key];
            } else {
                max = value[0][key];
                min = value[1][key];
            }

            return [max, min];
        }
    });
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 获取存储数据类组件，适用于图表组件
 * 2013/10/19
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    /**
     * @description 获取存储数据组件，适用于图表组件
     * @name Sweet.Store.ChartStore
     * @class
     * @extends Sweet.Store
     * @requires
     * <pre>
     * base.js
     * sweet.base.js
     * sweet.store.js
     * </pre>
     * @example
     */
    Sweet.Store.ChartStore = Sweet.Store.extend( /** @lends Sweet.Store.ChartStore.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Store-ChartStore]",
        /**
         * @private
         * @description 对返回数据处理，判断是否追加数据
         * @param {Boolean} add true 追加
         * @param {Object/Array} data 数据
         */
        _pretreatmentData: function(data, add) {
            // 缓存请求加载的数据
            var me = this,
                tempData = me.reader.read(data) || [];
            if (add) {
                me.allData = me.data.concat(tempData);
            } else {
                me.allData = tempData;
            }
            me.data = $.objClone(tempData);
        },
        /**
         * @private
         * @description 处理数据，区分缓存加载和后台加载
         */
        _dealData: function() {
            var me = this,
                data;

            if (me.cache) {
                var start,
                limit,
                params = {},
                tempData = me.data || [];
                // 优先查看this.params参数
                if (me.params && !$.isUndefined(me.params.start)) {
                    params = me.params;
                    // 再查看this.baseParams参数
                } else if (me.baseParams && !$.isUndefined(me.baseParams.start)) {
                    params = me.baseParams;
                }
                start = params.start || 0;
                limit = params.limit || me.data.length;
                data = tempData.slice(start, start + limit);
            } else {
                data = me.data || [];
            }

            return data;
        }
    });
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * 建立socket连接组件
 * 2013/8/5
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * </pre>
 * @version 1.0
 * @history
 * <pre>
 * </pre>
 */
(function($, undefined) {
    var SS_IDLE = 0, // 空闲，未创建
        SS_CONNECTING = 1, // 正在连接
        SS_CONNECTED = 2, // 已连接
        SS_CLOSED = 3, // 无端关闭
        SS_UNSUPPORTED = -1; // 不支持Web Socket

    var SocketID = 0;

    /**
     * @description 建立Web Socket链接
     * @name Sweet.Socket
     * @class
     * @extends base.js
     * @requires <pre>
     * base.js
     * sweet.base.js
     * </pre>
     * @example
     */
    Sweet.Socket = Sweet.Base.extend( /** @lends Sweet.Socket.prototype*/ {
        /**
         * @private
         * @description 组件名称
         */
        sweetWidgetName: "[Sweet-Socket]",
        /**
         * @private
         * @description 定义事件名称
         */
        eventNames: /** @lends Sweet.Socket.prototype*/
        {
            /**
             * @event
             * @description 连接建立成功
             * @param {Object} event 事件对象
             */
            open: "连接建立成功",
            /**
             * @event
             * @description 接收到消息
             * @param {Object} event 事件对象
             * @param {String} message 消息内容
             */
            message: "接收到消息",
            /**
             * @event
             * @description 连接关闭
             * @param {Object} event 事件对象
             */
            close: "连接关闭",
            /**
             * @event
             * @description 发生异常
             * @param {Object} event 事件对象
             */
            error: "发生异常"
        },
        /**
         * @description 设置建立链接的数据
         * @param {Object} param
         */
        init: function(param) {
            if ($.isNull(param)) {
                return;
            }

            this.options = /** @lends Sweet.Socket.prototype*/
            {
                /**
                 * Web Socket服务地址，不包含host部分
                 * @type String
                 * @default ""
                 */
                url: "",
                /**
                 * 是否自动重新连接
                 * @type Boolean
                 * @default true
                 */
                autoRetry: true,
                /**
                 * 自动重试次数，-1表示无限次
                 * @type Number
                 * @default -1
                 */
                retryTimes: -1,
                /**
                 * 自动重试间隔，单位秒
                 * @type Number
                 * @default 5
                 */
                retryInterval: 5
            };

            this.options = $.extend({}, this.options, param);
            this.socket = null;
            this.status = SS_IDLE;
            this.handlers = {};

            this.retryTimer = "Sweet.Socket-" + (SocketID++);
            this.retried = 0;
        },

        /**
         * 建立链接
         * @returns {boolean} 是否成功
         */
        connect: function() {
            var me = this,
                url = "";

            if (me.socket) {
                return true;
            }
            me.status = SS_CONNECTING;

            // 构造web socket链接
            if (window.location.protocol === 'http:') {
                url = 'ws://' + window.location.host + me.options.url;
            } else {
                url = 'wss://' + window.location.host + me.options.url;
            }

            // 创建web socket
            // 注：如果指定的连接地址不正确，socket会先后触发error和close事件
            if ("WebSocket" in window) {
                me.socket = new WebSocket(url);
            } else if ("MozWebSocket" in window) {
                me.socket = new MozWebSocket(url);
            } else {
                me._error('WebSocket is not supported by this browser.');
                me.status = SS_UNSUPPORTED;
                return false;
            }

            // 注册事件处理
            me.socket.onopen = function(event) {
                me._onOpen(event);
            };
            me.socket.onclose = function(event) {
                me._onClose(event);
            };
            me.socket.onmessage = function(event) {
                me._onMessage(event);
            };
            me.socket.onerror = function(event) {
                me._onError(event);
            };

            return true;
        },

        /**
         * 主动断开链接
         */
        close: function() {
            var me = this;

            me._stopRetry();
            me.status = SS_IDLE;

            if (null !== me.socket) {
                me.socket.close();
                me.socket = null;
            }
        },

        /**
         * 发送消息
         * @param {string} 发送的消息内容
         */
        send: function(message) {
            var me = this,
                socket = me.socket;

            if (socket && me.status === SS_CONNECTED) {
                try {
                    socket.send(message);
                    return message.length;
                } catch (e) {
                    me._error("Send message failed, detail:" + e);
                    return 0;
                }
            } else {
                me._error("Web Socket is not connected yet.");
                return -1;
            }
        },

        /**
         * @description 注册监听
         * @param {String} event 事件名称
         * @param {Object} handler 注册监听，格式为{eventName: Function, scope: }
         */
        addListener: function(event, handler) {
            var me = this;

            if ($.isPlainObject(event) && !handler) {
                me.handlers = $.extend({}, me.handlers || {}, handler);
            } else {
                me.handlers[event] = handler;
            }
        },
        /**
         * @description 删除监听
         * @param {String} eventName 事件名称
         */
        removeListener: function(eventName) {
            delete this.handlers[eventName];
        },

        /**
         * @private
         * @description 触发注册事件
         * @param {String} name  事件名称
         * @param {Object} event 事件对象
         * @param {Object} data 数据
         */
        _trigger: function(name, event, data) {
            var me = this,
                result;

            if ($.isNull(me.handlers)) {
                return;
            }

            $.each(me.handlers, function(key, handler) {
                // 回调注册事件
                if (name === key && $.isFunction(handler)) {
                    result = handler(event, data);
                    return false;
                }
            });

            return result;
        },

        /**
         * 连接成功事件处理
         * @param event
         * @private
         */
        _onOpen: function(event) {
            this.status = SS_CONNECTED;
            this.retried = 0;
            this._stopRetry();
            this._trigger("open", event, null);
        },

        /**
         * 接收到消息事件处理
         * @param event
         * @private
         */
        _onMessage: function(event) {
            if (this.status !== SS_CONNECTED) {
                this.status = SS_CONNECTED;
                this._stopRetry();
            }
            this._trigger("message", event, event.data);
        },

        /**
         * 关闭事件处理
         * @param event
         * @private
         */
        _onClose: function(event) {
            var me = this;

            // 主动关闭时，socket对象为空，且status为IDLE
            if (!me.socket || me.status === SS_IDLE) {
                return;
            }

            me.socket = null;
            me.status = SS_CLOSED;
            me._trigger("close", event, null);

            // 自动重连
            if (me.options.autoRetry) {
                me._startRetry();
            }
        },

        /**
         * 发生错误/异常
         * @param event
         * @private
         */
        _onError: function(event) {
            this._trigger("error", event, null);
        },

        /**
         * 重试连接
         * @private
         */
        _startRetry: function() {
            var me = this;

            // 判断重试次数
            if (me.options.retryTimes >= 0 && me.retried >= me.options.retryTimes) {
                me._stopRetry();
                return;
            }

            // 启动定时器
            // 注：Timeout是自动重复执行的，但是允许重复调用start，不需要先执行stop
            Sweet.Task.Timeout.start({
                id: me.retryTimer,
                run: function() {
                    me.retried++;
                    me.connect();
                },
                scope: me,
                interval: me.options.retryInterval * 1000
            });
        },

        /**
         * 停止重试连接
         * @private
         */
        _stopRetry: function() {
            Sweet.Task.Timeout.stop(this.retryTimer);
        }
    });
}(jQuery));;
/**
 * @fileOverview 业务组件基类
 * @date 2013/1/25
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * 
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *  jquery.sweet.widget.js
 */
(function($, undefined) {

    $.widget("sweet.widgetCmp", $.sweet.widget, {
        version: "1.0",
        sweetWidgetName: "[widget-cmp]",
        defaultElement: "<div>",
        type: "cmp",
        // form组件公共配置参数
        options: {
            /**是否显示，默认true*/
            visiable: true,
            /**组件值，默认空*/
            value: ""
        },
        /**
         * @private
         * @description 创建业务组件总入口
         */
        _createSweetWidget: function() {
            if (this.renderEl) {
                return;
            }
            var me = this,
                cmpEl = me.cmpEl = $("<div>"),
                options = me.options;
            cmpEl.attr("id", options.id)
                .addClass(options.widgetClass)
                .width(options.width)
                .height(options.height);
            me._createCmpWidget();
        },
        /**
         * @private
         * @description 销毁form组件
         */
        _destroyWidget: function() {
            if (this.renderEl) {
                this.renderEl.remove();
            }
        },
        /**
         * @private
         * 创建业务组件，子类继承实现
         */
        _createCmpWidget: $.noop
    });
}(jQuery));;
/** * @fileOverview  * <pre> * form类组件--双向选择列表 * 2013.2.4 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var listWinInputClass = "sweet-cmp-listwin-element",
        listWinSelectBtn = "sweet-cmp-listwin-select_btn",
        listWinInputFormClass = "sweet-cmp-textfield-formEl",
        listWinParentClass = "sweet-cmp-listwin-parentEl",
        listWinArrowClass = "sweet-cmp-listwin-arrow",
        listWindTitleClass = "sweet-cmp-listwin-title",
        listWinFloatDivClass = "sweet-cmp-listwin-seletMore",
        listWindContentClass = "sweet-cmp-listwin-content",
        listWinSelectDivClass = "sweet-cmp-listwin-select",
        listWinSelectTreeDivClass = "sweet-cmp-listwin-select-tree",
        listWinSelectRight = "sweet-cmp-listwin-select-right",
        listWinSelectLeft = "sweet-cmp-listwin-select-left",
        listWinSelectAllRight = "sweet-cmp-listwin-select-allRight",
        listWinSelectAllLeft = "sweet-cmp-listwin-select-allLeft",
        listWinSelectCon = "sweet-cmp-listwin-select-content",
        listWinSearchDivClass = "sweet-cmp-listwin-search-box",
        listWinBottomElClass = "sweet-cmp-listwin-bottom",
        listWinBottomButtonClass = "swwet-cmp-listwin-butt",
        listWindowIdPrefix = "sweet-cmp-listwin-",
        suffixBottom = "-listwin-bottom",
        listJavascriptVoid = "javascript:void(0);",
        listSweetFloatBg = "sweet-cmp-listWin-float-bg",
        uuid = uuid || 1000;
    $.widget("sweet.widgetCmpListwindow", $.sweet.widgetCmp, {
        version: "1.0",
        eventNames: {
            "fromSearch": "源搜索事件",
            "toSearch": "目标搜索事件",
            "nodeEdit": "双向列表节点编辑事件"
        },
        sweetWidgetName: "[widget-cmp-listwindow]",
        type: 'listwindow',
        options: /** @lends Sweet.cmp.ListWindow*/
        {
            /**             * 标示双向面板的类型,list:列表；tree树             * @type String             * @default 'list'             */
            type: 'list',
            /**             * 双向面板的左侧标题             * @type String             * @default ''             */
            fromTitle: '',
            /**             * 双向面板的右侧标题             * @type String             * @default ''             */
            toTitle: '',
            /**             * 是否隐藏             * @type Boolean             * @default false             */
            hidden: false,
            /**             * 是否显示图标             * @type Boolean             * @default true             */
            icon: true,
            /**             * 是否显示搜索框             * @type Boolean             * @default true             */
            search: false,
            /**             * 加载数据             * @type {Object}             * @default null             */
            store: null,
            /**             * 是否延迟加载             * @type {Boolean}             * @default false             */
            lazyLoad: false,
            /**             * 每次加载记录数             * @type {Number}             * @default 50             */
            limit: 50
        },
        /**         * @description 组件重绘         */
        _doLayout: function() {
            if (!this.rendered) {
                return;
            }
            var me = this,
                fTEl = me.fTitleEl,
                fDiv = me.fromDiv,
                fPanel = me.fromPanel,
                sfDiv = fPanel.searchFiedlDiv,
                tDiv = me.toDiv,
                mbottom = 0,
                selectDiv = me.selectPanel,
                tPanel = me.toPanel,
                selectBottom = 0,
                cmpEl = me.cmpEl,
                cmpElWidth = cmpEl.width(),
                cmpElHeight = cmpEl.height(),
                fTElH = 0,
                bottom = 0,
                searchWidth = 0,
                searchHeight = 0, //两个列表之间的距离
                gap = parseInt(selectDiv.css("width")) + parseInt(selectDiv.css("margin-left")) + parseInt(selectDiv.css("margin-right")),
                listPanelHeight = 0;
            if (fTEl) {
                bottom = parseInt(fTEl.css("margin-bottom")), fTElH = fTEl.height() + bottom;
            }
            searchWidth = parseInt(cmpElWidth, 10) - gap;
            listPanelHeight = parseInt(cmpElHeight, 10);
            fDiv.externalWidth(searchWidth / 2);
            fDiv.externalHeight(listPanelHeight - fTElH);
            fPanel.setWidth(searchWidth / 2);
            fPanel.setHeight(listPanelHeight - fTElH);
            fPanel.doLayout();
            tDiv.externalWidth(searchWidth / 2);
            tDiv.externalHeight(listPanelHeight - fTElH);
            tPanel.setWidth(searchWidth / 2);
            tPanel.setHeight(listPanelHeight - fTElH);
            tPanel.doLayout(); //左移右移按钮垂直居中
            if ("list" === me.options.type) {
                if (sfDiv) {
                    mbottom = parseInt(sfDiv.css("margin-bottom"));
                    searchHeight = sfDiv.height() + mbottom;
                }
                selectBottom = fTElH + searchHeight;
                selectDiv.css("padding-top", selectBottom);
            }
        },
        /**         * @private         * @description 重写父类的渲染方法         * @param {String} id 宿主ID         */
        _render: function(id) {
            var me = this,
                cmpEl = me.cmpEl,
                fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                options = me.options,
                selectPanel = me.selectPanel;
            if (!me._super(id)) {
                return false;
            }
            cmpEl.addClass(listWinFloatDivClass);
            cmpEl.appendTo(me.renderEl); //当未给定源面板或目标面板，打印错误日志
            if ($.isNull(fromPanel) || $.isNull(toPanel)) {
                me._error("create muti list Panelfrom fail,from panel or to panel is empty!");
            } else {
                fromPanel.render(me.fromDiv[0].id);
                toPanel.render(me.toDiv[0].id);
            }
            me.rendered = true;
            return true;
        },
        /**         * @private         * @description 创建输入域         */
        _createCmpWidget: function() {
            var me = this;
            me.eventMap = [];
            this._createFloatPanel();
            this._initData();
            this._render();
        },
        /**         * @private         * @description 初始化数据         */
        _initData: function() {
            var me = this,
                options = me.options,
                data = options.data || [],
                value = options.value || [];
            if ($.isNull(me.options.store)) {
                me.setData(data);
            }
            me.setValue(value);
        },
        /**         * @description 为源面板初始化数据         * @param {Array} data 数据         * @param {Boolean} isAppend 是否是追加新的树节点         */
        setData: function(data, isAppend) {
            var me = this,
                options = me.options,
                type = options.type;
            isAppend = isAppend || false;
            if ("list" === type) {
                this.fromPanel.setData(data, isAppend);
                this.toPanel.setData(data, isAppend, true);
            } else {
                this.fromPanel.setData(data);
            }
        },
        /**         * @description 为目标面板初始化数据         * @param {Array} value 数据         * @param {Boolean} isAddNode 列表节点是否被添加         */
        setValue: function(value, isAddNode) { //是追加的判断是否原数据中存在
            var me = this,
                options = me.options,
                type = options.type,
                valueTemp = [],
                isAppend, sourceData;
            if (isAddNode) {
                sourceData = this.toPanel.getAllNode(); //判断追加数据是否存在
                $.each(value, function(i, valueObj) {
                    isAppend = true;
                    $.each(sourceData, function(j, sourceDataObj) {
                        if (valueObj.value === sourceDataObj.value) {
                            isAppend = false;
                        }
                    });
                    if (isAppend) {
                        valueTemp.push(valueObj);
                    }
                });
            } else {
                valueTemp = value;
            }
            if ("list" === type) {
                isAddNode = isAddNode || false;
                this.toPanel._showNode(value);
                this.fromPanel._hideNode(value);
            } else {
                this.toPanel.setData(valueTemp, isAddNode);
                this.toPanel.addListener("afterSetData", function() {
                    me.toPanel.getUnSelectedData();
                });
            }
        },
        /**         * @private         * @description 创建浮动面板         */
        _createFloatPanel: function() {
            var me = this,
                cmpEl = me.cmpEl,
                options = me.options,
                position = cmpEl.position(),
                contentEl = $("<table>").attr({
                    cellspacing: 0,
                    border: 0
                }).appendTo(cmpEl),
                contentBody = $("<tbody>").appendTo(contentEl),
                contentTr = $("<tr>").appendTo(contentBody),
                contentfromTd = $("<td>").appendTo(contentTr),
                contentSelectTd = $("<td>").appendTo(contentTr),
                contentToTd = $("<td>").appendTo(contentTr);
            me.selectPanel = me._createSeletPanel().appendTo(contentSelectTd);
            if ($.isNotNull(me.options.fromTitle)) {
                me.fTitleEl = $("<span>").addClass(listWindTitleClass).text(me.options.fromTitle).appendTo(contentfromTd);
            }
            if ($.isNotNull(me.options.toTitle)) {
                me.tTitleEl = $("<span>").addClass(listWindTitleClass).text(me.options.toTitle).appendTo(contentToTd);
            }
            var contentToDiv = $("<div>").appendTo(contentToTd).addClass(listWindContentClass),
                contentfromDiv = $("<div>").appendTo(contentfromTd).addClass(listWindContentClass);
            var fromDiv = me.fromDiv = $("<div>").appendTo(contentfromDiv);
            fromDiv.attr("id", listWindowIdPrefix + options.id + "-" + (++uuid));
            var toDiv = me.toDiv = $("<div>").appendTo(contentToDiv);
            toDiv.attr("id", listWindowIdPrefix + options.id + "-" + (++uuid));
            me._createListPanel();
        },
        /**         * @private         * @description 创建数据显示面板         */
        _createListPanel: function() {
            var me = this,
                fromPanel = null,
                options = this.options,
                type = options.type; //根据用户指定的方式显示列表
            if ("list" === type) {
                this.fromPanel = new Sweet.list.List({
                    search: options.search,
                    widgetClass: "sweet-list-list-con",
                    multi: true
                });
                this.toPanel = new Sweet.list.List({
                    search: options.search,
                    widgetClass: "sweet-list-list-con",
                    multi: true
                });
            } else if ("tree" === type) {
                this.fromPanel = new Sweet.tree.Tree({
                    multi: true,
                    data: options.data,
                    search: options.search,
                    store: options.store,
                    lazyLoad: options.lazyLoad,
                    limit: options.limit,
                    icon: options.icon,
                    widgetClass: listSweetFloatBg
                });
                this.toPanel = new Sweet.tree.Tree({
                    multi: true,
                    expand: true,
                    data: options.data,
                    search: options.search,
                    icon: options.icon,
                    widgetClass: listSweetFloatBg
                }); //双向列表树添加节点编辑事件
                this.toPanel.addListener("nodeEdit", function(event, data) {
                    if (!$.isNull(me.eventMap.nodeEdit)) {
                        me.eventMap.nodeEdit.call(this, event, data);
                    }
                });
                this.fromPanel.addListener("nodeEdit", function(event, data) {
                    if (!$.isNull(me.eventMap.nodeEdit)) {
                        me.eventMap.nodeEdit.call(this, event, data);
                    }
                });
            }
        },
        /**         * @private         * @description 创建并返回选择面板         * @return {object} 选中面板         */
        _createSeletPanel: function() {
            var me = this;
            var type = me.options.type;
            var isTree = false;
            if ("tree" === type) {
                isTree = true;
            }
            var conSelectDiv = $("<div>").addClass(isTree ? listWinSelectTreeDivClass : listWinSelectDivClass),
                selectRight = $("<button>").addClass(listWinSelectBtn).text(Sweet.constants.listWindowButton.RIGHT).bind("click", {
                    "me": me
                }, me._selectToRight).appendTo(conSelectDiv),
                selectLeft = $("<button>").addClass(listWinSelectBtn).addClass(listWinSelectLeft).text(Sweet.constants.listWindowButton.LEFT).bind("click", {
                    "me": me
                }, me._selectToLeft).appendTo(conSelectDiv),
                selectAllRight = $("<button>").addClass(listWinSelectBtn).text(Sweet.constants.listWindowButton.ALL_RIGHT).bind("click", {
                    "me": me
                }, me._selectAllToRight).appendTo(conSelectDiv),
                selectAllLeft = $("<button>").addClass(listWinSelectBtn).text(Sweet.constants.listWindowButton.ALL_LEFT).bind("click", {
                    "me": me
                }, me._selectAllToLeft).appendTo(conSelectDiv);
            return conSelectDiv;
        },
        /**         * @private         * @description 获取选中的值         * @return [array] 获取到得浮动面板中目标面板中所有的节点数据         */
        _getValue: function() {
            var me = this,
                type = me.options.type;
            if ("list" === type) {
                return this.toPanel._getAllShowNodeData();
            } else {
                return this.toPanel.getAllNode();
            }
        },
        /**         * @private         * @description 判断两个树节点是否有相同的叶子节点，如果有需要增加叶子节点的isSelect属性         * @param {Object} Object sourceObj 节点数据         * @param {Object} Object selectObj 节点数据         */
        _setSelectData: function(sourceObj, selectObj) {
            var me = this;
            $.each(selectObj, function(i, objSelect) {
                $.each(sourceObj, function(j, objSource) {
                    if (!$.isNull(objSource)) {
                        if (objSelect.value === objSource.value) {
                            objSource.isSelect = 1;
                            if (objSelect.children && 0 < objSelect.children.length && objSource.children && objSource.children.length > 0) {
                                me._setSelectData(objSource.children, objSelect.children);
                            }
                        }
                    }
                });
            });
        },
        /**         * @private         * @description 在原数据中设置左边选中的数据，增加isSelect属性         * @param {Object} Object sourceData 原始数据         * @param {Object} Object selectData 选中数据         */
        _setSourceData: function(sourceData, selectData) {
            var me = this;
            $.each(selectData, function(i, selectObj) {
                $.each(sourceData, function(j, sourceObj) {
                    if (selectObj.value === sourceObj.value) {
                        sourceObj.isSelect = 1; //判断是否有子节点
                        if ((selectObj.children && 0 < selectObj.children.length) && (sourceObj.children && sourceObj.children.length > 0)) {
                            me._setSelectData(sourceObj.children, selectObj.children);
                        }
                    }
                });
            });
        },
        /**         * @private         * @description 删除不包含isSelect的节点         * @param {Object} Object data 节点数据         */
        _deleteData: function(data) {
            var me = this;
            $.each(data, function(i, node) {
                if ($.isNull(node.isSelect)) {
                    delete data[i];
                } else {
                    if (node.children && 0 < node.children.length) {
                        me._deleteData(node.children);
                    }
                }
            });
        },
        /**         *@description 获取树中的append数据         *@private         *@param {Object} data 原数据         *@return {Array} append数据,格式如[{text:'text1',value:'value1'},...]         */
        _getAppendData: function(data) {
            var me = this,
                appendData = [];
            $.each(data, function(index, node) {
                if (node.data && node.data.isSelect) {
                    appendData.push(node);
                }
            });
            return appendData;
        },
        /**         * @private         * @description 双向列表树的右侧操作         * @param {Boolean} all 是否全部移动         */
        _toRigth: function(all) {
            var me = this,
                fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                sourceData, appendData, filterData, selectData;
            all = all || false; //取到左边树的数据
            if (all) {
                selectData = fromPanel.getAllNode();
            } else {
                selectData = fromPanel.getValue();
            } //在原数据中设置左边选中的数据，增加isSelect属性
            sourceData = $.objClone(fromPanel.filterData);
            me._setSourceData(sourceData, selectData); //在原数据中设置右边全部的数据，增加isSelect属性
            me._setSourceData(sourceData, toPanel.getAllNode(true)); //从全部数据中找出append数据
            appendData = me._getAppendData(toPanel.getAllNode(true)); //根据原数据中不包含isSelect属性的节点，生成新树数据
            me._deleteData(sourceData);
            sourceData = $.deleteUndefinedData(sourceData);
            sourceData = sourceData.concat(appendData);
            filterData = toPanel.filterData;
            toPanel.setData(sourceData);
            toPanel.filterData = toPanel.mergeTree(filterData, sourceData);
            toPanel.addListener("afterSetData", function() {
                toPanel.getUnSelectedData();
            });
        },
        /**         * @private         * @description 将来源面板中选中的一项放置到目标面板中         * @param {Object} event 右移按钮本身         */
        _selectToRight: function(event) {
            var me = event.data.me,
                fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                selectData; //取到左边树的数据                   
            if ("list" === me.options.type) {
                selectData = fromPanel.getValue();
                fromPanel._hideNode(selectData);
                toPanel._showNode(selectData);
            } else {
                me._toRigth();
            }
            me._trigger("selectToRight", me);
        },
        /**         * @private         * @description 将目标面板中选中的一项放置到来源面板中         * @param {Object} event 左移按钮本身         */
        _selectToLeft: function(event) {
            var me = event.data.me,
                data, fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                selectData = toPanel.getValue();
            if ("list" === me.options.type) {
                fromPanel._showNode(selectData);
                toPanel._hideNode(selectData);
            } else {
                toPanel.removeNode(selectData); //移除数据同时删除过滤条件中的数据
                toPanel.deleteData(selectData, toPanel.filterData);
                toPanel.deleteFilterData(toPanel.filterData); //设置所有未选中的数据为选中
                toPanel.getUnSelectedData();
                data = toPanel.getValue();
                toPanel.removeAllNode();
                toPanel.createNodes(data, true);
            }
            me._trigger("selectToLeft", me);
        },
        /**         * @private         * @description 将来源面板中所有选中项都放置到目标面板中         * @param {Object} event 全部右移按钮本身         */
        _selectAllToRight: function(event) {
            var me = event.data.me,
                fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                selectData;
            if ("list" === me.options.type) {
                selectData = fromPanel._getAllNodeData();
                fromPanel._hideNode(selectData);
                toPanel._showNode(selectData);
            } else {
                me._toRigth(true);
            }
            me._trigger("selectAllToRight", me);
        },
        /**         * @private         * @description 将目标面板中所有选中项都放置到来源面板中         * @param {Object} event 全部左移按钮本身         */
        _selectAllToLeft: function(event) {
            var me = event.data.me,
                data, fromPanel = me.fromPanel,
                toPanel = me.toPanel,
                filterData, selectData;
            if ("list" === me.options.type) {
                selectData = toPanel._getAllNodeData();
                fromPanel._showNode(selectData);
                toPanel._hideNode(selectData);
            } else {
                selectData = toPanel.getAllNode();
                toPanel.removeNode(selectData); //移除数据同时删除过滤条件中的数据
                toPanel.deleteData(selectData, toPanel.filterData);
                toPanel.deleteFilterData(toPanel.filterData);
                toPanel.getUnSelectedData();
                filterData = toPanel.filterData;
                data = toPanel.getValue();
                toPanel.setData(data);
                toPanel.filterData = toPanel.mergeTree(filterData, []);
            }
            me._trigger("selectAllToLeft", me);
        },
        /**         * @description 取消事件         * @private         */
        _removeListener: function() {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(eventName, func) {
                if ("nodeEdit" === eventName) {
                    me.eventMap.nodeEdit = null;
                    delete me.handlers.nodeEdit;
                    me.eventMap.length--;
                }
            });
        },
        /**         * @description 注册事件         * @private         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if ("nodeEdit" === eventName) {
                    me.eventMap.nodeEdit = func;
                    me.eventMap.length++;
                }
            });
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            var me = this;
            return me.cmpEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            var me = this;
            return me.cmpEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 组件宽度         */
        _setWidth: function(width) {
            var me = this;
            me.cmpEl.externalWidth(width);
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 组件高度         */
        _setHeight: function(height) {
            var me = this;
            me.cmpEl.externalHeight(height);
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        }
    });
    /**     * 双向选择列表     * @name Sweet.cmp.ListWindow     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.widget.form.input.js     * jquery.sweet.widget.form.searchfield.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree.js     * </pre>     * @example      * <pre>     *  sweetList = new Sweet.cmp.ListWindow({     *              width: 400,     *              height: 250,     *              label: true,     *              labelText: 'BSC',     *              checked: true,     *              title: 'Choose BSC',     *              data: data,     *              search: true,     *              widgetClass: 'sweet-cmp-listwin-selectBg',     *              fromTitle: 'BSC for selected',     *              toTitle: 'has selected BSC',     *              value: valueData,     *              renderTo: "sweet-mutilist"     *          });     * </pre>     */
    Sweet.cmp.ListWindow = $.sweet.widgetCmpListwindow;
}(jQuery));;
/** * @fileOverview  * <pre> * 双向list列表，只适用于数据结构为平铺的list类型的列表，提供搜索和移动功能 * 2014.1.26 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var actionBtns = [{
        value: "toRight",
        text: " > "
    }, {
        value: "toLeft",
        text: " < "
    }, {
        value: "allToRight",
        text: " >> "
    }, {
        value: "allToLeft",
        text: " << "
    }];
    $.widget("sweet.widgetCmpListwindow_v1", $.sweet.widgetCmp, /** @lends Sweet.cmp.ListWindow_v1*/ {
        version: "1.0",
        eventNames: {},
        sweetWidgetName: "[widget-cmp-listWindow_v1]",
        type: 'listwindow_v1',
        options: /** @lends Sweet.cmp.ListWindow_v1*/
        {
            /**             * 用于生成左边的数据             * @type Array             * @default []             */
            data: [],
            /**             * 用于生成右边的平铺数据             * @type Array             * @default []             */
            value: [],
            /**             * 左边的文字说明             * @type String             * @default ""             */
            fromTitle: "",
            /**             * 右边的文字说明             * @type String             * @default ""             */
            toTitle: "",
            /**             * 中间的button的宽度             * @type number             * @default 80             */
            btnWidth: 80,
            /**             * @description 用户定义的点击移动数据button前的回调函数，如果返回false，则移动数据的动作无效             * @param {Array} data 点击button进行移动的数据             * @param {String} action 点击的是哪一个button，分别有："toRight","toLeft","allToRight","allToLeft"             * @returns {Boolean} 如果返回false则移动数据的动作无效, 返回其它值正常进行             */
            beforeMoveFun: function(data, action) {
                return true;
            }
        },
        /**         * @description 取得双向列表的右边已经选择的所有数据         * @returns {Array} 返回右边列表的数据         */
        getValue: function() {
            return this.rightList ? this.rightList.getCurrentData() || [] : [];
        },
        /**         * @description 为源list(左边的list列表)设置数据,并且清除右边list的数据         * @param {Array} data 数据结构必须是数组         */
        setData: function(data) {
            var me = this;
            if ($.isNull(data)) {
                me.options.data = [];
                if (me.leftList) {
                    me.leftList.setData(null);
                }
                if (me.rightList) {
                    me.rightList.setData(null);
                }
                return;
            }
            if (me.leftList && me.rightList) { //将原来的数据清空
                me.options.data.length = 0; //将设置的数据保存到options.data中
                me.options.data = JSON.parse(JSON.stringify(data));
                me.leftList.setData(me.options.data); //清空右边list的内容数据
                me.rightList.setData([]);
            }
        },
        /**         * @description 为目的list(右边的list列表)设置数据并且全部选择上         * @param {Array} value 数据结构必须是数组         */
        setValue: function(value) {
            var me = this;
            if ($.isNull(value)) {
                me.options.value = [];
                if (me.rightList) {
                    me.rightList.setData(null);
                }
                if (me.leftList) {
                    me.leftList.setValue(null);
                }
                return;
            }
            if (me.rightList) { //将原来的数据清空
                me.options.value.length = 0; //将设置的数据保存到options.data中
                me.options.value = JSON.parse(JSON.stringify(value));
                me.rightList.setData(me.options.value);
            }
            if (me.leftList) {
                me.leftList.setValue(me.options.value);
            }
        },
        /**         * @description 销毁listwindow组件及其中的事件和数据等         */
        _destroyWidget: function() {
            var me = this;
            if (me.listWindHPanel) {
                me.listWindHPanel.destroy();
            }
            me._super();
        },
        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.cmpEl.appendTo(me.renderEl);
            if (!me.isCreate) {
                me._createListWindow();
            }
            me.listWindHPanel.render(me.options.id);
            me.rendered = true;
            return true;
        },
        /**         * @private         * @description 创建输入域         */
        _createCmpWidget: function() {
            var me = this,
                opt = me.options;
            me.isCreate = false;
            if (String(opt.width).indexOf("%") !== -1 || String(opt.height).indexOf("%") !== -1) {
                return;
            }
            this._createListWindow();
            me.isCreate = true;
        },
        /**         * @private         * @description 处理向右边列表设置数据的处理，其中包含用户定义的回调函数         * @param {Array} ldata 向右边的列表设置的数据         * @param {String} btn 点击的按钮的值         */
        _dealMoveBtns: function(ldata, btn) {
            var me = this,
                opt = me.options,
                rdimsObj = me.rightList;
            if (rdimsObj && opt.beforeMoveFun() !== false) {
                rdimsObj.setData(ldata);
            }
        },
        _deleteArraysSimilar: function(arr1, arr2) {
            var result = [];
            var totalData = arr1.concat(arr2);
            var transObj = {};
            for (var i = 0; i < totalData.length; i++) {
                transObj[totalData[i].value] = totalData[i];
            }
            for (var key in transObj) {
                result.push(transObj[key]);
            }
            return result;
        },
        _minusArrays: function(totalArr, minusArr) {
            var transObj = {};
            var result = [];
            for (var i = 0; i < totalArr.length; i++) {
                transObj[totalArr[i].value] = totalArr[i];
            }
            for (var j = 0; j < minusArr.length; j++) {
                delete transObj[minusArr[j].value];
            }
            for (var key in transObj) {
                result.push(transObj[key]);
            }
            return result;
        },
        _moveButtonClick: function(e, v) {
            var me = this;
            if (me.hasFinishedMove) {
                return;
            } //防止连续快速点击造成的脚本锁死的问题
            me.hasFinishedMove = true;
            var ldata = [];
            switch (v.value) { //移动到右边
                case actionBtns[0].value:
                    ldata = me.leftList.getCurrentValue(); //左侧没有选择数据时，不进行处理
                    if (ldata.length <= 0) {
                        me.hasFinishedMove = false;
                        return;
                    } //如果右边已经有数据，需要先将右边的数据和左边的数据合一并进行去重复，再设置到右边
                    var rightData = me.rightList.getCurrentData(); //去除两个数组中的相同元素并返回合并后的整个数组
                    var result = rightData.length > 0 ? me._deleteArraysSimilar(ldata, rightData) : ldata;
                    me._dealMoveBtns(result, actionBtns[0].value);
                    break; //将右边选中的值移动到左边
                case actionBtns[1].value:
                    var selectedData = me.rightList.getCurrentValue(); //右侧没有选择数据时，不进行处理
                    if (selectedData.length <= 0) {
                        me.hasFinishedMove = false;
                        return;
                    }
                    var tempData = me.rightList.getData();
                    if (!tempData || !selectedData) {
                        me.hasFinishedMove = false;
                        return;
                    } //从tempData中清除selectedData中值，将剩下的设置到右边列表
                    ldata = me._minusArrays(tempData, selectedData);
                    me._dealMoveBtns(ldata, actionBtns[1].value);
                    var lValue = me.leftList.getValue();
                    lValue = me._minusArrays(lValue, selectedData);
                    if (me.leftList) {
                        me.leftList.setValue(lValue);
                    }
                    break; //将左边的值全部移动到右边(不管是否选中)
                case actionBtns[2].value:
                    ldata = me.leftList.getCurrentData();
                    if (ldata.length <= 0) {
                        me.hasFinishedMove = false;
                        return;
                    } //如果左边列表进行过滤操作，再进行全部移动到右边的操作，这时只全部移动过滤出来的数据
                    var rData = me.rightList.getData() || [];
                    if (rData.length > 0) { //如果右边还有数据，需要先去除重复数据
                        ldata = me._deleteArraysSimilar(rData, ldata);
                    }
                    me._dealMoveBtns(ldata, actionBtns[2].value);
                    break; //将右边的值全部移动到左边(不管是否选中)
                case actionBtns[3].value:
                    if (me.leftList) {
                        me.leftList.setValue(null);
                    }
                    ldata = me.rightList.getCurrentData() || [];
                    if (ldata.length <= 0) {
                        me.hasFinishedMove = false;
                        return;
                    }
                    var tempData = me.rightList.getData();
                    if (ldata.length !== tempData.length) { //存放右边除去选中的值剩下的值
                        ldata = me._minusArrays(tempData, ldata);
                    } else {
                        ldata = [];
                    }
                    me._dealMoveBtns(ldata, actionBtns[3].value);
                    break;
            }
            me.hasFinishedMove = false;
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */
        _setWidth: function(width) {
            this.cmpEl.externalWidth(width);
            if (this.listWindHPanel) {
                this.listWindHPanel.setWidth(width);
            }
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */
        _setHeight: function(height) {
            this.cmpEl.externalHeight(height);
            if (this.listWindHPanel) {
                this.listWindHPanel.setHeight(height);
            }
        },
        _doLayout: function() {
            var me = this;
            if (me.listWindHPanel) {
                me.listWindHPanel.doLayout();
            }
            if (me.leftList) {
                me.leftList.doLayout(true);
            }
            if (me.rightList) {
                me.rightList.doLayout(true);
            }
        },
        /**         * @description 创建维度的选择框         * @private         */
        _createListWindow: function() {
            var me = this,
                opt = me.options,
                btnWidth = opt.btnWidth, //两个btn组的间距
                btnGroupPadding = 30, //title的高度
                titleH = 22, //普通item间的间距
                padding = 10,
                width = me.cmpEl.width(),
                height = me.cmpEl.height(), //装list和title的容器宽度
                w = Math.floor((width - btnWidth - padding * 2) / 2), //装list和title的容器高度
                h = height - titleH, //两个button的容器的高度25*2 + 10
                btnGroupH = 60, //四个button的容器的高度(需要加上两组button的间距)
                btnGroupVPanelH = btnGroupH * 2 + btnGroupPadding, //整个button组的margin
                btnGroupMarginTop = (h - btnGroupVPanelH) / 2 + titleH,
                listH = h,
                listW = w - 2; //首先计算各个的宽度和高度
            var htmlL = '<span class="sweet-cmp-stat-title">' + opt.fromTitle + '</span>';
            var htmlR = '<span class="sweet-cmp-stat-title">' + opt.toTitle + '</span>';
            me.leftList = new Sweet.list.OptimizeList({
                width: listW,
                search: true,
                height: h,
                multi: true,
                isBorder: true,
                data: opt.data
            });
            var ltemp = new Sweet.panel.VPanel({
                width: w,
                height: height,
                padding: 2,
                items: [{
                    html: htmlL
                },
                me.leftList]
            }); /* 向右按钮*/
            me.toRightBtn = new Sweet.form.Button({
                value: actionBtns[0],
                width: btnWidth
            });
            me.toRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* 向左按钮*/
            me.toLeftBtn = new Sweet.form.Button({
                value: actionBtns[1],
                width: btnWidth
            });
            me.toLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* 全部向右按钮*/
            me.toAllRightBtn = new Sweet.form.Button({
                value: actionBtns[2],
                width: btnWidth
            });
            me.toAllRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* 全部向左按钮*/
            me.toAllLefttBtn = new Sweet.form.Button({
                value: actionBtns[3],
                width: btnWidth
            });
            me.toAllLefttBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
            var vpUp = new Sweet.panel.VPanel({
                height: btnGroupH,
                width: btnWidth,
                items: [me.toRightBtn, me.toLeftBtn]
            });
            var vpDown = new Sweet.panel.VPanel({
                height: btnGroupH,
                width: btnWidth,
                items: [me.toAllRightBtn, me.toAllLefttBtn]
            });
            me.vpBtns = new Sweet.panel.VPanel({
                height: btnGroupVPanelH + btnGroupMarginTop,
                width: btnWidth,
                padding: btnGroupPadding,
                margin: [btnGroupMarginTop, 0, 0, 0],
                items: [vpUp, vpDown]
            });
            me.rightList = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                search: true,
                multi: true,
                isBorder: true,
                data: opt.value,
                value: opt.value
            });
            var rtemp = new Sweet.panel.VPanel({
                width: w,
                height: height,
                padding: 2,
                items: [{
                    html: htmlR
                },
                me.rightList]
            });
            me.listWindHPanel = new Sweet.panel.HPanel({
                width: "100%",
                height: listH,
                itemExtend: false,
                items: [ltemp, me.vpBtns, rtemp]
            });
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            var me = this;
            return me.cmpEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            var me = this;
            return me.cmpEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        }
    });
    /**     * 双向列表(List数据形式)组件     * @name Sweet.cmp.ListWindow_v1     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.list.js     * jquery.sweet.cmp.optimizeList.js     * </pre>     * @example      * <pre>     *  sweetList = new Sweet.cmp.ListWindow_v1({     *              data : [],     *              indicators : [],     *              statFun : function()//回调函数     *          });     * </pre>     */
    Sweet.cmp.ListWindow_v1 = $.sweet.widgetCmpListwindow_v1;
}(jQuery));;
/** * @fileOverview  * <pre> * 双向tree列表，提供搜索和移动功能 * 2014.06.26 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var treeWindowLPanelClass = "sweet-cmp-treewindow-lpanel",
        treeWindowMPanelClass = "sweet-cmp-treewindow-mpanel",
        treeWindowRPanelClass = "sweet-cmp-treewindow-rpanel",
        treeWindowBtnPanelClass = "sweet-cmp-treewindow-btnpanel",
        treeWindowTitleClass = "sweet-cmp-treewindow-title",
        eventBeforeMoveRight = "beforemoveright",
        eventBeforeLoad = "beforeload",
        eventLoad = "load",
        eventSearch = "search",
        eventVCountChange = "vcountchange",
        ACTION_BTNS = [{
            value: "_moveRight",
            text: " > "
        }, {
            value: "_moveLeft",
            text: " < "
        }, {
            value: "_allMoveRight",
            text: " >> "
        }, {
            value: "_allMoveLeft",
            text: " << "
        }],
        treeWindowPrefix = "sweet-treewindow",
        uuid = uuid || 1000;
    $.widget("sweet.widgetCmpTreeWindow", $.sweet.widgetCmp, /** @lends Sweet.cmp.TreeWindow*/ {
        version: "1.0",
        sweetWidgetName: "[widget-cmp-treeWindow]",
        type: 'treewindow',
        eventNames: /** @lends Sweet.cmp.TreeWindow.prototype */
        {
            /**             * @event             * @description 右移前事件             */
            beforemoveright: "右移前事件",
            /**             * @event             * @description 延迟加载数据时,左列表加载前事件,一般参数为(loader, tree),loader中的tParams记录了过滤信息,如果没有则没有tParams             */
            beforeload: "延迟加载数据时,左列表加载前事件",
            /**             * @event             * @description 延迟加载数据时,左列表数据加载回时事件,一般参数为(loader, tree),loader中datas为加载回来的数据,其中tParams记录了过滤信息,如果没有则没有tParams             */
            load: "延迟加载数据时,左列表数据加载回时事件",
            /**             * @event             * @description 右列表节点数量变化事件,右移、左移、setValue、右列表过滤时不管较之前数量有无变化都触发,一般参数为(count, treewindow)             */
            vcountchange: "右列表节点数量变化事件"
        },
        options: /** @lends Sweet.cmp.TreeWindow*/
        {
            /**             * 左列表数据             * @type Array             * @default []             */
            data: [],
            /**             * 右列表数据             * @type Array             * @default []             */
            value: [],
            /**             * 左列表title             * @type String             * @default ""             */
            fromTitle: Sweet.cmp.i18n.listWindow.fromTitle,
            /**             * 右列表title             * @type String             * @default ""             */
            toTitle: Sweet.cmp.i18n.listWindow.toTitle,
            /**             * 中间的button的宽度             * @type number             * @default 60             */
            btnWidth: 60,
            /**             * 是否有提示             * @type {Boolean}             * @default false             */
            tip: false,
            /**             * 是否显示树节点的图标             * @type {Boolean}             * @default true             */
            icon: true,
            /**             * 是否显示节点之间的连线             * @type {Boolean}             * @default true             */
            useArrows: true,
            /**             * 获值时需要取的节点数据key             * @type {Array}             * @default ["value", "text", "data", "icon"]             */
            valueKeys: ["value", "text", "data", "icon"],
            /**             * (暂不支持)左列表框父节点是否显示子节点个数,只针对非延迟加载且非编辑树,默认不显示,如果配置true/"true"则显示所有子节点个数,如果配置"leaf"只显示所有叶子节点个数             * @type {Boolean/String}             * @default false             */
            lShowCCount: false,
            /**             * 右列表框父节点是否显示子节点个数,只针对非延迟加载且非编辑树,默认不显示,如果配置true/"true"则显示所有子节点个数,如果配置"leaf"只显示所有叶子节点个数             * @type {Boolean/String}             * @default false             */
            rShowCCount: false,
            /**             * 延迟加载器:如果为延迟加载则配置,非延迟加载则不要配置             * {             *      url: "XXXX.action",              //请求数据的URL             *      baseParams: {param: xxxxx},      //提交的参数             *      autoLoad: true,                  //初始化时是否自动加载数据,默认为true                *      loadMask: true,                   //是否出遮罩             *      contentType: "application/json;charset=UTF-8"             * }             * @type {Object}             * @default null             */
            loader: null
        },
        /**         * @description 获取数据         * @returns {Array} 返回右边列表的数据         */
        getValue: function() {
            var me = this,
                rOptObjDatas, value;
            if (!me.rightTree) {
                return [];
            }
            rOptObjDatas = me.rightTree.getCurrentOptObjData();
            value = me._parseTreeDatas(rOptObjDatas);
            return value;
        },
        /**         * @description 为源tree(左边的tree列表)设置数据,并且清除右边tree的数据         * @param {Array} data 数据结构必须是数组         */
        setData: function(data) {
            var me = this,
                value;
            if (!me.leftTree || !me.rightTree) {
                return;
            } //左树设置数据
            me.leftTree.setData(data);
            value = me.leftTree.getValue();
            me._initExpanded(value); //如果左树有选中,则设置给右树;否则清空右树
            me.rightTree.setData(value);
            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);
        },
        /**         * @description 为目的tree(右边的tree列表)设置数据并且全部选择上         * @param {Array} value 数据结构必须是数组         */
        setValue: function(value) {
            var me = this;
            if (!me.leftTree || !me.rightTree) {
                return;
            }
            me._initExpanded(value);
            me.rightTree.setData(value);
            me.leftTree.setValue(value);
            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);
        },
        /**         * @description 设置组件加载器(只针对延迟加载数据时左树的loader设置)         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数         */
        setLoader: function(loader) {
            var me = this;
            if (!me.leftTree) {
                return;
            }
            if (me.options.loader && !loader) {
                me._createMoveRightBtn();
                me._createMoveLeftBtn();
                me._createMoveAllRightBtn();
                me._createMoveAllLeftBtn();
                me.vpUp.removeItems();
                me.vpDown.removeItems();
                me.vpUp.addItems([me.moveRightBtn, me.moveLeftBtn]);
                me.vpDown.addItems([me.moveAllRightBtn, me.moveAllLeftBtn]);
            } else if (!me.options.loader && loader) {
                me._createMoveRightBtn();
                me._createMoveLeftBtn();
                me.vpUp.removeItems();
                me.vpDown.removeItems();
                me.vpUp.addItems(me.moveRightBtn);
                me.vpDown.addItems(me.moveLeftBtn);
            }
            me.options.loader = loader;
            me.leftTree.setLoader(loader);
        },
        /**         * @description 组件重新加载数据         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数         */
        load: function(loader) {
            var me = this,
                value;
            if (!me.leftTree || !me.rightTree) {
                return;
            }
            me.leftTree.load(loader);
            value = me.leftTree.getValue();
            me._initExpanded(value); //如果左树有选中,则设置给右树;否则清空右树
            me.rightTree.setData(value);
            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);
        },
        /**         * @description 销毁treeWindowow组件及其中的事件和数据等         */
        _destroyWidget: function() {
            var me = this;
            me._super();
            if (me.treeWindowEl) {
                me.treeWindowEl.remove();
            }
            if (me.leftTree) {
                me.leftTree.destroy();
            }
            if (me.vpBtns) {
                me.vpBtns.destroy();
            }
            if (me.rightTree) {
                me.rightTree.destroy();
            }
        },
        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.treeWindowEl.appendTo(me.renderEl);
            me.leftTree.render(me.__leftTreeRenderID);
            me.rightTree.render(me.__rightTreeRenderID);
            me.vpBtns.render(me.__mOptBtnPanelRenderID); //调整布局,当创建完再设置文本
            me.lTitleEl.html(me.options.fromTitle);
            me.rTitleEl.html(me.options.toTitle);
            me.rendered = true;
            return true;
        },
        /**         * @description 创建维度的选择框         * @private         */
        _createTreeWindow: function() {
            var me = this,
                btnWidth = me.options.btnWidth, //两个btn组的间距
                btnGroupPadding = 30,
                btnH = 23,
                btnGroupH = 60,
                listeners, tListeners, width, height, treeWidth, titleHeight, treeHeight, padding = 10,
                tBtnPadding = 5,
                btnPanelHeight, tSearchHeight = 30; //事件处理
            listeners = me.options["listeners"];
            tListeners = {};
            if (!$.isEmptyObject(listeners)) {
                for (var key in listeners) {
                    if (eventLoad == key || eventBeforeLoad == key) {
                        tListeners[key] = listeners[key];
                    }
                    me.addListener(("" + key), listeners[key]);
                }
            } //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱
            width = me.treeWindowEl.width();
            height = me.treeWindowEl.height();
            treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);
            titleHeight = me.lTitleDiv.outerHeight();
            treeHeight = height - titleHeight;
            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;
            if (me.options.loader) {
                tBtnPadding = 10;
            }
            if (height < me.__tempHeight) {
                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding + tSearchHeight) / 2);
            } else {
                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding) / 2);
            } //左树
            me.leftTree = new Sweet.tree.Tree_v1({
                width: treeWidth,
                height: treeHeight,
                search: true,
                multi: true,
                tip: me.options.tip,
                valueKeys: me.options.valueKeys,
                icon: me.options.icon,
                useArrows: me.options.useArrows,
                listeners: tListeners,
                showCCount: me.options.lShowCCount,
                loader: me.options.loader
            }); //右树
            me.rightTree = new Sweet.tree.Tree_v1({
                width: treeWidth,
                height: treeHeight,
                search: true,
                multi: true,
                valueKeys: me.options.valueKeys,
                tip: me.options.tip,
                icon: me.options.icon,
                useArrows: me.options.useArrows,
                showCCount: me.options.rShowCCount,
                data: me.options.value
            }); //右移按钮
            me._createMoveRightBtn(); //左移按钮
            me._createMoveLeftBtn(); //如果为延迟加载则不提供全移操作
            if (!me.options.loader) { //全部右移按钮
                me._createMoveAllRightBtn(); //全部左移按钮
                me._createMoveAllLeftBtn();
                me.vpUp = new Sweet.panel.VPanel({
                    height: btnGroupH,
                    width: btnWidth,
                    items: [me.moveRightBtn, me.moveLeftBtn]
                });
                me.vpDown = new Sweet.panel.VPanel({
                    height: btnGroupH,
                    width: btnWidth,
                    items: [me.moveAllRightBtn, me.moveAllLeftBtn]
                });
            } else {
                me.vpUp = new Sweet.panel.VPanel({
                    height: (btnGroupH + btnH),
                    width: btnWidth,
                    items: [me.moveRightBtn]
                });
                me.vpDown = new Sweet.panel.VPanel({
                    height: (btnGroupH - btnH),
                    width: btnWidth,
                    items: [me.moveLeftBtn]
                });
            }
            me.vpBtns = new Sweet.panel.VPanel({
                height: btnPanelHeight,
                padding: btnGroupPadding,
                items: [me.vpUp, me.vpDown]
            });
        },
        /**         * @private         * @description 创建右移按钮,并注册事件处理         */
        _createMoveRightBtn: function() {
            var me = this,
                btnWidth = me.options.btnWidth; //右移按钮
            me.moveRightBtn = new Sweet.form.Button({
                value: ACTION_BTNS[0],
                width: btnWidth
            }); //右移事件
            me.moveRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建左移按钮,并注册事件处理         */
        _createMoveLeftBtn: function() {
            var me = this,
                btnWidth = me.options.btnWidth; //右移按钮
            me.moveLeftBtn = new Sweet.form.Button({
                value: ACTION_BTNS[1],
                width: btnWidth
            }); //右移事件
            me.moveLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建全部右移按钮,并注册事件处理         */
        _createMoveAllRightBtn: function() {
            var me = this,
                btnWidth = me.options.btnWidth; //右移按钮
            me.moveAllRightBtn = new Sweet.form.Button({
                value: ACTION_BTNS[2],
                width: btnWidth
            }); //右移事件
            me.moveAllRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建全部左移按钮,并注册事件处理         */
        _createMoveAllLeftBtn: function() {
            var me = this,
                btnWidth = me.options.btnWidth; //右移按钮
            me.moveAllLeftBtn = new Sweet.form.Button({
                value: ACTION_BTNS[3],
                width: btnWidth
            }); //右移事件
            me.moveAllLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建列表组件         */
        _createSweetWidget: function() {
            var me = this,
                id = me.options.id,
                widgetClass = me.options.widgetClass,
                lPanelDiv, rPanelDiv, value, change = {
                    isChange: false
                }; //当高度小于300时,操作按钮以列表中间为准
            me.__tempHeight = 300; //主面板
            me.treeWindowEl = $("<div>").attr("id", me.options.id);
            if (widgetClass && "" != widgetClass) {
                me.treeWindowEl.addClass(widgetClass);
            } //左面板:其中装有左title和左tree
            lPanelDiv = $("<div>").addClass(treeWindowLPanelClass).appendTo(me.treeWindowEl); //中间面板:其中装有操作button
            me.mPanelDiv = $("<div>").addClass(treeWindowMPanelClass).height(me.options.height).appendTo(me.treeWindowEl); //右面板:其中装有右title和右tree
            rPanelDiv = $("<div>").addClass(treeWindowRPanelClass).appendTo(me.treeWindowEl);
            me.lTitleDiv = $("<div>").appendTo(lPanelDiv);
            me.lTitleEl = $("<span>").addClass(treeWindowTitleClass).appendTo(me.lTitleDiv); //左树渲染的dom ID
            me.__leftTreeRenderID = id + treeWindowPrefix + "-lefttree-" + uuid;
            $("<div>").attr("id", me.__leftTreeRenderID).appendTo(lPanelDiv); //右树渲染的dom ID
            me.__rightTreeRenderID = id + treeWindowPrefix + "-righttree-" + uuid;
            me.rTitleDiv = $("<div>").appendTo(rPanelDiv);
            me.rTitleEl = $("<span>").addClass(treeWindowTitleClass).appendTo(me.rTitleDiv);
            $("<div>").attr("id", me.__rightTreeRenderID).appendTo(rPanelDiv);
            me.mTopDiv = $("<div>").appendTo(me.mPanelDiv); //中间操作按钮panel渲染的dom ID
            me.__mOptBtnPanelRenderID = id + treeWindowPrefix + "-optbtnpanel-" + uuid;
            $("<div>").attr("id", me.__mOptBtnPanelRenderID).addClass(treeWindowBtnPanelClass).appendTo(me.mPanelDiv); // 创建列表
            me._createTreeWindow(); // 注册事件
            me._registInitEvent(); //左树设置数据
            if (me.options.data && me.options.data.length > 0) {
                me.leftTree.setData(me.options.data);
            }
            value = me.leftTree.getValue();
            if (me.options.value && me.options.value.length > 0) { //合并
                if (value && value.length > 0) {
                    me._doCompoundTree(value, me.options.value, "value", change);
                } else {
                    value = me.options.value;
                }
            } //如果左树有选中,则设置给右树;
            if (value && value.length > 0) {
                me._initExpanded(value);
                me.rightTree.setData(value);
                me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);
            }
        },
        /**         * @private         * @description 组件重绘         */
        _doLayout: function() {
            var me = this,
                btnWidth = me.options.btnWidth,
                btnGroupPadding = 30,
                btnGroupH = 60,
                btnPanelHeight, titleHeight, padding = 10,
                tBtnPadding = 5,
                width = me.treeWindowEl.width(),
                height = me.treeWindowEl.height(),
                treeWidth, treeHeight, tSearchHeight = 30;
            width = me.treeWindowEl.width();
            height = me.treeWindowEl.height();
            treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);
            titleHeight = me.lTitleDiv.outerHeight();
            treeHeight = height - titleHeight;
            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;
            if (me.options.loader) {
                tBtnPadding = 10;
            }
            if (height < me.__tempHeight) {
                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding + tSearchHeight) / 2);
            } else {
                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding) / 2);
            }
            me.mPanelDiv.height(height);
            if (me.leftTree) {
                me.leftTree.setWH(treeWidth, treeHeight);
                me.leftTree.doLayout(true);
            }
            if (me.rightTree) {
                me.rightTree.setWH(treeWidth, treeHeight);
                me.rightTree.doLayout(true);
            }
        },
        /**         * @private         * @description 移动操作处理         * @param {Object} e 事件对象         * @param {Object} v 点击btn的value         */
        _moveButtonClick: function(e, v) {
            var me = this;
            switch (v.value) {
                case ACTION_BTNS[0].value:
                    me.moveRight();
                    break;
                case ACTION_BTNS[1].value:
                    me.moveLeft();
                    break;
                case ACTION_BTNS[2].value:
                    me.moveAllRight();
                    break;
                case ACTION_BTNS[3].value:
                    me.moveAllLeft();
                    break;
            }
        },
        /**         * @description 右移操作处理         */
        moveRight: function() {
            var me = this,
                lValue = [],
                rDatas, flag, change = {
                    isChange: false
                };
            if (!me.leftTree || !me.rightTree) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            lValue = me.leftTree.getValue(); //左侧没有选择数据时，不进行处理
            if (!lValue || lValue.length <= 0) {
                me.__isDoMoving = false;
                return;
            } //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边
            rDatas = me.rightTree.getCurrentOptObjData();
            if (!$.isEmptyObject(rDatas)) {
                rDatas = me._parseTreeDatas(rDatas);
                me._doCompoundTree(rDatas, lValue, "value", change);
            } else {
                change["isChange"] = true;
                rDatas = lValue;
            } //如果右列表有过滤则置为true
            if (me.rightTree.searchField && me.rightTree.searchField.getValue() && me.rightTree.searchField.getValue()["value"]) {
                change = {
                    isChange: true
                };
            } //左右数据不一致时才setData
            if (change && change["isChange"]) {
                flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);
                if (false === flag || "false" === flag) {
                    me.__isDoMoving = false;
                    return;
                }
                me._initExpanded(rDatas);
                me.rightTree.setData(rDatas);
            }
            me.__isDoMoving = false;
            me._triggerHandler(me._getLeafCount(rDatas), eventVCountChange, me);
        },
        /**         * @description 左移操作处理         */
        moveLeft: function() {
            var me = this,
                rObjDatas, rValue, rValueListDatas = [],
                rValueObjDatas = {}, lSelectedDatas, lValue;
            if (!me.leftTree || !me.rightTree) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            rValue = me.rightTree.getValue(); //如果右侧没有选择,则不做操作
            if (!rValue || rValue.length <= 0) {
                me.__isDoMoving = false;
                return;
            } //解析value数据
            me.rightTree.parseDatas(rValue, rValueListDatas, rValueObjDatas, "", false, null); //拿到右树所有的数据
            rObjDatas = me.rightTree.getCurrentObjData();
            rValueListDatas = null;
            lSelectedDatas = me.leftTree.getSelectedDatas() || {}; //从右树中删除选中的节点
            for (var key in rValueObjDatas) {
                if (rValueObjDatas[key]["leaf"]) {
                    delete rObjDatas[key];
                    delete lSelectedDatas[key];
                }
            }
            rValueObjDatas = null;
            rObjDatas = me._parseTreeDatas(rObjDatas);
            me._initExpanded(rObjDatas);
            me.rightTree.setData(rObjDatas);
            lValue = me._parseTreeValues(lSelectedDatas);
            me.leftTree.setValue(lValue);
            me.__isDoMoving = false;
            me._triggerHandler(me._getLeafCount(rObjDatas), eventVCountChange, me);
        },
        /**         * @description 全部右移操作处理         */
        moveAllRight: function() {
            var me = this,
                lDatas, lOptObjDatas, rOptObjDatas, flag, change = {
                    isChange: false
                };
            if (!me.leftTree || !me.rightTree) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            lOptObjDatas = me.leftTree.getCurrentOptObjData(); //如果左侧没有操作数据,则不做操作
            if ($.isEmptyObject(lOptObjDatas)) {
                me.__isDoMoving = false;
                return;
            } //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边
            rOptObjDatas = me.rightTree.getCurrentOptObjData();
            lDatas = me._parseTreeDatas(lOptObjDatas);
            if (!$.isEmptyObject(rOptObjDatas)) {
                rOptObjDatas = me._parseTreeDatas(rOptObjDatas);
                me._doCompoundTree(rOptObjDatas, lDatas, "value", change);
            } else {
                change["isChange"] = true;
                rOptObjDatas = lDatas;
            } //如果右列表有过滤则置为true
            if (me.rightTree.searchField && me.rightTree.searchField.getValue() && me.rightTree.searchField.getValue()["value"]) {
                change = {
                    isChange: true
                };
            } //左右数据不一致时才setData
            if (change && change["isChange"]) { //左右树数据不一样时触发右移事件
                flag = me._triggerHandler(rOptObjDatas, eventBeforeMoveRight, me);
                if (false === flag || "false" === flag) {
                    me.__isDoMoving = false;
                    return;
                }
                me._initExpanded(rOptObjDatas);
                me.rightTree.setData(rOptObjDatas);
            } else {
                me.rightTree.searchField.setValue({
                    value: "",
                    text: ""
                });
            }
            me.__isDoMoving = false;
            me._triggerHandler(me._getLeafCount(rOptObjDatas), eventVCountChange, me);
        },
        /**         * @description 全部左移操作处理         */
        moveAllLeft: function() {
            var me = this,
                rObjDatas, rOptObjDatas;
            if (!me.leftTree || !me.rightTree) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            me.leftTree.setValue(null);
            rOptObjDatas = me.rightTree.getCurrentOptObjData(); //如果右侧没有操作数据,则不做操作
            if ($.isEmptyObject(rOptObjDatas)) {
                me.__isDoMoving = false;
                return;
            }
            rObjDatas = me.rightTree.getCurrentObjData();
            for (var key in rOptObjDatas) {
                if (rOptObjDatas[key]["leaf"]) {
                    delete rObjDatas[key];
                }
            }
            rObjDatas = me._parseTreeDatas(rObjDatas);
            me._initExpanded(rObjDatas);
            me.rightTree.setData(rObjDatas);
            me.__isDoMoving = false;
            me._triggerHandler(me._getLeafCount(rObjDatas), eventVCountChange, me);
        },
        /**         * @private         * @description 获取组件中选择的节点数据,以树型结构返回选中的节点数据数组         * @param {Object} selectedDatas 选择节点信息         * @return {Array} 选中值,格式：[{text:'text1',value:'value1',children: [...]},...]         */
        _parseTreeValues: function(selectedDatas) {
            var me = this,
                result = {}, keys = me.options.valueKeys,
                tree, tDatas, objDatas;
            if (!me.leftTree || $.isEmptyObject(selectedDatas)) {
                return [];
            }
            tree = me.leftTree;
            if (!me.options.loader) {
                objDatas = me.leftTree.getCurrentObjData();
            } else {
                objDatas = me.leftTree.getCurrentOptObjData();
            } //从当前操作的数据中还原选中数据
            tree.parseTreeDatas(selectedDatas, objDatas, keys, result);
            if (!result["data"]) {
                return [];
            }
            tDatas = $.objClone(result["data"]);
            return tDatas;
        },
        /**         * @private         * @description 获得一棵树型数据         * @param {Object} datas 待转化的数据         * @returns {Array} 返回一棵树型数据         */
        _parseTreeDatas: function(datas) {
            var me = this,
                tempTreeDatas, leafDatas, tree, valueKeys = me.options.valueKeys;
            if (!me.leftTree && !me.rightTree) {
                return [];
            }
            tree = me.leftTree || me.rightTree;
            tempTreeDatas = {};
            leafDatas = {};
            for (var key in datas) {
                if (datas[key]["leaf"]) {
                    leafDatas[key] = datas[key];
                }
            }
            tree.parseTreeDatas(leafDatas, datas, valueKeys, tempTreeDatas);
            if (tempTreeDatas["data"]) {
                tempTreeDatas = tempTreeDatas["data"];
            } else {
                tempTreeDatas = [];
            }
            return tempTreeDatas;
        },
        /**         * @private         * @description 将两棵树合并成一棵树         * @param {Array} nodes1 树1         * @param {Array} nodes2 树2         * @param {Object} attr 标识节点的KEY         * @param {Object} change 两棵树的数据是否一样         */
        _doCompoundTree: function(nodes1, nodes2, attr, change) {
            var me = this,
                flag;
            for (var i = 0; i < nodes2.length; i++) {
                flag = true;
                nodes2[i].checked = false;
                for (var j = 0; j < nodes1.length; j++) {
                    if (nodes2[i][attr] == nodes1[j][attr]) {
                        if (nodes2[i].children && nodes2[i].children.length > 0 && nodes1[j].children && nodes1[j].children.length > 0) {
                            me._doCompoundTree(nodes1[j].children, nodes2[i].children, attr, change);
                        }
                        if (nodes2[i].children && nodes2[i].children.length > 0 && (!nodes1[j]["children"] || nodes1[j].children.length <= 0)) {
                            nodes1[j].children = [];
                            me._doCompoundTree(nodes1[j].children, nodes2[i].children, attr, change);
                        }
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    change["isChange"] = true;
                    nodes1.push(nodes2[i]);
                }
            }
        },
        /**         * @private         * @description 获取树叶子节点个数         * @param {Object} datas 待获取叶子节点的数据         * @param {Boolean} isObject 是否是对象         * @returns {Number} 返回叶子节点个数         */
        _getLeafCount: function(datas, isObject) {
            var me = this,
                tDatas = [],
                count = 0;
            if (isObject) {
                if ($.isEmptyObject(datas)) {
                    return count;
                }
                for (var key in datas) {
                    if (datas[key] && (true == datas[key]["leaf"] || "true" == datas[key]["leaf"])) {
                        count++;
                    }
                }
                return count;
            }
            if ($.isNull(datas)) {
                datas = [];
            }
            if (!$.isArray(datas)) {
                datas = [datas];
            }
            if (datas.length <= 0) {
                return count;
            }
            me._getLeafDatas(datas, tDatas);
            count = tDatas.length;
            return count;
        },
        /**         * @private         * @description 获取树叶子节点数据         * @param {Array} datas 待获取叶子节点的数据         * @param {Array} result 待返回叶子节点的数据         * @returns {Array} result 返回叶子节点的数据         */
        _getLeafDatas: function(datas, result) {
            var me = this;
            for (var i = 0; i < datas.length; i++) {
                if (datas[i]) {
                    if (datas[i]["children"] && datas[i]["children"].length > 0) {
                        me._getLeafDatas(datas[i]["children"], result);
                    } else {
                        result.push(datas[i]);
                    }
                }
            }
            return result;
        },
        /**         * 将所有的父节点展开         * @param {Array} datas 待转化数据         * @return {TypeName}          */
        _initExpanded: function(datas) {
            var me = this,
                childrens;
            if (!datas) {
                return [];
            }
            for (var i = 0; i < datas.length; i++) {
                childrens = datas[i].children;
                if (childrens && childrens.length > 0) {
                    datas[i].expanded = true;
                    me._initExpanded(childrens);
                }
            }
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            return this.treeWindowEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            return this.treeWindowEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */
        _setWidth: function(width) {
            this.treeWindowEl.externalWidth(width);
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */
        _setHeight: function(height) {
            this.treeWindowEl.externalHeight(height);
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me.treeWindowEl.externalWidth(width);
            me.treeWindowEl.externalHeight(height);
        },
        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) { // 回调注册事件
                if (eName === handlerName) {
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**         * @private         * @description 注册事件         */
        _addListener: function() {
            var me = this;
            $.each(me.handlers, function(eventName, func) {
                if (me.leftTree && (eventName === eventBeforeLoad || eventName === eventLoad)) {
                    me.leftTree.addListener(eventName, func);
                }
            });
        },
        /**         * @private         * @description 删除注册监听事件         * @param {String} eventName 事件名称         */
        _removeListener: function(eventName) {
            var me = this;
            if (!$.isNull(eventName)) {
                if (me.leftTree && (eventName === eventBeforeLoad || eventName === eventLoad)) {
                    me.leftTree.removeListener(eventName);
                }
            }
        },
        /**         * @private         * @description 注册事件         */
        _registInitEvent: function() {
            var me = this;
            me.leftTree.addListener(eventBeforeLoad, function(loader, lTree) {
                me._triggerHandler(loader, eventBeforeLoad, lTree);
            });
            me.leftTree.addListener(eventLoad, function(loader, lTree) {
                me._triggerHandler(loader, eventLoad, lTree);
            });
            me.rightTree.addListener(eventSearch, function(datas, rTree) {
                me._triggerHandler(me._getLeafCount(datas, true), eventVCountChange, me);
            });
        }
    });
    /**     * 双向列表(tree数据形式)组件     * @name Sweet.cmp.TreeWindow     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree_v1.js     * </pre>     * @example      * <pre>     * sweetTreeWindow = new Sweet.cmp.TreeWindow({     *     width: 800,     *     height: 400,     *     data: datas,     *     fromTitle: 'BSC for selected',     *     toTitle: 'has selected BSC'     * });     * </pre>     */
    Sweet.cmp.TreeWindow = $.sweet.widgetCmpTreeWindow;
}(jQuery));;
/**
 * @fileOverview 忙时组件
 * @date 2012/11/25
 * @version 1.0
 * http://www.huawei.com
 *
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved
 * 
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *  jquery.sweet.widget.js
 *  jquery.sweet.widget.form.js
 *  jquery.sweet.widget.form.input.js
 *  jquery.sweet.widget.form.checkbox.js
 *  jquery.sweet.widget.form.button.js
 *  jquery.sweet.cmp.js
 */
(function($, undefined) {
    var liPicClass = "sweet-cmp-timeschedule-panel-li-pic",
        spanSelectedClass = "sweet-cmp-timeschedule-span",
        textButtonClass = "sweet-cmp-timeschedule-textButtonDiv",
        inputParentClass = "sweet-cmp-timeschedule-inputParent",
        normalClass = "sweet-cmp-timeschedule-normal",
        grayClass = "sweet-cmp-timeschedule-gray",
        inputElClass = "sweet-cmp-timeschedule-input",
        imageButtonClass = "sweet-cmp-timeschedule-imageButton",
        clearElClass = "sweet-cmp-timeschedule-clearEl",
        textGrayClass = "sweet-form-timeschedule-textGray",
        defaultInputEmptyDivClass = "sweet-form-timeschedule-emptyDiv";

    $.widget("sweet.widgetCmpTimeschedule", $.sweet.widgetCmp, {
        version: "1.0",
        sweetWidgetName: "[widget-cmp-timeschedule]",
        defaultElement: "<div>",
        type: "timeschedule",
        // form组件公共配置参数
        options: {
            /**
             * @description 按钮宽度
             * @type {String/Number}
             * @default 50px
             */
            width: 50,
            /**
             * @description 按钮高度
             * @type {String/Number}
             * @default 25px
             */
            height: 25,
            /**
             * @description 显示类型
             * @type Number 
             * @default 1 
             */
            type: 1,
            /**
             * @description 是否显示选项的提示
             * @type Boolean
             * @default false
             */
            tip: false,
            /**
             * @description 是否可编辑
             * @type Boolean
             * @default false
             */
            editable: false,
            /**
             * @description 组件是否不可用
             * @type Boolean
             * @default false
             */
            disabled: false,
            /**
             * @description 输入框为空时显示的字符
             * @type {Object/String/Number}
             * @default "请选择..."
             */
            emptyText: Sweet.core.i18n.combobox.pleaseCheck
        },
        /**
         * @description设置组件只读
         * @param {Boolean} editable true/false
         */
        setEditable: function(editable) {
            var me = this;
            if (!me.inputEl || me.disabled) {
                return;
            }
            me.inputEl.removeAttr("readonly")
                .attr("readOnly", !editable);
            me.editable = editable;
        },
        /**
         * @description 设置组件是否可用
         * @param {Boolean} disabled true不可用 false可用
         */
        setDisabled: function(disabled) {
            var me = this;
            if ("boolean" !== typeof disabled) {
                me._error("setDisabled() Input parameter is not a Boolean type!");
                return;
            }

            if (me.inputEl) {
                me.inputEl.removeAttr("readonly")
                    .attr("readonly", disabled);
            }
            me._setDisabled(disabled);
            me.options.disabled = disabled;
            me.disabled = disabled;
            if (!disabled) {
                // 若配置了editable，再设置disabled不起作用
                if (false === me.editable) {
                    me.setEditable(false);
                }
            }
        },
        /**
         * @description 获取组件是否可用状态
         */
        getDisabled: function() {
            return this.options.disabled;
        },
        /**
         * @public
         * @description 清除选择的内容和文本
         */
        clear: function() {
            var me = this;
            // 修改图片样式
            for (var key in me.aElObjs) {
                if (me.aElObjs[key].hasClass(spanSelectedClass)) {
                    me.aElObjs[key].removeClass(spanSelectedClass);
                }
            }
            // 文本框内容去掉
            if (me.inputEl) {
                me.inputEl.val("");
                me._setTitle("");
                me._setEmptyText();
            }
            me.selectedTimeNum = [];
        },
        /**
         * @private
         * 设置组件禁用时样式
         */
        _setDisabled: function(disabled) {
            var me = this;
            if (me.button) {
                me.button.setDisabled(disabled);
                me.checkbox.setDisabled(disabled);
            }
            if (disabled) {
                if (me.inputEl) {
                    me.inputEl.addClass(textGrayClass);
                    me.inputParentDivEl.removeClass(normalClass)
                        .addClass(grayClass);
                    me.imageButton.removeClass(normalClass)
                        .addClass(grayClass)
                        .addClass(textGrayClass);
                    me._setEmptyText(true);
                }
            } else {
                if (me.inputEl) {
                    me.inputEl.removeClass(textGrayClass);
                    me.inputParentDivEl.removeClass(grayClass)
                        .addClass(normalClass);
                    me.imageButton.removeClass(textGrayClass)
                        .removeClass(grayClass)
                        .addClass(normalClass);
                    me._setEmptyText();
                }
            }
        },
        /**
         * @description 获取组件值
         * @param {Object} value
         */
        _setValue: function(value) {
            var me = this,
                options = me.options,
                val = value.text.split(" "),
                len = val.length;

            // 获取选中的时间段
            me.selectedTimeNum = [];
            if (2 > len) {
                return;
            }
            var s, e;
            for (var i = 0; i < len - 1; i++) {
                s = parseInt(val[i].substr(0, 2), 10);
                e = parseInt(val[i].substr(6, 2), 10);
                if (e - 1 === s) {
                    me.selectedTimeNum.push(s);
                } else {
                    for (var j = s; j < e; j++) {
                        me.selectedTimeNum.push(j);
                    }
                }
            }

            // 去掉所有图片的样式
            for (var key in me.aElObjs) {
                if (me.aElObjs[key].hasClass(spanSelectedClass)) {
                    me.aElObjs[key].removeClass(spanSelectedClass);
                }
            }

            // 修改选中图片的样式
            var len2 = me.selectedTimeNum.length;
            for (var n = 0; n < len2; n++) {
                me.aElObjs[me.selectedTimeNum[n]].addClass(spanSelectedClass);
            }

            // 设置文本框内容
            me._setInputText();
        },
        /**
         * @description 设置组件值
         * @return 返回值
         */
        _getValue: function() {
            var me = this,
                text = me._getTimeText();
            return {
                text: text,
                value: text
            };
        },
        /**
         * @private
         * 关闭浮动面板
         */
        _closeFloatPanel: function() {
            var me = this;
            if (!me.openPanelElFlag && "block" === me.divPanelEl.css("display")) {
                me.divPanelEl.fadeOut(150);
            }
            me.openPanelElFlag = false;
        },
        /**
         * @private
         * 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            var me = this,
                options = me.options;
            if (!me._super(id)) {
                return false;
            }
            me.cmpEl.appendTo(me.renderEl);
            if (1 === options.type) {
                me.checkbox.render(options.id);
                me.button.render(options.id);
            } else {
                me.textButtonDiv.appendTo(me.cmpEl);
            }

            me.rendered = true;
        },
        /**
         * @private
         * @description 创建form组件总入口
         */
        _createCmpWidget: function() {
            var me = this,
                options = me.options,
                busyhourClass = "sweet-cmp-timeschedule";
            me.cmpEl.addClass(busyhourClass);
            if (1 === options.type) {
                me._createCheckBox();
                me._createButton();
            } else {
                me._createTextField();
            }
            me._createBusyHourPanel();
            me._setEmptyText();
            me.selectedTimeNum = [];
        },
        /**
         * @private
         * 创建复选框
         */
        _createCheckBox: function() {
            var me = this,
                checkboxClass = "checkbox",
                checkbox;
            checkbox = new Sweet.form.CheckBox({
                widgetClass: checkboxClass,
                height: 25
            });
            me.checkbox = checkbox;
        },
        /**
         * @private
         * 创建按钮
         */
        _createButton: function() {
            var me = this,
                buttonClass = "button",
                button;
            button = new Sweet.form.Button({
                widgetClass: buttonClass,
                value: {
                    "text": Sweet.cmp.i18n.timeSchedule.buttonText
                }
            });
            button.addListener("click", function() {
                me.openPanelElFlag = false;
                if ("block" === me.divPanelEl.css("display")) {
                    return;
                }
                // 计算位置
                var maxIndex = $.getMaxZIndex(me.divPanelEl.css("z-index")),
                    offset = me.__getPanelElOffset(me.button.formEl, me.divPanelEl);
                me.divPanelEl.css({
                    "z-index": maxIndex,
                    left: offset.left,
                    top: offset.top
                }).show();
                me.openPanelElFlag = true;
            });
            me.button = button;
        },
        /**
         * @private
         * 创建文本框和按钮
         */
        _createTextField: function() {
            var me = this,
                options = me.options,
                textButtonDiv = me.textButtonDiv = $("<div>").addClass(textButtonClass),
                inputParentDivEl = me.inputParentDivEl = $("<div>").addClass(inputParentClass)
                    .appendTo(textButtonDiv),
                inputEl = me.inputEl = $("<input>").attr("type", "text")
                    .addClass(inputElClass)
                    .appendTo(inputParentDivEl),
                imageButton = me.imageButton = $("<span>").text("···")
                    .addClass(imageButtonClass)
                    .appendTo(textButtonDiv);

            if ($.isNotNull(options.vID)) {
                inputEl.attr("id", options.vID);
            }
        },
        /**
         * @private
         * 创建忙时面板
         */
        _createBusyHourPanel: function() {
            var me = this,
                divClass = "sweet-cmp-timeschedule-panel",
                ulClass = "sweet-cmp-timeschedule-panel-ul",
                divPanelEl = me.divPanelEl = $("<div>").addClass(divClass + " " + me.floatBgClass).hide(),
                ulEl = $("<ul>").addClass(ulClass).appendTo(divPanelEl),
                aElObjs = me.aElObjs = {},
                liPic1 = me.liPic1 = me._createBusyHourPicItem(0),
                liNum1 = me._createBusyHourNumItem(0, 13),
                liPic2 = me.liPic2 = me._createBusyHourPicItem(1),
                liNum2 = me._createBusyHourNumItem(12, 25),
                // 问题单号：DTS2013072707340。对清空按钮国际化
                clearEl = me.clearEl = $("<a>").addClass(clearElClass)
                    .text(Sweet.core.i18n.listbox.clearAll);
            liPic1.appendTo(ulEl);
            liNum1.appendTo(ulEl);
            liPic2.appendTo(ulEl);
            liNum2.appendTo(ulEl);
            clearEl.appendTo(divPanelEl);
            divPanelEl.bind("click", function(event) {
                event.stopPropagation();
            }).select(function() {
                return false;
            }).appendTo("body");
        },
        /**
         * @private
         * 创建忙时面板选中条
         */
        _createBusyHourPicItem: function(row) {
            var me = this,
                liPicEl = $("<li>").addClass(liPicClass),
                ulEl = $("<ul>").appendTo(liPicEl),
                liEl = $("<li>").appendTo(ulEl),
                aEl,
                aElObjs = me.aElObjs,
                num = 0;
            for (var i = 0; i < 12; i++) {
                num = i + row * 12;
                aEl = $("<span>").data("num", parseInt(num, 10))
                    .attr("value", (i + "~" + (i + 1)))
                    .appendTo(liEl);
                aElObjs[num] = aEl;
            }
            return liPicEl;
        },
        /**
         * @private
         * 创建忙时面板数字条
         * @param {Number} begin 开始数值
         * @param {Number} end 结束数值
         */
        _createBusyHourNumItem: function(begin, end) {
            var me = this,
                liNumClass = "sweet-cmp-timeschedule-panel-li-num",
                liNumEl = $("<li>").addClass(liNumClass),
                emEl;
            for (var i = begin; i < end; i++) {
                emEl = $("<em>").val(i)
                    .text(i)
                    .on("selectstart", me._unselectable)
                    .appendTo(liNumEl);
            }
            return liNumEl;
        },
        /**
         * @private
         * 获取选中的时间段，并设置文本框内容
         */
        _getSelectedTime: function() {
            var me = this;

            me.selectedTimeNum = [];

            for (var key in me.aElObjs) {
                if (me.aElObjs[key].hasClass(spanSelectedClass)) {
                    me.selectedTimeNum.push(me.aElObjs[key].data("num"));
                }
            }

            me._setInputText();
        },
        /**
         * @private
         * 设置文本框的内容
         */
        _setInputText: function() {
            var me = this;

            if (!me.inputEl) {
                return;
            }
            var text = me._getTimeText();
            me.inputEl.val(text);
            me._setTitle(text);
            me._setEmptyText();
        },
        /**
         * @private
         * 获取起始~结束时间的文本
         */
        _getTimeText: function() {
            var me = this,
                options = me.options,
                selectedTimeNum = me.selectedTimeNum,
                len = selectedTimeNum.length,
                selectedTimeFlag = me.selectedTimeFlag = [];

            // 获取标志数组
            if (0 === len) {
                return "";
            }
            if (1 === len) {
                selectedTimeFlag[0] = "O";
            }
            if (2 === len) {
                if (selectedTimeNum[0] + 1 === selectedTimeNum[1]) {
                    selectedTimeFlag[0] = "S";
                    selectedTimeFlag[1] = "E";
                } else {
                    selectedTimeFlag[0] = selectedTimeFlag[1] = "O";
                }
            }
            if (3 <= len) {
                if (selectedTimeNum[0] + 1 === selectedTimeNum[1]) {
                    selectedTimeFlag[0] = "S";
                } else {
                    selectedTimeFlag[0] = "O";
                }
                if (selectedTimeNum[len - 1] - 1 === selectedTimeNum[len - 2]) {
                    selectedTimeFlag[len - 1] = "E";
                } else {
                    selectedTimeFlag[len - 1] = "O";
                }
                var now, befor, after, s, e, m, o;
                for (var i = 1; i < len - 1; i++) {
                    now = selectedTimeNum[i];
                    befor = selectedTimeNum[i - 1];
                    after = selectedTimeNum[i + 1];
                    s = (now - 1 !== befor) && (now + 1 === after);
                    e = (now - 1 === befor) && (now + 1 !== after);
                    m = (now - 1 === befor) && (now + 1 === after);
                    o = (now - 1 !== befor) && (now + 1 !== after);
                    if (s) {
                        selectedTimeFlag[i] = "S";
                    } else if (e) {
                        selectedTimeFlag[i] = "E";
                    } else if (m) {
                        selectedTimeFlag[i] = "M";
                    } else {
                        selectedTimeFlag[i] = "O";
                    }
                }
            }
            // 获取文本
            var text = "",
                start = null,
                tempText = "";
            for (var j = 0; j < len; j++) {
                if ("S" === selectedTimeFlag[j]) {
                    start = selectedTimeNum[j];
                } else if ("E" === selectedTimeFlag[j]) {
                    tempText = me._numberToTimer(start, selectedTimeNum[j]);
                    text = text + tempText;
                } else if ("O" === selectedTimeFlag[j]) {
                    tempText = me._numberToTimer(selectedTimeNum[j]);
                    text = text + tempText;
                } else {
                    continue;
                }
            }
            return text;
        },
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         * @param {Number} begin 开始数值
         * @param {Number} end 结束数值
         */
        _numberToTimer: function(time1, time2) {
            var me = this,
                options = me.options;

            var timeText = "";
            if (!time2) {
                time2 = time1 + 1;
                if (time1 < 10) {
                    time1 = "0" + time1;
                }
                // 修改问题单：DTS2013072705369，9时不应该显示为9:00，应该为09:00
                if (time2 < 10) {
                    time2 = "0" + time2;
                }
                timeText = time1 + ":00-" + time2 + ":00; ";
            } else {
                if (time1 < 10) {
                    time1 = "0" + time1;
                }
                time2 = time2 + 1;
                if (time2 < 10) {
                    time2 = "0" + time2;
                }
                timeText = time1 + ":00-" + time2 + ":00; ";
            }
            return timeText;
        },
        /**
         * @private
         * 设置提示内容
         * @param {String} 提示内容
         */
        _setTitle: function(tips) {
            var me = this,
                options = me.options;
            if (!me.inputEl || !options.tip) {
                return;
            }
            me.inputEl.attr("title", tips);
        },
        /**
         * @private
         * 组件创建后执行的操作，子类继承实现
         */
        _afterCreateSweetWidget: function() {
            var me = this,
                options = me.options;

            me.setEditable(options.editable);
            me.setDisabled(options.disabled);
            if (me.imageButton) {
                me.imageButton.bind("click", function(event) {
                    if (me.imageButton.hasClass(grayClass)) {
                        return;
                    }
                    me.openPanelElFlag = false;
                    if ("block" === me.divPanelEl.css("display")) {
                        return;
                    }
                    // 计算位置
                    var maxIndex = $.getMaxZIndex(me.divPanelEl.css("z-index")),
                        offset = me.__getPanelElOffset(me.inputParentDivEl, me.divPanelEl);
                    me.divPanelEl.css({
                        "z-index": maxIndex,
                        left: offset.left,
                        top: offset.top
                    }).fadeIn(300);
                    me.openPanelElFlag = true;
                });
            }
            if (me.inputEl) {
                me.inputEl.bind("click", function(event) {
                    if ("block" === me.divPanelEl.css("display")) {
                        event.stopImmediatePropagation();
                    }
                }).focus(function() {
                    me._setEmptyText(true);
                }).blur(function() {
                    if (me.disabled) {
                        return;
                    }
                    me._setEmptyText();
                });
            }
            me.clearEl.bind("click", function(event) {
                me.clear();
            });
            me.liPic1.children().children().selectable({
                stop: function() {
                    me._selectedStop();
                }
            });
            me.liPic2.children().children().selectable({
                stop: function() {
                    me._selectedStop();
                }
            });
        },
        /**
         * 停止滑动选择后执行
         * @private
         */
        _selectedStop: function() {
            var me = this;
            for (var key in me.aElObjs) {
                if (!me.aElObjs[key].hasClass("ui-selected")) {
                    continue;
                }
                if (!me.aElObjs[key].hasClass(spanSelectedClass)) {
                    me.aElObjs[key].removeClass("ui-selected").addClass(spanSelectedClass);
                } else {
                    me.aElObjs[key].removeClass("ui-selected").removeClass(spanSelectedClass);
                }
            }
            me._getSelectedTime();
        },
        /**
         * 销毁组件
         * @private
         */
        _destroyWidget: function() {
            var me = this;
            me._super();
            if (me.inputEl) {
                me.inputEl.trigger("mouseout");
            }
            delete me.aElObjs;
            delete me.selectedTimeNum;
            delete me.selectedTimeFlag;
        },
        /**
         * 文本框为空时设置显示的字符
         * @private
         * @param {Boolean} 是否由获得焦点事件触发
         */
        _setEmptyText: function(isFocus) {
            var me = this;
            if (!me.inputEl) {
                return;
            }
            if (!me.options.emptyText) {
                return;
            }
            isFocus = isFocus || false;
            // 文本框为空时，显示配置的为空字符
            var val = me.inputEl.val();
            // 首次进来，创建为空显示字符的div
            if (!me.emptyDiv) {
                var emptyDiv = me.emptyDiv = $("<div>").addClass(defaultInputEmptyDivClass)
                    .appendTo(me.inputParentDivEl);
                emptyDiv.html(me.options.emptyText);
                emptyDiv.bind("click", function(event) {
                    $(this).hide();
                    // 下拉框需要打开展开框
                    me.inputEl.click();
                    // 文本框
                    me.inputEl.focus();
                    event.stopImmediatePropagation();
                }).bind("mouseover", function() { // 该div阻止了文本框的mouseover和mouseout事件
                    me.inputEl.trigger("mouseover");
                }).bind("mouseout", function() {
                    me.inputEl.trigger("mouseout");
                });
            }
            // 获得焦点
            if (isFocus) {
                if ("block" === me.emptyDiv.css("display")) {
                    me.emptyDiv.hide();
                }
            }
            // 失去焦点 或者 组件渲染后自动执行
            else {
                if (!val) {
                    me.emptyDiv.show();
                } else {
                    me.emptyDiv.hide();
                }
            }
        },
        /**
         * @private
         * @description 初始化弹出框位置
         * @param {Object} targetEl 目的对象
         * @param {Object} floatEl 弹出对象
         */
        __getPanelElOffset: function(targetEl, floatEl) {
            var me = this,
                tOffset = targetEl.offset(),
                _top = 0,
                _left = 0,
                _t2 = 2,
                win = $(window),
                doc = $(document),
                maxShown = win.height() + doc.scrollTop(),
                maxVShown = win.width() + doc.scrollLeft(),
                targetElHeight = targetEl.outerHeight(true),
                floatElWidth = floatEl.outerWidth(true),
                floatElHeight = floatEl.outerHeight(true),
                tw1;
            _top = tOffset.top + targetElHeight + _t2;
            _left = tOffset.left;
            tw1 = maxVShown - (floatElWidth + tOffset.left);
            if (tw1 <= 0) {
                _left = _left + tw1 - _t2;
            }
            // 下面显示不下浮动框，且上面可以显示下浮动框，才选择在上面显示
            if (maxShown - tOffset.top - targetElHeight <= floatElHeight) {
                if (tOffset.top >= floatElHeight) {
                    _top = tOffset.top - floatElHeight - _t2;
                }
            }
            return {
                "left": _left,
                "top": _top
            };
        }
    });

    /**
     * 忙时组件
     */
    Sweet.cmp.TimeSchedule = $.sweet.widgetCmpTimeschedule;
}(jQuery));;
/**
 * @fileOverview  
 * <pre>
 * 面板上的日期组件
 * 2012/12/15
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {

    $.widget("sweet.cmpHoliday", $.sweet.widget, {
        version: "1.0",
        sweetWidgetName: "[cmp-holiday]",
        defaultElement: "<div>",
        type: "holiday",
        eventNames: {
            "click": "日期点击事件",
            change: "日期变化时触发"
        },
        options: {
            // 指定年
            year: 2012
        },
        /**
         * @description 返回widget对象
         */
        widget: function() {
            return this.holidayPanel;
        },
        /**
         * @description 设置组件值
         * @param {Object} obj 设置日期, 格式为{12: ["2012-12-1", "2012-12-2", ...], ...}
         */
        setValue: function(obj) {
            if ($.isNull(obj)) {
                $.error("setValue(): Input parameter must not be empty! ");
                return;
            }

            var me = this;
            // 循环设置值
            $.each(obj, function(index, val) {
                me.holidayItems[$.string.toNumber(index) - 1].setValue(val);
            });
        },
        /**
         * @description 获取组件值
         * @param {String} 组件值, 返回值格式{12: ["2012-12-1", "2012-12-2", ...], ...}
         */
        getValue: function() {
            var value = {};
            for (var i = 0; i < this.holidayItems.length; i++) {
                value[i + 1] = this.holidayItems[i].getValue();
            }

            return value;
        },
        /**
         * @private
         * @description 创建假日组件入口
         */
        _createSweetWidget: function() {
            this._createHolidayCmp();
        },
        /**
         * @private
         * @description 创建假日组件
         */
        _createHolidayCmp: function() {
            var holidayPanel,
            holidayItems = this.holidayItems = [],
                datePanel,
                options = this.options;
            // 循环12个月
            for (var i = 0; i < 12; i++) {
                datePanel = new Sweet.panel.Date({
                    year: options.year,
                    month: i + 1,
                    height: 250
                });
                holidayItems[i] = datePanel;
            }

            holidayPanel = this.holidayPanel = new Sweet.panel.GridPanel({
                id: options.id,
                name: options.name,
                title: Sweet.cmp.i18n.holiday,
                width: "100%",
                height: "100%",
                widgetClass: "sweet-cmp-holiday",
                layoutOptions: {
                    rows: 3,
                    columns: 4
                },
                items: holidayItems
            });
            holidayPanel.render(options.renderTo);
        },
        /**
         * @private
         * @description 注册监听事件
         */
        _addListener: function() {
            var me = this;
            me.handlers = me.handlers || {};
            $.each(me.handlers, function(handlerName, func) {
                $.each(me.holidayItems, function(index, obj) {
                    obj.addListener(handlerName, func);
                });
            });
        },
        /**
         * @private
         * @description 销毁假日组件
         */
        _destroyWidget: function() {
            if (this.holidayPanel) {
                this.holidayPanel.destroy();
            }
        },
        /**
         * @description 渲染组件
         * @param {String} id 组件ID
         */
        _render: function(id) {
            var me = this;
            if (!id || me.rendered) {
                return false;
            }
            me.holidayPanel.render(id);
            return true;
        }
    });

    /**
     * @description 节假日组件
     * @class
     * @extends jquery.ui.widget.js
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.container.js
     * jquery.sweet.widget.container.panel.js
     * jquery.sweet.widget.container.date.js
     * </pre>
     * @example
     * 创建节假日组件：
     */
    Sweet.cmp.Holiday = $.sweet.cmpHoliday;
}(jQuery));;
/**
 * @fileOverview 
 * <pre>
 * 文件上传组件
 * 2013/08/09
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    $.widget("sweet.widgetCmpFileUpload", $.sweet.widgetCmp, /** @lends Sweet.cmp.FileUpload.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-cmp-fileupload]",
        defaultElement: "<div>",
        type: "fileupload",
        eventNames: {
            "afterUpload": "上传后触发"
        },
        // fileupload组件公共配置参数
        options: /** @lends Sweet.cmp.FileUpload.prototype*/
        {
            /**
             * win宽度
             * @type String/Number
             * @default 360px
             */
            width: 360,
            /**
             * win高度
             * @type String/Number
             * @default 124px
             */
            height: 124,
            /**
             * wintitle
             * @type String
             * @default 中文：文件上传/英文：Upload File
             */
            title: Sweet.core.i18n.fileUploadWin.title,
            /**
             * @description 是否有label
             * @type Boolean
             * @default true
             */
            label: true,
            /**
             * @description label宽度
             * @type {String/Number}
             * @default 30%
             */
            labelWidth: "30%",
            /**
             * @description label文字
             * @type {String}
             * @default 中文：文件名/英文：File Name
             */
            labelText: "",
            /**
             * @description 是否必选项
             * @type {Boolean}
             * @default false
             */
            required: true,
            /**
             * @description 是否可编辑
             * @type {Boolean}
             * @default true
             */
            editable: true,
            /**
             * @description 错误提示的显示模式
             * @type String
             * @default none
             */
            errorModel: "none",
            /**
             * @description 错误提示出现的条件，使用时自己定义
             * @type Function
             * @default false
             */
            validateFun: function() {
                return {
                    "success": true
                };
            },
            /**
             * 提交地址
             * @type {String}
             * @default ""
             */
            url: "",
            /**
             * @description 是否呈现导入方式，true：呈现, false：不呈现
             * @type {Boolean}
             * @default false
             */
            import: false,
            /**
             * 点击上传后的回调函数
             * @type function
             * @default null
             */
            afterUpload: null,
            /**
             * 点击上传之前的回调函数，设置此方法后，需要用户用去调用OK方法进行提交
             * @type function
             * @default null
             */
            beforeUpload: null
        },
        /**
         * @description 显示
         */
        show: function() {
            var me = this;
            // 清空选择内容
            me.fileuploaddiv.clear();
            me.wnd.show();
        },
        /**
         * @description 隐藏
         */
        hide: function() {
            this.wnd.hide();
        },
        /**
         * @description 组件校验
         */
        isValidate: function() {
            var me = this;
            return me.fileuploaddiv.validate();
        },
        /**
         * @description 用户手动调用ok按钮事件进行提交
         */
        OK: function() {
            var me = this,
                options = me.options;
            if (!me.fileuploaddiv.validate()) {
                return false;
            }
            me.fileuploaddiv.submit();
            if (options.afterUpload && $.isFunction(options.afterUpload)) {
                options.afterUpload();
            }
        },
        /**
         * @private
         * @description 获取组件值
         * @param {Object} value
         */
        _setValue: function(value) {

        },
        /**
         * @private
         * @description 设置组件值
         * @return 返回值
         */
        _getValue: function() {

        },
        /**
         * @private
         * @description 创建上传组件
         */
        _createCmpWidget: function() {
            var me = this,
                options = me.options,
                winContent, importDiv;
            var fileuploaddiv = me.fileuploaddiv = new Sweet.form.FileUpLoadField({
                label: options.label,
                labelText: options.labelText,
                errorModel: options.errorModel,
                labelWidth: options.labelWidth,
                required: options.required,
                editable: options.editable,
                validateFun: options.validateFun,
                vID: options.vID,
                url: options.url
            });

            if (options.import) {
                if (160 > options.height) {
                    options.height = options.height + 35;
                }

                //创建导入方式
                importDiv = me._creatImportType();
                winContent = new Sweet.panel.VPanel({
                    width: "100%",
                    height: "100%",
                    items: [importDiv, fileuploaddiv],
                    itemExtend: false
                });
            } else {
                winContent = fileuploaddiv;
            }
            //加载弹出窗口
            me.wnd = new Sweet.Window({
                width: options.width,
                height: options.height,
                title: options.title,
                content: winContent,
                listeners: {
                    "ok": function() {
                        //如果设置有import，先取得import的类型设置给url
                        if (me.options.import && me.importTypeGroup) {
                            var val = me.importTypeGroup.getValue();
                            if ($.isNotNull(val) && $.isNotNull(val.value)) {
                                var newUrl = "";
                                if (String(me.options.url).indexOf("importType=1") !== -1) {
                                    newUrl = String(me.options.url).replace("importType=1", "importType=" + val.value);
                                } else if (String(me.options.url).indexOf("importType=2") !== -1) {
                                    newUrl = String(me.options.url).replace("importType=2", "importType=" + val.value);
                                } else {
                                    var suffix = "?importType=";
                                    if (String(me.options.url).indexOf("?") !== -1) {
                                        suffix = "&importType=";
                                    }
                                    newUrl = me.options.url + suffix + val.value;
                                }
                                me.fileuploaddiv.setUrl(newUrl);
                            }
                        }
                        if (options.beforeUpload && $.isFunction(options.beforeUpload)) {
                            var flag = options.beforeUpload();
                            if ("false" === flag || false === flag) {
                                return flag;
                            }
                        } else {
                            return me.OK();
                        }
                    },
                    "cancel": function() {

                    }
                }
            });
        },
        /**
         * @private
         * @description 创建导入方式部分
         */
        _creatImportType: function() {
            var me = this,
                oldUrl = me.options.url,
                newUrl,
                importTypeObj,
                importTypeObjData,
                importTypeLabel,
                importDivEI,
                reg = /\?+/;

            if (me.options.import) {
                importTypeLabel = new Sweet.form.Label({
                    width: 85,
                    height: 25,
                    symbol: true,
                    blank: false,
                    value: {
                        text: Sweet.core.i18n.fileUpload.importType,
                        value: 'importTypeLabel'
                    }
                });

                importTypeObjData = [{
                    text: Sweet.core.i18n.fileUpload.appendImport,
                    value: 1,
                    checked: true
                }, {
                    text: Sweet.core.i18n.fileUpload.overWriteImport,
                    value: 2,
                    checked: false
                }];
                importTypeObj = me.importTypeGroup = new Sweet.form.RadioGroup({
                    width: 300,
                    height: 25,
                    columns: "auto",
                    data: importTypeObjData,
                    tip: true
                });

                importTypeObj.addListener("change", function(event, val) {
                    if ($.isNotNull(val) && $.isNotNull(val.value)) {
                        if (reg.test(oldUrl)) {
                            newUrl = me.options.url + "&importType=" + val.value;
                        } else {
                            newUrl = me.options.url + "?importType=" + val.value;
                        }

                        me.fileuploaddiv.setUrl(newUrl);
                    }
                });

                importDivEI = new Sweet.panel.HPanel({
                    width: 400,
                    height: 30,
                    items: [importTypeLabel, importTypeObj],
                    itemExtend: false
                });
            }

            return importDivEI;
        },
        /**
         * 注册监听事件
         * @param {String} eventName 事件名称
         * @param {Object} callBack 回调函数
         */
        _addListener: function(eventName, callBack) {
            var me = this;
            me.fileuploaddiv.addListener(eventName, callBack);
        },
        /**
         * 删除注册监听事件
         * @param {String} eventName 事件名称
         */
        _removeListener: function(eventName) {
            var me = this;
            me.fileuploaddiv.removeListener(eventName);
        },
        /**
         * @description 设置组件只读
         * @param {Boolean} editable: true/false
         */
        setEditable: function(editable) {
            var me = this;
            if (!me.fileuploaddiv) {
                return;
            }
            me.fileuploaddiv.setEditable(editable);
        },
        /**
         * @private
         * @description 获取文件字节大小
         */
        getFileSize: function() {
            var me = this,
                filesize = 0;
            if (!me.fileuploaddiv) {
                return filesize;
            }
            filesize = me.fileuploaddiv.getFileSize();
            return filesize;
        }
    });

    /**
     * @description 文件上传组件
     * @class
     * @extends jquery.ui.widget.js
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.widget.form.js
     * jquery.sweet.widget.form.input.js
     * jquery.sweet.widget.form.button.js
     * jquery.sweet.cmp.js
     * </pre>
     * @example
     * 创建文件上传组件：
     */
    Sweet.cmp.FileUpload = $.sweet.widgetCmpFileUpload;
}(jQuery));;
/**
 * Created with JetBrains PhpStorm.
 * Date: 14-1-7
 * Time: 下午2:25
 * To change this template use File | Settings | File Templates.
 */

(function($) {


    var listWinSelectBtn = "sweet-cmp-listwin-select_btn",
        listWinSelectDivClass = "sweet-cmp-listwin-select",
        listWinSelectTreeDivClass = "sweet-cmp-listwin-select-tree",
        listWinSelectLeft = "sweet-cmp-listwin-select-left",
        listWindTitleClass = "sweet-cmp-listwin-title",
        containerLeft = "sweet-cmp-optimizelist-div-left",
        containerRight = "sweet-cmp-optimizelist-div-right",
        containerMiddle = "sweet-cmp-optimizelist-div-middle";

    var keyTreeType = "tree",
        keyListType = "list",
        keyID = 'id',
        keySrcContainerID = "srcContainer_",
        keyDestContainerID = "destContainer_";


    $.widget("sweet.cmpOptimizeListWindow", $.sweet.widgetCmp, /** @lends Sweet.cmp.OptimizeListWindow.prototype*/ {
        version: "1.0",
        eventNames: /** @lends Sweet.cmp.OptimizeListWindow.prototype*/
        {
            /**
             * @event
             * @description 源搜索事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            fromSearch: "源搜索事件",
            /**
             * @event
             * @description 目标搜索事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            toSearch: "目标搜索事件",
            /**
             * @event
             * @description 双向列表节点编辑事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            nodeEdit: "双向列表节点编辑事件",
            /**
             * @event
             * @description 右移前事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            beforeLeftToRight: "右移前事件",
            /**
             * @event
             * @description 左移前事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            beforeRightToLeft: "左移前事件",
            /**
             * @event
             * @description 右移后事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            afterLeftToRight: "右移后事件",
            /**
             * @event
             * @description 左移后事件
             * @param {Object} evt 事件对象
             * @param {Object/Array} data 当前选中的数据
             */
            afterRightToLeft: "左移后事件"
        },
        sweetWidgetName: "[widget-cmp-optimizeListWindow]",
        type: "listwindow",
        options: {
            /**
             * 数据类型，可选值为： "list", "tree"
             * @type string
             * @default "tree"
             */
            type: 'tree',
            /**
             * 左边的标题
             * @type string
             * @default ""
             */
            fromTitle: '',
            /**
             * 右边的标题
             * @type string
             * @default ""
             */
            toTitle: '',
            hidden: false,
            /**
             * 是否有图标
             * @type boolean
             * @default true
             */
            icon: true,
            /**
             * 是否带搜索框功能
             * @type boolean
             * @default true
             */
            search: true,
            /**
             * 初始加载数据后，节点是否是展开
             * @type boolean
             * @default false
             */
            expand: false,
            /**
             * 数据结构是否是树结构，默认是树结构的
             * @type boolean
             * @default true
             */
            useTreeStruct: true,
            /**
             * 双向列表中间的移动button的宽度
             * @type number
             * @default 60
             */
            btnWidth: 60
        },

        _createCmpWidget: function() {
            this._createChildren();
        },

        _createChildren: function() {
            var self = this,
                options = self.options,
                srcContainerId = keySrcContainerID + self.uuid,
                destContainerId = keyDestContainerID + self.uuid;

            var table = this.table = $("<table>").attr({
                cellspacing: 0,
                border: 0
            }).appendTo(self.cmpEl),
                tr = $("<tr>").appendTo(table),
                tdSrc = $("<td>").appendTo(tr),
                tdMiddle = $("<td>").appendTo(tr),
                tdDest = $("<td>").appendTo(tr);

            //在这里定义所有的组件
            var divMiddle = this.divMiddle = self._createSeletPanel().appendTo(tdMiddle),
                //左侧标题
                srcTitle = this.srcTitle = $("<span>")
                    .addClass(listWindTitleClass)
                    .text(self.options.fromTitle).appendTo(tdSrc),

                //左侧标题; //右侧标题
                destTitle = this.destTitle = $("<span>")
                    .addClass(listWindTitleClass)
                    .text(self.options.toTitle).appendTo(tdDest),

                divSrc = this.divSrc = $("<div />")
                    .addClass(containerLeft)
                    .attr("id", srcContainerId)
                    .appendTo(tdSrc),

                divDest = this.divDest = $("<div />")
                    .addClass(containerRight)
                    .attr("id", destContainerId)
                    .appendTo(tdDest);

            if ("" == self.options.toTitle && "" == self.options.fromTitle) {
                srcTitle.css('display', 'none');
                destTitle.css('display', 'none');
            }
        },

        //设置到左侧数据
        setData: function(data) {
            var self = this,
                options = self.options,
                type = options.type;
            options.data = data;
            if (this.srcList) {
                this.srcList.setData(data);
            }
        },

        setRightData: function(data) {
            var self = this,
                options = self.options;
            options.rightData = data;
            if (self.destList) {
                self.destList.setData(data);
            }
        },

        _getValue: function() {
            return this.destList.getData();
        },

        _createSeletPanel: function() {
            var self = this,
                options = self.options,
                type = self.options.type,
                isTree = type == keyTreeType;

            var conSelectDiv = $("<div>").addClass(isTree ? listWinSelectTreeDivClass : listWinSelectDivClass).css('width', options.btnWidth),
                selectRight = $("<button>").addClass(listWinSelectBtn)
                    .text(Sweet.constants.listWindowButton.RIGHT).appendTo(conSelectDiv)
                    .bind('click', self.moveToRight.bind(self))
                    .css('width', options.btnWidth),

                selectLeft = $("<button>").addClass(listWinSelectBtn).addClass(listWinSelectLeft)
                    .text(Sweet.constants.listWindowButton.LEFT).appendTo(conSelectDiv)
                    .bind('click', self.moveToLeft.bind(self))
                    .css('width', options.btnWidth),

                selectAllRight = $("<button>").addClass(listWinSelectBtn)
                    .text(Sweet.constants.listWindowButton.ALL_RIGHT).appendTo(conSelectDiv)
                    .bind('click', self.moveAllToRight.bind(self))
                    .css('width', options.btnWidth),

                selectAllLeft = $("<button>").addClass(listWinSelectBtn)
                    .text(Sweet.constants.listWindowButton.ALL_LEFT).appendTo(conSelectDiv)
                    .bind('click', self.moveAllToLeft.bind(self))
                    .css('width', options.btnWidth);

            return conSelectDiv;
        },

        moveToRight: function(evt) {
            var self = this,
                options = self.options,
                type = options.type;
            //如果type是list,移动的时候需要删除掉源数据
            var srcData = this.srcList.getValue();
            //判断是否执行
            if (!$.isNull(self.handlers) && !$.isNull(self.handlers['beforeLeftToRight'])) {
                if (false === self.handlers['beforeLeftToRight'].call(self.renderEl, evt, srcData)) {
                    return;
                }
            }
            self.destList.setData(srcData, true);
            self._triggerHandler(evt, "afterLeftToRight", self.getValue());
        },

        moveToLeft: function(evt) {
            var self = this,
                options = self.options,
                type = options.type,
                selectedItems = self.destList.options.selectedItems;
            //判断是否执行
            if (!$.isNull(self.handlers) && !$.isNull(self.handlers['beforeRightToLeft'])) {
                if (false === self.handlers['beforeRightToLeft'].call(self.renderEl, evt, selectedItems)) {
                    return;
                }
            }
            self.destList.removeSelectedItems();
            self._triggerHandler(evt, "afterRightToLeft", self.getValue());
        },

        moveAllToLeft: function(evt) {
            var self = this,
                options = self.options,
                type = options.type;
            if (!$.isNull(self.handlers) && !$.isNull(self.handlers['beforeRightToLeft'])) {
                if (false === self.handlers['beforeRightToLeft'].call(self.renderEl, evt, self.getValue())) {
                    return;
                }
            }
            self.destList._clearAll();
            self._triggerHandler(evt, "afterRightToLeft", self.getValue());
        },

        moveAllToRight: function(evt) {
            var self = this,
                options = self.options,
                type = options.type,
                srcData;
            srcData = $.objClone(self.srcList.options.data);
            if (!$.isNull(self.handlers) && !$.isNull(self.handlers['beforeLeftToRight'])) {
                if (false === self.handlers['beforeLeftToRight'].call(self.renderEl, evt, srcData)) {
                    return;
                }
            }
            self.destList.setData(srcData);
            self._triggerHandler(evt, "afterLeftToRight", self.getValue());
        },


        _setWH: function(width, height) {
            this._setWidth(width);
            this._setHeight(height);
        },

        _setWidth: function(width) {
            this.cmpEl.externalWidth(width);
        },

        _getWidth: function() {
            return this.cmpEl.externalWidth();
        },

        _setHeight: function(height) {
            this.cmpEl.externalHeight(height);
        },

        _getHeight: function() {
            return this.cmpEl.externalHeight();
        },

        _doLayout: function() {
            var self = this,
                padding = 20,
                middleW = parseInt(self.divMiddle.css('width')),
                panelW = Math.floor((self.cmpEl.externalWidth() - middleW - padding) / 2) - 5,
                panelH = self.cmpEl.externalHeight();

            if ('none' != self.srcTitle.css('display')) {
                panelH -= (parseInt(self.srcTitle.css('height')) + 10);
            }

            self.divSrc.css({
                width: panelW,
                height: panelH
            });
            self.divDest.css({
                width: panelW,
                height: panelH
            });

            if (self.srcList) {
                self.srcList.setWH(panelW, panelH);
                self.srcList.autoReDraw();
            }
            if (self.destList) {
                self.destList.setWH(panelW, panelH);
                self.destList.autoReDraw();
            }
        },

        _render: function(id) {
            if (!this._super(id)) {
                return false;
            }
            var self = this,
                options = self.options,
                isTree = options.type == keyTreeType,
                srcContainerId = self.divSrc.attr(keyID),
                destContainerId = self.divDest.attr(keyID);

            self.cmpEl.appendTo(self.renderEl);

            //左侧控件
            var srcList = this.srcList = new Sweet.tree.OptimizeTree({
                renderTo: srcContainerId,
                search: options.search,
                icon: options.icon,
                expand: isTree ? options.expand : false,
                useTreeStruct: isTree ? options.useTreeStruct : false,
                multi: true
            }),

                //右侧控件
                destList = this.destList = new Sweet.tree.OptimizeTree({
                    renderTo: destContainerId,
                    search: options.search,
                    icon: options.icon,
                    expand: isTree,
                    useTreeStruct: isTree ? options.useTreeStruct : false,
                    multi: true
                });

            if (options.data && options.data.length > 0) {
                srcList.setData(options.data);
            }

            if (options.rightData && options.rightData.length > 0) {
                destList.setData(options.rightData);
            }
            this.rendered = true;
            return true;
        }

    });
    /**
     * 优化后的双向列表
     * @name Sweet.cmp.OptimizeListWindow
     * @class 
     * @extends sweet.widgetCmp
     * @requires
     * <pre>
     * jquery.ui.core.js
     * jquery.ui.widget.js
     * jquery.sweet.widget.js
     * jquery.sweet.cmp.js
     * </pre>
     */
    Sweet.cmp.OptimizeListWindow = $.sweet.cmpOptimizeListWindow;
})(jQuery);;
/** * @fileOverview  * <pre> * 二次统计组件，用户需要设置维度和指标，以及点击统计时的回调函数 * 2014.1.26 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var i18n = Sweet.cmp.i18n.stat;
    var dimsBtns = [{
        value: "toRight",
        text: " > "
    }, {
        value: "toLeft",
        text: " < "
    }, {
        value: "allToRight",
        text: " >> "
    }, {
        value: "allToLeft",
        text: " << "
    }];
    var btns = [{
        value: "max",
        text: i18n.max_msg,
        data: "MAX"
    }, {
        value: "min",
        text: i18n.min_msg,
        data: "MIN"
    }, {
        value: "sum",
        text: i18n.sum_msg,
        data: "SUM"
    }, {
        value: "average",
        text: i18n.average_msg,
        data: "AVG"
    }, {
        value: "counter",
        text: i18n.total_msg,
        data: "COUNT"
    }, {
        value: "remove",
        text: i18n.delete_msg
    }];
    $.widget("sweet.widgetCmpSecondaryStat", $.sweet.widgetCmp, /** @lends Sweet.cmp.SecondaryStat*/ {
        version: "1.0",
        eventNames: {},
        sweetWidgetName: "[widget-cmp-secondaryStat]",
        type: 'secondaryStat',
        options: /** @lends Sweet.cmp.SecondaryStat*/
        {
            /**             * 用于生成二次统计时的维度集合信息             * @type Array             * @default []             */
            dims: [],
            /**             * 用于生成二次统计时的指标的集合信息             * @type Array             * @default []             */
            indicators: [],
            /**             * 二次统计中，点击统计按钮时的回调函数，用户必须配置             */
            statFun: null
        },
        _destroyWidget: function() {
            var me = this;
            if (me.wnd) {
                me.wnd.destroy();
            }
        },
        /**         * @private         * @description 重写父类的渲染方法         */
        _render: function() {
            var me = this;
            me.wnd.show();
            return true;
        },
        /**         * @private         * @description 创建输入域         */
        _createCmpWidget: function() {
            var me = this,
                w = me.options.width,
                h = me.options.height; /* 存放维度和指标的两个选择框对象 */
            me.selectPanels = []; /* 创建指标的选择部分 */
            me._createTargetSelect(); /* 创建维度的选择部分 */
            me._createDimSelect();
            me._createWindow();
        },
        _dealMoveBtns: function(ldata) {
            var me = this,
                rdimsObj = me.dimsRight;
            if (rdimsObj) {
                rdimsObj.setData(ldata);
            }
        },
        _moveButtonClick: function(e, v) {
            var me = this,
                ldata = me.dimLeft.getValue();
            switch (v.value) { //移动到右边
                case dimsBtns[0].value:
                    //左侧没有选择数据时，不进行处理
                    if ($.isEmptyObject(ldata) || $.isNull(ldata) || ($.isArray(ldata) && ldata.length === 0)) {
                        return;
                    }
                    me._dealMoveBtns(ldata);
                    break; //将右边选中的值移动到左边
                case dimsBtns[1].value:
                    var tempData = me.dimsRight.getData();
                    var selectedData = me.dimsRight.getValue();
                    if (!tempData || !selectedData) {
                        return;
                    } //存放右边除去选中的值剩下的值
                    ldata = [];
                    var find = false;
                    for (var i = 0; i < tempData.length; i++) {
                        find = false;
                        for (var j = 0; j < selectedData.length; j++) {
                            if (tempData[i].value === selectedData[j].value) {
                                find = true;
                                break;
                            }
                        }
                        if (!find) {
                            ldata.push(JSON.parse(JSON.stringify(tempData[i])));
                        }
                    }
                    me._dealMoveBtns(ldata);
                    break; //将左边的值全部移动到右边(不管是否选中)
                case dimsBtns[2].value:
                    ldata = me.dimLeft.getData();
                    me._dealMoveBtns(ldata);
                    break; //将右边的值全部移动到左边(不管是否选中)
                case dimsBtns[3].value:
                    ldata = [];
                    me._dealMoveBtns(ldata);
                    break;
            }
        },
        /**         * @description 创建维度的选择框         * @private         */
        _createDimSelect: function() {
            var me = this,
                w = 210,
                h = 190,
                listH = h + 30,
                listW = w + 32,
                btnW = 80;
            var htmlL = '<span class="sweet-cmp-stat-title">' + i18n.analysis_dimensions_msg + '</span>';
            var htmlR = '<span class="sweet-cmp-stat-title">' + i18n.selected_analysis_dimensions_msg + '</span>';
            me.dimLeft = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                isBorder: true,
                data: me.options.dims
            });
            var ltemp = new Sweet.panel.VPanel({
                width: listW,
                height: listH,
                padding: 2,
                items: [{
                    html: htmlL
                },
                me.dimLeft]
            }); /* < 按钮*/
            me.toRightBtn = new Sweet.form.Button({
                value: dimsBtns[0],
                width: btnW
            });
            me.toRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* min按钮*/
            me.toLeftBtn = new Sweet.form.Button({
                value: dimsBtns[1],
                width: btnW
            });
            me.toLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* 求和按钮*/
            me.toAllRightBtn = new Sweet.form.Button({
                value: dimsBtns[2],
                width: btnW
            });
            me.toAllRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* 平均按钮*/
            me.toAllLefttBtn = new Sweet.form.Button({
                value: dimsBtns[3],
                width: btnW
            });
            me.toAllLefttBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
            var allbtns = [me.toRightBtn, me.toLeftBtn, me.toAllRightBtn, me.toAllLefttBtn];
            me.vpDimsBtns = new Sweet.panel.VPanel({
                height: "100%",
                width: btnW,
                margin: [60, 0, 5, 0],
                items: allbtns
            });
            me.dimsRight = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                isBorder: true,
                data: []
            });
            var rtemp = new Sweet.panel.VPanel({
                width: listW,
                height: listH,
                padding: 2,
                items: [{
                    html: htmlR
                },
                me.dimsRight]
            });
            me.hDimspanel = new Sweet.panel.HPanel({
                width: "100%",
                height: listH,
                padding: 10,
                itemExtend: false,
                items: [ltemp, me.vpDimsBtns, rtemp]
            });
            me.selectPanels.push(me.hDimspanel);
        },
        /**         * @description 创建指标的选择框和相应的计算公式按钮         * @private         */
        _createTargetSelect: function() {
            var me = this,
                w = 210,
                h = 190,
                listH = h + 30,
                listW = w + 32,
                btnW = 80;
            var htmlL = '<span class="sweet-cmp-stat-title">' + i18n.indicators_msg + '</span>';
            var htmlR = '<span class="sweet-cmp-stat-title">' + i18n.statistics_item_msg + '</span>';
            me.targetLeft = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                isBorder: true,
                data: me.options.indicators
            });
            var ltemp = new Sweet.panel.VPanel({
                width: listW,
                height: listH,
                padding: 2,
                items: [{
                    html: htmlL
                },
                me.targetLeft]
            }); /* max按钮*/
            me.maxBtn = new Sweet.form.Button({
                value: btns[0],
                width: btnW
            });
            me.maxBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            }); /* min按钮*/
            me.minBtn = new Sweet.form.Button({
                value: btns[1],
                width: btnW
            });
            me.minBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            }); /* 求和按钮*/
            me.sumBtn = new Sweet.form.Button({
                value: btns[2],
                width: btnW
            });
            me.sumBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            }); /* 平均按钮*/
            me.averageBtn = new Sweet.form.Button({
                value: btns[3],
                width: btnW
            });
            me.averageBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            }); /* 计算按钮*/
            me.countBtn = new Sweet.form.Button({
                value: btns[4],
                width: btnW
            });
            me.countBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            }); /* delete按钮*/
            me.removeBtn = new Sweet.form.Button({
                value: btns[5],
                highLight: true,
                imageType: "delete",
                width: btnW
            });
            me.removeBtn.addListener("click", function(e, v) {
                me._DimButtonClick(e, v);
            });
            var allbtns = [me.maxBtn, me.minBtn, me.sumBtn, me.averageBtn, me.countBtn, me.removeBtn];
            me.vpBtns = new Sweet.panel.VPanel({
                height: "100%",
                width: btnW,
                margin: [30, 0, 5, 0],
                items: allbtns
            }); /* 指标右边的已经选择框 */
            var rData = [];
            if (me.options.indicators && me.options.indicators.length === 0) {
                rData.push(btns[4]);
            }
            me.targetRight = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                isBorder: true,
                data: rData
            });
            var rtemp = new Sweet.panel.VPanel({
                width: listW,
                height: listH,
                padding: 2,
                items: [{
                    html: htmlR
                },
                me.targetRight]
            });
            me.hpanel = new Sweet.panel.HPanel({
                width: "100%",
                height: listH,
                padding: 10,
                itemExtend: false,
                items: [ltemp, me.vpBtns, rtemp]
            });
            me.selectPanels.push(me.hpanel);
        },
        /**         * @private         * @description 处理max,min,sum, avg按钮的点击事件         * @param {type} leftDims  左侧的框中选择的值         * @param {String} value  标示是那个按钮         * @param {String} funcString 按钮的函数表现形式，函数名         */
        _dealBtns: function(leftDims, value, funcString) {
            var me = this,
                RL = me.targetRight;
            if ($.isArray(leftDims) && leftDims.length > 0) {
                var temp = [];
                var rdata = RL.getData();
                for (var i = 0; i < leftDims.length; i++) {
                    temp.push({
                        value: leftDims[i].value + "_&#&_" + funcString,
                        text: leftDims[i].text + "(" + value + ")",
                        data: funcString
                    });
                } //判断右边是否有重复的，如果有重复的，不加到右边
                for (var j = 0; j < temp.length; j++) {
                    var find = false;
                    for (var k = 0; k < rdata.length; k++) {
                        if (temp[j].value === rdata[k].value && temp[j].text === rdata[k].text) {
                            find = true;
                            break;
                        }
                    }
                    if (find) {
                        temp.splice(j, 1);
                        j--;
                    }
                } //如果完全重复，则刷新
                if (temp.length > 0) {
                    temp = rdata.concat(temp);
                    RL.setData(temp);
                }
            }
        },
        /**         * @private         * @description 处理指标的各个计算按钮         * @param {type} e         * @param {type} v         */
        _DimButtonClick: function(e, v) {
            var me = this,
                LL = me.targetLeft,
                RL = me.targetRight;
            var rightDims = RL.getValue();
            var leftDims = LL.getValue();
            switch (v.value) { //最大值
                case btns[0].value:
                    me._dealBtns(leftDims, btns[0].text, btns[0].data);
                    break; //最小值
                case btns[1].value:
                    me._dealBtns(leftDims, btns[1].text, btns[1].data);
                    break; //求和
                case btns[2].value:
                    me._dealBtns(leftDims, btns[2].text, btns[2].data);
                    break; //平均
                case btns[3].value:
                    me._dealBtns(leftDims, btns[3].text, btns[3].data);
                    break; //计数,只能在右边加入一次，后面不再加入
                case btns[4].value:
                    var rdata = RL.getData();
                    var find = false;
                    for (var i = 0; i < rdata.length; i++) {
                        if (rdata[i].value === btns[4].value) {
                            find = true;
                        }
                    }
                    if (!find) {
                        rdata.push(btns[4]);
                        RL.setData(rdata);
                    }
                    break; //删除
                case btns[5].value:
                    //只有右边选择才进行操作
                    if ($.isArray(rightDims) && rightDims.length > 0) {
                        var rdata = RL.getData();
                        var temp = [];
                        for (var i = 0; i < rdata.length; i++) {
                            var find = false;
                            for (var j = 0; j < rightDims.length; j++) { //必须data也要相同，才能证明是同一个
                                if (rdata[i].value === rightDims[j].value) {
                                    find = true;
                                    break;
                                }
                            }
                            if (!find) {
                                temp.push(rdata[i]);
                            }
                        }
                        RL.setData(temp);
                    }
                    break;
            }
        },
        /**         * @description 创建window并将维度和指标选择框合并在window上         * @private         */
        _createWindow: function() {
            var me = this,
                vPanel; /* vpanel中上半部分是维度选择框，下半部分是指标选择框*/
            vPanel = new Sweet.panel.VPanel({
                height: "100%",
                width: "100%",
                items: me.selectPanels
            });
            var calculatBtn = new Sweet.form.Button({
                width: 80,
                highLight: true,
                value: {
                    value: "calculatBtn",
                    text: i18n.calculation_msg
                }
            }); /* 监听统计Button点击事件*/
            calculatBtn.addListener("click", function(e) {
                me._counterStat(e, me);
            });
            var cancelBtn = new Sweet.form.Button({
                width: 80,
                value: {
                    value: "cancelBtn",
                    text: i18n.cancel_msg
                }
            }); /* 关闭window */
            cancelBtn.addListener("click", function(e) {
                me.wnd.close();
            }); /* 创建window*/
            me.wnd = new Sweet.Window({
                widgetClass: "sweet-cmp-stat-window",
                width: 605,
                height: 550,
                title: i18n.secondary_statistics_msg,
                content: vPanel,
                buttons: [calculatBtn, cancelBtn]
            });
        },
        /**         * @description 点击统计按钮时的动作: 1.查检是否选择了维度或指标，如果没有弹出提示;2.拼接选择的维度和指标形成接口参数         * @private         * @param {Event} e 点击 事件         * @param {Object} me 二次统计组件对象         */
        _counterStat: function(e, me) {
            var statParams = {
                "DIM": [],
                "COUNTER": []
            }, dimValues, tValues, isalert = false,
                alertContent = ""; //取得选择的指标值
            tValues = me.targetRight.getData();
            dimValues = me.dimsRight.getData(); //先检查用户是否选择了相应的维度或指标值，如果没则弹出提示框
            if (!tValues || tValues.length <= 0) {
                isalert = true;
                alertContent = i18n.select_indicators_msg;
            }
            if (!dimValues || dimValues.length <= 0) {
                isalert = true;
                alertContent = i18n.analysis_dimension_msg;
            }
            if (isalert) {
                Sweet.Dialog.alert({
                    width: 330,
                    height: 130,
                    prompt: i18n.prompt_msg,
                    message: alertContent
                });
                return;
            }
            for (var i = 0; i < tValues.length; i++) {
                var temp = tValues[i].value === btns[4].value ? "*" : tValues[i].value;
                temp = temp.split("_&#&_")[0];
                statParams.COUNTER.push({
                    value: temp,
                    text: tValues[i].text,
                    func: tValues[i].data
                });
            }
            for (var j = 0; j < dimValues.length; j++) {
                statParams.DIM.push({
                    value: dimValues[j].value,
                    text: dimValues[j].text
                });
            } //触发统计点击事件，并带给相应的参数
            if (me.options.statFun && $.isFunction(me.options.statFun)) {
                me.options.statFun(statParams);
            }
            me.wnd.close();
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            var me = this;
            return me.cmpEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            var me = this;
            return me.cmpEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 组件宽度         */
        _setWidth: function(width) {
            var me = this;
            me.cmpEl.externalWidth(width);
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 组件高度         */
        _setHeight: function(height) {
            var me = this;
            me.cmpEl.externalHeight(height);
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        }
    });
    /**     * 二次统计业务组件     * @name Sweet.cmp.SecondaryStat     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.cmp.optimizeListWindow.js     * </pre>     * @example      * <pre>     *  sweetList = new Sweet.cmp.SecondaryStat({     *              dims : [],     *              indicators : [],     *              statFun : function()//回调函数     *          });     * </pre>     */
    Sweet.cmp.SecondaryStat = $.sweet.widgetCmpSecondaryStat;
}(jQuery));;
/** * @fileOverview  * <pre> * 局向组件 * 2014.4.28 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2014,  All rights reserved * </pre> * @version 1.0 */ (function($, undefined) {
    var i18n = Sweet.cmp.i18n.officeDirection,
        labelH = 20,
        combHeight = 25,
        emtyWith = 52, //按钮组宽度
        btnWidth = 50;
    var dimsBtns = [{
        value: "toRight",
        text: ">"
    }, {
        value: "toLeft",
        text: "<"
    }, {
        value: "allToRight",
        text: ">>"
    }, {
        value: "allToLeft",
        text: "<<"
    }];
    $.widget("sweet.widgetCmpOfficeDirection", $.sweet.widgetCmp, /** @lends Sweet.cmp.OfficeDirection*/ {
        version: "1.0",
        eventNames: {},
        sweetWidgetName: "[widget-cmp-officeDirection]",
        type: 'secondaryStat',
        options: /** @lends Sweet.cmp.OfficeDirection*/
        {
            /**             * @description 表格宽度             * @type {Number}             * @default 500px             */
            width: 500,
            /**             * @description 表格高度             * @type {Number}             * @default 400px             */
            height: 400,
            /**             * 局向源下拉框数据信息             * @type Array             * @default []             */
            source: [],
            /**             * 局向目标下拉框数据信息             * @type Array             * @default []             */
            destination: [],
            /**             * 局向列表数据源             * @type Object             * @default {}             */
            data: {},
            /**             * 局向列表数据源是否出现搜索框             * @type Boolean             * @default true             */
            search: true,
            /**             * 局向列表数据源是否出现全选             * @type Boolean             * @default false             */
            all: false,
            /**             * 列表是否出现提示             * @type Boolean             * @default true             */
            tip: true,
            /**             * 选择项和已选项列表每条数据value的分割符             * @type String             * @default "#"             */
            splitMark: "#"
        },
        /**         * @description 初始化设置,取消上次已选数据         */
        clearData: function() {
            var me = this,
                emptyArr = [];
            me.oldSelectedOptVal = [];
            if (me.optionsList) {
                me.optionsList.setData(emptyArr);
            }
            if (me.selectedList) {
                me.selectedList.setData(emptyArr);
            }
            if (me.sourceList) {
                var tempSceData = me.sourceList.getData();
                if (tempSceData && tempSceData.length > 0) {
                    me.sourceList.setValue(emptyArr);
                }
            }
            if (me.destinationList) {
                var tempDestData = me.destinationList.getData();
                if (tempDestData && tempDestData.length > 0) {
                    me.destinationList.setValue(emptyArr);
                }
            }
        },
        /**         * @public         * @description 设置列表数据源         */
        setData: function(data) {
            var me = this,
                key = "";
            if ($.isNotNull(data)) { //重新设置数据后，清空之前选择项和已选列表的数据
                me.clearData();
                me.options.data = data;
                var sourceData = me.sourceCombo.getValue();
                var sourceVal = sourceData.value;
                var destVal = me.destinaCombo.getValue().value;
                if ($.isNotNull(sourceVal) && me.sourceList) {
                    for (key in data) {
                        if (key === sourceVal) {
                            me.sourceList.setData(data[key]);
                            break;
                        }
                    }
                }
                if ($.isNull(destVal) && $.isArray(sourceData.data)) {
                    destVal = sourceData.data[0].value;
                }
                if ($.isNotNull(destVal) && me.destinationList) {
                    for (key in data) {
                        if (key === destVal) {
                            me.destinationList.setData(data[key]);
                            break;
                        }
                    }
                }
            }
        },
        /**         * @description 取得局向的源数据(不是选择的数据)         * @returns {Array} 取得局向的源数据         */
        getOData: function() {
            var me = this,
                data = [];
            if (me.sourceList) {
                data = me.sourceList.getData();
            }
            return data;
        },
        /**         * @description 取得局向的目的数据(不是选择的数据)         * @returns {Array} 取得局向的目的数据         */
        getDData: function() {
            var me = this,
                data = [];
            if (me.destinationList) {
                data = me.destinationList.getData();
            }
            return data;
        },
        /**         * @public         * @description 获取已选列表的数据         */
        getValue: function() {
            var me = this;
            var data = me.selectedList.getData();
            if ($.isNull(data)) {
                data = [];
            }
            return data;
        },
        /**         * @public         * @description 获取已选的源和目标下拉框值         */
        getAllSelValue: function() {
            var me = this,
                data = {}, sourCombVal, destCombVal, sourceListVal, destListVal, selectedListVal;
            sourCombVal = me.sourceCombo.getValue();
            destCombVal = me.destinaCombo.getValue();
            sourceListVal = me.sourceList.getValue();
            destListVal = me.destinationList.getValue();
            selectedListVal = me.selectedList.getData();
            data = {
                "source": sourCombVal,
                "destination": destCombVal,
                "sourceList": sourceListVal,
                "destinationList": destListVal,
                "selectedList": selectedListVal
            };
            return data;
        },
        /**         * @public         * @description 设置下拉框和列表选中的数据         * @param {Array}v: 要反填的数据         */
        setValue: function(v) {
            var me = this;
            if ($.isNotNull(v)) {
                var sourcArr = [],
                    destArr = [],
                    sourVal, destVal, data;
                sourVal = v.source ? v.source : "";
                destVal = v.destination ? v.destination : "";
                data = v.selectedList ? v.selectedList : [];
                sourcArr = v.sourceList ? v.sourceList : [];
                destArr = v.destinationList ? v.destinationList : []; //清空之前已选中的数据
                me.clearData(); //设置源下拉框选中值
                $.isNotNull(sourVal) ? me.sourceCombo.setValue(sourVal) : ""; //设置目标下拉框选中值
                $.isNotNull(destVal) ? me.destinaCombo.setValue(destVal) : ""; //设置已选项列表数据
                me.selectedList.setData(data); //设置源和目标列表选中值
                me.sourceList.setValue(sourcArr);
                me.destinationList.setValue(destArr); //设置选项列表数据
                me._setOptionsListData();
            }
        },
        /**         * @private         * @description 重新绘制布局         */
        _doLayout: function() {
            var me = this;
            me.vPanel.doLayout();
            me.sourceList.doLayout(true);
            me.destinationList.doLayout(true);
            me.optionsList.doLayout(true);
            me.selectedList.doLayout(true);
        },
        /**         * @private         * @description 销毁组件         */
        _destroyWidget: function() {
            var me = this;
            if (me.vPanel) {
                me.vPanel.destroy();
            }
        },
        /**         * @private         * @description 创建组件         */
        _createCmpWidget: function() {
            var me = this;
            me.selListData = [];
            me.optListData = []; //创建上部分列表
            me._createUpList(); //创建下拉框
            me._createCombobox(); //创建中间的label显示
            me._createMidLabel(); //创建下部分列表
            me._createDownList(); /* vpanel中上半部分是可选的列表数据，下半部分是组装源和目标列表数据后的列表数据*/
            var allH = me.options.height + 40;
            var allW = me.options.width + 10;
            me.vPanel = new Sweet.panel.VPanel({
                id: me.options.id,
                height: allH,
                width: allW,
                items: [me.comboHpanel, me.upListHpanel, me.LabelPanel, me.downPanel]
            });
            if (me.options.renderTo) {
                me.vPanel.render(me.options.renderTo);
            }
        },
        /**         * @description 创建源/目标下拉框         * @private         */
        _createCombobox: function() {
            var me = this,
                emptyHpanel, sourceData = me.options.source,
                combWidth = (me.options.width - emtyWith) / 2,
                labelW = 70,
                labelW1 = labelW - 10; //源下拉框
            me.sourceCombo = new Sweet.form.ComboBox_v1({
                label: true,
                labelWidth: labelW1,
                width: combWidth,
                labelText: i18n.sourceCombLabel,
                data: sourceData,
                blank: false,
                tip: true
            });
            me.sourceCombo.addListener("change", function(e, v) {
                if ($.isNotNull(v)) {
                    me._sourceCombChange(v);
                }
            });
            emptyHpanel = new Sweet.panel.HPanel({
                width: emtyWith,
                height: "100%",
                items: []
            }); //目标下拉框
            me.destinaCombo = new Sweet.form.ComboBox_v1({
                label: true,
                labelWidth: labelW,
                width: combWidth,
                blank: false,
                labelText: i18n.destinationCombLabel,
                tip: true
            });
            me.destinaCombo.addListener("change", function(e, v) {
                if ($.isNotNull(v)) {
                    me._destinationCombChange(v);
                }
            });
            me.comboHpanel = new Sweet.panel.HPanel({
                width: "100%",
                height: combHeight,
                itemExtend: false,
                items: [me.sourceCombo, emptyHpanel, me.destinaCombo]
            }); //初始默认选中第一条
            me.sourceCombo.setValue(sourceData[0]);
        },
        /**         * @description 源下拉框 change 事件         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:"",data:[{value:"", text:""},{value:"", text:""}]}         * @private         */
        _sourceCombChange: function(value) {
            var me = this,
                v = value,
                destiData = [],
                temp = [];
            me.optionsList ? me.optionsList.setData(temp) : "";
            me.selectedList ? me.selectedList.setData(temp) : "";
            if (v.data && v.data.length > 0) {
                destiData = v.data;
            }
            if (me.destinaCombo) {
                me.destinaCombo.setData(destiData);
            }
            if ($.isNotNull(me.options.data) && $.isNotNull(v)) {
                var temp = me.options.data,
                    key;
                if (me.sourceList) {
                    for (key in temp) {
                        if (key === v.value) {
                            me.sourceList.setData(temp[key]);
                            break;
                        }
                    }
                }
            }
        },
        /**         * @description 目标下拉框 change 事件         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         * @private         */
        _destinationCombChange: function(value) {
            var me = this,
                v = value,
                temp = [];
            me.optionsList ? me.optionsList.setData(temp) : "";
            me.selectedList ? me.selectedList.setData(temp) : "";
            if ($.isNotNull(me.options.data) && $.isNotNull(v)) {
                var temp = me.options.data,
                    key;
                if (me.destinationList) {
                    for (key in temp) {
                        if (key === v.value) {
                            me.destinationList.setData(temp[key]);
                            break;
                        }
                    }
                }
            }
        },
        /**         * @description 创建上部分列表         * @private         */
        _createUpList: function() {
            var me = this,
                opt = me.options,
                emptyHpanel, h = (opt.height - combHeight) / 2,
                listW = (opt.width - emtyWith) / 2;
            me.sourceList = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                search: opt.search,
                all: opt.all,
                tip: opt.tip,
                isBorder: true
            });
            me.sourceList.addListener("checkboxClick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._setOptionsListData(v);
                }
            });
            me.sourceList.addListener("checkboxAllClick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._setOptionsListData(v);
                }
            });
            emptyHpanel = new Sweet.panel.HPanel({
                width: emtyWith,
                height: "100%",
                items: []
            });
            me.destinationList = new Sweet.list.OptimizeList({
                width: listW,
                height: h,
                multi: true,
                search: opt.search,
                all: opt.all,
                tip: opt.tip,
                isBorder: true
            });
            me.destinationList.addListener("checkboxClick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._setOptionsListData(v);
                }
            });
            me.destinationList.addListener("checkboxAllClick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._setOptionsListData(v);
                }
            });
            me.upListHpanel = new Sweet.panel.HPanel({
                width: "100%",
                height: h,
                itemExtend: false,
                items: [me.sourceList, emptyHpanel, me.destinationList]
            });
        },
        /**         * @description 创建中间部分label         * @private         */
        _createMidLabel: function() {
            var me = this,
                opt = me.options,
                labelW = (opt.width - emtyWith) / 2;
            var leftLabel = new Sweet.form.LabelField({
                width: labelW,
                label: false,
                height: labelH,
                type: 2,
                value: {
                    "text": i18n.optionsMsg
                }
            });
            var emptyHpanel = new Sweet.panel.HPanel({
                width: emtyWith,
                height: "100%",
                items: []
            });
            var rightLabel = new Sweet.form.LabelField({
                width: labelW,
                label: false,
                height: labelH,
                type: 2,
                value: {
                    "text": i18n.selectedMsg
                }
            });
            me.LabelPanel = new Sweet.panel.HPanel({
                width: "100%",
                height: labelH,
                itemExtend: false,
                items: [leftLabel, emptyHpanel, rightLabel]
            });
        },
        /**         * @description 创建下部分列表         * @private         */
        _createDownList: function() {
            var me = this,
                opt = me.options,
                listW = (opt.width - emtyWith) / 2,
                panelW = listW,
                panelH = (opt.height - combHeight) / 2,
                listH = panelH - 10,
                btnW = btnWidth,
                emptyW = emtyWith,
                btnEmptyH = 2,
                btnH = 25,
                marginTop = (listH - btnH * 6) / 2;
            me.optionsList = new Sweet.list.OptimizeList({
                width: listW,
                height: listH,
                multi: true,
                type: 2,
                tip: opt.tip,
                isBorder: true
            });
            me.optionsList.addListener("dblclick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._optionsListDbClick(e, v);
                }
            }); /* > 按钮*/
            me.toRightBtn = new Sweet.form.Button({
                value: dimsBtns[0],
                width: btnW
            });
            me.toRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* < 按钮*/
            me.toLeftBtn = new Sweet.form.Button({
                value: dimsBtns[1],
                width: btnW
            });
            me.toLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* >> */
            me.toAllRightBtn = new Sweet.form.Button({
                value: dimsBtns[2],
                width: btnW
            });
            me.toAllRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            }); /* << 按钮*/
            me.toAllLefttBtn = new Sweet.form.Button({
                value: dimsBtns[3],
                width: btnW
            });
            me.toAllLefttBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
            var emptyHpanel0, emptyHpanel1, emptyHpanel2, emptyHpanel3;
            emptyHpanel0 = new Sweet.panel.HPanel({
                width: "100%",
                height: marginTop,
                items: []
            });
            emptyHpanel1 = new Sweet.panel.HPanel({
                width: "100%",
                height: btnEmptyH,
                items: []
            });
            emptyHpanel2 = new Sweet.panel.HPanel({
                width: "100%",
                height: btnEmptyH,
                items: []
            });
            emptyHpanel3 = new Sweet.panel.HPanel({
                width: "100%",
                height: btnEmptyH,
                items: []
            });
            var allbtns = [emptyHpanel0, me.toRightBtn, emptyHpanel1, me.toLeftBtn, emptyHpanel2, me.toAllRightBtn, emptyHpanel3, me.toAllLefttBtn];
            me.toWherePanel = new Sweet.panel.VPanel({
                height: "100%",
                width: emptyW,
                items: allbtns
            });
            me.selectedList = new Sweet.list.OptimizeList({
                width: listW,
                height: listH,
                isBorder: true,
                multi: true,
                tip: opt.tip,
                data: []
            });
            me.selectedList.addListener("dblclick", function(e, v) {
                if ($.isNotNull(v)) {
                    me._selectedListDbClick(e, v);
                }
            });
            me.downPanel = new Sweet.panel.HPanel({
                width: "100%",
                height: panelH,
                itemExtend: false,
                items: [me.optionsList, me.toWherePanel, me.selectedList]
            });
        },
        /**         * @description 根据源和目标列表的选中的值组合后设置选项列表数据         * @private         * @param {Object} value:当前复选框的值，形如{value:"", text:"", checked:false}         */
        _setOptionsListData: function(value) {
            var me = this,
                tempSourceData = [],
                tempDestData = [],
                tempOpt = {
                    value: "",
                    text: ""
                }, tempData = [],
                sourLen = 0,
                destLen = 0,
                tempSour, tempDest, tempKey = "",
                tempStr = "";
            me.oldSelectedOptVal = me.optionsList.getValue();
            me.optionsList.setData([]);
            tempSourceData = me.sourceList.getValue();
            tempDestData = me.destinationList.getValue();
            sourLen = tempSourceData.length;
            destLen = tempDestData.length;
            for (var i = 0; i < sourLen; i++) {
                tempSour = tempSourceData[i];
                for (var j = 0; j < destLen; j++) {
                    tempDest = tempDestData[j];
                    if (tempSour.value !== tempDest.value) {
                        tempKey = tempSour.value + me.options.splitMark + tempDest.value;
                        tempStr = tempSour.text + "-" + tempDest.text;
                        tempOpt = {
                            value: tempKey,
                            text: tempStr
                        };
                        tempData.push(tempOpt);
                    }
                }
            }
            me.optionsList.setData(tempData);
            if (me.oldSelectedOptVal && me.oldSelectedOptVal.length > 0) {
                me.optionsList.setValue(me.oldSelectedOptVal);
            } //更新已选择列表的数据
            if ($.isNotNull(value)) {
                me._updateSelectedListData(value);
            }
        },
        /**         * @description 更新已选择列表的数据         * @private         * @param {Array} value: 源或者目标取消选中复选框的数据         */
        _updateSelectedListData: function(value) {
            var me = this,
                oldSelListData = me.selectedList.getData(),
                tempSelArr = [],
                tempStrArr;
            if (oldSelListData && oldSelListData.length > 0 && value && !value.checked) {
                var unCheckKey = String(value.value);
                var unSelecVal = {
                    "value": unCheckKey,
                    "text": value.text
                };
                for (var k = 0; k < oldSelListData.length; k++) {
                    tempStrArr = oldSelListData[k].value.split(me.options.splitMark);
                    if (tempStrArr[0] === unCheckKey || tempStrArr[1] === unCheckKey) {
                        tempSelArr.push(oldSelListData[k]);
                    }
                }
                var rdata = [],
                    find = false;
                for (var t = 0; t < oldSelListData.length; t++) {
                    find = false;
                    for (var v = 0; v < tempSelArr.length; v++) {
                        if (oldSelListData[t].value === tempSelArr[v].value) {
                            find = true;
                            break;
                        }
                    }
                    if (!find) {
                        rdata.push(JSON.parse(JSON.stringify(oldSelListData[t])));
                    }
                }
                me._dealMoveBtns(rdata);
            }
        },
        /**         * @description 设置已选项列表数据         * @private         * @param {Array} data:已选项列表数据         */
        _dealMoveBtns: function(data) {
            var me = this,
                rObj = me.selectedList;
            if (rObj) {
                rObj.setData(data);
            }
        },
        /**         * @description 按钮列的点击事件，按钮列为：>, <, >>, <<         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object} value:当前按钮值，形如{value:"", text:""}         */
        _moveButtonClick: function(e, v) {
            var me = this;
            switch (v.value) { //移动到右边
                case dimsBtns[0].value:
                    var rValue = me.optionsList.getValue(); //左侧没有选择数据时，不进行处理
                    if ($.isEmptyObject(rValue) || $.isNull(rValue) || ($.isArray(rValue) && rValue.length === 0)) {
                        return;
                    }
                    me._dealMoveBtns(rValue);
                    break; //将右边选中的值移动到左边
                case dimsBtns[1].value:
                    var rdata = [];
                    var tempData = me.selectedList.getData();
                    var selectedData = me.selectedList.getValue();
                    if (!tempData || !selectedData) {
                        return;
                    } //存放右边除去选中的值剩下的值
                    var find = false;
                    for (var i = 0; i < tempData.length; i++) {
                        find = false;
                        for (var j = 0; j < selectedData.length; j++) {
                            if (tempData[i].value === selectedData[j].value) {
                                find = true;
                                break;
                            }
                        }
                        if (!find) {
                            rdata.push(JSON.parse(JSON.stringify(tempData[i])));
                        }
                    }
                    me._dealMoveBtns(rdata);
                    break; //将左边的值全部移动到右边
                case dimsBtns[2].value:
                    var rdata = [];
                    rdata = me.optionsList.getData();
                    me._dealMoveBtns(rdata);
                    break; //将右边的值全部移动到左边
                case dimsBtns[3].value:
                    var rdata = [];
                    me._dealMoveBtns(rdata);
                    break;
            }
        },
        /**         * @description 选择项列表双击事件         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         */
        _optionsListDbClick: function(e, value) {
            var me = this;
            var oldSelData = me.selectedList.getData();
            var flag = false;
            if (!value) {
                return;
            }
            for (var i = 0; i < oldSelData.length; i++) {
                if (oldSelData[i].value === value.value) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                oldSelData.push(value);
            }
            me._dealMoveBtns(oldSelData);
        },
        /**         * @description 已选项列表双击事件         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         */
        _selectedListDbClick: function(e, value) {
            var me = this;
            var rdata = [];
            var tempData = me.selectedList.getData();
            var selectedData = value;
            if (!tempData || !selectedData) {
                return;
            } //存放右边除去选中的值剩下的值
            var find = false;
            for (var i = 0; i < tempData.length; i++) {
                find = false;
                if (tempData[i].value === selectedData.value) {
                    find = true;
                    break;
                }
                if (!find) {
                    rdata.push(JSON.parse(JSON.stringify(tempData[i])));
                }
            }
            me._dealMoveBtns(rdata);
        },
        /**         * @description 渲染组件         * @param {String} id 组件ID         */
        _render: function(id) {
            var me = this;
            if (!id || me.rendered) {
                return false;
            }
            if (!me.renderEl) { // 创建宿主元素
                if (!me._createRenderEl(id)) {
                    return false;
                }
            }
            me.vPanel.render(id);
            me.rendered = true;
            return true;
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            var me = this;
            return me.cmpEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            var me = this;
            return me.cmpEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 组件宽度         */
        _setWidth: function(width) {
            var me = this;
            me.cmpEl.externalWidth(width);
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 组件高度         */
        _setHeight: function(height) {
            var me = this;
            me.cmpEl.externalHeight(height);
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me._setWidth(width);
            me._setHeight(height);
        }
    });
    /**     * 局向组件     * @name Sweet.cmp.OfficeDirection     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.cmp.optimizeListWindow.js     * </pre>     * @example      * <pre>     * var tempdata=[], tempsoftdata=[], tempservicedata=[];     * var sourceCombData = [{value:"msc", text:"MSC", data:[{value:"msc", text:"MSC"},{value:"msc2", text:"SofteSwith"}]},     *                      {value:"msc2", text:"SofteSwith",data:[{value:"msc", text:"MSC"},{value:"msc2", text:"SofteSwith"},{value:"msc3", text:"ServiceNode"}]},     *                      {value:"msc3", text:"ServiceNode",data:[{value:"msc2", text:"SofteSwith"},{value:"msc3", text:"ServiceNode"}]}];     * var listData = {"msc":tempdata, "msc2":tempsoftdata, "msc3":tempservicedata};     * var sweetList = new Sweet.cmp.OfficeDirection({     *     data: listData,     *     source: sourceCombData     * });     * </pre>     */
    Sweet.cmp.OfficeDirection = $.sweet.widgetCmpOfficeDirection;
}(jQuery));;
/** * @fileOverview  * <pre> * 局向组件 * 2014.07.25 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */ (function($, undefined) {
    var officeDirectionLPanelClass = "sweet-cmp-officedirectionv1-lpanel",
        officeDirectionRPanelClass = "sweet-cmp-officedirectionv1-rpanel",
        officeDirectionMPanelClass = "sweet-cmp-officedirectionv1-mpanel",
        officeDirectionBtnPanelClass = "sweet-cmp-officedirectionv1-btnpanel",
        officeDirectionComboboxClass = "sweet-cmp-officedirectionv1-combobox",
        officeDirectionTreeClass = "sweet-cmp-officedirectionv1-tree",
        officeDirectionTitleClass = "sweet-cmp-officedirectionv1-title",
        officeDirectionListBodyClass = "sweet-cmp-officedirectionv1-listbody",
        eventChange = "change",
        eventCheckChange = "checkchange",
        eventBeforeMoveRight = "beforemoveright",
        eventLoad = "load",
        eventBeforeLoad = "beforeload",
        eventSourceComboboxChange = "sourcecomboboxchange",
        OPTIONS_TITLE = Sweet.cmp.i18n.officeDirection.optionsMsg,
        SELECTED_TITLE = Sweet.cmp.i18n.officeDirection.selectedMsg,
        ACTION_BTNS = [{
            value: "_moveRight",
            text: " > "
        }, {
            value: "_moveLeft",
            text: " < "
        }, {
            value: "_allMoveRight",
            text: " >> "
        }, {
            value: "_allMoveLeft",
            text: " << "
        }],
        officeDirectionV1Prefix = "sweet-cmp-officeDirectionv1",
        uuid = uuid || 1000;
    $.widget("sweet.widgetCmpOfficeDirection_v1", $.sweet.widgetCmp, /** @lends Sweet.cmp.OfficeDirection_v1*/ {
        version: "1.0",
        sweetWidgetName: "[widget-cmp-officeDirectionv1]",
        type: 'officeDirectionv1',
        eventNames: /** @lends Sweet.cmp.OfficeDirection_v1.prototype */
        {
            /**             * @event             * @description 右移前事件             */
            beforemoveright: "右移前事件",
            /**             * @event             * @description 源下拉列表change事件,如果返回true则会更新目的下拉列表的数据             */
            sourcecomboboxchange: "源下拉列表change事件"
        },
        options: /** @lends Sweet.cmp.OfficeDirection_v1*/
        {
            /**             * 组件数据,包括源目的下拉框数据及列表数据             * @type Object             * @default {}             */
            data: {},
            /**             * 组件值数据信息,包括源下拉框选中值sComValue、目的下拉框选中值dComValue、源列表选中值sSelect、目的列表选中值dSelect、待选列表数据optionsDatas、已选列表数据selectedDatas             * 数据结构: {sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}             * @type Array             * @default null             */
            value: null,
            /**             * 左列表title             * @type String             * @default ""             */
            sLabel: Sweet.cmp.i18n.officeDirection.sourceCombLabel,
            /**             * 右列表title             * @type String             * @default ""             */
            dLabel: Sweet.cmp.i18n.officeDirection.destinationCombLabel,
            /**             * 是否有提示             * @type {Boolean}             * @default false             */
            tip: true,
            /**             * 是否显示树节点的图标             * @type {Boolean}             * @default true             */
            icon: true,
            /**             * 是否显示节点之间的连线             * @type {Boolean}             * @default true             */
            useArrows: true,
            /**             * options和selected列表每条数据value的分割符             * @type {String}             * @default "#&#*#&#"             */
            valueSplit: "#&#*#&#",
            /**             * options和selected列表每条数据text的分割符             * @type {String}             * @default "-"             */
            textSplit: "-"
        },
        /**         * @description 为源tree(左边的tree列表)设置数据,并且清除右边tree的数据         * @param {Array} data 数据结构必须是数组         */
        setData: function(data) {
            var me = this;
            me.options.data = data;
            me._initData();
            if (me.sTree) {
                me.sTree.setData(null);
            }
            if (me.dTree) {
                me.dTree.setData(null);
            }
            if (me.optionsList) {
                me.optionsList.setData(null);
            }
            if (me.selectedList) {
                me.selectedList.setData(null);
            }
            if (me.sCombobox) {
                me.sCombobox.setData(me.sComDatas);
            }
            if (me.dCombobox) {
                me.dCombobox.setData(me.dComDatas);
            }
        },
        /**         * @description 设置值         * @param {Object} value 值{sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}         */
        setValue: function(value) {
            var me = this,
                sComValue = {}, dComValue = {}, sSelected = [],
                dSelected = [],
                optionsDatas = [],
                selectedDatas = [];
            if (!$.isEmptyObject(value)) {
                sComValue = value["sComValue"];
                dComValue = value["dComValue"];
                sSelected = value["sSelected"];
                dSelected = value["dSelected"];
                optionsDatas = value["optionsDatas"];
                selectedDatas = value["selectedDatas"];
            }
            if (me.sCombobox) {
                me.sCombobox.setValue(sComValue);
            }
            if (me.dCombobox) {
                me.dCombobox.setValue(dComValue);
            }
            if (me.sTree) {
                me.sTree.setValue(sSelected);
            }
            if (me.dTree) {
                me.dTree.setValue(dSelected);
            }
            if (me.optionsList) {
                me.optionsList.setData(optionsDatas);
            }
            if (me.selectedList) {
                me.selectedList.setData(selectedDatas);
            }
        },
        /**         * @description 获取数据         * @returns {Object} value 值{sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}         */
        getValue: function() {
            var me = this,
                value = {}, sComValue = {}, dComValue = {}, sSelected = [],
                dSelected = [],
                optionsDatas = [],
                selectedDatas = [];
            if (me.sCombobox) {
                sComValue = me.sCombobox.getValue();
            }
            if (me.dCombobox) {
                dComValue = me.dCombobox.getValue();
            }
            if (me.sTree) {
                sSelected = me.sTree.getValue();
            }
            if (me.dTree) {
                dSelected = me.dTree.getValue();
            }
            if (me.optionsList) {
                optionsDatas = me.optionsList.getCurrentData();
            }
            if (me.selectedList) {
                selectedDatas = me.selectedList.getCurrentData();
            }
            value["sComValue"] = sComValue;
            value["dComValue"] = dComValue;
            value["sSelected"] = sSelected;
            value["dSelected"] = dSelected;
            value["optionsDatas"] = optionsDatas;
            value["selectedDatas"] = selectedDatas;
            return value;
        },
        /**         * @description 销毁treeWindowow组件及其中的事件和数据等         */
        _destroyWidget: function() {
            var me = this;
            me._super();
            if (me.officeDirectionEl) {
                me.officeDirectionEl.remove();
            }
            if (me.sCombobox) {
                me.sCombobox.destroy();
            }
            if (me.dCombobox) {
                me.dCombobox.destroy();
            }
            if (me.sTree) {
                me.sTree.destroy();
            }
            if (me.dTree) {
                me.dTree.destroy();
            }
            if (me.optionsList) {
                me.optionsList.destroy();
            }
            if (me.vpBtns) {
                me.vpBtns.destroy();
            }
            if (me.selectedList) {
                me.selectedList.destroy();
            }
        },
        /**         * @private         * @description 创建列表组件         */
        _createSweetWidget: function() {
            var me = this,
                id = me.options.id,
                widgetClass = me.options.widgetClass,
                lPanelDiv, rPanelDiv;
            me.btnWidth = 60;
            me.btnMargin = 5;
            me._initData(); //主面板
            me.officeDirectionEl = $("<div>").attr("id", me.options.id);
            if (widgetClass && "" != widgetClass) {
                me.officeDirectionEl.addClass(widgetClass);
            } //左面板:其中装有源下拉框、源数据、options
            lPanelDiv = $("<div>").addClass(officeDirectionLPanelClass).appendTo(me.officeDirectionEl); //源下拉框渲染的dom ID
            me.__sComRenderID = id + "-" + officeDirectionV1Prefix + "-scombobox-" + uuid;
            $("<div>").attr("id", me.__sComRenderID).addClass(officeDirectionComboboxClass).appendTo(lPanelDiv); //源树渲染的dom ID
            me.__sTreeRenderID = id + "-" + officeDirectionV1Prefix + "-stree-" + uuid;
            $("<div>").attr("id", me.__sTreeRenderID).addClass(officeDirectionTreeClass).appendTo(lPanelDiv); //options标题
            me.optionsTitleDiv = $("<div>").addClass(officeDirectionTitleClass).appendTo(lPanelDiv);
            me.optionsTitleEl = $("<span>").appendTo(me.optionsTitleDiv); //options列表渲染的dom ID
            me.__optionsListRenderID = id + "-" + officeDirectionV1Prefix + "-optionslist-" + uuid;
            $("<div>").attr("id", me.__optionsListRenderID).appendTo(lPanelDiv); //中间面板:其中装有操作button
            me.mPanelDiv = $("<div>").addClass(officeDirectionMPanelClass).height(me.options.height).appendTo(me.officeDirectionEl);
            me.mTopDiv = $("<div>").appendTo(me.mPanelDiv); //中间操作按钮panel渲染的dom ID
            me.__mOptBtnPanelRenderID = id + "-" + officeDirectionV1Prefix + "-optbtnpanel-" + uuid;
            $("<div>").attr("id", me.__mOptBtnPanelRenderID).addClass(officeDirectionBtnPanelClass).appendTo(me.mPanelDiv); //左面板:其中装有目的下拉框、目的数据、selected
            rPanelDiv = $("<div>").addClass(officeDirectionRPanelClass).appendTo(me.officeDirectionEl); //目的下拉框渲染的dom ID
            me.__dComRenderID = id + "-" + officeDirectionV1Prefix + "-dcombobox-" + uuid;
            $("<div>").attr("id", me.__dComRenderID).addClass(officeDirectionComboboxClass).appendTo(rPanelDiv); //目的树渲染的dom ID
            me.__dTreeRenderID = id + "-" + officeDirectionV1Prefix + "-dtree-" + uuid;
            $("<div>").attr("id", me.__dTreeRenderID).addClass(officeDirectionTreeClass).appendTo(rPanelDiv); //selected标题
            me.selectedTitleDiv = $("<div>").addClass(officeDirectionTitleClass).appendTo(rPanelDiv);
            me.selectedTitleEl = $("<span>").appendTo(me.selectedTitleDiv); //options列表渲染的dom ID
            me.__selectedListRenderID = id + "-" + officeDirectionV1Prefix + "-selectedlist-" + uuid;
            $("<div>").attr("id", me.__selectedListRenderID).appendTo(rPanelDiv); // 创建组件
            me._createOfficeDirectionPanel(); // 注册事件
            me._registInitEvent();
        },
        /**         * @private         * @description 源数据的初始化处理         */
        _initData: function() {
            var me = this; //原始数据初始化
            if (!me.options.data) {
                me.options.data = {
                    sData: [],
                    dData: []
                };
            } else {
                if (!me.options.data["sData"]) {
                    me.options.data["sData"] = [];
                }
                if (!me.options.data["dData"]) {
                    me.options.data["dData"] = [];
                }
            }
            me.sComDatas = [];
            me.dComDatas = [];
            for (var i = 0; i < me.options.data["sData"].length; i++) {
                me.sComDatas.push({
                    value: me.options.data["sData"][i]["value"],
                    text: me.options.data["sData"][i]["text"],
                    data: me.options.data["sData"][i]["data"]
                });
            }
            for (var i = 0; i < me.options.data["dData"].length; i++) {
                me.dComDatas.push({
                    value: me.options.data["dData"][i]["value"],
                    text: me.options.data["dData"][i]["text"],
                    data: me.options.data["dData"][i]["data"]
                });
            }
        },
        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */
        _render: function(id) {
            var me = this;
            if (!me._super(id)) {
                return false;
            }
            me.officeDirectionEl.appendTo(me.renderEl);
            me.sCombobox.render(me.__sComRenderID);
            me.dCombobox.render(me.__dComRenderID);
            me.sTree.render(me.__sTreeRenderID);
            me.dTree.render(me.__dTreeRenderID);
            me.optionsList.render(me.__optionsListRenderID);
            me.vpBtns.render(me.__mOptBtnPanelRenderID);
            me.selectedList.render(me.__selectedListRenderID); //调整布局,当创建完再设置文本
            me.optionsTitleEl.text(OPTIONS_TITLE);
            me.selectedTitleEl.text(SELECTED_TITLE);
            me.rendered = true;
            me.sCombobox.setData(me.sComDatas);
            me.dCombobox.setData(me.dComDatas);
            if (!$.isEmptyObject(me.options.value)) {
                me.setValue(me.options.value);
            }
            return true;
        },
        /**         * @description 创建主面板         * @private         */
        _createOfficeDirectionPanel: function() {
            var me = this,
                btnWidth = me.btnWidth, //两个btn组的间距
                btnGroupPadding = 30,
                btnGroupH = 60,
                listeners, width, height, treeWidth, titleHeight = 18,
                comboboxHeight = 22,
                treeHeight, padding = me.btnMargin,
                tPadding = 20,
                btnPanelHeight, tLabelPadding = 10,
                tTitleEl; //事件处理
            listeners = me.options["listeners"];
            if (!$.isEmptyObject(listeners)) {
                for (var key in listeners) {
                    me.addListener(("" + key), listeners[key]);
                }
            } //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱
            width = me.officeDirectionEl.width();
            height = me.officeDirectionEl.height();
            me.treeWidth = treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);
            me.treeHeight = treeHeight = Math.floor((height - comboboxHeight - titleHeight - tPadding) / 2);
            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;
            me.mTopDiv.width(btnWidth + padding * 2).height(height - treeHeight + (treeHeight - btnPanelHeight) / 2); //预渲染获取label的宽度
            me.comboboxLabelWidth = 52;
            tTitleEl = $("<span>").css({
                display: "block",
                position: "absolute",
                top: "-500px"
            }).html(me.options.sLabel).appendTo("body");
            me.comboboxLabelWidth = tTitleEl.width();
            tTitleEl.html(me.options.dLabel);
            if (me.comboboxLabelWidth < tTitleEl.width()) {
                me.comboboxLabelWidth = tTitleEl.width();
            }
            tTitleEl.remove();
            me.comboboxLabelWidth = me.comboboxLabelWidth + tLabelPadding;
            me.sCombobox = new Sweet.form.ComboBox_v1({
                label: true,
                width: treeWidth,
                labelText: me.options.sLabel,
                blank: false,
                labelWidth: me.comboboxLabelWidth,
                tip: me.options.tip
            });
            me.dCombobox = new Sweet.form.ComboBox_v1({
                label: true,
                width: treeWidth,
                labelText: me.options.dLabel,
                blank: false,
                labelWidth: me.comboboxLabelWidth,
                tip: me.options.tip
            }); //左树
            me.sTree = new Sweet.tree.Tree_v1({
                width: treeWidth,
                height: treeHeight,
                search: true,
                multi: true,
                tip: me.options.tip,
                icon: me.options.icon,
                useArrows: me.options.useArrows
            }); //右树
            me.dTree = new Sweet.tree.Tree_v1({
                width: treeWidth,
                height: treeHeight,
                search: true,
                multi: true,
                tip: me.options.tip,
                icon: me.options.icon,
                useArrows: me.options.useArrows
            });
            me.optionsList = new Sweet.list.OptimizeList({
                width: treeWidth,
                height: treeHeight,
                widgetClass: officeDirectionListBodyClass,
                multi: true,
                isBorder: true,
                tip: true,
                search: false
            });
            me.selectedList = new Sweet.list.OptimizeList({
                width: treeWidth,
                height: treeHeight,
                widgetClass: officeDirectionListBodyClass,
                multi: true,
                isBorder: true,
                tip: true,
                search: false
            }); //右移按钮
            me._createMoveRightBtn(); //左移按钮
            me._createMoveLeftBtn(); //全部右移按钮
            me._createMoveAllRightBtn(); //全部左移按钮
            me._createMoveAllLeftBtn();
            me.vpUp = new Sweet.panel.VPanel({
                height: btnGroupH,
                width: btnWidth,
                items: [me.moveRightBtn, me.moveLeftBtn]
            });
            me.vpDown = new Sweet.panel.VPanel({
                height: btnGroupH,
                width: btnWidth,
                items: [me.moveAllRightBtn, me.moveAllLeftBtn]
            });
            me.vpBtns = new Sweet.panel.VPanel({
                height: btnPanelHeight,
                padding: btnGroupPadding,
                items: [me.vpUp, me.vpDown]
            });
        },
        /**         * @private         * @description 组件重绘         */
        _doLayout: function() {
            var me = this,
                btnWidth = me.btnWidth, //两个btn组的间距
                btnGroupPadding = 30,
                btnGroupH = 60,
                width, height, treeWidth, titleHeight = 18,
                comboboxHeight = 22,
                treeHeight, padding = me.btnMargin,
                tPadding = 20,
                btnPanelHeight; //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱
            width = me.officeDirectionEl.width();
            height = me.officeDirectionEl.height();
            me.treeWidth = treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);
            titleHeight = me.optionsTitleDiv.outerHeight();
            comboboxHeight = me.sCombobox.getHeight();
            me.treeHeight = treeHeight = Math.floor((height - comboboxHeight - titleHeight - tPadding) / 2);
            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;
            me.mTopDiv.width(btnWidth + padding * 2).height(height - treeHeight + (treeHeight - btnPanelHeight) / 2);
            me.mPanelDiv.height(height);
            if (me.sCombobox) {
                me.sCombobox.setWidth(treeWidth);
            }
            if (me.dCombobox) {
                me.dCombobox.setWidth(treeWidth);
            }
            if (me.sTree) {
                me.sTree.setWH(treeWidth, treeHeight);
                me.sTree.doLayout(true);
            }
            if (me.dTree) {
                me.dTree.setWH(treeWidth, treeHeight);
                me.dTree.doLayout(true);
            }
            if (me.optionsList) {
                me.optionsList.setWH(treeWidth, treeHeight);
                me.optionsList.doLayout(true);
            }
            if (me.selectedList) {
                me.selectedList.setWH(treeWidth, treeHeight);
                me.selectedList.doLayout(true);
            }
        },
        /**         * @private         * @description 创建右移按钮,并注册事件处理         */
        _createMoveRightBtn: function() {
            var me = this,
                btnWidth = me.btnWidth; //右移按钮
            me.moveRightBtn = new Sweet.form.Button({
                value: ACTION_BTNS[0],
                width: btnWidth
            }); //右移事件
            me.moveRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建左移按钮,并注册事件处理         */
        _createMoveLeftBtn: function() {
            var me = this,
                btnWidth = me.btnWidth; //右移按钮
            me.moveLeftBtn = new Sweet.form.Button({
                value: ACTION_BTNS[1],
                width: btnWidth
            }); //右移事件
            me.moveLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建全部右移按钮,并注册事件处理         */
        _createMoveAllRightBtn: function() {
            var me = this,
                btnWidth = me.btnWidth; //右移按钮
            me.moveAllRightBtn = new Sweet.form.Button({
                value: ACTION_BTNS[2],
                width: btnWidth
            }); //右移事件
            me.moveAllRightBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 创建全部左移按钮,并注册事件处理         */
        _createMoveAllLeftBtn: function() {
            var me = this,
                btnWidth = me.btnWidth; //右移按钮
            me.moveAllLeftBtn = new Sweet.form.Button({
                value: ACTION_BTNS[3],
                width: btnWidth
            }); //右移事件
            me.moveAllLeftBtn.addListener("click", function(e, v) {
                me._moveButtonClick(e, v);
            });
        },
        /**         * @private         * @description 移动操作处理         * @param {Object} e 事件对象         * @param {Object} v 点击btn的value         */
        _moveButtonClick: function(e, v) {
            var me = this;
            switch (v.value) {
                case ACTION_BTNS[0].value:
                    me.moveRight();
                    break;
                case ACTION_BTNS[1].value:
                    me.moveLeft();
                    break;
                case ACTION_BTNS[2].value:
                    me.moveAllRight();
                    break;
                case ACTION_BTNS[3].value:
                    me.moveAllLeft();
                    break;
            }
        },
        /**         * @description 右移操作处理         */
        moveRight: function() {
            var me = this,
                lValue = [],
                rDatas, flag;
            if (!me.optionsList || !me.selectedList) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            lValue = me.optionsList.getValue(); //左侧没有选择数据时，不进行处理
            if (!lValue || lValue.length <= 0) {
                me.__isDoMoving = false;
                return;
            } //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边
            rDatas = me.selectedList.getCurrentData();
            if (rDatas && rDatas.length > 0) {
                rDatas = me._deleteArraysSimilar(lValue, rDatas);
            } else {
                rDatas = lValue;
            } //左右数据不一致时才setData
            flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);
            if (false === flag || "false" === flag) {
                me.__isDoMoving = false;
                return;
            }
            me.selectedList.setData(rDatas);
            me.__isDoMoving = false;
        },
        /**         * @description 左移操作处理         */
        moveLeft: function() {
            var me = this,
                rValue, rDatas;
            if (!me.optionsList || !me.selectedList) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            rValue = me.selectedList.getValue(); //如果右侧没有选择,则不做操作
            if (!rValue || rValue.length <= 0) {
                me.__isDoMoving = false;
                return;
            }
            rDatas = me.selectedList.getCurrentData();
            rDatas = me._minusArrays(rDatas, rValue);
            me.selectedList.setData(rDatas);
            me.__isDoMoving = false;
        },
        /**         * @description 全部右移操作处理         */
        moveAllRight: function() {
            var me = this,
                lDatas, rDatas, flag;
            if (!me.optionsList || !me.selectedList) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            lDatas = me.optionsList.getCurrentData();
            if (!lDatas || lDatas.length <= 0) {
                me.__isDoMoving = false;
                return;
            }
            rDatas = me.selectedList.getCurrentData();
            if (rDatas && rDatas.length > 0) {
                rDatas = me._deleteArraysSimilar(lDatas, rDatas);
            } else {
                rDatas = lDatas;
            } //左右树数据不一样时触发右移事件
            flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);
            if (false === flag || "false" === flag) {
                me.__isDoMoving = false;
                return;
            }
            me.selectedList.setData(rDatas);
            me.__isDoMoving = false;
        },
        /**         * @description 全部左移操作处理         */
        moveAllLeft: function() {
            var me = this;
            if (!me.selectedList) {
                return;
            } //本次移动未完成,禁止下次移动操作
            if (me.__isDoMoving) {
                return;
            }
            me.__isDoMoving = true;
            me.selectedList.setData([]);
            me.__isDoMoving = false;
        },
        /**         * @private         * @description 获取组件宽度         */
        _getWidth: function() {
            return this.officeDirectionEl.externalWidth();
        },
        /**         * @private         * @description 获取组件高度         */
        _getHeight: function() {
            return this.officeDirectionEl.externalHeight();
        },
        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */
        _setWidth: function(width) {
            this.officeDirectionEl.externalWidth(width);
        },
        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */
        _setHeight: function(height) {
            this.officeDirectionEl.externalHeight(height);
        },
        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */
        _setWH: function(width, height) {
            var me = this;
            me.officeDirectionEl.externalWidth(width);
            me.officeDirectionEl.externalHeight(height);
        },
        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */
        _triggerHandler: function(e, eName, data) {
            var me = this,
                result;
            if ($.isNull(me.handlers)) {
                return;
            }
            $.each(me.handlers, function(handlerName, func) { // 回调注册事件
                if (eName === handlerName) {
                    result = func.call(null, e, data);
                }
            });
            return result;
        },
        /**         * @private         * @description 注册事件         */
        _registInitEvent: function() {
            var me = this,
                listeners, flag;
            listeners = me.options["listeners"];
            if (!$.isEmptyObject(listeners)) {
                for (var key in listeners) {
                    me.addListener(("" + key), listeners[key]);
                }
            }
            me.sCombobox.addListener(eventChange, function(event, data) {
                if (me.optionsList) {
                    me.optionsList.setData([]);
                }
                if (me.selectedList) {
                    me.selectedList.setData([]);
                }
                me._doComboboxChange(data, true);
                me._registCheckChangeEvent();
                flag = me._triggerHandler(data, eventSourceComboboxChange, me);
                if (true == flag || "true" == flag) {
                    if (me.dCombobox) {
                        me.dCombobox.setData(me.dComDatas);
                    }
                }
            });
            me.dCombobox.addListener(eventChange, function(event, data) {
                if (me.optionsList) {
                    me.optionsList.setData([]);
                }
                if (me.selectedList) {
                    me.selectedList.setData([]);
                }
                me._doComboboxChange(data, false);
                me._registCheckChangeEvent();
            });
            me._registCheckChangeEvent();
        },
        /**         * @private         * @description 设置目的下拉框数据         * @param {Array} datas         */
        setDestinaComboData: function(datas) {
            var me = this;
            if (me.optionsList) {
                me.optionsList.setData([]);
            }
            if (me.selectedList) {
                me.selectedList.setData([]);
            }
            if (!me.dCombobox) {
                return;
            }
            if (!datas) {
                datas = [];
            }
            me.dComDatas = [];
            me.options.data["dData"] = datas;
            for (var i = 0; i < me.options.data["dData"].length; i++) {
                me.dComDatas.push({
                    value: me.options.data["dData"][i]["value"],
                    text: me.options.data["dData"][i]["text"],
                    data: me.options.data["dData"][i]["data"]
                });
            }
        },
        /**         * @private         * @description 获得value的分隔符         * @returns {String} valueSplit         */
        getValueSplit: function() {
            return this.options.valueSplit;
        },
        /**         * @private         * @description 获得text的分隔符         * @returns {String} valueSplit         */
        getTextSplit: function() {
            return this.options.textSplit;
        },
        /**         * @private         * @description 将树型数据转成list型数据         * @param {Array} datas 待转化数据         * @param {Array} result 待返回的数据         */
        _parseListDatas: function(datas, result) {
            var me = this;
            for (var i = 0; i < datas.length; i++) {
                if (datas[i]["children"] && datas[i]["children"].length > 0) {
                    me._parseListDatas(datas[i]["children"], result);
                } else {
                    result.push(datas[i]);
                }
            }
        },
        /**         * @private         * @description 获得list型数据         * @param {Array} datas 待转化数据         * @param {Object} cmp 列表组件         */
        _getListDatas: function(datas, cmp) {
            var me = this,
                result = [];
            if (!datas || !cmp) {
                return result;
            }
            if ("widgetListList" == cmp.widgetName) {
                return datas;
            } else if ("widgetTreeTree_v1" == cmp.widgetName) {
                me._parseListDatas(datas, result);
            } else {
                me._parseListDatas(datas, result);
            }
            return result;
        },
        /**         * @private         * @description 注册事件         */
        _registCheckChangeEvent: function() {
            var me = this,
                sValue, dValue;
            if (me.sTree) {
                me.sTree.addListener(eventCheckChange, function(node, listCmp) {
                    sValue = listCmp.getValue();
                    dValue = me.dTree ? me.dTree.getValue() : [];
                    sValue = me._getListDatas(sValue, listCmp);
                    dValue = me._getListDatas(dValue, me.dTree);
                    me._setOptionsDatas(sValue, dValue);
                });
            }
            if (me.dTree) {
                me.dTree.addListener(eventCheckChange, function(node, listCmp) {
                    dValue = listCmp.getValue();
                    sValue = me.sTree ? me.sTree.getValue() : [];
                    dValue = me._getListDatas(dValue, listCmp);
                    sValue = me._getListDatas(sValue, me.sTree);
                    me._setOptionsDatas(sValue, dValue);
                });
            }
        },
        /**         * @private         * @description 注册事件         * @param {Array} sDatas 源数据         * @param {Array} dDatas 目的数据         */
        _setOptionsDatas: function(sDatas, dDatas) {
            var me = this,
                datas = [],
                value, vValue = {}, valueStr, textStr, node;
            if (!me.optionsList) {
                return;
            }
            value = me.optionsList.getValue();
            if (value && value.length > 0) {
                for (var i = 0; i < value.length; i++) {
                    vValue[value[i]["value"]] = "";
                }
                value = [];
                for (var i = 0; i < sDatas.length; i++) {
                    for (var j = 0; j < dDatas.length; j++) {
                        valueStr = sDatas[i]["value"] + me.options.valueSplit + dDatas[j]["value"];
                        textStr = sDatas[i]["text"] + me.options.textSplit + dDatas[j]["text"];
                        node = {
                            value: valueStr,
                            text: textStr,
                            data: {
                                sNode: sDatas[i],
                                dNode: dDatas[j]
                            }
                        };
                        datas.push(node);
                        if ("" === vValue[valueStr]) {
                            value.push(node);
                        }
                    }
                }
                me.optionsList.setData(datas);
                me.optionsList.setValue(value);
            } else {
                for (var i = 0; i < sDatas.length; i++) {
                    for (var j = 0; j < dDatas.length; j++) {
                        valueStr = sDatas[i]["value"] + me.options.valueSplit + dDatas[j]["value"];
                        textStr = sDatas[i]["text"] + me.options.textSplit + dDatas[j]["text"];
                        node = {
                            value: valueStr,
                            text: textStr,
                            data: {
                                sNode: sDatas[i],
                                dNode: dDatas[j]
                            }
                        };
                        datas.push(node);
                    }
                }
                me.optionsList.setData(datas);
            }
        },
        /**         * @private         * @description 下拉列表change时load数据处理         * @param {Object} value 下拉列表选中的值         * @param {Boolean} isSource 是否是源下拉列表         */
        _doComboboxChange: function(value, isSource) {
            var me = this,
                loader, dataKey, treeCmp, type, renderID, listData, listeners, treeCfg, isAll;
            if (isSource) {
                dataKey = "sData";
                renderID = me.__sTreeRenderID;
                treeCmp = me.sTree;
            } else {
                dataKey = "dData";
                renderID = me.__dTreeRenderID;
                treeCmp = me.dTree;
            }
            type = "tree";
            loader = null;
            listData = [];
            if (me.options.data[dataKey]) {
                for (var i = 0; i < me.options.data[dataKey].length; i++) {
                    if (value["value"] == me.options.data[dataKey][i]["value"]) {
                        isAll = me.options.data[dataKey][i]["isAll"];
                        if (me.options.data[dataKey][i]["datasource"]) {
                            type = me.options.data[dataKey][i]["datasource"]["type"]; //默认用tree组件渲染
                            if ("list" == type) {
                                if (me.options.data[dataKey][i]["datasource"] && me.options.data[dataKey][i]["datasource"]["data"]) {
                                    listData = me.options.data[dataKey][i]["datasource"]["data"];
                                }
                            } else {
                                type = "tree";
                                loader = $.objClone(me.options.data[dataKey][i]["datasource"]["loader"]);
                                if (!$.isEmptyObject(loader)) {
                                    listeners = loader["listeners"];
                                    delete loader["listeners"];
                                    if (!$.isEmptyObject(listeners)) {
                                        for (var key in listeners) {
                                            if (!(key == eventBeforeLoad || key == eventLoad)) {
                                                delete listeners[key];
                                            }
                                        }
                                    }
                                } else {
                                    listData = me.options.data[dataKey][i]["datasource"]["data"] || [];
                                }
                            }
                        }
                    }
                }
            }
            if (treeCmp) {
                treeCmp.destroy();
            }
            if ("tree" == type) {
                treeCfg = {
                    width: me.treeWidth,
                    height: me.treeHeight,
                    search: true,
                    multi: true,
                    tip: me.options.tip,
                    icon: me.options.icon,
                    useArrows: me.options.useArrows,
                    renderTo: renderID
                };
                if (!$.isEmptyObject(listeners)) {
                    treeCfg["listeners"] = listeners;
                }
                treeCmp = new Sweet.tree.Tree_v1(treeCfg);
            } else {
                treeCfg = {
                    width: me.treeWidth,
                    height: me.treeHeight,
                    multi: true,
                    search: true,
                    all: isAll,
                    tip: me.options.tip,
                    isBorder: true,
                    renderTo: renderID
                };
                treeCmp = new Sweet.list.OptimizeList(treeCfg);
            }
            if ("tree" == type && loader) {
                treeCmp.setLoader(loader);
                treeCmp.load();
            } else {
                treeCmp.setData(listData);
            }
            if (isSource) {
                me.sTree = treeCmp;
            } else {
                me.dTree = treeCmp;
            }
        },
        /**         * @private         * @description 将两个数组合并并去重         * @param {Array} arr1 合并数据         * @param {Array} arr2 合并数据         */
        _deleteArraysSimilar: function(arr1, arr2) {
            var result = [],
                transObj, totalData;
            totalData = arr1.concat(arr2);
            transObj = {};
            for (var i = 0; i < totalData.length; i++) {
                transObj[totalData[i].value] = totalData[i];
            }
            for (var key in transObj) {
                result.push(transObj[key]);
            }
            return result;
        },
        /**         * @private         * @description 从数组中去除部分数据         * @param {Array} totalArr 总数据         * @param {Array} minusArr 去除数据         */
        _minusArrays: function(totalArr, minusArr) {
            var transObj = {}, result = [];
            for (var i = 0; i < totalArr.length; i++) {
                transObj[totalArr[i].value] = totalArr[i];
            }
            for (var j = 0; j < minusArr.length; j++) {
                delete transObj[minusArr[j].value];
            }
            for (var key in transObj) {
                result.push(transObj[key]);
            }
            return result;
        }
    });
    /**     * 双向列表(tree数据形式)组件     * @name Sweet.cmp.OfficeDirection_v1     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.widget.form.js     * jquery.sweet.widget.form.input.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree_v1.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.cmp.optimizeList.js     * jquery.sweet.widget.form.combobox_v1.js     * jquery.sweet.widget.container.Vpanel.js     * </pre>     * @example      * <pre>     * var officeDirection_v1 = new Sweet.cmp.OfficeDirection_v1({     *     width: 600,     *     height: 600,     *     data: {     *          sData: [     *              {     *                  value: "MSC",     *                  text: "MSC",     *                  isAll: true,     *                  datasource: {     *                      type: "list",     *                      data: [{value: "msc1",text: "msc1"}, ...]     *                 }     *              },     *              {     *                  value: "CELL",     *                  text: "CELL",     *                  datasource: {     *                       type: "tree",     *                       loader: {     *                           url: "../data/data_officeDirection_v1.jsp",     *                           baseParams: {},     *                           loadMask: true,     *                           autoLoad: false,     *                           listeners: {     *                               beforeload: doBeforeLoad,     *                               load: doLoad     *                           }     *                       }     *                  }     *              },     *              ...     *          ],     *          dData: [...]     *     }     * });     * </pre>     */
    Sweet.cmp.OfficeDirection_v1 = $.sweet.widgetCmpOfficeDirection_v1;
}(jQuery));;
/**
 * @fileOverview
 * <pre>
 * app管理组件
 * 2014/10/9
 * <a href="www.huawei.com">http://www.huawei.com</a>
 * Huawei Technologies Co., Ltd. Copyright 1988-2012,  All rights reserved 
 * </pre>
 * @version 1.0
 */
(function($, undefined) {
    var itemCls = "sweet-cmp-app-item",
        itemOverCls = "sweet-cmp-app-item-over",
        containerCls = "sweet-cmp-app-container",
        contentCls = "sweet-cmp-app-content",
        imgElCls = "sweet-cmp-app-img-container",
        imgCls = "sweet-cmp-app-img",
        textCls = "sweet-cmp-app-text",
        opertorCls = "sweet-cmp-app-opertor",
        actionCls = "sweet-cmp-app-action",
        stateCls = "sweet-cmp-app-state-text";
    $.widget("sweet.cmpAppManager", $.sweet.widgetCmp, /**lends Sweet.cmp.AppManager.prototype*/ {
        version: "1.0",
        sweetWidgetName: "[widget-appManager]",
        eventNames: /** @lends Sweet.cmp.AppManager.prototype*/
        {
            /**
             * @event
             * @description 操作面板上的操作事件
             */
            "opertorClick": "操作面板上的操作事件"
        },
        options: /** @lends Sweet.cmp.AppManager.prototype*/
        {
            /**
             * @description app的信息集合，一般结构[{value:"1", text:"app nqme", icon:"图片路径"}]
             * @type Array
             * @default []
             */
            data: [],
            /**
             * @description 面板中的单个app的宽度，不建议修改，现在还不支持自适应
             * @type int
             * @default 200
             */
            lpWidth: 200,
            /**
             * @description 面板中的单个app的高度，不建议修改，现在还不支持自适应
             * @type number
             * @default 250
             */
            lpHeight: 250,
            /**
             * @description 默认的图片路径
             * @type string
             * @default ""
             */
            defaultIcon: "",
            /**
             * @description 图片加载失败显示的图片内容的路径,如果defaultIcon为"",此路径不起作用
             * @type string
             * @default ""
             */
            errorIcon: "",
            /**
             * @description 单个app操作面板中的动作定义，建议最多4个
             * @type Array
             * @default [{value:"detail", text:"Details"},{value:"edit", text:"Edit"},{value:"delete", text:"Delete"}]
             */
            actions: [{
                value: "detail",
                text: "Details"
            }, {
                value: "edit",
                text: "Edit"
            }, {
                value: "delete",
                text: "Delete"
            }]
        },
        /**
         * @description 用户点击操作面板上的删除按钮时，此方法可以删除指定id的item
         * @param {string} id 删除的item中的div的id
         */
        deleteItem: function(id) {
            if ($.isNull(id)) {
                return;
            }
            var me = this;
            var item = $("#" + id);
            if (item && item.length > 0) {
                for (var i = 0; i < item.length; i++) {
                    var temp = $(item[i]);
                    //删除options中的数据
                    var d = temp.data("item");
                    if (d && $.isNotNull(d.value)) {
                        for (var j = 0; j < me.options.data.length; j++) {
                            if (d.value === me.options.data[j].value) {
                                me.options.data.splice(j, 1);
                                break;
                            }
                        }
                    }

                    //删除dom及事件
                    temp.unbind();
                    temp.find("." + actionCls).unbind();
                    temp.remove();
                }
                me._doLayout();
            }
        },
        /**
         * @description 取得面板中的数据
         */
        getData: function() {
            return $.objClone(this.options.data);
        },
        /**
         * @description 设置面板中的数据
         * @param {Array} data app的信息集合
         */
        setData: function(data) {
            if ($.isNull(data)) {
                return;
            }
            var me = this,
                len = 0;
            //更新数据前，先保存数据并将原有的面板恢复
            me.options.data = $.objClone(data);

            if (me.contentEl) {
                me.contentEl.find("." + itemCls).unbind();
                me.contentEl.find("." + actionCls).unbind();
                me.contentEl.empty();
            }
            len = me.options.data ? me.options.data.length : 0;
            if (len > 0) {
                me._createLookPanel();
            }
        },
        /**
         * @private
         * @description 组件渲染
         * @param {String} id 宿主ID
         */
        _render: function(id) {
            if (!id || this.rendered) {
                return;
            }
            if (!this.renderEl) {
                // 创建宿主元素               
                this._createRenderEl(id);
            }
            this.cmpEl.appendTo(this.renderEl);
            this.rendered = true;
            return true;
        },
        _onMouseOver: function(e) {
            var obj = e.data.obj;
            var operEl = obj.data("operEl");
            var stateEl = obj.data("stateEl");
            obj.removeClass(itemCls).addClass(itemOverCls);
            if (operEl && stateEl) {
                stateEl.hide();
                operEl.show();
            }
        },
        _onMouseOut: function(e) {
            var obj = e.data.obj;
            var operEl = obj.data("operEl");
            var stateEl = obj.data("stateEl");
            obj.removeClass(itemOverCls).addClass(itemCls);
            if (stateEl && operEl) {
                stateEl.show();
                operEl.hide();
            }
        },
        _onActionClick: function(e) {
            var me = e.data.me;
            var obj = e.data.obj;
            var action = obj.data("action");
            var id = obj.data("id");
            var item = obj.data("item");

            me._triggerHandler(e, "opertorClick", {
                action: action,
                id: id,
                item: item
            });
        },
        _createLookPanel: function() {
            var me = this,
                i = 0,
                j = 0,
                opt = me.options,
                data = opt.data,
                lpw = opt.lpWidth,
                lph = opt.lpHeight,
                len = data ? data.length : 0;
            for (i = 0; i < len; i++) {
                var temp = $("<div>").addClass(itemCls).attr("id", opt.id + "-item-" + i)
                    .height(lph).width(lpw).appendTo(me.contentEl);
                temp.bind("mouseover", {
                    "me": me,
                    "obj": temp
                }, me._onMouseOver)
                    .bind("mouseout", {
                    "me": me,
                    "obj": temp
                }, me._onMouseOut);
                var item = data[i];
                var icon = item.icon ? item.icon : opt.defaultIcon;
                //记录上面的数据
                temp.data("item", item);
                //图片
                var imgEl = $("<div>").addClass(imgElCls).appendTo(temp);
                $("<img>").attr({
                    "src": icon
                }).bind("error", function(e) {
                    $(this).attr("src", opt.errorIcon);
                }).addClass(imgCls).appendTo(imgEl);
                //名称
                $("<div>").addClass(textCls).attr("title", item.text).width(lpw).text(item.text).appendTo(temp);
                //状态框
                var stateEl = $("<div>").addClass(stateCls).text(item.state).appendTo(temp);
                temp.data("stateEl", stateEl);

                //操作面板上的具体动作按钮
                if (opt.actions && opt.actions.length > 0) {
                    //操作面板
                    var operEl = $("<div>").addClass(opertorCls).appendTo(temp).hide();
                    temp.data("operEl", operEl);
                    //动作
                    for (j = 0; j < opt.actions.length; j++) {
                        var a = $("<div>").addClass(actionCls)
                            .text(opt.actions[j].text).appendTo(operEl);
                        a.data("action", opt.actions[j]);
                        a.data("id", opt.id + "-item-" + i);
                        a.data("item", item);
                        a.bind("click", {
                            "me": me,
                            "obj": a
                        }, me._onActionClick);
                    }
                }
            }
        },
        _doLayout: function() {
            var me = this,
                opt = me.options,
                vmargin = 30,
                hmargin = 20,
                len = opt.data.length,
                lpw = opt.lpWidth,
                lph = opt.lpHeight,
                w = me.cmpEl.width(),
                h = me.cmpEl.height();

            var rows = Math.floor(h / (lph + vmargin));
            //rows===1代表只有一行，全部横向排列
            if (rows === 1) {
                var columns = Math.ceil(len / rows);
                //2代表的是border的宽度
                me.contentEl.width(columns * (lpw + hmargin + 2)).height("100%");
            } else {
                //垂直排列
                me.cmpEl.css("overflow", "hidden");
                me.contentEl.css("overflow", "auto");
            }
        },
        /**
         * @private
         * @description 实现widget接口
         */
        _createCmpWidget: function() {
            var me = this,
                len = me.options.data ? me.options.data.length : 0;

            me.cmpEl.addClass(containerCls);
            me.contentEl = $("<div>").attr("id", me.options.id + "-content")
                .addClass(contentCls)
                .appendTo(me.cmpEl);
            if (len > 0) {
                me._createLookPanel();
            }
        },
        /**
         * @private
         * @description 获取组件宽度
         */
        _getWidth: function() {
            var me = this;
            return me.cmpEl.externalWidth();
        },
        /**
         * @private
         * @description 获取组件高度
         */
        _getHeight: function() {
            var me = this;
            return me.cmpEl.externalHeight();
        },
        /**
         * @private
         * @description 设置组件宽度
         * @param {Number/String} width 组件宽度
         */
        _setWidth: function(width) {
            var me = this;
            me.cmpEl.externalWidth(width);
        },
        /**
         * @private
         * @description 设置组件高度
         * @param {Number/String} height 组件高度
         */
        _setHeight: function(height) {
            var me = this;
            me.cmpEl.externalHeight(height);
        }
    });

    /**
     * APP管理组件
     * @name Sweet.cmp.AppManager
     * @class 
     * @extends Sweet.cmp
     * @requires
     * <pre>
     *  jquery.ui.core.js
     *  jquery.ui.widget.js
     *  jquery.sweet.widget.js
     *  jquery.sweet.cmp.js
     * </pre>
     * @example 
     * <pre>
     * appmanager = new Sweet.cmp.AppManager({
     *     
     * });
     * </pre>
     */
    Sweet.cmp.AppManager = $.sweet.cmpAppManager;
}(jQuery));
