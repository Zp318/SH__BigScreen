/** * @fileOverview  * <pre> * 局向组件 * 2014.4.28 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2014,  All rights reserved * </pre> * @version 1.0 */(function($, undefined) {    var i18n = Sweet.cmp.i18n.officeDirection,        labelH = 20,        combHeight = 25,        emtyWith = 52,        //按钮组宽度        btnWidth = 50;    var dimsBtns = [        {            value : "toRight",            text : ">"        },{            value : "toLeft",            text : "<"        },{            value : "allToRight",            text : ">>"        },{            value : "allToLeft",            text : "<<"        }    ];    $.widget("sweet.widgetCmpOfficeDirection", $.sweet.widgetCmp, /** @lends Sweet.cmp.OfficeDirection*/{        version: "1.0",        eventNames: {},        sweetWidgetName: "[widget-cmp-officeDirection]",        type: 'secondaryStat',        options: /** @lends Sweet.cmp.OfficeDirection*/{            /**             * @description 表格宽度             * @type {Number}             * @default 500px             */            width: 500,            /**             * @description 表格高度             * @type {Number}             * @default 400px             */            height: 400,            /**             * 局向源下拉框数据信息             * @type Array             * @default []             */            source : [],            /**             * 局向目标下拉框数据信息             * @type Array             * @default []             */            destination : [],            /**             * 局向列表数据源             * @type Object             * @default {}             */            data:{},            /**             * 局向列表数据源是否出现搜索框             * @type Boolean             * @default true             */            search: true,            /**             * 局向列表数据源是否出现全选             * @type Boolean             * @default false             */            all :false,            /**             * 列表是否出现提示             * @type Boolean             * @default true             */            tip: true,            /**             * 选择项和已选项列表每条数据value的分割符             * @type String             * @default "#"             */            splitMark:"#"        },        /**         * @description 初始化设置,取消上次已选数据         */        clearData: function() {            var me = this,emptyArr=[];            me.oldSelectedOptVal = [];            if(me.optionsList){                me.optionsList.setData(emptyArr);            }            if(me.selectedList){                me.selectedList.setData(emptyArr);            }            if(me.sourceList){                var tempSceData = me.sourceList.getData();                if(tempSceData && tempSceData.length > 0){                    me.sourceList.setValue(emptyArr);                }            }            if(me.destinationList){                var tempDestData = me.destinationList.getData();                if(tempDestData && tempDestData.length > 0){                    me.destinationList.setValue(emptyArr);                }            }        },        /**         * @public         * @description 设置列表数据源         */        setData:function(data){            var me = this, key="";            if($.isNotNull(data)){                //重新设置数据后，清空之前选择项和已选列表的数据                me.clearData();                me.options.data = data;                var sourceData = me.sourceCombo.getValue();                var sourceVal = sourceData.value;                var destVal = me.destinaCombo.getValue().value;                if($.isNotNull(sourceVal) && me.sourceList){                    for(key in data){                        if(key === sourceVal){                            me.sourceList.setData(data[key]);                            break;                        }                    }                }                if($.isNull(destVal) && $.isArray(sourceData.data)){                    destVal = sourceData.data[0].value;                }                if($.isNotNull(destVal) && me.destinationList){                    for(key in data){                        if(key === destVal){                            me.destinationList.setData(data[key]);                            break;                        }                    }                }            }        },        /**         * @description 取得局向的源数据(不是选择的数据)         * @returns {Array} 取得局向的源数据         */        getOData : function(){            var me = this,                    data = [];                        if(me.sourceList){                data = me.sourceList.getData();            }                        return data;        },        /**         * @description 取得局向的目的数据(不是选择的数据)         * @returns {Array} 取得局向的目的数据         */        getDData : function(){            var me = this,                    data = [];                        if(me.destinationList){                data = me.destinationList.getData();            }                        return data;        },        /**         * @public         * @description 获取已选列表的数据         */        getValue:function(){            var me = this;            var data = me.selectedList.getData();            if($.isNull(data)){                data = [];            }            return data;        },        /**         * @public         * @description 获取已选的源和目标下拉框值         */        getAllSelValue:function(){            var me = this, data = {}, sourCombVal, destCombVal, sourceListVal, destListVal, selectedListVal;            sourCombVal = me.sourceCombo.getValue();            destCombVal = me.destinaCombo.getValue();            sourceListVal = me.sourceList.getValue();            destListVal = me.destinationList.getValue();            selectedListVal = me.selectedList.getData();            data = {"source":sourCombVal, "destination":destCombVal,                    "sourceList":sourceListVal,"destinationList":destListVal,                    "selectedList":selectedListVal};            return data;        },        /**         * @public         * @description 设置下拉框和列表选中的数据         * @param {Array}v: 要反填的数据         */        setValue:function(v){            var me = this;            if($.isNotNull(v)){                var sourcArr = [], destArr = [],sourVal, destVal, data;                sourVal = v.source ? v.source :"";                destVal = v.destination ? v.destination: "";                data = v.selectedList ? v.selectedList : [];                sourcArr = v.sourceList ? v.sourceList :[];                destArr = v.destinationList ? v.destinationList :[];                //清空之前已选中的数据                me.clearData();                //设置源下拉框选中值                $.isNotNull(sourVal) ? me.sourceCombo.setValue(sourVal) : "";                //设置目标下拉框选中值                $.isNotNull(destVal) ? me.destinaCombo.setValue(destVal) : "";                //设置已选项列表数据                me.selectedList.setData(data);                //设置源和目标列表选中值                me.sourceList.setValue(sourcArr);                me.destinationList.setValue(destArr);                //设置选项列表数据                me._setOptionsListData();            }        },        /**         * @private         * @description 重新绘制布局         */        _doLayout: function(){            var me = this;            me.vPanel.doLayout();            me.sourceList.doLayout(true);            me.destinationList.doLayout(true);            me.optionsList.doLayout(true);            me.selectedList.doLayout(true);        },        /**         * @private         * @description 销毁组件         */        _destroyWidget : function(){            var me = this;            if(me.vPanel){                me.vPanel.destroy();            }        },        /**         * @private         * @description 创建组件         */        _createCmpWidget: function() {            var me = this;            me.selListData = [];            me.optListData = [];            //创建上部分列表            me._createUpList();            //创建下拉框            me._createCombobox();            //创建中间的label显示            me._createMidLabel();            //创建下部分列表            me._createDownList();            /* vpanel中上半部分是可选的列表数据，下半部分是组装源和目标列表数据后的列表数据*/            var allH = me.options.height + 40;            var allW = me.options.width + 10;            me.vPanel = new Sweet.panel.VPanel({                id : me.options.id,                height : allH,                width : allW,                items : [me.comboHpanel, me.upListHpanel, me.LabelPanel, me.downPanel]            });            if(me.options.renderTo){                me.vPanel.render(me.options.renderTo);            }        },        /**         * @description 创建源/目标下拉框         * @private         */        _createCombobox:function(){            var me = this, emptyHpanel, sourceData = me.options.source,                combWidth = (me.options.width - emtyWith)/2, labelW = 70, labelW1 = labelW-10;            //源下拉框            me.sourceCombo = new Sweet.form.ComboBox_v1({                label : true,                labelWidth: labelW1,                width : combWidth,                labelText : i18n.sourceCombLabel,                data: sourceData,                blank: false,                tip : true            });            me.sourceCombo.addListener("change", function(e, v){                if($.isNotNull(v)){                    me._sourceCombChange(v);                }            });            emptyHpanel = new Sweet.panel.HPanel({                width : emtyWith,                height : "100%",                items : []            });            //目标下拉框            me.destinaCombo = new Sweet.form.ComboBox_v1({                label : true,                labelWidth: labelW,                width : combWidth,                blank: false,                labelText : i18n.destinationCombLabel,                tip : true            });            me.destinaCombo.addListener("change", function(e, v){                if($.isNotNull(v)){                    me._destinationCombChange(v);                }            });            me.comboHpanel = new Sweet.panel.HPanel({                width : "100%",                height : combHeight,                itemExtend : false,                items : [me.sourceCombo, emptyHpanel, me.destinaCombo]            });            //初始默认选中第一条            me.sourceCombo.setValue(sourceData[0]);        },        /**         * @description 源下拉框 change 事件         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:"",data:[{value:"", text:""},{value:"", text:""}]}         * @private         */        _sourceCombChange:function(value){            var me = this, v = value, destiData=[], temp = [];            me.optionsList ? me.optionsList.setData(temp):"";            me.selectedList ? me.selectedList.setData(temp):"";            if(v.data && v.data.length > 0){                destiData = v.data;            }            if(me.destinaCombo){                me.destinaCombo.setData(destiData);            }            if($.isNotNull(me.options.data) && $.isNotNull(v)){                var temp = me.options.data, key;                if(me.sourceList){                    for(key in temp){                        if(key === v.value){                            me.sourceList.setData(temp[key]);                            break;                        }                    }                }            }        },        /**         * @description 目标下拉框 change 事件         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         * @private         */        _destinationCombChange:function(value){            var me = this, v = value, temp=[];            me.optionsList ? me.optionsList.setData(temp):"";            me.selectedList ? me.selectedList.setData(temp):"";            if($.isNotNull(me.options.data) && $.isNotNull(v)){                var temp = me.options.data, key;                if(me.destinationList){                    for(key in temp){                        if(key === v.value){                            me.destinationList.setData(temp[key]);                            break;                        }                    }                }            }        },        /**         * @description 创建上部分列表         * @private         */        _createUpList:function(){            var me = this, opt = me.options, emptyHpanel,                h = (opt.height - combHeight)/2,                listW = (opt.width - emtyWith)/2;            me.sourceList = new Sweet.list.OptimizeList({                width : listW,                height : h,                multi : true,                search: opt.search,                all: opt.all,                tip : opt.tip,                isBorder : true            });            me.sourceList.addListener("checkboxClick", function(e, v){                if($.isNotNull(v)){                    me._setOptionsListData(v);                }            });            me.sourceList.addListener("checkboxAllClick", function(e, v){                if($.isNotNull(v)){                    me._setOptionsListData(v);                }            });            emptyHpanel = new Sweet.panel.HPanel({                width : emtyWith,                height : "100%",                items : []            });            me.destinationList = new Sweet.list.OptimizeList({                width : listW,                height : h,                multi : true,                search: opt.search,                all: opt.all,                tip : opt.tip,                isBorder : true            });            me.destinationList.addListener("checkboxClick", function(e, v){                if($.isNotNull(v)){                    me._setOptionsListData(v);                }            });            me.destinationList.addListener("checkboxAllClick", function(e, v){                if($.isNotNull(v)){                    me._setOptionsListData(v);                }            });            me.upListHpanel = new Sweet.panel.HPanel({                width : "100%",                height : h,                itemExtend : false,                items : [me.sourceList, emptyHpanel, me.destinationList]            });        },        /**         * @description 创建中间部分label         * @private         */        _createMidLabel:function(){            var me = this,                opt = me.options,                labelW = (opt.width - emtyWith)/2;            var leftLabel = new Sweet.form.LabelField({                width : labelW,                label : false,                height: labelH,                type: 2,                value : {"text":  i18n.optionsMsg}            });            var emptyHpanel = new Sweet.panel.HPanel({                width : emtyWith,                height : "100%",                items : []            });            var rightLabel = new Sweet.form.LabelField({                width : labelW,                label : false,                height: labelH,                type: 2,                value : {"text":  i18n.selectedMsg}            });            me.LabelPanel = new Sweet.panel.HPanel({                width : "100%",                height :labelH,                itemExtend : false,                items : [leftLabel, emptyHpanel, rightLabel]            });        },        /**         * @description 创建下部分列表         * @private         */        _createDownList:function(){            var me = this,                opt = me.options,                listW = (opt.width - emtyWith)/2,                panelW = listW,                panelH = (opt.height - combHeight)/2,                listH = panelH-10,                btnW = btnWidth,                emptyW = emtyWith,                btnEmptyH = 2,                btnH = 25,                marginTop = (listH - btnH*6)/2;            me.optionsList = new Sweet.list.OptimizeList({                width : listW,                height :listH,                multi : true,                type: 2,                tip : opt.tip,                isBorder : true            });            me.optionsList.addListener("dblclick", function(e, v){                if($.isNotNull(v)){                    me._optionsListDbClick(e, v);                }            });            /* > 按钮*/            me.toRightBtn = new Sweet.form.Button({                value : dimsBtns[0],                width : btnW            });            me.toRightBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });            /* < 按钮*/            me.toLeftBtn = new Sweet.form.Button({                value : dimsBtns[1],                width : btnW            });            me.toLeftBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });            /* >> */            me.toAllRightBtn = new Sweet.form.Button({                value : dimsBtns[2],                width : btnW            });            me.toAllRightBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });            /* << 按钮*/            me.toAllLefttBtn = new Sweet.form.Button({                value : dimsBtns[3],                width : btnW            });            me.toAllLefttBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });            var emptyHpanel0, emptyHpanel1,emptyHpanel2,emptyHpanel3;            emptyHpanel0 = new Sweet.panel.HPanel({                width : "100%",                height : marginTop,                items : []            });            emptyHpanel1 = new Sweet.panel.HPanel({                width : "100%",                height : btnEmptyH,                items : []            });            emptyHpanel2 = new Sweet.panel.HPanel({                width : "100%",                height : btnEmptyH,                items : []            });            emptyHpanel3 = new Sweet.panel.HPanel({                width :"100%",                height : btnEmptyH,                items : []            });            var allbtns = [emptyHpanel0, me.toRightBtn,emptyHpanel1, me.toLeftBtn,emptyHpanel2, me.toAllRightBtn,emptyHpanel3, me.toAllLefttBtn];            me.toWherePanel = new Sweet.panel.VPanel({                height : "100%",                width : emptyW,                items : allbtns            });            me.selectedList = new Sweet.list.OptimizeList({                width : listW,                height :listH,                isBorder : true,                multi : true,                tip : opt.tip,                data : []            });            me.selectedList.addListener("dblclick", function(e, v){                if($.isNotNull(v)){                    me._selectedListDbClick(e, v);                }            });            me.downPanel = new Sweet.panel.HPanel({                width : "100%",                height :panelH,                itemExtend : false,                items : [me.optionsList, me.toWherePanel, me.selectedList]            });        },        /**         * @description 根据源和目标列表的选中的值组合后设置选项列表数据         * @private         * @param {Object} value:当前复选框的值，形如{value:"", text:"", checked:false}         */        _setOptionsListData:function(value){            var me = this, tempSourceData=[], tempDestData=[],tempOpt={value:"",text:""},                tempData=[], sourLen=0, destLen=0, tempSour, tempDest, tempKey="", tempStr="";            me.oldSelectedOptVal = me.optionsList.getValue();            me.optionsList.setData([]);            tempSourceData = me.sourceList.getValue();            tempDestData = me.destinationList.getValue();            sourLen = tempSourceData.length;            destLen = tempDestData.length;            for(var i = 0; i < sourLen; i++){                tempSour = tempSourceData[i];                for(var j = 0; j < destLen; j++){                    tempDest = tempDestData[j];                    if(tempSour.value !== tempDest.value){                        tempKey = tempSour.value + me.options.splitMark + tempDest.value;                        tempStr = tempSour.text+ "-" + tempDest.text;                        tempOpt = {value:tempKey,text:tempStr};                        tempData.push(tempOpt);                    }                }            }            me.optionsList.setData(tempData);            if(me.oldSelectedOptVal && me.oldSelectedOptVal.length > 0){                me.optionsList.setValue(me.oldSelectedOptVal);            }            //更新已选择列表的数据            if($.isNotNull(value)){                me._updateSelectedListData(value);            }        },        /**         * @description 更新已选择列表的数据         * @private         * @param {Array} value: 源或者目标取消选中复选框的数据         */        _updateSelectedListData:function(value){            var me = this, oldSelListData = me.selectedList.getData(), tempSelArr=[], tempStrArr;            if(oldSelListData && oldSelListData.length > 0 && value && !value.checked){                var unCheckKey = String(value.value);                var unSelecVal = {"value":unCheckKey, "text":value.text};                for(var k = 0; k < oldSelListData.length; k++){                    tempStrArr = oldSelListData[k].value.split(me.options.splitMark);                    if(tempStrArr[0] === unCheckKey || tempStrArr[1] === unCheckKey ){                        tempSelArr.push(oldSelListData[k]);                    }                }                var rdata = [], find = false;                for(var t = 0; t < oldSelListData.length; t++){                    find = false;                    for(var v = 0; v < tempSelArr.length; v++){                        if(oldSelListData[t].value === tempSelArr[v].value){                            find = true;                            break;                        }                    }                    if(!find){                        rdata.push(JSON.parse(JSON.stringify(oldSelListData[t])));                    }                }                me._dealMoveBtns(rdata);            }        },        /**         * @description 设置已选项列表数据         * @private         * @param {Array} data:已选项列表数据         */        _dealMoveBtns : function(data){            var me = this,                rObj = me.selectedList;            if(rObj){                rObj.setData(data);            }        },        /**         * @description 按钮列的点击事件，按钮列为：>, <, >>, <<         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object} value:当前按钮值，形如{value:"", text:""}         */        _moveButtonClick:function(e, v){            var me = this;            switch(v.value){                //移动到右边                case dimsBtns[0].value :                    var rValue = me.optionsList.getValue();                    //左侧没有选择数据时，不进行处理                    if($.isEmptyObject(rValue) || $.isNull(rValue) || ($.isArray(rValue) && rValue.length === 0)){                        return;                    }                    me._dealMoveBtns(rValue);                    break;                //将右边选中的值移动到左边                case dimsBtns[1].value :                    var rdata = [];                    var tempData = me.selectedList.getData();                    var selectedData = me.selectedList.getValue();                    if(!tempData || !selectedData){                        return;                    }                    //存放右边除去选中的值剩下的值                    var find = false;                    for(var i = 0; i < tempData.length; i++){                        find = false;                        for(var j = 0; j < selectedData.length; j++){                            if(tempData[i].value === selectedData[j].value){                                find = true;                                break;                            }                        }                        if(!find){                            rdata.push(JSON.parse(JSON.stringify(tempData[i])));                        }                    }                    me._dealMoveBtns(rdata);                    break;                //将左边的值全部移动到右边                case dimsBtns[2].value :                    var rdata = [];                    rdata = me.optionsList.getData();                    me._dealMoveBtns(rdata);                    break;                //将右边的值全部移动到左边                case dimsBtns[3].value :                    var rdata = [];                    me._dealMoveBtns(rdata);                    break;            }        },        /**         * @description 选择项列表双击事件         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         */        _optionsListDbClick:function(e, value){            var me = this;            var oldSelData = me.selectedList.getData();            var flag = false;            if(! value){                return;            }            for(var i = 0; i < oldSelData.length; i++){                if(oldSelData[i].value === value.value){                    flag = true;                    break;                }            }            if(! flag){                oldSelData.push(value);            }            me._dealMoveBtns(oldSelData);        },        /**         * @description 已选项列表双击事件         * @private         * @param {Object} e:当前按钮点击事件对象         * @param {Object}value:当前下拉框选中的值，形如{value:"", text:""}         */        _selectedListDbClick:function(e, value){            var me = this;            var rdata = [];            var tempData = me.selectedList.getData();            var selectedData = value;            if(!tempData || !selectedData){                return;            }            //存放右边除去选中的值剩下的值            var find = false;            for(var i = 0; i < tempData.length; i++){                find = false;                if(tempData[i].value === selectedData.value){                    find = true;                    break;                }                if(!find){                    rdata.push(JSON.parse(JSON.stringify(tempData[i])));                }            }            me._dealMoveBtns(rdata);        },        /**         * @description 渲染组件         * @param {String} id 组件ID         */        _render: function(id) {            var me = this;            if (!id || me.rendered) {                return false;            }            if (!me.renderEl) {                // 创建宿主元素                if (!me._createRenderEl(id)) {                    return false;                }            }            me.vPanel.render(id);            me.rendered = true;            return true;        },        /**         * @private         * @description 获取组件宽度         */        _getWidth: function() {            var me = this;            return me.cmpEl.externalWidth();        },        /**         * @private         * @description 获取组件高度         */        _getHeight: function() {            var me = this;            return me.cmpEl.externalHeight();        },        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 组件宽度         */        _setWidth: function(width) {            var me = this;            me.cmpEl.externalWidth(width);        },        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 组件高度         */        _setHeight: function(height) {            var me = this;            me.cmpEl.externalHeight(height);        },        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */        _setWH: function(width, height) {            var me = this;            me._setWidth(width);            me._setHeight(height);        }    });    /**     * 局向组件     * @name Sweet.cmp.OfficeDirection     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.cmp.optimizeListWindow.js     * </pre>     * @example      * <pre>     * var tempdata=[], tempsoftdata=[], tempservicedata=[];     * var sourceCombData = [{value:"msc", text:"MSC", data:[{value:"msc", text:"MSC"},{value:"msc2", text:"SofteSwith"}]},     *                      {value:"msc2", text:"SofteSwith",data:[{value:"msc", text:"MSC"},{value:"msc2", text:"SofteSwith"},{value:"msc3", text:"ServiceNode"}]},     *                      {value:"msc3", text:"ServiceNode",data:[{value:"msc2", text:"SofteSwith"},{value:"msc3", text:"ServiceNode"}]}];     * var listData = {"msc":tempdata, "msc2":tempsoftdata, "msc3":tempservicedata};     * var sweetList = new Sweet.cmp.OfficeDirection({     *     data: listData,     *     source: sourceCombData     * });     * </pre>     */    Sweet.cmp.OfficeDirection = $.sweet.widgetCmpOfficeDirection;}(jQuery));