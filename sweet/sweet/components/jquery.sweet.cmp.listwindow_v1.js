/** * @fileOverview  * <pre> * 双向list列表，只适用于数据结构为平铺的list类型的列表，提供搜索和移动功能 * 2014.1.26 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var actionBtns = [        {            value : "toRight",            text : " > "        },{            value : "toLeft",            text : " < "        },{            value : "allToRight",            text : " >> "        },{            value : "allToLeft",            text : " << "        }    ];        $.widget("sweet.widgetCmpListwindow_v1", $.sweet.widgetCmp, /** @lends Sweet.cmp.ListWindow_v1*/{        version: "1.0",        eventNames: {},        sweetWidgetName: "[widget-cmp-listWindow_v1]",        type: 'listwindow_v1',        options: /** @lends Sweet.cmp.ListWindow_v1*/{            /**             * 用于生成左边的数据             * @type Array             * @default []             */            data : [],            /**             * 用于生成右边的平铺数据             * @type Array             * @default []             */            value : [],            /**             * 左边的文字说明             * @type String             * @default ""             */            fromTitle : "",            /**             * 右边的文字说明             * @type String             * @default ""             */            toTitle : "",            /**             * 中间的button的宽度             * @type number             * @default 80             */            btnWidth : 80,            /**             * @description 用户定义的点击移动数据button前的回调函数，如果返回false，则移动数据的动作无效             * @param {Array} data 点击button进行移动的数据             * @param {String} action 点击的是哪一个button，分别有："toRight","toLeft","allToRight","allToLeft"             * @returns {Boolean} 如果返回false则移动数据的动作无效, 返回其它值正常进行             */            beforeMoveFun : function(data, action){                return true;            }        },        /**         * @description 取得双向列表的右边已经选择的所有数据         * @returns {Array} 返回右边列表的数据         */        getValue : function(){            return this.rightList ? this.rightList.getCurrentData() || [] : [];        },        /**         * @description 为源list(左边的list列表)设置数据,并且清除右边list的数据         * @param {Array} data 数据结构必须是数组         */        setData : function(data){            var me = this;            if($.isNull(data)){                me.options.data = [];                if (me.leftList) {                    me.leftList.setData(null);                }                if (me.rightList) {                    me.rightList.setData(null);                }                return;            }                        if(me.leftList && me.rightList){                //将原来的数据清空                me.options.data.length = 0;                //将设置的数据保存到options.data中                me.options.data = JSON.parse(JSON.stringify(data));                me.leftList.setData(me.options.data);                //清空右边list的内容数据                me.rightList.setData([]);            }        },        /**         * @description 为目的list(右边的list列表)设置数据并且全部选择上         * @param {Array} value 数据结构必须是数组         */        setValue : function(value){            var me = this;            if($.isNull(value)){                me.options.value = [];                if (me.rightList) {                    me.rightList.setData(null);                }                if (me.leftList) {                    me.leftList.setValue(null);                }                return;            }                        if(me.rightList){                //将原来的数据清空                me.options.value.length = 0;                //将设置的数据保存到options.data中                me.options.value = JSON.parse(JSON.stringify(value));                me.rightList.setData(me.options.value);            }            if (me.leftList) {                me.leftList.setValue(me.options.value);            }        },        /**         * @description 销毁listwindow组件及其中的事件和数据等         */        _destroyWidget : function(){            var me = this;            if(me.listWindHPanel){                me.listWindHPanel.destroy();            }            me._super();        },        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */        _render: function(id) {            var me = this;            if (!me._super(id)) {                return false;            }            me.cmpEl.appendTo(me.renderEl);            if(!me.isCreate){                me._createListWindow();            }            me.listWindHPanel.render(me.options.id);            me.rendered = true;            return true;        },        /**         * @private         * @description 创建输入域         */        _createCmpWidget: function() {            var me = this,                    opt = me.options;            me.isCreate = false;            if(String(opt.width).indexOf("%") !== -1 || String(opt.height).indexOf("%") !== -1){                return;            }            this._createListWindow();            me.isCreate = true;        },        /**         * @private         * @description 处理向右边列表设置数据的处理，其中包含用户定义的回调函数         * @param {Array} ldata 向右边的列表设置的数据         * @param {String} btn 点击的按钮的值         */        _dealMoveBtns : function(ldata, btn){            var me = this,                    opt = me.options,                    rdimsObj = me.rightList;                        if(rdimsObj && opt.beforeMoveFun() !== false){                rdimsObj.setData(ldata);            }        },        _deleteArraysSimilar : function(arr1, arr2){            var result = [];            var totalData = arr1.concat(arr2);            var transObj = {};            for(var i = 0; i < totalData.length; i++){                transObj[totalData[i].value] = totalData[i];            }            for(var key in transObj){                result.push(transObj[key]);            }                        return result;        },        _minusArrays : function(totalArr, minusArr){            var transObj = {};            var result = [];            for(var i = 0; i < totalArr.length; i++){                transObj[totalArr[i].value] = totalArr[i];            }            for(var j = 0; j < minusArr.length; j++){                delete transObj[minusArr[j].value];            }            for(var key in transObj){                result.push(transObj[key]);            }            return result;        },        _moveButtonClick : function(e, v){            var me = this;            if(me.hasFinishedMove){                return;            }            //防止连续快速点击造成的脚本锁死的问题            me.hasFinishedMove = true;            var ldata = [];            switch(v.value){                //移动到右边                case actionBtns[0].value :                    ldata = me.leftList.getCurrentValue();                    //左侧没有选择数据时，不进行处理                    if(ldata.length <= 0){                        me.hasFinishedMove = false;                        return;                    }                    //如果右边已经有数据，需要先将右边的数据和左边的数据合一并进行去重复，再设置到右边                    var rightData = me.rightList.getCurrentData();                    //去除两个数组中的相同元素并返回合并后的整个数组                    var result = rightData.length > 0 ? me._deleteArraysSimilar(ldata, rightData) : ldata;                    me._dealMoveBtns(result, actionBtns[0].value);                    break;                //将右边选中的值移动到左边                case actionBtns[1].value :                    var selectedData = me.rightList.getCurrentValue();                    //右侧没有选择数据时，不进行处理                    if(selectedData.length <= 0){                        me.hasFinishedMove = false;                        return;                    }                    var tempData = me.rightList.getData();                    if(!tempData || !selectedData){                        me.hasFinishedMove = false;                        return;                    }                    //从tempData中清除selectedData中值，将剩下的设置到右边列表                    ldata = me._minusArrays(tempData, selectedData);                    me._dealMoveBtns(ldata, actionBtns[1].value);                    var lValue = me.leftList.getValue();                    lValue = me._minusArrays(lValue, selectedData);                    if (me.leftList) {                        me.leftList.setValue(lValue);                    }                    break;                //将左边的值全部移动到右边(不管是否选中)                case actionBtns[2].value :                    ldata = me.leftList.getCurrentData();                    if(ldata.length <= 0){                        me.hasFinishedMove = false;                        return;                    }                    //如果左边列表进行过滤操作，再进行全部移动到右边的操作，这时只全部移动过滤出来的数据                    var rData = me.rightList.getData() || [];                    if(rData.length > 0){                        //如果右边还有数据，需要先去除重复数据                        ldata = me._deleteArraysSimilar(rData, ldata);                    }                    me._dealMoveBtns(ldata, actionBtns[2].value);                    break;                //将右边的值全部移动到左边(不管是否选中)                case actionBtns[3].value :                    if (me.leftList) {                        me.leftList.setValue(null);                    }                    ldata = me.rightList.getCurrentData() || [];                    if(ldata.length <= 0){                        me.hasFinishedMove = false;                        return;                    }                    var tempData = me.rightList.getData();                    if(ldata.length !== tempData.length){                        //存放右边除去选中的值剩下的值                        ldata = me._minusArrays(tempData, ldata);                    } else {                        ldata = [];                    }                                        me._dealMoveBtns(ldata, actionBtns[3].value);                    break;            }            me.hasFinishedMove = false;        },        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */        _setWidth: function(width) {          this.cmpEl.externalWidth(width);          if(this.listWindHPanel){              this.listWindHPanel.setWidth(width);          }        },        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */        _setHeight: function(height) {           this.cmpEl.externalHeight(height);           if(this.listWindHPanel){              this.listWindHPanel.setHeight(height);           }        },        _doLayout : function(){            var me = this;            if(me.listWindHPanel){                me.listWindHPanel.doLayout();            }            if (me.leftList) {                me.leftList.doLayout(true);            }            if (me.rightList) {                me.rightList.doLayout(true);            }        },        /**         * @description 创建维度的选择框         * @private         */        _createListWindow : function(){            var me = this,                    opt = me.options,                    btnWidth = opt.btnWidth,                    //两个btn组的间距                    btnGroupPadding = 30,                    //title的高度                    titleH = 22,                    //普通item间的间距                    padding = 10,                    width = me.cmpEl.width(),                    height = me.cmpEl.height(),                    //装list和title的容器宽度                    w = Math.floor((width - btnWidth - padding*2)/2),                    //装list和title的容器高度                    h = height - titleH,                    //两个button的容器的高度25*2 + 10                    btnGroupH = 60,                    //四个button的容器的高度(需要加上两组button的间距)                    btnGroupVPanelH = btnGroupH * 2 + btnGroupPadding,                    //整个button组的margin                    btnGroupMarginTop = (h-btnGroupVPanelH)/2+titleH,                    listH = h,                    listW = w-2;                        //首先计算各个的宽度和高度                        var htmlL = '<span class="sweet-cmp-stat-title">' + opt.fromTitle + '</span>';            var htmlR = '<span class="sweet-cmp-stat-title">' + opt.toTitle + '</span>';            me.leftList = new Sweet.list.OptimizeList({                width : listW,                search : true,                height : h,                multi : true,                isBorder : true,                data : opt.data            });            var ltemp = new Sweet.panel.VPanel({                width : w,                height : height,                padding : 2,                items : [{                        html : htmlL                }, me.leftList]            });            /* 向右按钮*/            me.toRightBtn = new Sweet.form.Button({                value : actionBtns[0],                width : btnWidth            });            me.toRightBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });                        /* 向左按钮*/            me.toLeftBtn = new Sweet.form.Button({                value : actionBtns[1],                width : btnWidth            });            me.toLeftBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });                        /* 全部向右按钮*/            me.toAllRightBtn = new Sweet.form.Button({                value : actionBtns[2],                width : btnWidth            });            me.toAllRightBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });                        /* 全部向左按钮*/            me.toAllLefttBtn = new Sweet.form.Button({                value : actionBtns[3],                width : btnWidth            });            me.toAllLefttBtn.addListener("click", function(e, v){                me._moveButtonClick(e, v);            });                        var vpUp = new Sweet.panel.VPanel({                height : btnGroupH,                width : btnWidth,                items : [me.toRightBtn, me.toLeftBtn]            });            var vpDown = new Sweet.panel.VPanel({                height : btnGroupH,                width : btnWidth,                items : [me.toAllRightBtn, me.toAllLefttBtn]            });            me.vpBtns = new Sweet.panel.VPanel({                height : btnGroupVPanelH + btnGroupMarginTop,                width : btnWidth,                padding : btnGroupPadding,                margin : [btnGroupMarginTop, 0, 0, 0],                items : [vpUp, vpDown]            });                        me.rightList = new Sweet.list.OptimizeList({                width : listW,                height : h,                search : true,                multi : true,                isBorder : true,                data : opt.value,                value : opt.value            });            var rtemp = new Sweet.panel.VPanel({                width : w,                height : height,                padding : 2,                items : [{                        html : htmlR                }, me.rightList]            });            me.listWindHPanel = new Sweet.panel.HPanel({                width : "100%",                height : listH,                itemExtend : false,                items : [ltemp, me.vpBtns, rtemp]            });        },        /**         * @private         * @description 获取组件宽度         */        _getWidth: function() {            var me = this;            return me.cmpEl.externalWidth();        },        /**         * @private         * @description 获取组件高度         */        _getHeight: function() {            var me = this;            return me.cmpEl.externalHeight();        },        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */        _setWH: function(width, height) {            var me = this;            me._setWidth(width);            me._setHeight(height);        }    });    /**     * 双向列表(List数据形式)组件     * @name Sweet.cmp.ListWindow_v1     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.list.js     * jquery.sweet.cmp.optimizeList.js     * </pre>     * @example      * <pre>     *  sweetList = new Sweet.cmp.ListWindow_v1({     *              data : [],     *              indicators : [],     *              statFun : function()//回调函数     *          });     * </pre>     */    Sweet.cmp.ListWindow_v1 = $.sweet.widgetCmpListwindow_v1;}(jQuery));