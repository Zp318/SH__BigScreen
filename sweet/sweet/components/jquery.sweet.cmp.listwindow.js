/** * @fileOverview  * <pre> * form类组件--双向选择列表 * 2013.2.4 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var listWinInputClass = "sweet-cmp-listwin-element",            listWinSelectBtn = "sweet-cmp-listwin-select_btn",            listWinInputFormClass = "sweet-cmp-textfield-formEl",            listWinParentClass = "sweet-cmp-listwin-parentEl",            listWinArrowClass = "sweet-cmp-listwin-arrow",            listWindTitleClass = "sweet-cmp-listwin-title",            listWinFloatDivClass = "sweet-cmp-listwin-seletMore",            listWindContentClass = "sweet-cmp-listwin-content",            listWinSelectDivClass = "sweet-cmp-listwin-select",            listWinSelectTreeDivClass = "sweet-cmp-listwin-select-tree",            listWinSelectRight = "sweet-cmp-listwin-select-right",            listWinSelectLeft = "sweet-cmp-listwin-select-left",            listWinSelectAllRight = "sweet-cmp-listwin-select-allRight",            listWinSelectAllLeft = "sweet-cmp-listwin-select-allLeft",            listWinSelectCon = "sweet-cmp-listwin-select-content",            listWinSearchDivClass = "sweet-cmp-listwin-search-box",            listWinBottomElClass = "sweet-cmp-listwin-bottom",            listWinBottomButtonClass = "swwet-cmp-listwin-butt",            listWindowIdPrefix = "sweet-cmp-listwin-",            suffixBottom = "-listwin-bottom",            listJavascriptVoid = "javascript:void(0);",            listSweetFloatBg = "sweet-cmp-listWin-float-bg",            uuid = uuid || 1000;    $.widget("sweet.widgetCmpListwindow", $.sweet.widgetCmp, {        version: "1.0",        eventNames: {"fromSearch": "源搜索事件",            "toSearch": "目标搜索事件",            "nodeEdit": "双向列表节点编辑事件"},        sweetWidgetName: "[widget-cmp-listwindow]",        type: 'listwindow',        options: /** @lends Sweet.cmp.ListWindow*/{            /**             * 标示双向面板的类型,list:列表；tree树             * @type String             * @default 'list'             */            type: 'list',            /**             * 双向面板的左侧标题             * @type String             * @default ''             */            fromTitle: '',            /**             * 双向面板的右侧标题             * @type String             * @default ''             */            toTitle: '',            /**             * 是否隐藏             * @type Boolean             * @default false             */            hidden: false,            /**             * 是否显示图标             * @type Boolean             * @default true             */            icon: true,            /**             * 是否显示搜索框             * @type Boolean             * @default true             */            search: false,            /**             * 加载数据             * @type {Object}             * @default null             */            store: null,            /**             * 是否延迟加载             * @type {Boolean}             * @default false             */            lazyLoad: false,            /**             * 每次加载记录数             * @type {Number}             * @default 50             */            limit: 50        },        /**         * @description 组件重绘         */        _doLayout: function() {            if (!this.rendered) {                return;            }            var me = this,                    fTEl = me.fTitleEl,                    fDiv = me.fromDiv,                    fPanel = me.fromPanel,                    sfDiv = fPanel.searchFiedlDiv,                    tDiv = me.toDiv,                    mbottom = 0,                    selectDiv = me.selectPanel,                    tPanel = me.toPanel,                    selectBottom = 0,                    cmpEl = me.cmpEl,                    cmpElWidth = cmpEl.width(),                    cmpElHeight = cmpEl.height(),                    fTElH = 0,                    bottom = 0,                    searchWidth = 0,                    searchHeight = 0,                    //两个列表之间的距离                    gap = parseInt(selectDiv.css("width")) + parseInt(selectDiv.css("margin-left"))                    + parseInt(selectDiv.css("margin-right")),                    listPanelHeight = 0;            if (fTEl) {                bottom = parseInt(fTEl.css("margin-bottom")),                        fTElH = fTEl.height() + bottom;            }            searchWidth = parseInt(cmpElWidth, 10) - gap;            listPanelHeight = parseInt(cmpElHeight, 10);            fDiv.externalWidth(searchWidth / 2);            fDiv.externalHeight(listPanelHeight - fTElH);            fPanel.setWidth(searchWidth / 2);            fPanel.setHeight(listPanelHeight - fTElH);            fPanel.doLayout();            tDiv.externalWidth(searchWidth / 2);            tDiv.externalHeight(listPanelHeight - fTElH);            tPanel.setWidth(searchWidth / 2);            tPanel.setHeight(listPanelHeight - fTElH);            tPanel.doLayout();            //左移右移按钮垂直居中            if ("list" === me.options.type) {                if (sfDiv) {                    mbottom = parseInt(sfDiv.css("margin-bottom"));                    searchHeight = sfDiv.height() + mbottom;                }                selectBottom = fTElH + searchHeight;                selectDiv.css("padding-top", selectBottom);            }        },        /**         * @private         * @description 重写父类的渲染方法         * @param {String} id 宿主ID         */        _render: function(id) {            var me = this,                    cmpEl = me.cmpEl,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,                    options = me.options,                    selectPanel = me.selectPanel;            if (!me._super(id)) {                return false;            }            cmpEl.addClass(listWinFloatDivClass);            cmpEl.appendTo(me.renderEl);            //当未给定源面板或目标面板，打印错误日志            if ($.isNull(fromPanel) || $.isNull(toPanel)) {                me._error("create muti list Panelfrom fail,from panel or to panel is empty!");            }            else            {                fromPanel.render(me.fromDiv[0].id);                toPanel.render(me.toDiv[0].id);            }            me.rendered = true;            return true;        },        /**         * @private         * @description 创建输入域         */        _createCmpWidget: function() {            var me = this;            me.eventMap = [];            this._createFloatPanel();            this._initData();            this._render();        },        /**         * @private         * @description 初始化数据         */        _initData: function() {            var me = this,                    options = me.options,                    data = options.data || [],                    value = options.value || [];            if ($.isNull(me.options.store)) {                me.setData(data);            }            me.setValue(value);        },        /**         * @description 为源面板初始化数据         * @param {Array} data 数据         * @param {Boolean} isAppend 是否是追加新的树节点         */        setData: function(data, isAppend)        {            var me = this,                    options = me.options,                    type = options.type;            isAppend = isAppend || false;            if ("list" === type) {                this.fromPanel.setData(data, isAppend);                this.toPanel.setData(data, isAppend, true);            } else {                this.fromPanel.setData(data);            }        },        /**         * @description 为目标面板初始化数据         * @param {Array} value 数据         * @param {Boolean} isAddNode 列表节点是否被添加         */        setValue: function(value, isAddNode) {            //是追加的判断是否原数据中存在            var me = this,                    options = me.options,                    type = options.type,                    valueTemp = [],                    isAppend,                    sourceData;            if (isAddNode) {                sourceData = this.toPanel.getAllNode();                //判断追加数据是否存在                $.each(value, function(i, valueObj) {                    isAppend = true;                    $.each(sourceData, function(j, sourceDataObj) {                        if (valueObj.value === sourceDataObj.value) {                            isAppend = false;                        }                    });                    if (isAppend) {                        valueTemp.push(valueObj);                    }                });            } else {                valueTemp = value;            }            if ("list" === type) {                isAddNode = isAddNode || false;                this.toPanel._showNode(value);                this.fromPanel._hideNode(value);            } else {                this.toPanel.setData(valueTemp, isAddNode);                this.toPanel.addListener("afterSetData", function() {                    me.toPanel.getUnSelectedData();                });            }        },        /**         * @private         * @description 创建浮动面板         */        _createFloatPanel: function() {            var me = this,                    cmpEl = me.cmpEl,                    options = me.options,                    position = cmpEl.position(),                    contentEl = $("<table>").attr({cellspacing: 0, border: 0}).appendTo(cmpEl),                    contentBody = $("<tbody>").appendTo(contentEl),                    contentTr = $("<tr>").appendTo(contentBody),                    contentfromTd = $("<td>").appendTo(contentTr),                    contentSelectTd = $("<td>").appendTo(contentTr),                    contentToTd = $("<td>").appendTo(contentTr);            me.selectPanel = me._createSeletPanel().appendTo(contentSelectTd);            if ($.isNotNull(me.options.fromTitle)) {                me.fTitleEl = $("<span>").addClass(listWindTitleClass).text(me.options.fromTitle).appendTo(contentfromTd);            }            if ($.isNotNull(me.options.toTitle)) {                me.tTitleEl = $("<span>").addClass(listWindTitleClass).text(me.options.toTitle).appendTo(contentToTd);            }            var contentToDiv = $("<div>").appendTo(contentToTd).addClass(listWindContentClass),                    contentfromDiv = $("<div>").appendTo(contentfromTd).addClass(listWindContentClass);            var fromDiv = me.fromDiv = $("<div>").appendTo(contentfromDiv);            fromDiv.attr("id", listWindowIdPrefix + options.id + "-" + (++uuid));            var toDiv = me.toDiv = $("<div>").appendTo(contentToDiv);            toDiv.attr("id", listWindowIdPrefix + options.id + "-" + (++uuid));            me._createListPanel();        },        /**         * @private         * @description 创建数据显示面板         */        _createListPanel: function() {            var me = this,                    fromPanel = null,                    options = this.options,                    type = options.type;            //根据用户指定的方式显示列表            if ("list" === type)            {                this.fromPanel = new Sweet.list.List({                    search: options.search,                    widgetClass: "sweet-list-list-con",                    multi: true                });                this.toPanel = new Sweet.list.List({                    search: options.search,                    widgetClass: "sweet-list-list-con",                    multi: true                });            }            else if ("tree" === type)            {                this.fromPanel = new Sweet.tree.Tree({                    multi: true,                    data: options.data,                    search: options.search,                    store: options.store,                    lazyLoad: options.lazyLoad,                    limit: options.limit,                    icon: options.icon,                    widgetClass: listSweetFloatBg                });                this.toPanel = new Sweet.tree.Tree({                    multi: true,                    expand: true,                    data: options.data,                    search: options.search,                    icon: options.icon,                    widgetClass: listSweetFloatBg                });                //双向列表树添加节点编辑事件                this.toPanel.addListener("nodeEdit", function(event, data) {                    if (!$.isNull(me.eventMap.nodeEdit)) {                        me.eventMap.nodeEdit.call(this, event, data);                    }                });                this.fromPanel.addListener("nodeEdit", function(event, data) {                    if (!$.isNull(me.eventMap.nodeEdit)) {                        me.eventMap.nodeEdit.call(this, event, data);                    }                });            }        },        /**         * @private         * @description 创建并返回选择面板         * @return {object} 选中面板         */        _createSeletPanel: function() {            var me = this;            var type = me.options.type;            var isTree = false;            if ("tree" === type) {                isTree = true;            }            var conSelectDiv = $("<div>").addClass(isTree ? listWinSelectTreeDivClass : listWinSelectDivClass),                    selectRight = $("<button>").addClass(listWinSelectBtn)                    .text(Sweet.constants.listWindowButton.RIGHT)                    .bind("click", {"me": me}, me._selectToRight).appendTo(conSelectDiv),                    selectLeft = $("<button>").addClass(listWinSelectBtn).addClass(listWinSelectLeft)                    .text(Sweet.constants.listWindowButton.LEFT)                    .bind("click", {"me": me}, me._selectToLeft).appendTo(conSelectDiv),                    selectAllRight = $("<button>").addClass(listWinSelectBtn)                    .text(Sweet.constants.listWindowButton.ALL_RIGHT)                    .bind("click", {"me": me}, me._selectAllToRight).appendTo(conSelectDiv),                    selectAllLeft = $("<button>").addClass(listWinSelectBtn)                    .text(Sweet.constants.listWindowButton.ALL_LEFT)                    .bind("click", {"me": me}, me._selectAllToLeft).appendTo(conSelectDiv);            return conSelectDiv;        },        /**         * @private         * @description 获取选中的值         * @return [array] 获取到得浮动面板中目标面板中所有的节点数据         */        _getValue: function() {            var me = this,                    type = me.options.type;            if ("list" === type) {                return this.toPanel._getAllShowNodeData();            } else {                return this.toPanel.getAllNode();            }        },        /**         * @private         * @description 判断两个树节点是否有相同的叶子节点，如果有需要增加叶子节点的isSelect属性         * @param {Object} Object sourceObj 节点数据         * @param {Object} Object selectObj 节点数据         */        _setSelectData: function(sourceObj, selectObj) {            var me = this;            $.each(selectObj, function(i, objSelect) {                $.each(sourceObj, function(j, objSource) {                    if(!$.isNull(objSource)){                        if (objSelect.value === objSource.value) {                            objSource.isSelect = 1;                            if (objSelect.children && 0 < objSelect.children.length &&                                 objSource.children && objSource.children.length > 0) {                                me._setSelectData(objSource.children, objSelect.children);                            }                        }                    }                });            });        },        /**         * @private         * @description 在原数据中设置左边选中的数据，增加isSelect属性         * @param {Object} Object sourceData 原始数据         * @param {Object} Object selectData 选中数据         */        _setSourceData: function(sourceData, selectData) {            var me = this;            $.each(selectData, function(i, selectObj) {                $.each(sourceData, function(j, sourceObj) {                    if (selectObj.value === sourceObj.value) {                        sourceObj.isSelect = 1;                        //判断是否有子节点                        if ((selectObj.children && 0 < selectObj.children.length) &&                            (sourceObj.children && sourceObj.children.length > 0)) {                            me._setSelectData(sourceObj.children, selectObj.children);                        }                    }                });            });        },        /**         * @private         * @description 删除不包含isSelect的节点         * @param {Object} Object data 节点数据         */        _deleteData: function(data) {            var me = this;            $.each(data, function(i, node) {                if ($.isNull(node.isSelect)) {                    delete data[i];                } else {                    if (node.children && 0 < node.children.length) {                        me._deleteData(node.children);                    }                }            });        },        /**         *@description 获取树中的append数据         *@private         *@param {Object} data 原数据         *@return {Array} append数据,格式如[{text:'text1',value:'value1'},...]         */        _getAppendData: function(data) {            var me = this,                    appendData = [];            $.each(data, function(index, node) {                if (node.data && node.data.isSelect) {                    appendData.push(node);                }            });            return appendData;        },        /**         * @private         * @description 双向列表树的右侧操作         * @param {Boolean} all 是否全部移动         */        _toRigth: function(all) {            var me = this,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,                    sourceData,                    appendData,		    filterData,                    selectData;            all = all || false;            //取到左边树的数据            if (all) {                selectData = fromPanel.getAllNode();            } else {                selectData = fromPanel.getValue();            }            //在原数据中设置左边选中的数据，增加isSelect属性            sourceData = $.objClone(fromPanel.filterData);            me._setSourceData(sourceData, selectData);            //在原数据中设置右边全部的数据，增加isSelect属性            me._setSourceData(sourceData, toPanel.getAllNode(true));            //从全部数据中找出append数据            appendData = me._getAppendData(toPanel.getAllNode(true));            //根据原数据中不包含isSelect属性的节点，生成新树数据            me._deleteData(sourceData);            sourceData = $.deleteUndefinedData(sourceData);            sourceData = sourceData.concat(appendData);            filterData = toPanel.filterData;            toPanel.setData(sourceData);            toPanel.filterData = toPanel.mergeTree(filterData, sourceData);            toPanel.addListener("afterSetData", function() {                toPanel.getUnSelectedData();            });        },        /**         * @private         * @description 将来源面板中选中的一项放置到目标面板中         * @param {Object} event 右移按钮本身         */        _selectToRight: function(event) {            var me = event.data.me,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,                    selectData;            //取到左边树的数据                               if ("list" === me.options.type) {                selectData = fromPanel.getValue();                fromPanel._hideNode(selectData);                toPanel._showNode(selectData);            } else {                me._toRigth();            }            me._trigger("selectToRight", me);        },        /**         * @private         * @description 将目标面板中选中的一项放置到来源面板中         * @param {Object} event 左移按钮本身         */        _selectToLeft: function(event) {            var me = event.data.me,                    data,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,                    selectData = toPanel.getValue();            if ("list" === me.options.type) {                fromPanel._showNode(selectData);                toPanel._hideNode(selectData);            } else {                toPanel.removeNode(selectData);                //移除数据同时删除过滤条件中的数据                toPanel.deleteData(selectData, toPanel.filterData);                toPanel.deleteFilterData(toPanel.filterData);                //设置所有未选中的数据为选中                toPanel.getUnSelectedData();                data = toPanel.getValue();                toPanel.removeAllNode();                toPanel.createNodes(data, true);            }            me._trigger("selectToLeft", me);        },        /**         * @private         * @description 将来源面板中所有选中项都放置到目标面板中         * @param {Object} event 全部右移按钮本身         */        _selectAllToRight: function(event) {            var me = event.data.me,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,                    selectData;            if ("list" === me.options.type) {                selectData = fromPanel._getAllNodeData();                fromPanel._hideNode(selectData);                toPanel._showNode(selectData);            } else {                me._toRigth(true);            }            me._trigger("selectAllToRight", me);        },        /**         * @private         * @description 将目标面板中所有选中项都放置到来源面板中         * @param {Object} event 全部左移按钮本身         */        _selectAllToLeft: function(event) {            var me = event.data.me,                    data,                    fromPanel = me.fromPanel,                    toPanel = me.toPanel,		    filterData,                    selectData;            if ("list" === me.options.type) {                selectData = toPanel._getAllNodeData();                fromPanel._showNode(selectData);                toPanel._hideNode(selectData);            } else {                selectData = toPanel.getAllNode();                toPanel.removeNode(selectData);                //移除数据同时删除过滤条件中的数据                toPanel.deleteData(selectData, toPanel.filterData);                toPanel.deleteFilterData(toPanel.filterData);                toPanel.getUnSelectedData();                filterData = toPanel.filterData;                data = toPanel.getValue();                toPanel.setData(data);                toPanel.filterData = toPanel.mergeTree(filterData, []);            }            me._trigger("selectAllToLeft", me);        },        /**         * @description 取消事件         * @private         */        _removeListener: function() {            var me = this;            me.handlers = me.handlers || {};            $.each(me.handlers, function(eventName, func) {                if ("nodeEdit" === eventName) {                    me.eventMap.nodeEdit = null;                    delete me.handlers.nodeEdit;                    me.eventMap.length--;                }            });        },        /**         * @description 注册事件         * @private         */        _addListener: function() {            var me = this;            $.each(me.handlers, function(eventName, func) {                if ("nodeEdit" === eventName) {                    me.eventMap.nodeEdit = func;                    me.eventMap.length++;                }            });        },        /**         * @private         * @description 获取组件宽度         */        _getWidth: function() {            var me = this;            return me.cmpEl.externalWidth();        },        /**         * @private         * @description 获取组件高度         */        _getHeight: function() {            var me = this;            return me.cmpEl.externalHeight();        },        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 组件宽度         */        _setWidth: function(width) {            var me = this;            me.cmpEl.externalWidth(width);        },        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 组件高度         */        _setHeight: function(height) {            var me = this;            me.cmpEl.externalHeight(height);        },        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */        _setWH: function(width, height) {            var me = this;            me._setWidth(width);            me._setHeight(height);        }    });    /**     * 双向选择列表     * @name Sweet.cmp.ListWindow     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.widget.form.input.js     * jquery.sweet.widget.form.searchfield.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree.js     * </pre>     * @example      * <pre>     *  sweetList = new Sweet.cmp.ListWindow({     *              width: 400,     *              height: 250,     *              label: true,     *              labelText: 'BSC',     *              checked: true,     *              title: 'Choose BSC',     *              data: data,     *              search: true,     *              widgetClass: 'sweet-cmp-listwin-selectBg',     *              fromTitle: 'BSC for selected',     *              toTitle: 'has selected BSC',     *              value: valueData,     *              renderTo: "sweet-mutilist"     *          });     * </pre>     */    Sweet.cmp.ListWindow = $.sweet.widgetCmpListwindow;}(jQuery));