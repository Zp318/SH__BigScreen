/** * @fileOverview  * <pre> * 局向组件 * 2014.07.25 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var officeDirectionLPanelClass = "sweet-cmp-officedirectionv1-lpanel",            officeDirectionRPanelClass = "sweet-cmp-officedirectionv1-rpanel",            officeDirectionMPanelClass = "sweet-cmp-officedirectionv1-mpanel",            officeDirectionBtnPanelClass = "sweet-cmp-officedirectionv1-btnpanel",            officeDirectionComboboxClass = "sweet-cmp-officedirectionv1-combobox",            officeDirectionTreeClass = "sweet-cmp-officedirectionv1-tree",            officeDirectionTitleClass = "sweet-cmp-officedirectionv1-title",            officeDirectionListBodyClass = "sweet-cmp-officedirectionv1-listbody",            eventChange = "change",            eventCheckChange = "checkchange",            eventBeforeMoveRight = "beforemoveright",            eventLoad = "load",            eventBeforeLoad = "beforeload",            eventSourceComboboxChange = "sourcecomboboxchange",            OPTIONS_TITLE = Sweet.cmp.i18n.officeDirection.optionsMsg,            SELECTED_TITLE = Sweet.cmp.i18n.officeDirection.selectedMsg,            ACTION_BTNS = [                {                    value: "_moveRight",                    text: " > "                }, {                    value: "_moveLeft",                    text: " < "                }, {                    value: "_allMoveRight",                    text: " >> "                }, {                    value: "_allMoveLeft",                    text: " << "                }            ],            officeDirectionV1Prefix = "sweet-cmp-officeDirectionv1",            uuid = uuid || 1000;    $.widget("sweet.widgetCmpOfficeDirection_v1", $.sweet.widgetCmp, /** @lends Sweet.cmp.OfficeDirection_v1*/{        version: "1.0",        sweetWidgetName: "[widget-cmp-officeDirectionv1]",        type: 'officeDirectionv1',        eventNames: /** @lends Sweet.cmp.OfficeDirection_v1.prototype */{            /**             * @event             * @description 右移前事件             */            beforemoveright: "右移前事件",            /**             * @event             * @description 源下拉列表change事件,如果返回true则会更新目的下拉列表的数据             */            sourcecomboboxchange: "源下拉列表change事件"        },        options: /** @lends Sweet.cmp.OfficeDirection_v1*/{            /**             * 组件数据,包括源目的下拉框数据及列表数据             * @type Object             * @default {}             */            data: {},            /**             * 组件值数据信息,包括源下拉框选中值sComValue、目的下拉框选中值dComValue、源列表选中值sSelect、目的列表选中值dSelect、待选列表数据optionsDatas、已选列表数据selectedDatas             * 数据结构: {sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}             * @type Array             * @default null             */            value: null,            /**             * 左列表title             * @type String             * @default ""             */            sLabel: Sweet.cmp.i18n.officeDirection.sourceCombLabel,            /**             * 右列表title             * @type String             * @default ""             */            dLabel: Sweet.cmp.i18n.officeDirection.destinationCombLabel,            /**             * 是否有提示             * @type {Boolean}             * @default false             */            tip: true,            /**             * 是否显示树节点的图标             * @type {Boolean}             * @default true             */            icon: true,            /**             * 是否显示节点之间的连线             * @type {Boolean}             * @default true             */            useArrows: true,            /**             * options和selected列表每条数据value的分割符             * @type {String}             * @default "#&#*#&#"             */            valueSplit: "#&#*#&#",            /**             * options和selected列表每条数据text的分割符             * @type {String}             * @default "-"             */            textSplit: "-"        },        /**         * @description 为源tree(左边的tree列表)设置数据,并且清除右边tree的数据         * @param {Array} data 数据结构必须是数组         */        setData: function(data) {            var me = this;            me.options.data = data;            me._initData();            if (me.sTree) {                me.sTree.setData(null);            }            if (me.dTree) {                me.dTree.setData(null);            }            if (me.optionsList) {                me.optionsList.setData(null);            }            if (me.selectedList) {                me.selectedList.setData(null);            }            if (me.sCombobox) {                me.sCombobox.setData(me.sComDatas);            }            if (me.dCombobox) {                me.dCombobox.setData(me.dComDatas);            }        },        /**         * @description 设置值         * @param {Object} value 值{sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}         */        setValue: function(value) {            var me = this,                    sComValue = {},                    dComValue = {},                    sSelected = [],                    dSelected = [],                    optionsDatas = [],                    selectedDatas = [];            if (!$.isEmptyObject(value)) {                sComValue = value["sComValue"];                dComValue = value["dComValue"];                sSelected = value["sSelected"];                dSelected = value["dSelected"];                optionsDatas = value["optionsDatas"];                selectedDatas = value["selectedDatas"];            }            if (me.sCombobox) {                me.sCombobox.setValue(sComValue);            }            if (me.dCombobox) {                me.dCombobox.setValue(dComValue);            }            if (me.sTree) {                me.sTree.setValue(sSelected);            }            if (me.dTree) {                me.dTree.setValue(dSelected);            }            if (me.optionsList) {                me.optionsList.setData(optionsDatas);            }            if (me.selectedList) {                me.selectedList.setData(selectedDatas);            }        },        /**         * @description 获取数据         * @returns {Object} value 值{sComValue: {}, dComValue: {}, sSelected: [], dSelected: [], optionsDatas: [], selectedDatas: []}         */        getValue: function() {            var me = this,                    value = {},                    sComValue = {},                    dComValue = {},                    sSelected = [],                    dSelected = [],                    optionsDatas = [],                    selectedDatas = [];            if (me.sCombobox) {                sComValue = me.sCombobox.getValue();            }            if (me.dCombobox) {                dComValue = me.dCombobox.getValue();            }            if (me.sTree) {                sSelected = me.sTree.getValue();            }            if (me.dTree) {                dSelected = me.dTree.getValue();            }            if (me.optionsList) {                optionsDatas = me.optionsList.getCurrentData();            }            if (me.selectedList) {                selectedDatas = me.selectedList.getCurrentData();            }            value["sComValue"] = sComValue;            value["dComValue"] = dComValue;            value["sSelected"] = sSelected;            value["dSelected"] = dSelected;            value["optionsDatas"] = optionsDatas;            value["selectedDatas"] = selectedDatas;            return value;        },        /**         * @description 销毁treeWindowow组件及其中的事件和数据等         */        _destroyWidget: function() {            var me = this;            me._super();            if (me.officeDirectionEl) {                me.officeDirectionEl.remove();            }            if (me.sCombobox) {                me.sCombobox.destroy();            }            if (me.dCombobox) {                me.dCombobox.destroy();            }            if (me.sTree) {                me.sTree.destroy();            }            if (me.dTree) {                me.dTree.destroy();            }            if (me.optionsList) {                me.optionsList.destroy();            }            if (me.vpBtns) {                me.vpBtns.destroy();            }            if (me.selectedList) {                me.selectedList.destroy();            }        },        /**         * @private         * @description 创建列表组件         */        _createSweetWidget: function() {            var me = this,                    id = me.options.id,                    widgetClass = me.options.widgetClass,                    lPanelDiv,                    rPanelDiv;            me.btnWidth = 60;            me.btnMargin = 5;            me._initData();            //主面板            me.officeDirectionEl = $("<div>").attr("id", me.options.id);            if (widgetClass && "" != widgetClass) {                me.officeDirectionEl.addClass(widgetClass);            }            //左面板:其中装有源下拉框、源数据、options            lPanelDiv = $("<div>").addClass(officeDirectionLPanelClass).appendTo(me.officeDirectionEl);            //源下拉框渲染的dom ID            me.__sComRenderID = id + "-" + officeDirectionV1Prefix + "-scombobox-" + uuid;            $("<div>").attr("id", me.__sComRenderID).addClass(officeDirectionComboboxClass).appendTo(lPanelDiv);            //源树渲染的dom ID            me.__sTreeRenderID = id + "-" + officeDirectionV1Prefix + "-stree-" + uuid;            $("<div>").attr("id", me.__sTreeRenderID).addClass(officeDirectionTreeClass).appendTo(lPanelDiv);            //options标题            me.optionsTitleDiv = $("<div>").addClass(officeDirectionTitleClass).appendTo(lPanelDiv);            me.optionsTitleEl = $("<span>").appendTo(me.optionsTitleDiv);            //options列表渲染的dom ID            me.__optionsListRenderID = id + "-" + officeDirectionV1Prefix + "-optionslist-" + uuid;            $("<div>").attr("id", me.__optionsListRenderID).appendTo(lPanelDiv);            //中间面板:其中装有操作button            me.mPanelDiv = $("<div>").addClass(officeDirectionMPanelClass).height(me.options.height).appendTo(me.officeDirectionEl);            me.mTopDiv = $("<div>").appendTo(me.mPanelDiv);            //中间操作按钮panel渲染的dom ID            me.__mOptBtnPanelRenderID = id + "-" + officeDirectionV1Prefix + "-optbtnpanel-" + uuid;            $("<div>").attr("id", me.__mOptBtnPanelRenderID).addClass(officeDirectionBtnPanelClass).appendTo(me.mPanelDiv);            //左面板:其中装有目的下拉框、目的数据、selected            rPanelDiv = $("<div>").addClass(officeDirectionRPanelClass).appendTo(me.officeDirectionEl);            //目的下拉框渲染的dom ID            me.__dComRenderID = id + "-" + officeDirectionV1Prefix + "-dcombobox-" + uuid;            $("<div>").attr("id", me.__dComRenderID).addClass(officeDirectionComboboxClass).appendTo(rPanelDiv);            //目的树渲染的dom ID            me.__dTreeRenderID = id + "-" + officeDirectionV1Prefix + "-dtree-" + uuid;            $("<div>").attr("id", me.__dTreeRenderID).addClass(officeDirectionTreeClass).appendTo(rPanelDiv);            //selected标题            me.selectedTitleDiv = $("<div>").addClass(officeDirectionTitleClass).appendTo(rPanelDiv);            me.selectedTitleEl = $("<span>").appendTo(me.selectedTitleDiv);            //options列表渲染的dom ID            me.__selectedListRenderID = id + "-" + officeDirectionV1Prefix + "-selectedlist-" + uuid;            $("<div>").attr("id", me.__selectedListRenderID).appendTo(rPanelDiv);            // 创建组件            me._createOfficeDirectionPanel();            // 注册事件            me._registInitEvent();        },        /**         * @private         * @description 源数据的初始化处理         */        _initData: function() {            var me = this;            //原始数据初始化            if (!me.options.data) {                me.options.data = {                    sData: [],                    dData: []                };            } else {                if (!me.options.data["sData"]) {                    me.options.data["sData"] = [];                }                if (!me.options.data["dData"]) {                    me.options.data["dData"] = [];                }            }            me.sComDatas = [];            me.dComDatas = [];            for (var i = 0; i < me.options.data["sData"].length; i++) {                me.sComDatas.push({                    value: me.options.data["sData"][i]["value"],                    text: me.options.data["sData"][i]["text"],                    data: me.options.data["sData"][i]["data"]                });            }            for (var i = 0; i < me.options.data["dData"].length; i++) {                me.dComDatas.push({                    value: me.options.data["dData"][i]["value"],                    text: me.options.data["dData"][i]["text"],                    data: me.options.data["dData"][i]["data"]                });            }        },        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */        _render: function(id) {            var me = this;            if (!me._super(id)) {                return false;            }            me.officeDirectionEl.appendTo(me.renderEl);            me.sCombobox.render(me.__sComRenderID);            me.dCombobox.render(me.__dComRenderID);            me.sTree.render(me.__sTreeRenderID);            me.dTree.render(me.__dTreeRenderID);            me.optionsList.render(me.__optionsListRenderID);            me.vpBtns.render(me.__mOptBtnPanelRenderID);            me.selectedList.render(me.__selectedListRenderID);            //调整布局,当创建完再设置文本            me.optionsTitleEl.text(OPTIONS_TITLE);            me.selectedTitleEl.text(SELECTED_TITLE);            me.rendered = true;            me.sCombobox.setData(me.sComDatas);            me.dCombobox.setData(me.dComDatas);            if (!$.isEmptyObject(me.options.value)) {                me.setValue(me.options.value);            }            return true;        },        /**         * @description 创建主面板         * @private         */        _createOfficeDirectionPanel: function() {            var me = this,                    btnWidth = me.btnWidth,                    //两个btn组的间距                    btnGroupPadding = 30,                    btnGroupH = 60,                    listeners,                    width,                    height,                    treeWidth,                    titleHeight = 18,                    comboboxHeight = 22,                    treeHeight,                    padding = me.btnMargin,                    tPadding = 20,                    btnPanelHeight,                    tLabelPadding = 10,                    tTitleEl;            //事件处理            listeners = me.options["listeners"];            if (!$.isEmptyObject(listeners)) {                for (var key in listeners) {                    me.addListener(("" + key), listeners[key]);                }            }            //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱            width = me.officeDirectionEl.width();            height = me.officeDirectionEl.height();            me.treeWidth = treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);            me.treeHeight = treeHeight = Math.floor((height - comboboxHeight - titleHeight - tPadding) / 2);            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;            me.mTopDiv.width(btnWidth + padding * 2).height(height - treeHeight + (treeHeight - btnPanelHeight) / 2);            //预渲染获取label的宽度            me.comboboxLabelWidth = 52;            tTitleEl = $("<span>").css({display: "block", position: "absolute", top: "-500px"}).html(me.options.sLabel).appendTo("body");            me.comboboxLabelWidth = tTitleEl.width();            tTitleEl.html(me.options.dLabel);            if (me.comboboxLabelWidth < tTitleEl.width()) {                me.comboboxLabelWidth = tTitleEl.width();            }            tTitleEl.remove();            me.comboboxLabelWidth = me.comboboxLabelWidth + tLabelPadding;            me.sCombobox = new Sweet.form.ComboBox_v1({                label: true,                width: treeWidth,                labelText: me.options.sLabel,                blank: false,                labelWidth: me.comboboxLabelWidth,                tip: me.options.tip            });            me.dCombobox = new Sweet.form.ComboBox_v1({                label: true,                width: treeWidth,                labelText: me.options.dLabel,                blank: false,                labelWidth: me.comboboxLabelWidth,                tip: me.options.tip            });            //左树            me.sTree = new Sweet.tree.Tree_v1({                width: treeWidth,                height: treeHeight,                search: true,                multi: true,                tip: me.options.tip,                icon: me.options.icon,                useArrows: me.options.useArrows            });            //右树            me.dTree = new Sweet.tree.Tree_v1({                width: treeWidth,                height: treeHeight,                search: true,                multi: true,                tip: me.options.tip,                icon: me.options.icon,                useArrows: me.options.useArrows            });            me.optionsList = new Sweet.list.OptimizeList({                width: treeWidth,                height: treeHeight,                widgetClass: officeDirectionListBodyClass,                multi: true,                isBorder: true,                tip: true,                search: false            });            me.selectedList = new Sweet.list.OptimizeList({                width: treeWidth,                height: treeHeight,                widgetClass: officeDirectionListBodyClass,                multi: true,                isBorder: true,                tip: true,                search: false            });            //右移按钮            me._createMoveRightBtn();            //左移按钮            me._createMoveLeftBtn();            //全部右移按钮            me._createMoveAllRightBtn();            //全部左移按钮            me._createMoveAllLeftBtn();            me.vpUp = new Sweet.panel.VPanel({                height: btnGroupH,                width: btnWidth,                items: [me.moveRightBtn, me.moveLeftBtn]            });            me.vpDown = new Sweet.panel.VPanel({                height: btnGroupH,                width: btnWidth,                items: [me.moveAllRightBtn, me.moveAllLeftBtn]            });            me.vpBtns = new Sweet.panel.VPanel({                height: btnPanelHeight,                padding: btnGroupPadding,                items: [me.vpUp, me.vpDown]            });        },        /**         * @private         * @description 组件重绘         */        _doLayout: function() {            var me = this,                    btnWidth = me.btnWidth,                    //两个btn组的间距                    btnGroupPadding = 30,                    btnGroupH = 60,                    width,                    height,                    treeWidth,                    titleHeight = 18,                    comboboxHeight = 22,                    treeHeight,                    padding = me.btnMargin,                    tPadding = 20,                    btnPanelHeight;            //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱            width = me.officeDirectionEl.width();            height = me.officeDirectionEl.height();            me.treeWidth = treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);            titleHeight = me.optionsTitleDiv.outerHeight();            comboboxHeight = me.sCombobox.getHeight();            me.treeHeight = treeHeight = Math.floor((height - comboboxHeight - titleHeight - tPadding) / 2);            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;            me.mTopDiv.width(btnWidth + padding * 2).height(height - treeHeight + (treeHeight - btnPanelHeight) / 2);            me.mPanelDiv.height(height);            if (me.sCombobox) {                me.sCombobox.setWidth(treeWidth);            }            if (me.dCombobox) {                me.dCombobox.setWidth(treeWidth);            }            if (me.sTree) {                me.sTree.setWH(treeWidth, treeHeight);                me.sTree.doLayout(true);            }            if (me.dTree) {                me.dTree.setWH(treeWidth, treeHeight);                me.dTree.doLayout(true);            }            if (me.optionsList) {                me.optionsList.setWH(treeWidth, treeHeight);                me.optionsList.doLayout(true);            }            if (me.selectedList) {                me.selectedList.setWH(treeWidth, treeHeight);                me.selectedList.doLayout(true);            }        },        /**         * @private         * @description 创建右移按钮,并注册事件处理         */        _createMoveRightBtn: function() {            var me = this,                    btnWidth = me.btnWidth;            //右移按钮            me.moveRightBtn = new Sweet.form.Button({                value: ACTION_BTNS[0],                width: btnWidth            });            //右移事件            me.moveRightBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建左移按钮,并注册事件处理         */        _createMoveLeftBtn: function() {            var me = this,                    btnWidth = me.btnWidth;            //右移按钮            me.moveLeftBtn = new Sweet.form.Button({                value: ACTION_BTNS[1],                width: btnWidth            });            //右移事件            me.moveLeftBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建全部右移按钮,并注册事件处理         */        _createMoveAllRightBtn: function() {            var me = this,                    btnWidth = me.btnWidth;            //右移按钮            me.moveAllRightBtn = new Sweet.form.Button({                value: ACTION_BTNS[2],                width: btnWidth            });            //右移事件            me.moveAllRightBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建全部左移按钮,并注册事件处理         */        _createMoveAllLeftBtn: function() {            var me = this,                    btnWidth = me.btnWidth;            //右移按钮            me.moveAllLeftBtn = new Sweet.form.Button({                value: ACTION_BTNS[3],                width: btnWidth            });            //右移事件            me.moveAllLeftBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 移动操作处理         * @param {Object} e 事件对象         * @param {Object} v 点击btn的value         */        _moveButtonClick: function(e, v) {            var me = this;            switch (v.value) {                case ACTION_BTNS[0].value :                    me.moveRight();                    break;                case ACTION_BTNS[1].value :                    me.moveLeft();                    break;                case ACTION_BTNS[2].value :                    me.moveAllRight();                    break;                case ACTION_BTNS[3].value :                    me.moveAllLeft();                    break;            }        },        /**         * @description 右移操作处理         */        moveRight: function() {            var me = this,                    lValue = [],                    rDatas,                    flag;            if (!me.optionsList || !me.selectedList) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            lValue = me.optionsList.getValue();            //左侧没有选择数据时，不进行处理            if (!lValue || lValue.length <= 0) {                me.__isDoMoving = false;                return;            }            //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边            rDatas = me.selectedList.getCurrentData();            if (rDatas && rDatas.length > 0) {                rDatas = me._deleteArraysSimilar(lValue, rDatas);            } else {                rDatas = lValue;            }            //左右数据不一致时才setData            flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);            if (false === flag || "false" === flag) {                me.__isDoMoving = false;                return;            }            me.selectedList.setData(rDatas);            me.__isDoMoving = false;        },        /**         * @description 左移操作处理         */        moveLeft: function() {            var me = this,                    rValue,                    rDatas;            if (!me.optionsList || !me.selectedList) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            rValue = me.selectedList.getValue();            //如果右侧没有选择,则不做操作            if (!rValue || rValue.length <= 0) {                me.__isDoMoving = false;                return;            }            rDatas = me.selectedList.getCurrentData();            rDatas = me._minusArrays(rDatas, rValue);            me.selectedList.setData(rDatas);            me.__isDoMoving = false;        },        /**         * @description 全部右移操作处理         */        moveAllRight: function() {            var me = this,                    lDatas,                    rDatas,                    flag;            if (!me.optionsList || !me.selectedList) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            lDatas = me.optionsList.getCurrentData();            if (!lDatas || lDatas.length <= 0) {                me.__isDoMoving = false;                return;            }            rDatas = me.selectedList.getCurrentData();            if (rDatas && rDatas.length > 0) {                rDatas = me._deleteArraysSimilar(lDatas, rDatas);            } else {                rDatas = lDatas;            }            //左右树数据不一样时触发右移事件            flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);            if (false === flag || "false" === flag) {                me.__isDoMoving = false;                return;            }            me.selectedList.setData(rDatas);            me.__isDoMoving = false;        },        /**         * @description 全部左移操作处理         */        moveAllLeft: function() {            var me = this;            if (!me.selectedList) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            me.selectedList.setData([]);            me.__isDoMoving = false;        },        /**         * @private         * @description 获取组件宽度         */        _getWidth: function() {            return this.officeDirectionEl.externalWidth();        },        /**         * @private         * @description 获取组件高度         */        _getHeight: function() {            return this.officeDirectionEl.externalHeight();        },        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */        _setWidth: function(width) {            this.officeDirectionEl.externalWidth(width);        },        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */        _setHeight: function(height) {            this.officeDirectionEl.externalHeight(height);        },        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */        _setWH: function(width, height) {            var me = this;            me.officeDirectionEl.externalWidth(width);            me.officeDirectionEl.externalHeight(height);        },        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */        _triggerHandler: function(e, eName, data) {            var me = this,                    result;            if ($.isNull(me.handlers)) {                return;            }            $.each(me.handlers, function(handlerName, func) {                // 回调注册事件                if (eName === handlerName) {                    result = func.call(null, e, data);                }            });            return result;        },        /**         * @private         * @description 注册事件         */        _registInitEvent: function() {            var me = this,                    listeners,                    flag;            listeners = me.options["listeners"];            if (!$.isEmptyObject(listeners)) {                for (var key in listeners) {                    me.addListener(("" + key), listeners[key]);                }            }            me.sCombobox.addListener(eventChange, function(event, data) {                if (me.optionsList) {                    me.optionsList.setData([]);                }                if (me.selectedList) {                    me.selectedList.setData([]);                }                me._doComboboxChange(data, true);                me._registCheckChangeEvent();                flag = me._triggerHandler(data, eventSourceComboboxChange, me);                if (true == flag || "true" == flag) {                    if (me.dCombobox) {                        me.dCombobox.setData(me.dComDatas);                    }                }            });            me.dCombobox.addListener(eventChange, function(event, data) {                if (me.optionsList) {                    me.optionsList.setData([]);                }                if (me.selectedList) {                    me.selectedList.setData([]);                }                me._doComboboxChange(data, false);                me._registCheckChangeEvent();            });            me._registCheckChangeEvent();        },        /**         * @private         * @description 设置目的下拉框数据         * @param {Array} datas         */        setDestinaComboData: function(datas) {            var me = this;            if (me.optionsList) {                me.optionsList.setData([]);            }            if (me.selectedList) {                me.selectedList.setData([]);            }            if (!me.dCombobox) {                return;            }            if (!datas) {                datas = [];            }            me.dComDatas = [];            me.options.data["dData"] = datas;            for (var i = 0; i < me.options.data["dData"].length; i++) {                me.dComDatas.push({                    value: me.options.data["dData"][i]["value"],                    text: me.options.data["dData"][i]["text"],                    data: me.options.data["dData"][i]["data"]                });            }        },        /**         * @private         * @description 获得value的分隔符         * @returns {String} valueSplit         */        getValueSplit: function() {            return this.options.valueSplit;        },        /**         * @private         * @description 获得text的分隔符         * @returns {String} valueSplit         */        getTextSplit: function() {            return this.options.textSplit;        },        /**         * @private         * @description 将树型数据转成list型数据         * @param {Array} datas 待转化数据         * @param {Array} result 待返回的数据         */        _parseListDatas: function(datas, result) {            var me = this;            for (var i = 0; i < datas.length; i++) {                if (datas[i]["children"] && datas[i]["children"].length > 0) {                    me._parseListDatas(datas[i]["children"], result);                } else {                    result.push(datas[i]);                }            }        },        /**         * @private         * @description 获得list型数据         * @param {Array} datas 待转化数据         * @param {Object} cmp 列表组件         */        _getListDatas: function(datas, cmp) {            var me = this,                    result = [];            if (!datas || !cmp) {                return result;            }            if ("widgetListList" == cmp.widgetName) {                return datas;            } else if ("widgetTreeTree_v1" == cmp.widgetName) {                me._parseListDatas(datas, result);            } else {                me._parseListDatas(datas, result);            }            return result;        },        /**         * @private         * @description 注册事件         */        _registCheckChangeEvent: function() {            var me = this,                    sValue,                    dValue;            if (me.sTree) {                me.sTree.addListener(eventCheckChange, function(node, listCmp) {                    sValue = listCmp.getValue();                    dValue = me.dTree ? me.dTree.getValue() : [];                    sValue = me._getListDatas(sValue, listCmp);                    dValue = me._getListDatas(dValue, me.dTree);                    me._setOptionsDatas(sValue, dValue);                });            }            if (me.dTree) {                me.dTree.addListener(eventCheckChange, function(node, listCmp) {                    dValue = listCmp.getValue();                    sValue = me.sTree ? me.sTree.getValue() : [];                    dValue = me._getListDatas(dValue, listCmp);                    sValue = me._getListDatas(sValue, me.sTree);                    me._setOptionsDatas(sValue, dValue);                });            }        },        /**         * @private         * @description 注册事件         * @param {Array} sDatas 源数据         * @param {Array} dDatas 目的数据         */        _setOptionsDatas: function(sDatas, dDatas) {            var me = this,                    datas = [],                    value,                    vValue = {},                    valueStr,                    textStr,                    node;            if (!me.optionsList) {                return;            }            value = me.optionsList.getValue();            if (value && value.length > 0) {                for (var i = 0; i < value.length; i++) {                    vValue[value[i]["value"]] = "";                }                value = [];                for (var i = 0; i < sDatas.length; i++) {                    for (var j = 0; j < dDatas.length; j++) {                        valueStr = sDatas[i]["value"] + me.options.valueSplit + dDatas[j]["value"];                        textStr = sDatas[i]["text"] + me.options.textSplit + dDatas[j]["text"];                        node = {                            value: valueStr,                            text: textStr,                            data: {sNode: sDatas[i], dNode: dDatas[j]}                        };                        datas.push(node);                        if ("" === vValue[valueStr]) {                            value.push(node);                        }                    }                }                me.optionsList.setData(datas);                me.optionsList.setValue(value);            } else {                for (var i = 0; i < sDatas.length; i++) {                    for (var j = 0; j < dDatas.length; j++) {                        valueStr = sDatas[i]["value"] + me.options.valueSplit + dDatas[j]["value"];                        textStr = sDatas[i]["text"] + me.options.textSplit + dDatas[j]["text"];                        node = {                            value: valueStr,                            text: textStr,                            data: {sNode: sDatas[i], dNode: dDatas[j]}                        };                        datas.push(node);                    }                }                me.optionsList.setData(datas);            }        },        /**         * @private         * @description 下拉列表change时load数据处理         * @param {Object} value 下拉列表选中的值         * @param {Boolean} isSource 是否是源下拉列表         */        _doComboboxChange: function(value, isSource) {            var me = this,                    loader,                    dataKey,                    treeCmp,                    type,                    renderID,                    listData,                    listeners,                    treeCfg,                    isAll;            if (isSource) {                dataKey = "sData";                renderID = me.__sTreeRenderID;                treeCmp = me.sTree;            } else {                dataKey = "dData";                renderID = me.__dTreeRenderID;                treeCmp = me.dTree;            }            type = "tree";            loader = null;            listData = [];            if (me.options.data[dataKey]) {                for (var i = 0; i < me.options.data[dataKey].length; i++) {                    if (value["value"] == me.options.data[dataKey][i]["value"]) {                        isAll = me.options.data[dataKey][i]["isAll"];                        if (me.options.data[dataKey][i]["datasource"]) {                            type = me.options.data[dataKey][i]["datasource"]["type"];                            //默认用tree组件渲染                            if ("list" == type) {                                if (me.options.data[dataKey][i]["datasource"] && me.options.data[dataKey][i]["datasource"]["data"]) {                                    listData = me.options.data[dataKey][i]["datasource"]["data"];                                }                            } else {                                type = "tree";                                loader = $.objClone(me.options.data[dataKey][i]["datasource"]["loader"]);                                if (!$.isEmptyObject(loader)) {                                    listeners = loader["listeners"];                                    delete loader["listeners"];                                    if (!$.isEmptyObject(listeners)) {                                        for (var key in listeners) {                                            if (!(key == eventBeforeLoad || key == eventLoad)) {                                                delete listeners[key];                                            }                                        }                                    }                                } else {                                    listData = me.options.data[dataKey][i]["datasource"]["data"] || [];                                }                            }                        }                    }                }            }            if (treeCmp) {                treeCmp.destroy();            }            if ("tree" == type) {                treeCfg = {                    width: me.treeWidth,                    height: me.treeHeight,                    search: true,                    multi: true,                    tip: me.options.tip,                    icon: me.options.icon,                    useArrows: me.options.useArrows,                    renderTo: renderID                };                if (!$.isEmptyObject(listeners)) {                    treeCfg["listeners"] = listeners;                }                treeCmp = new Sweet.tree.Tree_v1(treeCfg);            } else {                treeCfg = {                    width: me.treeWidth,                    height: me.treeHeight,                    multi: true,                    search: true,                    all: isAll,                    tip: me.options.tip,                    isBorder: true,                    renderTo: renderID                };                treeCmp = new Sweet.list.OptimizeList(treeCfg);            }            if ("tree" == type && loader) {                treeCmp.setLoader(loader);                treeCmp.load();            } else {                treeCmp.setData(listData);            }            if (isSource) {                me.sTree = treeCmp;            } else {                me.dTree = treeCmp;            }        },        /**         * @private         * @description 将两个数组合并并去重         * @param {Array} arr1 合并数据         * @param {Array} arr2 合并数据         */        _deleteArraysSimilar: function(arr1, arr2) {            var result = [],                    transObj,                    totalData;            totalData = arr1.concat(arr2);            transObj = {};            for (var i = 0; i < totalData.length; i++) {                transObj[totalData[i].value] = totalData[i];            }            for (var key in transObj) {                result.push(transObj[key]);            }            return result;        },        /**         * @private         * @description 从数组中去除部分数据         * @param {Array} totalArr 总数据         * @param {Array} minusArr 去除数据         */        _minusArrays: function(totalArr, minusArr) {            var transObj = {},                    result = [];            for (var i = 0; i < totalArr.length; i++) {                transObj[totalArr[i].value] = totalArr[i];            }            for (var j = 0; j < minusArr.length; j++) {                delete transObj[minusArr[j].value];            }            for (var key in transObj) {                result.push(transObj[key]);            }            return result;        }    });    /**     * 双向列表(tree数据形式)组件     * @name Sweet.cmp.OfficeDirection_v1     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.widget.form.js     * jquery.sweet.widget.form.input.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree_v1.js     * jquery.sweet.list.js     * jquery.sweet.list.list.js     * jquery.sweet.cmp.optimizeList.js     * jquery.sweet.widget.form.combobox_v1.js     * jquery.sweet.widget.container.Vpanel.js     * </pre>     * @example      * <pre>     * var officeDirection_v1 = new Sweet.cmp.OfficeDirection_v1({     *     width: 600,     *     height: 600,     *     data: {     *          sData: [     *              {     *                  value: "MSC",     *                  text: "MSC",     *                  isAll: true,     *                  datasource: {     *                      type: "list",     *                      data: [{value: "msc1",text: "msc1"}, ...]     *                 }     *              },     *              {     *                  value: "CELL",     *                  text: "CELL",     *                  datasource: {     *                       type: "tree",     *                       loader: {     *                           url: "../data/data_officeDirection_v1.jsp",     *                           baseParams: {},     *                           loadMask: true,     *                           autoLoad: false,     *                           listeners: {     *                               beforeload: doBeforeLoad,     *                               load: doLoad     *                           }     *                       }     *                  }     *              },     *              ...     *          ],     *          dData: [...]     *     }     * });     * </pre>     */    Sweet.cmp.OfficeDirection_v1 = $.sweet.widgetCmpOfficeDirection_v1;}(jQuery));