/** * @fileOverview  * <pre> * 双向tree列表，提供搜索和移动功能 * 2014.06.26 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var treeWindowLPanelClass = "sweet-cmp-treewindow-lpanel",            treeWindowMPanelClass = "sweet-cmp-treewindow-mpanel",            treeWindowRPanelClass = "sweet-cmp-treewindow-rpanel",            treeWindowBtnPanelClass = "sweet-cmp-treewindow-btnpanel",            treeWindowTitleClass = "sweet-cmp-treewindow-title",            eventBeforeMoveRight = "beforemoveright",            eventBeforeLoad = "beforeload",            eventLoad = "load",            eventSearch = "search",            eventVCountChange = "vcountchange",            ACTION_BTNS = [                {                    value: "_moveRight",                    text: " > "                }, {                    value: "_moveLeft",                    text: " < "                }, {                    value: "_allMoveRight",                    text: " >> "                }, {                    value: "_allMoveLeft",                    text: " << "                }            ],            treeWindowPrefix = "sweet-treewindow",            uuid = uuid || 1000;    $.widget("sweet.widgetCmpTreeWindow", $.sweet.widgetCmp, /** @lends Sweet.cmp.TreeWindow*/{        version: "1.0",        sweetWidgetName: "[widget-cmp-treeWindow]",        type: 'treewindow',        eventNames: /** @lends Sweet.cmp.TreeWindow.prototype */{            /**             * @event             * @description 右移前事件             */            beforemoveright: "右移前事件",            /**             * @event             * @description 延迟加载数据时,左列表加载前事件,一般参数为(loader, tree),loader中的tParams记录了过滤信息,如果没有则没有tParams             */            beforeload: "延迟加载数据时,左列表加载前事件",            /**             * @event             * @description 延迟加载数据时,左列表数据加载回时事件,一般参数为(loader, tree),loader中datas为加载回来的数据,其中tParams记录了过滤信息,如果没有则没有tParams             */            load: "延迟加载数据时,左列表数据加载回时事件",            /**             * @event             * @description 右列表节点数量变化事件,右移、左移、setValue、右列表过滤时不管较之前数量有无变化都触发,一般参数为(count, treewindow)             */            vcountchange: "右列表节点数量变化事件"        },        options: /** @lends Sweet.cmp.TreeWindow*/{            /**             * 左列表数据             * @type Array             * @default []             */            data: [],            /**             * 右列表数据             * @type Array             * @default []             */            value: [],            /**             * 左列表title             * @type String             * @default ""             */            fromTitle: Sweet.cmp.i18n.listWindow.fromTitle,            /**             * 右列表title             * @type String             * @default ""             */            toTitle: Sweet.cmp.i18n.listWindow.toTitle,            /**             * 中间的button的宽度             * @type number             * @default 60             */            btnWidth: 60,            /**             * 是否有提示             * @type {Boolean}             * @default false             */            tip: false,            /**             * 是否显示树节点的图标             * @type {Boolean}             * @default true             */            icon: true,            /**             * 是否显示节点之间的连线             * @type {Boolean}             * @default true             */            useArrows: true,            /**             * 获值时需要取的节点数据key             * @type {Array}             * @default ["value", "text", "data", "icon"]             */            valueKeys: ["value", "text", "data", "icon"],            /**             * (暂不支持)左列表框父节点是否显示子节点个数,只针对非延迟加载且非编辑树,默认不显示,如果配置true/"true"则显示所有子节点个数,如果配置"leaf"只显示所有叶子节点个数             * @type {Boolean/String}             * @default false             */            lShowCCount: false,            /**             * 右列表框父节点是否显示子节点个数,只针对非延迟加载且非编辑树,默认不显示,如果配置true/"true"则显示所有子节点个数,如果配置"leaf"只显示所有叶子节点个数             * @type {Boolean/String}             * @default false             */            rShowCCount: false,            /**             * 延迟加载器:如果为延迟加载则配置,非延迟加载则不要配置             * {             *      url: "XXXX.action",              //请求数据的URL             *      baseParams: {param: xxxxx},      //提交的参数             *      autoLoad: true,                  //初始化时是否自动加载数据,默认为true                *      loadMask: true,                   //是否出遮罩             *      contentType: "application/json;charset=UTF-8"             * }             * @type {Object}             * @default null             */            loader: null        },        /**         * @description 获取数据         * @returns {Array} 返回右边列表的数据         */        getValue: function() {            var me = this,                    rOptObjDatas,                    value;            if (!me.rightTree) {                return [];            }            rOptObjDatas = me.rightTree.getCurrentOptObjData();            value = me._parseTreeDatas(rOptObjDatas);            return value;        },        /**         * @description 为源tree(左边的tree列表)设置数据,并且清除右边tree的数据         * @param {Array} data 数据结构必须是数组         */        setData: function(data) {            var me = this,                    value;            if (!me.leftTree || !me.rightTree) {                return;            }            //左树设置数据            me.leftTree.setData(data);            value = me.leftTree.getValue();            me._initExpanded(value);            //如果左树有选中,则设置给右树;否则清空右树            me.rightTree.setData(value);            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);        },        /**         * @description 为目的tree(右边的tree列表)设置数据并且全部选择上         * @param {Array} value 数据结构必须是数组         */        setValue: function(value) {            var me = this;            if (!me.leftTree || !me.rightTree) {                return;            }            me._initExpanded(value);            me.rightTree.setData(value);            me.leftTree.setValue(value);            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);        },        /**         * @description 设置组件加载器(只针对延迟加载数据时左树的loader设置)         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数         */        setLoader: function(loader) {            var me = this;            if (!me.leftTree) {                return;            }            if (me.options.loader && !loader) {                me._createMoveRightBtn();                me._createMoveLeftBtn();                me._createMoveAllRightBtn();                me._createMoveAllLeftBtn();                me.vpUp.removeItems();                me.vpDown.removeItems();                me.vpUp.addItems([me.moveRightBtn, me.moveLeftBtn]);                me.vpDown.addItems([me.moveAllRightBtn, me.moveAllLeftBtn]);            } else if (!me.options.loader && loader) {                me._createMoveRightBtn();                me._createMoveLeftBtn();                me.vpUp.removeItems();                me.vpDown.removeItems();                me.vpUp.addItems(me.moveRightBtn);                me.vpDown.addItems(me.moveLeftBtn);            }            me.options.loader = loader;            me.leftTree.setLoader(loader);        },        /**         * @description 组件重新加载数据         * @param {Object} loader 异步数据加载器,其中配有URL及请求参数         */        load: function(loader) {            var me = this,                    value;            if (!me.leftTree || !me.rightTree) {                return;            }            me.leftTree.load(loader);            value = me.leftTree.getValue();            me._initExpanded(value);            //如果左树有选中,则设置给右树;否则清空右树            me.rightTree.setData(value);            me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);        },        /**         * @description 销毁treeWindowow组件及其中的事件和数据等         */        _destroyWidget: function() {            var me = this;            me._super();            if (me.treeWindowEl) {                me.treeWindowEl.remove();            }            if (me.leftTree) {                me.leftTree.destroy();            }            if (me.vpBtns) {                me.vpBtns.destroy();            }            if (me.rightTree) {                me.rightTree.destroy();            }        },        /**         * @private         * @description 重写父类的渲染方法         * @param {string} id 渲染的id         */        _render: function(id) {            var me = this;            if (!me._super(id)) {                return false;            }            me.treeWindowEl.appendTo(me.renderEl);            me.leftTree.render(me.__leftTreeRenderID);            me.rightTree.render(me.__rightTreeRenderID);            me.vpBtns.render(me.__mOptBtnPanelRenderID);            //调整布局,当创建完再设置文本            me.lTitleEl.html(me.options.fromTitle);            me.rTitleEl.html(me.options.toTitle);            me.rendered = true;            return true;        },        /**         * @description 创建维度的选择框         * @private         */        _createTreeWindow: function() {            var me = this,                    btnWidth = me.options.btnWidth,                    //两个btn组的间距                    btnGroupPadding = 30,                    btnH = 23,                    btnGroupH = 60,                    listeners,                    tListeners,                    width,                    height,                    treeWidth,                    titleHeight,                    treeHeight,                    padding = 10,                    tBtnPadding = 5,                    btnPanelHeight,                    tSearchHeight = 30;            //事件处理            listeners = me.options["listeners"];            tListeners = {};            if (!$.isEmptyObject(listeners)) {                for (var key in listeners) {                    if (eventLoad == key || eventBeforeLoad == key) {                        tListeners[key] = listeners[key];                    }                    me.addListener(("" + key), listeners[key]);                }            }            //渲染时就设置宽高,如果不设置则开始渲染时dom布局有点乱            width = me.treeWindowEl.width();            height = me.treeWindowEl.height();            treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);            titleHeight = me.lTitleDiv.outerHeight();            treeHeight = height - titleHeight;            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;            if (me.options.loader) {                tBtnPadding = 10;            }            if (height < me.__tempHeight) {                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding + tSearchHeight) / 2);            } else {                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding) / 2);            }            //左树            me.leftTree = new Sweet.tree.Tree_v1({                width: treeWidth,                height: treeHeight,                search: true,                multi: true,                tip: me.options.tip,                valueKeys: me.options.valueKeys,                icon: me.options.icon,                useArrows: me.options.useArrows,                listeners: tListeners,                showCCount: me.options.lShowCCount,                loader: me.options.loader            });            //右树            me.rightTree = new Sweet.tree.Tree_v1({                width: treeWidth,                height: treeHeight,                search: true,                multi: true,                valueKeys: me.options.valueKeys,                tip: me.options.tip,                icon: me.options.icon,                useArrows: me.options.useArrows,                showCCount: me.options.rShowCCount,                data: me.options.value            });            //右移按钮            me._createMoveRightBtn();            //左移按钮            me._createMoveLeftBtn();            //如果为延迟加载则不提供全移操作            if (!me.options.loader) {                //全部右移按钮                me._createMoveAllRightBtn();                //全部左移按钮                me._createMoveAllLeftBtn();                me.vpUp = new Sweet.panel.VPanel({                    height: btnGroupH,                    width: btnWidth,                    items: [me.moveRightBtn, me.moveLeftBtn]                });                me.vpDown = new Sweet.panel.VPanel({                    height: btnGroupH,                    width: btnWidth,                    items: [me.moveAllRightBtn, me.moveAllLeftBtn]                });            } else {                me.vpUp = new Sweet.panel.VPanel({                    height: (btnGroupH + btnH),                    width: btnWidth,                    items: [me.moveRightBtn]                });                me.vpDown = new Sweet.panel.VPanel({                    height: (btnGroupH - btnH),                    width: btnWidth,                    items: [me.moveLeftBtn]                });            }            me.vpBtns = new Sweet.panel.VPanel({                height: btnPanelHeight,                padding: btnGroupPadding,                items: [me.vpUp, me.vpDown]            });        },        /**         * @private         * @description 创建右移按钮,并注册事件处理         */        _createMoveRightBtn: function() {            var me = this,                    btnWidth = me.options.btnWidth;            //右移按钮            me.moveRightBtn = new Sweet.form.Button({                value: ACTION_BTNS[0],                width: btnWidth            });            //右移事件            me.moveRightBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建左移按钮,并注册事件处理         */        _createMoveLeftBtn: function() {            var me = this,                    btnWidth = me.options.btnWidth;            //右移按钮            me.moveLeftBtn = new Sweet.form.Button({                value: ACTION_BTNS[1],                width: btnWidth            });            //右移事件            me.moveLeftBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建全部右移按钮,并注册事件处理         */        _createMoveAllRightBtn: function() {            var me = this,                    btnWidth = me.options.btnWidth;            //右移按钮            me.moveAllRightBtn = new Sweet.form.Button({                value: ACTION_BTNS[2],                width: btnWidth            });            //右移事件            me.moveAllRightBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建全部左移按钮,并注册事件处理         */        _createMoveAllLeftBtn: function() {            var me = this,                    btnWidth = me.options.btnWidth;            //右移按钮            me.moveAllLeftBtn = new Sweet.form.Button({                value: ACTION_BTNS[3],                width: btnWidth            });            //右移事件            me.moveAllLeftBtn.addListener("click", function(e, v) {                me._moveButtonClick(e, v);            });        },        /**         * @private         * @description 创建列表组件         */        _createSweetWidget: function() {            var me = this,                    id = me.options.id,                    widgetClass = me.options.widgetClass,                    lPanelDiv,                    rPanelDiv,                    value,                    change = {isChange: false};            //当高度小于300时,操作按钮以列表中间为准            me.__tempHeight = 300;            //主面板            me.treeWindowEl = $("<div>").attr("id", me.options.id);            if (widgetClass && "" != widgetClass) {                me.treeWindowEl.addClass(widgetClass);            }            //左面板:其中装有左title和左tree            lPanelDiv = $("<div>").addClass(treeWindowLPanelClass).appendTo(me.treeWindowEl);            //中间面板:其中装有操作button            me.mPanelDiv = $("<div>").addClass(treeWindowMPanelClass).height(me.options.height).appendTo(me.treeWindowEl);            //右面板:其中装有右title和右tree            rPanelDiv = $("<div>").addClass(treeWindowRPanelClass).appendTo(me.treeWindowEl);            me.lTitleDiv = $("<div>").appendTo(lPanelDiv);            me.lTitleEl = $("<span>").addClass(treeWindowTitleClass).appendTo(me.lTitleDiv);            //左树渲染的dom ID            me.__leftTreeRenderID = id + treeWindowPrefix + "-lefttree-" + uuid;            $("<div>").attr("id", me.__leftTreeRenderID).appendTo(lPanelDiv);            //右树渲染的dom ID            me.__rightTreeRenderID = id + treeWindowPrefix + "-righttree-" + uuid;            me.rTitleDiv = $("<div>").appendTo(rPanelDiv);            me.rTitleEl = $("<span>").addClass(treeWindowTitleClass).appendTo(me.rTitleDiv);            $("<div>").attr("id", me.__rightTreeRenderID).appendTo(rPanelDiv);            me.mTopDiv = $("<div>").appendTo(me.mPanelDiv);            //中间操作按钮panel渲染的dom ID            me.__mOptBtnPanelRenderID = id + treeWindowPrefix + "-optbtnpanel-" + uuid;            $("<div>").attr("id", me.__mOptBtnPanelRenderID).addClass(treeWindowBtnPanelClass).appendTo(me.mPanelDiv);            // 创建列表            me._createTreeWindow();            // 注册事件            me._registInitEvent();            //左树设置数据            if (me.options.data && me.options.data.length > 0) {                me.leftTree.setData(me.options.data);            }            value = me.leftTree.getValue();            if (me.options.value && me.options.value.length > 0) {                //合并                if (value && value.length > 0) {                    me._doCompoundTree(value, me.options.value, "value", change);                } else {                    value = me.options.value;                }            }            //如果左树有选中,则设置给右树;            if (value && value.length > 0) {                me._initExpanded(value);                me.rightTree.setData(value);                me._triggerHandler(me._getLeafCount(value), eventVCountChange, me);            }        },        /**         * @private         * @description 组件重绘         */        _doLayout: function() {            var me = this,                    btnWidth = me.options.btnWidth,                    btnGroupPadding = 30,                    btnGroupH = 60,                    btnPanelHeight,                    titleHeight,                    padding = 10,                    tBtnPadding = 5,                    width = me.treeWindowEl.width(),                    height = me.treeWindowEl.height(),                    treeWidth,                    treeHeight,                    tSearchHeight = 30;            width = me.treeWindowEl.width();            height = me.treeWindowEl.height();            treeWidth = Math.floor((width - btnWidth - padding * 2) / 2);            titleHeight = me.lTitleDiv.outerHeight();            treeHeight = height - titleHeight;            btnPanelHeight = 2 * btnGroupH + btnGroupPadding;            if (me.options.loader) {                tBtnPadding = 10;            }            if (height < me.__tempHeight) {                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding + tSearchHeight) / 2);            } else {                me.mTopDiv.width(btnWidth + padding * 2).height((height + titleHeight - btnPanelHeight + tBtnPadding) / 2);            }            me.mPanelDiv.height(height);            if (me.leftTree) {                me.leftTree.setWH(treeWidth, treeHeight);                me.leftTree.doLayout(true);            }            if (me.rightTree) {                me.rightTree.setWH(treeWidth, treeHeight);                me.rightTree.doLayout(true);            }        },        /**         * @private         * @description 移动操作处理         * @param {Object} e 事件对象         * @param {Object} v 点击btn的value         */        _moveButtonClick: function(e, v) {            var me = this;            switch (v.value) {                case ACTION_BTNS[0].value :                    me.moveRight();                    break;                case ACTION_BTNS[1].value :                    me.moveLeft();                    break;                case ACTION_BTNS[2].value :                    me.moveAllRight();                    break;                case ACTION_BTNS[3].value :                    me.moveAllLeft();                    break;            }        },        /**         * @description 右移操作处理         */        moveRight: function() {            var me = this,                    lValue = [],                    rDatas,                    flag,                    change = {isChange: false};            if (!me.leftTree || !me.rightTree) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            lValue = me.leftTree.getValue();            //左侧没有选择数据时，不进行处理            if (!lValue || lValue.length <= 0) {                me.__isDoMoving = false;                return;            }            //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边            rDatas = me.rightTree.getCurrentOptObjData();            if (!$.isEmptyObject(rDatas)) {                rDatas = me._parseTreeDatas(rDatas);                me._doCompoundTree(rDatas, lValue, "value", change);            } else {                change["isChange"] = true;                rDatas = lValue;            }            //如果右列表有过滤则置为true            if (me.rightTree.searchField && me.rightTree.searchField.getValue() && me.rightTree.searchField.getValue()["value"]) {                change = {isChange: true};            }            //左右数据不一致时才setData            if (change && change["isChange"]) {                flag = me._triggerHandler(rDatas, eventBeforeMoveRight, me);                if (false === flag || "false" === flag) {                    me.__isDoMoving = false;                    return;                }                me._initExpanded(rDatas);                me.rightTree.setData(rDatas);            }            me.__isDoMoving = false;            me._triggerHandler(me._getLeafCount(rDatas), eventVCountChange, me);        },        /**         * @description 左移操作处理         */        moveLeft: function() {            var me = this,                    rObjDatas,                    rValue,                    rValueListDatas = [],                    rValueObjDatas = {},                    lSelectedDatas,                    lValue;            if (!me.leftTree || !me.rightTree) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            rValue = me.rightTree.getValue();            //如果右侧没有选择,则不做操作            if (!rValue || rValue.length <= 0) {                me.__isDoMoving = false;                return;            }            //解析value数据            me.rightTree.parseDatas(rValue, rValueListDatas, rValueObjDatas, "", false, null);            //拿到右树所有的数据            rObjDatas = me.rightTree.getCurrentObjData();            rValueListDatas = null;            lSelectedDatas = me.leftTree.getSelectedDatas() || {};            //从右树中删除选中的节点            for (var key in rValueObjDatas) {                if (rValueObjDatas[key]["leaf"]) {                    delete rObjDatas[key];                    delete lSelectedDatas[key];                }            }            rValueObjDatas = null;            rObjDatas = me._parseTreeDatas(rObjDatas);            me._initExpanded(rObjDatas);            me.rightTree.setData(rObjDatas);            lValue = me._parseTreeValues(lSelectedDatas);            me.leftTree.setValue(lValue);            me.__isDoMoving = false;            me._triggerHandler(me._getLeafCount(rObjDatas), eventVCountChange, me);        },        /**         * @description 全部右移操作处理         */        moveAllRight: function() {            var me = this,                    lDatas,                    lOptObjDatas,                    rOptObjDatas,                    flag,                    change = {isChange: false};            if (!me.leftTree || !me.rightTree) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            lOptObjDatas = me.leftTree.getCurrentOptObjData();            //如果左侧没有操作数据,则不做操作            if ($.isEmptyObject(lOptObjDatas)) {                me.__isDoMoving = false;                return;            }            //如果右边已经有数据，需要先将右边的数据和左边的数据合并进行去重复，再设置到右边            rOptObjDatas = me.rightTree.getCurrentOptObjData();            lDatas = me._parseTreeDatas(lOptObjDatas);            if (!$.isEmptyObject(rOptObjDatas)) {                rOptObjDatas = me._parseTreeDatas(rOptObjDatas);                me._doCompoundTree(rOptObjDatas, lDatas, "value", change);            } else {                change["isChange"] = true;                rOptObjDatas = lDatas;            }            //如果右列表有过滤则置为true            if (me.rightTree.searchField && me.rightTree.searchField.getValue() && me.rightTree.searchField.getValue()["value"]) {                change = {isChange: true};            }            //左右数据不一致时才setData            if (change && change["isChange"]) {                //左右树数据不一样时触发右移事件                flag = me._triggerHandler(rOptObjDatas, eventBeforeMoveRight, me);                if (false === flag || "false" === flag) {                    me.__isDoMoving = false;                    return;                }                me._initExpanded(rOptObjDatas);                me.rightTree.setData(rOptObjDatas);            } else {                me.rightTree.searchField.setValue({value: "", text: ""});            }            me.__isDoMoving = false;            me._triggerHandler(me._getLeafCount(rOptObjDatas), eventVCountChange, me);        },        /**         * @description 全部左移操作处理         */        moveAllLeft: function() {            var me = this,                    rObjDatas,                    rOptObjDatas;            if (!me.leftTree || !me.rightTree) {                return;            }            //本次移动未完成,禁止下次移动操作            if (me.__isDoMoving) {                return;            }            me.__isDoMoving = true;            me.leftTree.setValue(null);            rOptObjDatas = me.rightTree.getCurrentOptObjData();            //如果右侧没有操作数据,则不做操作            if ($.isEmptyObject(rOptObjDatas)) {                me.__isDoMoving = false;                return;            }            rObjDatas = me.rightTree.getCurrentObjData();            for (var key in rOptObjDatas) {                if (rOptObjDatas[key]["leaf"]) {                    delete rObjDatas[key];                }            }            rObjDatas = me._parseTreeDatas(rObjDatas);            me._initExpanded(rObjDatas);            me.rightTree.setData(rObjDatas);            me.__isDoMoving = false;            me._triggerHandler(me._getLeafCount(rObjDatas), eventVCountChange, me);        },        /**         * @private         * @description 获取组件中选择的节点数据,以树型结构返回选中的节点数据数组         * @param {Object} selectedDatas 选择节点信息         * @return {Array} 选中值,格式：[{text:'text1',value:'value1',children: [...]},...]         */        _parseTreeValues: function(selectedDatas) {            var me = this,                    result = {},                    keys = me.options.valueKeys,                    tree,                    tDatas,                    objDatas;            if (!me.leftTree || $.isEmptyObject(selectedDatas)) {                return [];            }            tree = me.leftTree;            if (!me.options.loader) {                objDatas = me.leftTree.getCurrentObjData();            } else {                objDatas = me.leftTree.getCurrentOptObjData();            }            //从当前操作的数据中还原选中数据            tree.parseTreeDatas(selectedDatas, objDatas, keys, result);            if (!result["data"]) {                return [];            }            tDatas = $.objClone(result["data"]);            return tDatas;        },        /**         * @private         * @description 获得一棵树型数据         * @param {Object} datas 待转化的数据         * @returns {Array} 返回一棵树型数据         */        _parseTreeDatas: function(datas) {            var me = this,                    tempTreeDatas,                    leafDatas,                    tree,                    valueKeys = me.options.valueKeys;            if (!me.leftTree && !me.rightTree) {                return [];            }            tree = me.leftTree || me.rightTree;            tempTreeDatas = {};            leafDatas = {};            for (var key in datas) {                if (datas[key]["leaf"]) {                    leafDatas[key] = datas[key];                }            }            tree.parseTreeDatas(leafDatas, datas, valueKeys, tempTreeDatas);            if (tempTreeDatas["data"]) {                tempTreeDatas = tempTreeDatas["data"];            } else {                tempTreeDatas = [];            }            return tempTreeDatas;        },        /**         * @private         * @description 将两棵树合并成一棵树         * @param {Array} nodes1 树1         * @param {Array} nodes2 树2         * @param {Object} attr 标识节点的KEY         * @param {Object} change 两棵树的数据是否一样         */        _doCompoundTree: function(nodes1, nodes2, attr, change) {            var me = this,                    flag;            for (var i = 0; i < nodes2.length; i++) {                flag = true;                nodes2[i].checked = false;                for (var j = 0; j < nodes1.length; j++) {                    if (nodes2[i][attr] == nodes1[j][attr]) {                        if (nodes2[i].children && nodes2[i].children.length > 0 && nodes1[j].children && nodes1[j].children.length > 0) {                            me._doCompoundTree(nodes1[j].children, nodes2[i].children, attr, change);                        }                        if (nodes2[i].children && nodes2[i].children.length > 0 && (!nodes1[j]["children"] || nodes1[j].children.length <= 0)) {                            nodes1[j].children = [];                            me._doCompoundTree(nodes1[j].children, nodes2[i].children, attr, change);                        }                        flag = false;                        break;                    }                }                if (flag) {                    change["isChange"] = true;                    nodes1.push(nodes2[i]);                }            }        },        /**         * @private         * @description 获取树叶子节点个数         * @param {Object} datas 待获取叶子节点的数据         * @param {Boolean} isObject 是否是对象         * @returns {Number} 返回叶子节点个数         */        _getLeafCount: function(datas, isObject) {            var me = this,                    tDatas = [],                    count = 0;            if (isObject) {                if ($.isEmptyObject(datas)) {                    return count;                }                for (var key in datas) {                    if (datas[key] && (true == datas[key]["leaf"] || "true" == datas[key]["leaf"])) {                        count++;                    }                }                return count;            }            if ($.isNull(datas)) {                datas = [];            }            if (!$.isArray(datas)) {                datas = [datas];            }            if (datas.length <= 0) {                return count;            }            me._getLeafDatas(datas, tDatas);            count = tDatas.length;            return count;        },        /**         * @private         * @description 获取树叶子节点数据         * @param {Array} datas 待获取叶子节点的数据         * @param {Array} result 待返回叶子节点的数据         * @returns {Array} result 返回叶子节点的数据         */        _getLeafDatas: function(datas, result) {            var me = this;            for (var i = 0; i < datas.length; i++) {                if (datas[i]) {                    if (datas[i]["children"] && datas[i]["children"].length > 0) {                        me._getLeafDatas(datas[i]["children"], result);                    } else {                        result.push(datas[i]);                    }                }            }            return result;        },        /**         * 将所有的父节点展开         * @param {Array} datas 待转化数据         * @return {TypeName}          */        _initExpanded: function(datas) {            var me = this,                    childrens;            if (!datas) {                return [];            }            for (var i = 0; i < datas.length; i++) {                childrens = datas[i].children;                if (childrens && childrens.length > 0) {                    datas[i].expanded = true;                    me._initExpanded(childrens);                }            }        },        /**         * @private         * @description 获取组件宽度         */        _getWidth: function() {            return this.treeWindowEl.externalWidth();        },        /**         * @private         * @description 获取组件高度         */        _getHeight: function() {            return this.treeWindowEl.externalHeight();        },        /**         * @private         * @description 设置组件宽度         * @param {Number/String} width 宽度         */        _setWidth: function(width) {            this.treeWindowEl.externalWidth(width);        },        /**         * @private         * @description 设置组件高度         * @param {Number/String} height 高度         */        _setHeight: function(height) {            this.treeWindowEl.externalHeight(height);        },        /**         * @private         * @description 设置组件宽度、高度         * @param {Number/String} width 宽度         * @param {Number/String} height 高度         */        _setWH: function(width, height) {            var me = this;            me.treeWindowEl.externalWidth(width);            me.treeWindowEl.externalHeight(height);        },        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */        _triggerHandler: function(e, eName, data) {            var me = this,                    result;            if ($.isNull(me.handlers)) {                return;            }            $.each(me.handlers, function(handlerName, func) {                // 回调注册事件                if (eName === handlerName) {                    result = func.call(null, e, data);                }            });            return result;        },        /**         * @private         * @description 注册事件         */        _addListener: function() {            var me = this;            $.each(me.handlers, function(eventName, func) {                if (me.leftTree && (eventName === eventBeforeLoad || eventName === eventLoad)) {                    me.leftTree.addListener(eventName, func);                }            });        },        /**         * @private         * @description 删除注册监听事件         * @param {String} eventName 事件名称         */        _removeListener: function(eventName) {            var me = this;            if (!$.isNull(eventName)) {                if (me.leftTree && (eventName === eventBeforeLoad || eventName === eventLoad)) {                    me.leftTree.removeListener(eventName);                }            }        },        /**         * @private         * @description 注册事件         */        _registInitEvent: function() {            var me = this;            me.leftTree.addListener(eventBeforeLoad, function(loader, lTree) {                me._triggerHandler(loader, eventBeforeLoad, lTree);            });            me.leftTree.addListener(eventLoad, function(loader, lTree) {                me._triggerHandler(loader, eventLoad, lTree);            });            me.rightTree.addListener(eventSearch, function(datas, rTree) {                me._triggerHandler(me._getLeafCount(datas, true), eventVCountChange, me);            });        }    });    /**     * 双向列表(tree数据形式)组件     * @name Sweet.cmp.TreeWindow     * @class      * @extends jquery.sweet.cmp.js     * @requires         * <pre>     * jquery.sweet.cmp.js     * jquery.ui.core.js     * jquery.ui.widget.js     * jquery.sweet.widget.js     * jquery.sweet.tree.js     * jquery.sweet.tree.tree_v1.js     * </pre>     * @example      * <pre>     * sweetTreeWindow = new Sweet.cmp.TreeWindow({     *     width: 800,     *     height: 400,     *     data: datas,     *     fromTitle: 'BSC for selected',     *     toTitle: 'has selected BSC'     * });     * </pre>     */    Sweet.cmp.TreeWindow = $.sweet.widgetCmpTreeWindow;}(jQuery));