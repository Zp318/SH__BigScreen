/** * @fileOverview   * <pre> * 列表组件 * 2013/12/28 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var listSelectBgClass = "sweet-list-optimizelist-body",            listBodyResizeElClass = "sweet-form-body-resizeEl",            listBodyResizeXYElClass = "sweet-form-body-resizeXYEl",            listBodyResizeXlElClass = "sweet-form-body-resizeXlEl",            listBodyResizeXrElClass = "sweet-form-body-resizeXrEl",            listBodyResizeYtElClass = "sweet-form-body-resizeYtEl",            listBodyResizeYbElClass = "sweet-form-body-resizeYbEl",            listSelectBgBorderClass = "sweet-list-optimizelist-body-border",            listViewBarUlClass = "sweet-list-optimizelist-viewbar-body",            listSelectUlClass = "sweet-list-optimizelist-ul",            listScrollDivClass = "sweet-list-optimizelist-scorll",            listSelectLiClass = "list-select",            listSelectLiAll = "sweet-list-optimizelist-select-all",            listListSelectConItem = "sweet-list-optimizelist-select-item",            listListAction = "sweet-list-optimizelist-action",            listListSelectConUncheck = "sweet-form-checkbox-unchecked",            listListSelectConCheck = "sweet-form-checkbox-checked",            listPrefix = "sweet-list-optimizelist-",            defaultPaddingDivDisabledClass = "sweet-list-optimizelist-disabled",            listSearchClass = "sweet-list-optimizelist-search",            listListSeclectConCheckDisabled = "sweet-form-checkbox-checked-disabled",            listListSeclectConUncheckDisabled = "sweet-form-checkbox-unchecked-disabled",            listLeftClass = "left",            listCloseClass = "close",            listEditClass = "edit",            listDeleteClass = "delete",            eventChange = "change",            eventAfterSetData = "afterSetData",            eventAfterSetValue = "afterSetValue",            eventCheckboxClick = "checkboxClick",            eventCheckboxAllClick = "checkboxAllClick",            eventCheckChange = "checkchange",            eventBeforeCheckChange = "beforecheckchange",            eventNodeClick = "nodeClick",            eventBeforeCheckboxClick = "beforeCheckboxClick",            eventDbClick = "dblclick",            eventEditClick = "edit",            eventDeleteClick = "delete",            eventBeforeSearch = "beforesearch",            eventSearch = "search",            eventResizeLayout = "resizeLayout",            eventResizeElMove = "resizeElMove",            i18n = Sweet.core.i18n.list,            hrefScript = Sweet.constants.HREFSCRIPT,            uuid = uuid || 1000;    $.widget("sweet.widgetListList", $.sweet.widgetList, /** @lends Sweet.list.OptimizeList.prototype*/{        version: "1.0",        sweetWidgetName: "[widget-list-OptimizeList]",        type: 'list',        eventNames: /** @lends Sweet.list.OptimizeList.prototype*/{            /**             * @event             * @description 值改变时事件,一般两个参数(evt, data)             */            change: "值改变时事件",            /**             * @event             * @description 调用完setData方法后事件,一般两个参数(evt, data)             */            afterSetData: "调用完setData方法后事件",            /**             * @event             * @description setValue执行后触发,一般两个参数(evt, data)             */            afterSetValue: "setValue执行后触发",            /**             * @event             * @description 复选框状态改变时事件,一般两个参数(evt, data)             */            checkboxClick: "复选框状态改变时事件",            /**             * @event             * @description 全选复选框点击事件,一般两个参数(evt, data)             */            checkboxAllClick: "全选复选框点击事件",            /**             * @event             * @description 节点状态改变时事件,一般参数为({node: node, checked: checked}, this)             */            checkchange: "节点状态改变时事件",            /**             * @event             * @description 节点状态改变前事件,一般参数为({node: node, checked: checked}, this)             */            beforecheckchange: "节点状态改变前事件",            /**             * @event             * @description 点击树列表节点,一般两个参数(evt, data)             */            nodeClick: "点击树列表节点",            /**             * @event             * @description 查询前事件,如果返回为false则不做过滤处理,一般两个参数({filter: xxxx}, tree/list, me)             */            beforesearch: "查询前事件",            /**             * @event             * @description 查询事件,一般两个参数({filter: xxxx}, tree/list, me)             */            search: "查询事件",            /**             * @event             * @description 点击checkBox之前的事件(checkBox状态改变前的时候触发),一般两个参数(evt, data)             */            beforeCheckboxClick: "点击checkBox之前的事件(checkBox状态改变前的时候触发)",            /**             * @event             * @description 列表行双击事件,一般两个参数(evt, data)             */            dblclick: "列表行双击事件",            /**             * @event             * @description 行图片编辑事件，暂时未实现,一般两个参数(evt, data)             */            edit: "行图片编辑事件",            /**             * @event             * @description 行图片删除事件,一般两个参数(evt, data)             */            delete: "行图片删除事件",            /**             * @event             * @description 缩放刷新后事件,一般两个参数(renderEl, me)             */            resizeLayout: "缩放刷新后事件",            /**             * @event             * @description 虚线框缩放事件,一般两个参数({offset: offset, resizeInfo: resizeInfo, resizeType: "xy"}, me)             */            resizeElMove: "虚线框缩放事件"        },        options: /** @lends Sweet.list.OptimizeList.prototype*/{            /**             * 基础数据             * @type {Object}             * @default null             */            data: null,            /**             * 多选属性             * @type {Boolean}             * @default false             */            multi: false,            /**             * 是否显示搜索框             * @type {Boolean}             * @default false             */            search: false,            /**             * 是否有提示             * @type {Boolean}             * @default false             */            tip: false,            /**             * 是否禁用list组件             * @type {Boolean}             * @default false             */            disabled: false,            /**             * 是否有全选功能             * @type {Boolean}             * @default false             */            all: false,            /**             * 多选时，必须保留选中的个数             * @type {Number}             * @default 0             */            minRemains: 0,            /**             * 多选时，最多保留选中个数             * @type {Number}             * @default Number.MAX_VAULE             */            maxRemains: Number.MAX_VALUE,            /**             * 行工具栏图标，现在只支持delete             * @type {Array}             * @default null             */            tools: null,            /**             * 查看已选择操作条             * @type {Boolean}             * @default false             */            sViewBar: false,            /**             * 最外层是否有边框             * @type {Boolean}             * @default false             */            isBorder: false,            /**             * 下拉框是否支持缩放,支持三种情况: 全缩放(true/"xy"),宽度缩放"x",高度缩放"y"             * @type {Boolean/String}             * @default false             */            resizAble: false,            /**             * 以毫秒表示的从开始输入到发出查询语句过滤下拉列表的时长, 默认350毫秒               * @type {Number}             * @default 350             */            queryDelay: 350        },        /**         * @description 创建列表组件         * @private         */        _createListWidget: function() {            var me = this,                    queryDelay = 350,                    id = me.options.id,                    listDiv = me.listDiv = $("<div>"),                    listBodyDiv = me.listBodyDiv = $("<div>");            // 总数据            me.data = me.options.data || [];            // 操作时的数据            me.opDatas = me.options.data || [];            // 设置为null,减小内存开支            me.options.data = null;            // 数据总长度            me.dataLength = me.data.length;            // 存储全部数据对象            me.valueObjs = {};            // 每个选项的高度            me.liHeight = 22;            //每个编辑项的宽度            me.editItemWidth = 30;            // 搜索框高            me.searchFieldHeight = 25;            // 每页渲染条数            me.renderSize = 10;            // 保存选中数据            me.selectedData = {};            // 选中数据个数            me.selectedDataLength = 0;            // 如果超过这个数,则延迟渲染,否则一次性渲染            me.limitCount = 300;            // 标识可编辑下,当delete到第一次达到一次性渲染count时设为true            me.isFirstDelLimitCount = false;            // 标识查看已选中项时,选中项的个数少于count时设为true            me.isFirstSLimitCount = false;            // 临时LI的TOP,用于LI预渲染时取最大宽度用            me.tempRenderTop = -100;            // 增加搜索框            if (me.options.search) {                //过滤延时处理                queryDelay = parseInt(me.options.queryDelay);                if (isNaN(queryDelay)) {                    queryDelay = 350;                }                if (queryDelay < 0) {                    queryDelay = 0;                }                me.searchFiedlDiv = $("<div>").attr("id", id + listPrefix + uuid + "search")                        .appendTo(me.listEl)                        .addClass(listSearchClass);                me.searchField = new Sweet.form.SearchField({                    width: me.options.width,                    emptyText: Sweet.core.i18n.tree.search                });                me.searchField.addListener("keyup", function(e, data) {                    Sweet.Task.Delay.start({                        id: me.options.id + "-optmizeList-filter-delay1",                        run: function(args) {                            me.filter(args);                        },                        args: data.value,                        delay: queryDelay                    });                });                me.searchField.addListener("click", function(e, data) {                    Sweet.Task.Delay.start({                        id: me.options.id + "-optmizeList-filter-delay2",                        run: function(args) {                            me.filter(args);                        },                        args: data.value,                        delay: queryDelay                    });                });                listDiv.addClass(listSelectBgClass);            }            if (me.options.isBorder) {                listDiv.addClass(listSelectBgBorderClass);            }            listDiv.appendTo(me.listEl);            // 是否有显示条功能            if (me.options.sViewBar) {                me._createSViewBar();            }            // 是否有全选功能            if (me.options.all && me.options.multi) {                me.allEl = me._addAllLiNode({"value": "sweet-all", "text": Sweet.core.i18n.combobox.checkAll})                        .appendTo(listDiv);                // 绑定全选事件                me.allEl.bind("click", {"me": me, data: {"value": "sweet-all", "text": Sweet.core.i18n.combobox.checkAll}}, me._onAllClick);                me.allAEl = me.allEl.find("a");                // 分隔线                me.separateEl = $("<div>").addClass("sweet-form-combobox-partitionLine").appendTo(listDiv);            }            listBodyDiv.addClass(listScrollDivClass);            me.listUI = $("<ul>").addClass(listSelectUlClass)                    .appendTo(listBodyDiv);            listBodyDiv.appendTo(listDiv);            //缩放处理            if (me.options.resizAble) {                me.__doCreateResizeEl();            }            // 滚动条事件处理            if (me.opDatas.length > me.limitCount) {                me._doScrollEvent();            }        },        /**         * @description 设置组件中的节点         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         * @param {Boolean} isAppend 是否是追加新的树节点         * @param {Number} total 总条数         */        setData: function(data, isAppend, total) {            var me = this,                    value = me.options.value;            if (me.options.disabled) {                return;            }            if ($.isNull(data)) {                data = [];            }            me.isAppend = isAppend;            total = parseInt(total);            if (isNaN(total)) {                total = null;            }            me._total = total;            me._reset();            value = value || [];            if (!$.isArray(value)) {                value = [value];            }            me.selectedDataLength = value.length;            for (var i = 0; i < me.selectedDataLength; i++) {                me.selectedData[value[i]["value"]] = value[i];            }            me._removeAllNodeList();            if (!isAppend) {                me.data = data;                me.opDatas = data;                me.dataLength = data.length;            } else {                me.data = me.data.concat(data);                me.opDatas = $.objClone(me.data);                me.dataLength = me.data.length;            }            // 如果有search框,则清除过滤信息            if (me.searchField) {                me.searchField.setValue({value: "", text: ""});            }            me._setData(me.opDatas);            // 如果没有value则不setValue,如果有value则setValue并触发change事件            if (me.selectedDataLength > 0) {                me.setValue(value);            } else {                // 如果有全选复选框，将全选框勾选去掉                if (me.options.all && me.options.multi) {                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                }            }            if (me.options.sViewBar) {                if (me._total && me._total > 0) {                    me._setTotalElCount(me._total);                } else {                    me._setTotalElCount(me.dataLength);                }                me._setSelectedSpanElCount(me.selectedDataLength);            }            me._triggerHandler(null, eventAfterSetData, $.objClone(me.data));        },        /**         * @description 取得List的所有数据         * @returns {Array/Object} data 返回List的所有数据         */        getData: function() {            return $.objClone(this.data);        },        /**         * @description 设置值         * @param {Array} value 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text2',value:'value2'},...]         * @param {Boolean} isFillValue 针对下拉列表型setValue时,是否通过value值从原数据中补全本次设置值         */        setValue: function(value, isFillValue) {            var me = this,                    vLength,                    liEls,                    checkboxEl,                    isCheck,                    msg,                    tLength;            if (me.options.disabled) {                return;            }            value = value || [];            if (!$.isArray(value)) {                value = [$.objClone(value)];            }            vLength = value.length;            // 对于单选,如果设置了多个值,则取第一个            if (!me.options.multi && vLength > 1) {                value = [value[0]];                vLength = 1;            }            if (isFillValue) {                for (var i = 0; i < value.length; i++) {                    for (var j = 0; j < me.data.length; j++) {                        if (me.data[j]["value"] == value[i]["value"]) {                            $.extend(value[i], me.data[j]);                        }                    }                }            }            // 最少保留个数校验            if (me.options.multi && vLength < me.options.minRemains) {                msg = Sweet.core.i18n.list.minRemains;                Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));                return;            }            // 最多保留个数校验            if (me.options.multi && vLength > me.options.maxRemains) {                msg = Sweet.core.i18n.list.maxRemains;                Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));                return;            }            me._reset();            me.selectedDataLength = vLength;            for (var i = 0; i < me.selectedDataLength; i++) {                me.selectedData[value[i]["value"]] = value[i];            }            // 如果有全选复选框，判断是否全部选中            if (me.options.all && me.options.multi) {                tLength = me.dataLength;                if (me._total && me._total > 0) {                    tLength = me._total;                }                if (me.dataLength > 0 && me.selectedDataLength >= tLength) {                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                } else {                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                }            }            if (me.options.sViewBar) {                me._setSelectedSpanElCount(me.selectedDataLength);            }            liEls = me.listUI.find("li");            // 选中列            if (me.options.multi) {                $.each(liEls, function(index, obj) {                    isCheck = me.selectedData[$(obj).data("value")] ? true : false;                    checkboxEl = $(obj).children("a");                    if (checkboxEl && checkboxEl.length > 0) {                        if (isCheck) {                            checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                        } else {                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        }                    }                });            } else {                $.each(liEls, function(index, obj) {                    isCheck = me.selectedData[$(obj).data("value")] ? true : false;                    $(obj).removeClass(listListAction);                    if (isCheck) {                        $(obj).addClass(listListAction);                    }                });            }            if (me.listBodyDiv) {                me.listBodyDiv.triggerHandler("scroll");            }            // 触发change事件            me._triggerHandler(null, eventChange, me._getValue());            // 触发afterSetValue事件            me._triggerHandler(null, eventAfterSetValue, me._getValue());        },        /**         * @description 过滤         * @param {String} value 过滤的字符串         */        filter: function(value) {            var me = this,                    filterDatas = [],                    patt,                    flag,                    tFilter,                    tLength;            me._info("filter value: " + value);            tFilter = {filter: value};            flag = me._triggerHandler(tFilter, eventBeforeSearch, me);            if (false === flag || "false" === flag) {                return;            }            if (me.searchField) {                me.searchField.setDisabled(true);            }            value = tFilter["filter"];            if (!$.isNotNull(value)) {                me.opDatas = me.data;            } else {                patt = new RegExp($.regExp.escape(value), "i");                for (var i = 0; i < me.data.length; i++) {                    if (patt.test(me.data[i]["text"])) {                        filterDatas.push(me.data[i]);                    }                }                me.opDatas = filterDatas;            }            if (me.options.all && me.options.multi) {                tLength = me.dataLength;                if (me._total && me._total > 0) {                    tLength = me._total;                }                if (me.dataLength > 0 && me.selectedDataLength >= tLength) {                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                } else {                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                }            }            me._triggerHandler(me.opDatas, eventSearch, me);            me._setData(me.opDatas);            if (me.searchField) {                me.searchField.setDisabled(false);            }        },        /**         * @public         * @description 返回当前界面看到的数据,例如过滤后，此方法可以取得所有过滤出来的数据         * @returns {Array} 返回当前界面看到的数据         */        getCurrentData: function() {            return $.objClone(this.opDatas);        },        /**         * @private         * @description 拿到当前值,不包含隐藏选中的数据         * @returns {Array} result 值array         */        getCurrentValue: function() {            var me = this,                    result = [],                    value = me._getValue(),                    currentData = me.opDatas,                    tempObjData = {};            if (!value || value.length <= 0) {                return result;            }            if (!currentData || currentData.length <= 0) {                return result;            }            for (var i = 0; i < currentData.length; i++) {                tempObjData[currentData[i]["value"]] = currentData[i];            }            for (var i = 0; i < value.length; i++) {                if (tempObjData[value[i]["value"]]) {                    result.push(value[i]);                }            }            tempObjData = null;            return result;        },        /**         * @private         * @description 设置宽度         * @param {String/Number} width 宽度         */        _setWidth: function(width) {            var me = this;            if (!width || width < 0) {                return;            }            me.width = width;            me.listEl.externalWidth(width);        },        /**         * @private         * @description 设置高度         * @param {String/Number} height 高度         */        _setHeight: function(height) {            var me = this;            if (!height || height < 0) {                return;            }            me.height = height;            me.listEl.externalHeight(height);        },        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */        _setWH: function(width, height) {            var me = this;            me.width = width;            me.height = height;            me.listEl.externalWidth(width).externalHeight(height);        },        /**         * @private         * @description 获取宽度         * @returns {Number} 返回宽度         */        _getWidth: function() {            var me = this;            return me.listEl.externalWidth();        },        /**         * @private         * @description 获取高度         * @returns {Number} 返回高度         */        _getHeight: function() {            var me = this;            return me.listEl.externalHeight();        },        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */        resizeLayout: function(width, height) {            var me = this,                    listBodyDiv = me.listBodyDiv[0],                    _scrollTop = listBodyDiv.scrollTop,                    _scrollLeft = listBodyDiv.scrollLeft,                    _sscrollTop = 0,                    _sscrollLeft = 0,                    isSViewBar = false;            if (me.options.sViewBar && me.sListBodyDiv && me.sListBodyDiv.length > 0) {                isSViewBar = true;                _sscrollTop = me.sListBodyDiv[0].scrollTop;                _sscrollLeft = me.sListBodyDiv[0].scrollLeft;            }            me.setWH(width, height);            listBodyDiv.scrollTop = _scrollTop;            listBodyDiv.scrollLeft = _scrollLeft;            if (isSViewBar) {                me.sListBodyDiv[0].scrollTop = _sscrollTop;                me.sListBodyDiv[0].scrollLeft = _sscrollLeft;            }            me._triggerHandler(me.renderEl, eventResizeLayout, me);        },        /**         * @private         * @description 设置数据         */        _setData: function() {            var me = this,                    listUI = me.listUI,                    listBodyDiv = me.listBodyDiv;            // 初始化时让滚动条置顶				            listBodyDiv[0].scrollTop = 0;            listUI.find("li").remove();            // 恢复到初始值            me.isFirstDelLimitCount = false;            me._doLayout();        },        /**         * @private         * @description 生成列表全选的li标签         * @param {Object} nodeCfg 节点信息         * @returns {Object} liEl 当前操作的LI         */        _addAllLiNode: function(nodeCfg) {            var me = this,                    liEl,                    aEl,                    spanEl,                    text,                    qtip,                    listUI = me.listUI;            text = $.nullToString(nodeCfg.text);            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass + " " + listSelectLiAll);            // 创建时需要判断全选是否选中            aEl = $("<a>").addClass(listListSelectConUncheck).appendTo(liEl);            spanEl = $("<span>").text(text).appendTo(liEl);            // 是否有tip提示            if (me.options.tip) {                qtip = nodeCfg["qtip"];                if (undefined === qtip || null === qtip) {                    qtip = nodeCfg.text;                }                spanEl.attr("title", qtip);            }            liEl.appendTo(listUI);            return liEl;        },        /**         * @private         * @description 主区域滚动加载事件处理         */        _doScrollEvent: function() {            var me = this,                    sScrollHight = 0,                    sScrollTop = 0,                    sDivHight = 0,                    startIndex = 0,                    listBodyDiv = me.listBodyDiv,                    rDatas = [],                    isLast = false,                    tempStart = 0;            // 先清楚绑定的scroll事件            listBodyDiv.unbind("scroll");            listBodyDiv.scroll(function(e) {                // 如果是横向滚动条滚动,则不处理                if (sScrollTop == $(this)[0].scrollTop) {                    return false;                }                isLast = false;                sDivHight = $(this)[0].clientHeight;                sScrollHight = $(this)[0].scrollHeight;                sScrollTop = $(this)[0].scrollTop;                startIndex = Math.floor(sScrollTop / me.liHeight);                rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));                // 加载到最后一页数据的处理                if (sScrollTop > 0 && (sScrollTop + sDivHight) >= sScrollHight) {                    isLast = true;                    tempStart = me.opDatas.length - me.renderSize;                    if (tempStart < 0) {                        tempStart = 0;                        sScrollTop = 0;                    }                    rDatas = me.opDatas.slice(tempStart);                } else {                    isLast = false;                    if (sScrollTop <= 0 || startIndex < 0) {                        startIndex = 0;                        sScrollTop = 0;                        rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));                    }                }                me._doScrollLoad(rDatas, sScrollTop, isLast);                e.stopImmediatePropagation();                return false;            });        },        /**         * @private         * @description 主区域滚动加载数据处理         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */        _doScrollLoad: function(datas, sScrollTop, isLast, isRenderAll) {            var me = this,                    liDoms,                    tempLi,                    sDivHight,                    listUI = me.listUI,                    paddingWidth = 20,                    listUIScrollLeft = 0,                    tempTop = me.tempRenderTop,                    maxWidth = 0,                    tempEditWidth = 0;            // 如果为一次性渲染            if (isRenderAll) {                me.listBodyDiv.unbind("scroll");                listUIScrollLeft = me.listBodyDiv.get(0).scrollLeft;                listUI.find("li").remove();                for (var i = 0; i < datas.length; i++) {                    tempLi = me._addLiNode(datas[i], (i * me.liHeight));                }                maxWidth = me._getLiMaxWidth(listUI);                // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                if (me.listBodyDiv[0].clientWidth >= maxWidth) {                    if (me.options.tools && me.options.tools.length > 0) {                        tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));                    }                    if (tempEditWidth < 0) {                        tempEditWidth = 0;                    }                    maxWidth = me.listBodyDiv[0].clientWidth - paddingWidth;                } else {                    if (me.options.tools && me.options.tools.length > 0) {                        tempEditWidth = (me.options.tools.length * me.editItemWidth);                    }                }                maxWidth += tempEditWidth;                liDoms = listUI.find("li");                $.each(liDoms, function(index, obj) {                    $(obj).width(maxWidth).css({top: "", position: "relative"});                });                me.listBodyDiv.get(0).scrollLeft = listUIScrollLeft;                return;            }            // 先预渲染下,取出本次渲染的最宽LI的宽度            for (var i = 0; i < datas.length; i++) {                tempLi = me._addLiNode(datas[i], tempTop);                if (tempLi.get(0).scrollWidth >= maxWidth) {                    maxWidth = tempLi.get(0).scrollWidth - paddingWidth;                }                tempLi.remove();            }            // 如果到底,将滚动条设置到底部            if (isLast) {                me.listBodyDiv[0].scrollTop = listUI.height() - me.listBodyDiv[0].clientHeight;            }            // 由于本次要渲染的LI可能会出现横向滚动条,固高度重新计算,应减去底部横向滚动条所占的高            if (sScrollTop > 0) {                sDivHight = me.listBodyDiv[0].clientHeight + sScrollTop;                // Y坐标                sScrollTop = sDivHight - datas.length * me.liHeight;            }            liDoms = listUI.find("li");            for (var i = 0; i < datas.length; i++) {                me._renderLiNode(datas[i], (sScrollTop + i * me.liHeight), liDoms[i]);            }            if (me.options.tools && me.options.tools.length > 0) {                tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));            }            liDoms = listUI.find("li");            // 如果主区域的宽大于LI最大宽,则设置主区域的宽		            if (me.listBodyDiv[0].clientWidth >= maxWidth) {                if (me.options.tools && me.options.tools.length > 0) {                    tempEditWidth = (me.options.tools.length * me.editItemWidth) - (Math.abs(me.listBodyDiv[0].clientWidth - maxWidth));                }                if (tempEditWidth < 0) {                    tempEditWidth = 0;                }                maxWidth = me.listBodyDiv[0].clientWidth - paddingWidth;            } else {                if (me.options.tools && me.options.tools.length > 0) {                    tempEditWidth = (me.options.tools.length * me.editItemWidth);                }            }            maxWidth += tempEditWidth;            $.each(liDoms, function(index, obj) {                $(obj).width(maxWidth);            });        },        /**         * @private         * @description 渲染主区域列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liDom LI         * @returns {Object} liEl 当前操作的LI         */        _renderLiNode: function(nodeCfg, top, liDom) {            var me = this,                    selectData,                    liEl,                    aEla,                    spanEl,                    text,                    qtip,                    disabled = me.options.disabled;            if (!liDom) {                me._addLiNode(nodeCfg, top, 0);                return;            }            liEl = $(liDom);            liEl.css("top", top)                    .data("value", nodeCfg.value);            // 重新绑定事件            liEl.unbind("click");            liEl.unbind("dblclick");            liEl.bind("click", {"me": me, "data": nodeCfg}, me._onNodeClick)                    .bind("dblclick", {"me": me, "data": nodeCfg}, me._dbClick);            // 勾选处理            if (me.options.multi) {                aEla = liEl.find("a");                aEla.addClass(listListSelectConUncheck);                aEla.removeClass(listListSelectConCheck);                if (me.selectedData[nodeCfg.value]) {                    aEla.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                }            } else {                selectData = me._getValue();                liEl.removeClass(listListAction);                if (nodeCfg.value == selectData.value) {                    liEl.addClass(listListAction);                }            }            // 显示文本处理            text = $.nullToString(nodeCfg.text);            spanEl = liEl.find("span");            // 如果为可编辑,则取第一个span            spanEl = $(spanEl[0]);            spanEl.text(text);            // 是否有tip提示            if (me.options.tip) {                qtip = nodeCfg["qtip"];                if (undefined === qtip || null === qtip) {                    qtip = nodeCfg.text;                }                spanEl.attr("title", qtip);            }            if (disabled) {                me.setDisabled(disabled);            }            return liEl;        },        /**         * @private         * @description 生成主列表区域li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liWidth LI的宽度         * @returns {Object} liEl 当前操作的LI         */        _addLiNode: function(nodeCfg, top, liWidth) {            var me = this,                    tools = me.options.tools,                    selectData,                    liEl,                    aEl,                    spanEl,                    text,                    qtip,                    listUI = me.listUI,                    paddingWidth = 20,                    disabled = me.options.disabled;            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass)                    .css("top", top)                    .data("value", nodeCfg.value)                    .bind("click", {"me": me, "data": nodeCfg}, me._onNodeClick)                    .bind("dblclick", {"me": me, "data": nodeCfg}, me._dbClick);            if (liWidth && liWidth > 0) {                // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                if (me.listBodyDiv[0].clientWidth >= liWidth) {                    liWidth = me.listBodyDiv[0].clientWidth - paddingWidth;                }                if (tools && tools.length > 0) {                    liWidth += (me.editItemWidth * tools.length);                }                liEl.width(liWidth);            }            // 勾选处理             if (me.options.multi) {                aEl = $("<a>").addClass(listListSelectConUncheck).appendTo(liEl);                if (me.selectedData[nodeCfg.value]) {                    aEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                }            } else {                selectData = me._getValue();                if (nodeCfg.value == selectData.value) {                    liEl.addClass(listListAction);                } else {                    liEl.addClass(listSelectLiClass);                }            }            text = $.nullToString(nodeCfg.text);            spanEl = $("<span>").text(text).appendTo(liEl);            // 是否有tip提示            if (me.options.tip) {                qtip = nodeCfg["qtip"];                if (undefined === qtip || null === qtip) {                    qtip = nodeCfg.text;                }                spanEl.attr("title", qtip);            }            // 增加操作功能图标            if (tools && 0 < tools.length) {                $.each(tools, function(index, picName) {                    if ("edit" === picName) {                        $("<span class=\"" + listEditClass + "\">").appendTo(liEl);                    } else if ("delete" === picName) {                        $("<span class=\"" + listDeleteClass + "\">").appendTo(liEl);                    }                });            }            liEl.appendTo(listUI);            if (disabled) {                me.setDisabled(disabled);            }            return liEl;        },        /**         * @private         * @description 组件重绘         */        _doLayout: function() {            var me = this,                    width = me.listEl.width(),                    height = me.listEl.height(),                    searchHeight = 0,                    tempSHeight = 8,                    allHeight = 0,                    viewBarHeight = 0,                    searchMarginBottom = 5,                    borderHeight = 1,                    viewBarPadding = 7,                    viewBarMargin = 3,                    liHeight = me.liHeight,                    listHeight,                    sListHeight,                    renderDatas,                    sOptDatas,                    rDatas,                    tWidth,                    _initH = 0,                    _initW = 0;            // 如果有搜索框            if (me.options.search) {                me.searchField.setWidth(width);                searchHeight = me.searchFiedlDiv.outerHeight(true);                searchHeight += searchMarginBottom;            }            // 是否有已选择信息框            if (me.options.sViewBar) {                viewBarHeight = me.viewBarEl.outerHeight() + viewBarMargin;            }            // 是否有全选框            if (me.options.all && me.options.multi) {                allHeight = me.allEl.outerHeight() + me.separateEl.outerHeight();            }            me.listDiv.externalWidth(width);            tWidth = me.listDiv.innerWidth();            // maxHeight与height互斥            if (!$.isNull(me.options.height)) {                height = me.options.height;            }            if (!(height == "100%" || height == "auto")) {                if (me.options.isBorder) {                    height = height - (borderHeight * 2);                }                listHeight = height - searchHeight - allHeight - viewBarHeight;                if (listHeight < 0) {                    listHeight = 0;                }                me.renderSize = Math.ceil(listHeight / liHeight);            } else {                listHeight = "auto";                if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble                        || "x" == me.options.resizAble || "y" == me.options.resizAble) {                    me.options.height = "auto";                    _initH = borderHeight * 2;                    _initW = borderHeight * 2;                }                me.renderSize = me.opDatas.length;            }            me.listUI.height(me.opDatas.length * liHeight);            if (me.renderSize <= 0) {                me.renderSize = 1;            }            me.listBodyDiv.externalWidth(tWidth).css({height: listHeight, margin: "3px 0px"});            me.listBodyDiv[0].scrollTop = 0;            renderDatas = me.opDatas.slice(0, me.renderSize);            if (me.opDatas.length <= me.limitCount) {                me.isFirstDelLimitCount = true;                renderDatas = me.opDatas;            } else {                me.isFirstDelLimitCount = false;                me._doScrollEvent();            }            me._createListNode(renderDatas, 0, false, me.isFirstDelLimitCount);            //修正相关宽高度            if ("auto" == listHeight) {                height = me.listEl.outerHeight();                if (height <= 0) {                    height = me.listBodyDiv.outerHeight();                }                listHeight = height - searchHeight - allHeight - viewBarHeight;                me.listBodyDiv.css({height: listHeight});                me.listEl.externalHeight(height);            }            if (me.options.sViewBar) {                sListHeight = height - viewBarHeight - viewBarPadding;                if (sListHeight < 0) {                    sListHeight = 0;                }                if (me.options.isBorder) {                    tempSHeight -= borderHeight * 2;                }                me.sListBodyDiv.externalWidth(tWidth).css("height", sListHeight + tempSHeight);                me.sListUI.height(me.selectedDataLength * liHeight);                me.sRenderSize = Math.ceil(sListHeight / liHeight);                if (me.sRenderSize <= 0) {                    me.sRenderSize = 1;                }                if ("block" == me.sListBodyDiv.css("display")) {                    me.sListBodyDiv[0].scrollTop = 0;                    sOptDatas = me._getSelectedData();                    if (sOptDatas.length > me.limitCount) {                        me._doSScrollEvent();                        me.isFirstSLimitCount = false;                        rDatas = sOptDatas.slice(0, (0 + me.sRenderSize));                    } else {                        me.isFirstSLimitCount = true;                        rDatas = sOptDatas;                    }                    me.sListUI.find("li").remove();                    me._doSScrollLoad(rDatas, 0, false, me.isFirstSLimitCount);                }            }            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble                    || "x" == me.options.resizAble || "y" == me.options.resizAble) {                _initH += me.listDiv.outerHeight();                _initW += me.listDiv.outerWidth(true);                if (!me._resizeInfo || !me._resizeLayout) {                    me._resizeInfo = {                        initWidth: _initW,                        width: _initW,                        initHeight: _initH,                        height: _initH                    };                } else {                    me._resizeInfo.leftWidth = 0;                    me._resizeInfo.topHeight = 0;                    me._resizeInfo.isMouseDown = false;                    if (me._resizeInfo && me._resizeInfo._$moveEl) {                        me._resizeInfo._$moveEl.remove();                        me._resizeInfo._$moveEl = null;                    }                }                me._resizeLayout = false;            }        },        /**         * @private         * @description 生成列表内容区         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */        _createListNode: function(datas, sScrollTop, isLast, isRenderAll) {            var me = this;            if ($.isNull(datas)) {                return;            }            me.listUI.find("li").remove();            me._doScrollLoad(datas, sScrollTop, isLast, isRenderAll);        },        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         * @returns {Boolean} result 执行的结果         */        _triggerHandler: function(e, eName, data) {            var me = this,                    result;            if ($.isNull(me.handlers)) {                return;            }            $.each(me.handlers, function(handlerName, func) {                // 回调注册事件                if (eName === handlerName) {                    me._info(eName + " event occured!");                    result = func.call(null, e, data);                }            });            return result;        },        /**         * @description 执行全选、反选操作,只适用于复选情况         * @param {boolean} all true：全选，false：全不选         * @param {Object} e 事件对象         */        all: function(all, e) {            var me = this,                    checkboxEl,                    selectedValue,                    liEls = [],                    isFireChange = false;            if (!me.options.multi) {                return;            }            liEls = me.listUI.find("li");            // 选中列            $.each(liEls, function(index, obj) {                checkboxEl = $(obj).children("a");                // 选中                if (all) {                    checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                } else {                    checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                }            });            if (all) {                $.each(me.opDatas, function(index, obj) {                    if (!me.selectedData[obj["value"]]) {                        me.selectedData[obj["value"]] = obj;                        me.selectedDataLength++;                        isFireChange = true;                    }                });            } else {                $.each(me.opDatas, function(index, obj) {                    if (me.selectedData[obj["value"]]) {                        delete me.selectedData[obj["value"]];                        me.selectedDataLength--;                        isFireChange = true;                    }                });            }            // 如果有全选复选框，判断是否全部选中            if (me.options.all && me.options.multi) {                if (all) {                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                } else {                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                }            }            if (me.options.sViewBar) {                me._setSelectedSpanElCount(me.selectedDataLength);            }            selectedValue = me._getValue();            // 判断是否触发change事件            if (isFireChange) {                me._triggerHandler(e, eventChange, selectedValue);            }        },        /**         * @description 是否全选，只适用于复选情况         * @return {Boolean} true：全选，false：未全选         */        isAll: function() {            var me = this;            if (me.dataLength <= 0) {                return false;            }            if (me._total && me._total > 0) {                if (me.selectedDataLength >= me._total) {                    return true;                } else {                    return false;                }            }            if (me.selectedDataLength > 0 && me.selectedDataLength >= me.dataLength) {                return true;            } else {                return false;            }        },        /**         * @description 设置组件禁用时样式         * @param {Boolean} disabled 是否禁用组件         */        setDisabled: function(disabled) {            var me = this,                    checkboxEl,                    liEls = me.listUI.find("li");            me.options.disabled = disabled;            if (disabled) {                me.listDiv.addClass(defaultPaddingDivDisabledClass);            } else {                me.listDiv.removeClass(defaultPaddingDivDisabledClass);            }            if (me.searchField) {                me.searchField.setDisabled(disabled);            }            if (disabled) {                if (me.allAEl) {                    if (me.allAEl.hasClass(listListSelectConUncheck)) {                        me.allAEl.removeClass(listListSelectConUncheck)                                .addClass(listListSeclectConUncheckDisabled);                    } else if (me.allAEl.hasClass(listListSelectConCheck)) {                        me.allAEl.removeClass(listListSelectConCheck)                                .addClass(listListSeclectConCheckDisabled);                    }                }                me.listDiv.addClass(defaultPaddingDivDisabledClass);                $.each(liEls, function(index, obj) {                    $(obj).removeClass(listSelectLiClass);                    checkboxEl = $(obj).children("a");                    if (checkboxEl) {                        if (checkboxEl.hasClass(listListSelectConUncheck)) {                            checkboxEl.removeClass(listListSelectConUncheck)                                    .addClass(listListSeclectConUncheckDisabled);                        } else if (checkboxEl.hasClass(listListSelectConCheck)) {                            checkboxEl.removeClass(listListSelectConCheck)                                    .addClass(listListSeclectConCheckDisabled);                        }                    }                });            } else {                if (me.allAEl) {                    if (me.allAEl.hasClass(listListSeclectConUncheckDisabled)) {                        me.allAEl.removeClass(listListSeclectConUncheckDisabled)                                .addClass(listListSelectConUncheck);                    } else if (me.allAEl.hasClass(listListSeclectConCheckDisabled)) {                        me.allAEl.removeClass(listListSeclectConCheckDisabled)                                .addClass(listListSelectConCheck);                    }                }                me.listDiv.removeClass(defaultPaddingDivDisabledClass);                $.each(liEls, function(index, obj) {                    $(obj).addClass(listSelectLiClass);                    checkboxEl = $(obj).children("a");                    if (checkboxEl) {                        if (checkboxEl.hasClass(listListSeclectConUncheckDisabled)) {                            checkboxEl.removeClass(listListSeclectConUncheckDisabled)                                    .addClass(listListSelectConUncheck);                        } else if (checkboxEl.hasClass(listListSeclectConCheckDisabled)) {                            checkboxEl.removeClass(listListSeclectConCheckDisabled)                                    .addClass(listListSelectConCheck);                        }                    }                });            }        },        /**         * @private         * @description 获取组件中选择的节点数据         * @return {Array} 节点对应的节点数据数组，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _getValue: function() {            var me = this;            if (me.options.multi) {                return me._getSelectedData();            } else {                if (me._getSelectedData().length <= 0) {                    return {};                }                return me._getSelectedData()[0];            }        },        /**         * @private         * @description 获取列表选中数据         * @return {Array} 返回选中数据         */        _getSelectedData: function() {            var me = this,                    tempArr = [],                    tempObj;            if ($.isNull(me.selectedData)) {                return tempArr;            }            for (var key in me.selectedData) {                tempObj = me.selectedData[key];                if (tempObj) {                    delete tempObj.checked;                    tempArr.push(tempObj);                }            }            return tempArr;        },        /**         * @private         * @description 全选事件         * @param {Object} e 事件对象         */        _onAllClick: function(e) {            var me = e.data.me,                    self = $(e.target),                    checked,                    vLength,                    msg;            if (me.options.disabled) {                return;            }            if (self.hasClass(listSelectLiAll)) {                self = self.find("a");            } else {                self = self.parent("li");                self = self.children("a");            }            if (self.hasClass(listListSelectConUncheck)) {                vLength = me.selectedDataLength;                $.each(me.opDatas, function(index, obj) {                    if (!me.selectedData[obj["value"]]) {                        vLength++;                    }                });                // 最多保留个数校验                if (me.options.multi && vLength > me.options.maxRemains) {                    msg = Sweet.core.i18n.list.maxRemains;                    Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));                    return;                }                checked = true;                self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);            } else if (self.hasClass(listListSelectConCheck)) {                // 最少保留个数校验                if (me.options.multi && me.options.minRemains > 0) {                    msg = Sweet.core.i18n.list.minRemains;                    Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));                    return;                }                checked = false;                self.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);            } else {                return;            }            me.all(checked, e);            // 触发全选事件            me._triggerHandler(e, eventCheckboxAllClick, {"value": "sweet-all", "text": Sweet.core.i18n.combobox.checkAll,                "checked": checked, "data": me._getSelectedData()});            me._triggerHandler({node: {"value": "sweet-all", "text": Sweet.core.i18n.combobox.checkAll,                    "checked": checked}, checked: checked}, eventCheckChange, me);        },        /**         * @private         * @description 双击事件处理         * @param {Object} e 事件对象         */        _dbClick: function(e) {            var me = e.data.me,                    self = $(e.target),                    data = $.objClone(e.data.data);            if (me.options.disabled) {                return;            }            if (!(self.hasClass(listEditClass)) && !(self.hasClass(listDeleteClass))) {                if (self.parent("li").hasClass(listListSelectConItem)) {                    self = self.parent("li");                    me._triggerHandler(e, eventDbClick, data);                } else if (self.hasClass(listListSelectConItem)) {                    me._triggerHandler(e, eventDbClick, data);                }            }        },        /**         * @private         * @description 列表面板事件处理         * @param {Object} e 事件对象         */        _onNodeClick: function(e) {            var me = e.data.me,                    self = $(e.target),                    liEls,                    result,                    checked,                    value,                    oldData,                    data = $.objClone(e.data.data),                    checkData,                    msg,                    deleteValue,                    sDivHight,                    sScrollHight,                    sScrollTop,                    startIndex,                    rDatas,                    listBodyDiv = me.listBodyDiv,                    isLast = false,                    isRenderAll = false,                    isDeleteFireChangeEvent = false,                    deleteLi,                    tempStart,                    tempMaxWidth = 0,                    tempEditWidth = 0,                    txtWidth = 0,                    txtEl,                    tempLIs,                    tempLI,                    scrollLeft = 0,                    scrollTop = 0,                    flag,                    tLength;            if (me.options.disabled) {                return;            }            // 处理图片点击            if (self.hasClass(listEditClass)) {                me._triggerHandler(e, eventEditClick, data);                return;            } else if (self.hasClass(listDeleteClass)) {                result = me._triggerHandler(e, eventDeleteClick, data);                if (result || $.isUndefined(result)) {                    // 删除                    deleteValue = data["value"];                    if (me.selectedData[deleteValue]) {                        isDeleteFireChangeEvent = true;                        delete me.selectedData[deleteValue];                        me.selectedDataLength--;                    }                    me.opDatas = me._deleteItemByValue(deleteValue, me.opDatas);                    me.data = me._deleteItemByValue(deleteValue, me.data);                    me.dataLength = me.data.length;                    me.listUI.height(me.listUI.height() - me.liHeight);                    // 如果                    if (me.opDatas.length > me.limitCount) {                        //start:有横向滚动条时,解决scrollHeight不变问题                        liEls = me.listUI.find("li");                        for (var i = 0; i < liEls.length; i++) {                            $(liEls[i]).css({top: (parseInt($(liEls[i]).css("top")) - 22) + "px"});                        }                        //End                        sDivHight = listBodyDiv.get(0).clientHeight;                        sScrollHight = listBodyDiv.get(0).scrollHeight;                        sScrollTop = listBodyDiv.get(0).scrollTop;                        startIndex = Math.floor(sScrollTop / me.liHeight);                        rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));                        if (sScrollTop > 0 && (sScrollTop + sDivHight) >= sScrollHight) {                            isLast = true;                            tempStart = me.opDatas.length - me.renderSize;                            if (tempStart < 0) {                                tempStart = 0;                                sScrollTop = 0;                            }                            rDatas = me.opDatas.slice(tempStart);                        } else {                            isLast = false;                            if (sScrollTop <= 0 || startIndex < 0) {                                startIndex = 0;                                sScrollTop = 0;                                rDatas = me.opDatas.slice(startIndex, (startIndex + me.renderSize));                            }                        }                        me._doScrollLoad(rDatas, sScrollTop, isLast, isRenderAll);                    } else {                        if (me.isFirstDelLimitCount) {                            deleteLi = self.parent("li");                            if (!deleteLi.is("li")) {                                deleteLi = $(this);                            }                            //记录滚动条位置                            scrollLeft = listBodyDiv[0].scrollLeft;                            scrollTop = listBodyDiv[0].scrollTop;                            deleteLi.remove();                            txtWidth = 0;                            tempMaxWidth = 0;                            tempLIs = me.listUI.find("li").width("");                            for (var i = 0; i < tempLIs.length; i++) {                                tempLI = tempLIs[i];                                if (tempLI.scrollWidth > tempMaxWidth) {                                    tempMaxWidth = tempLI.scrollWidth;                                }                                txtEl = $(tempLI).find("span:eq(0)");                                if (txtEl.width() > txtWidth) {                                    txtWidth = txtEl.width();                                }                            }                            // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                            if (txtWidth >= tempMaxWidth) {                                if (me.options.tools) {                                    tempEditWidth = (me.options.tools.length * me.editItemWidth);                                } else {                                    tempEditWidth = 0;                                }                                tempMaxWidth = txtWidth;                            } else {                                if (me.options.tools) {                                    tempEditWidth = (me.options.tools.length * me.editItemWidth) - Math.abs(tempMaxWidth - txtWidth);                                } else {                                    tempEditWidth = 0;                                }                                if (tempEditWidth < 0) {                                    tempEditWidth = 0;                                }                                tempMaxWidth = tempMaxWidth - 20;                            }                            tempMaxWidth += tempEditWidth;                            me.listUI.height(me.listUI.height() - me.liHeight);                            tempLIs.width(tempMaxWidth);                            listBodyDiv[0].scrollLeft = scrollLeft;                            listBodyDiv[0].scrollTop = scrollTop;                        } else {                            rDatas = me.opDatas;                            isRenderAll = true;                            sScrollTop = 0;                            me._doScrollLoad(rDatas, sScrollTop, isLast, isRenderAll);                            me.isFirstDelLimitCount = true;                        }                    }                    // 如果有全选复选框，判断是否全部选中                    if (me.options.all && me.options.multi) {                        if (me.dataLength > 0 && me.selectedDataLength >= me.dataLength) {                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                        } else {                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        }                    }                    if (me.options.sViewBar) {                        if (me._total && me._total > 0) {                            me._total--;                            me._setTotalElCount(me._total);                            if (me.options.all && me.options.multi) {                                if (me.dataLength > 0 && me.selectedDataLength >= me._total) {                                    me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                                } else {                                    me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                                }                            }                        } else {                            me._setTotalElCount(me.dataLength);                        }                        me._setSelectedSpanElCount(me.selectedDataLength);                    }                    // 触发change事件                    if (isDeleteFireChangeEvent) {                        me._triggerHandler(e, eventChange, me._getSelectedData());                    }                    return;                }            } else {                // 多选时self为a元素,单选时为li元素                if (me.options.multi) {                    if (self.hasClass(listListSelectConItem)) {                        self = self.children("a");                    } else {                        self = self.parent("li");                        self = self.children("a");                    }                } else {                    if (!self.hasClass(listListSelectConItem)) {                        self = self.parent("li");                    }                }            }            // 非多选时，保存选中数据            if (!me.options.multi) {                oldData = me._getValue();                value = data.value;                me.selectedData = {};                me.selectedData[value] = data;                me.selectedDataLength = 1;                liEls = me.listUI.find("li");                // 不相等时，触发change事件                if (oldData.value !== value) {                    $.each(liEls, function(index, obj) {                        $(obj).removeClass(listListAction);                    });                    me._triggerHandler(e, eventChange, data);                }                self.addClass(listListAction);                me._triggerHandler(e, eventNodeClick, data);            } else {                // 取消选择操作	                if (self.hasClass(listListSelectConCheck)) {                    // 最少保留个数校验                    if (me.options.multi && me.options.minRemains > 0 && me.selectedDataLength <= me.options.minRemains) {                        msg = Sweet.core.i18n.list.minRemains;                        Sweet.Msg.warn(msg.replace("{0}", me.options.minRemains));                        return;                    }                } else {                    // 最多保留个数校验                    if (me.options.multi && me.selectedDataLength >= me.options.maxRemains) {                        msg = Sweet.core.i18n.list.maxRemains;                        Sweet.Msg.warn(msg.replace("{0}", me.options.maxRemains));                        return;                    }                }                // 复选框点击事件                if (self.hasClass(listListSelectConUncheck) ||                        self.hasClass(listListSelectConCheck)) {                    checked = self.hasClass(listListSelectConUncheck) ? true : false;                    value = data.value;                    // 先触发beforeCheckboxClick事件，beforeCheckboxClick事件只在未选中之前触发，反选节点不会触发                    if (self.hasClass(listListSelectConUncheck)) {                        result = me._triggerHandler(e, eventBeforeCheckboxClick, data);                    }                    checkData = $.objClone(data);                    checkData.checked = !self.hasClass(listListSelectConUncheck);                    flag = me._triggerHandler({node: checkData, checked: checked}, eventBeforeCheckChange, me);                    if (false === flag || "false" === flag) {                        return;                    }                    if (result || $.isUndefined(result)) {                        if (checked) {                            self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                            // 如果不存在则加入,length++                            if (!me.selectedData[value]) {                                me.selectedData[value] = $.objClone(data);                                me.selectedDataLength++;                            }                        } else {                            self.addClass(listListSelectConUncheck).removeClass(listListSelectConCheck);                            if (me.selectedData[value]) {                                delete me.selectedData[value];                                me.selectedDataLength--;                            }                        }                        // 触发checkbox的click事件                        checkData = $.objClone(data);                        checkData.checked = checked;                        me._triggerHandler(e, eventCheckboxClick, checkData);                        me._triggerHandler({node: checkData, checked: checked}, eventCheckChange, me);                        // 触发change事件                        me._triggerHandler(e, eventChange, me._getSelectedData());                    }                    // 如果有全选复选框，判断是否全部选中                    if (me.options.all && me.options.multi) {                        tLength = me.dataLength;                        if (me._total && me._total > 0) {                            tLength = me._total;                        }                        if (me.selectedDataLength >= tLength) {                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                        } else {                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        }                    }                }            }            if (me.options.sViewBar) {                me._setSelectedSpanElCount(me.selectedDataLength);            }        },        /**         * @private         * @description 删除所有节点         */        _removeAllNodeList: function() {            var me = this;            // 删除dom节点            if (me.listUI) {                me.listUI.empty();            }        },        /**         * @private         * @description 重置list设置的条件         */        _reset: function() {            var me = this;            // 选中数据            me.selectedData = {};            me.selectedDataLength = 0;            if (me.options.sViewBar) {                me._setSelectedSpanElCount(me.selectedDataLength);            }        },        /**         * @private         * @description 渲染         * @param {String} id 宿主ID         */        _render: function(id) {            var me = this;            if (!me._super(id)) {                return false;            }            // 渲染搜索框            if (me.searchField) {                me.searchField.render(me.searchFiedlDiv.attr("id"));            }            me.setValue(me.options.value);            me._setData(me.opDatas);            if (me.options.sViewBar) {                me._setTotalElCount(me.dataLength);                me._setSelectedSpanElCount(me.selectedDataLength);            }            me.setDisabled(me.options.disabled);            me.rendered = true;            return true;        },        /**         * @description 删除数组中的的某一个元素         * @param {String} value 为此值时删除此元素         * @param {Array} tArray 待从此数组中删除         * @return {Array} result 返回删除后的数组         */        _deleteItemByValue: function(value, tArray) {            var result = [],                    length,                    sliceIndex,                    tempBData,                    tempAData;            if ($.isNull(tArray)) {                return [];            }            sliceIndex = length = tArray.length;            for (var i = 0; i < length; i++) {                if (value == tArray[i]["value"]) {                    sliceIndex = i;                    break;                }            }            tempBData = tArray.slice(0, sliceIndex);            tempAData = tArray.slice(sliceIndex + 1);            result = tempBData.concat(tempAData);            return result;        },        /**         * @private         * @description 创建选择操作条         */        _createSViewBar: function() {            var me = this,                    sSScrollTop = 0,                    sScrollHight = 0,                    sDivHight = 0,                    startIndex = 0,                    sOptDatas = [],                    rDatas = [],                    vbSpanEL,                    deValue,                    isLast = false,                    tempStart = 0,                    listDiv = me.listDiv,                    tempInnerHTML,                    tempLIs,                    tempLI,                    tempMaxWidth = 0,                    paddingWidth = 20,                    tempDeletePaddingWidth = 40,                    tempDeletWidth = 0,                    txtWidth = 0,                    txtEl,                    scrollLeft = 0,                    scrollTop = 0;            tempInnerHTML = "<ul><li><span>" + i18n.total + "</span><a href=" + hrefScript + ">0</a></li>" +                    "<li><span>" + i18n.selected + "</span><a href=" + hrefScript + ">0</a></li></ul>";            me.viewBarEl = $("<div>").addClass(listViewBarUlClass).html(tempInnerHTML).appendTo(listDiv);            me.totalAEl = me.viewBarEl.find("a:eq(0)");            me.totalAEl.bind("click", function() {                me._onTotalSpanClick();            });            me.selectedAEl = me.viewBarEl.find("a:eq(1)");            me.selectedAEl.bind("click", function() {                me._onSelectedSpanClick();            });            me.sListBodyDiv = $("<div>").addClass(listScrollDivClass);            me.sListUI = $("<ul>").addClass(listSelectUlClass)                    .bind("click", function(e) {                if (me.options.disabled) {                    return;                }                tempMaxWidth = 0;                vbSpanEL = $(e.target);                // 点击删除图标                if (vbSpanEL.hasClass(listCloseClass)) {                    deValue = vbSpanEL.data("value");                    e.data = {data: {value: deValue}};                    if (!me.selectedData[deValue]) {                        return;                    }                    tempMaxWidth = 0;                    tempDeletWidth = 0;                    txtWidth = 0;                    delete me.selectedData[deValue];                    me.selectedDataLength--;                    // 选中列                    $.each(me.listUI.find("li"), function(index, obj) {                        if ($(obj).data("value") == deValue) {                            if (me.options.multi) {                                $(obj).children("a").removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                            } else {                                $(obj).removeClass(listListAction);                            }                        }                    });                    if (me.allAEl) {                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                    }                    me._setSelectedSpanElCount(me.selectedDataLength);                    if (me.isFirstSLimitCount) {                        scrollLeft = me.sListBodyDiv[0].scrollLeft;                        scrollTop = me.sListBodyDiv[0].scrollTop;                        vbSpanEL.parent("li").remove();                        tempLIs = $(this).find("li").width("");                        for (var i = 0; i < tempLIs.length; i++) {                            tempLI = tempLIs[i];                            if (tempLI.scrollWidth > tempMaxWidth) {                                tempMaxWidth = tempLI.scrollWidth;                            }                            txtEl = $(tempLI).find("span:eq(0)");                            if (txtEl.width() > txtWidth) {                                txtWidth = txtEl.width();                            }                        }                        // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                        if (txtWidth >= tempMaxWidth) {                            tempDeletWidth = tempDeletePaddingWidth;                            tempMaxWidth = txtWidth;                        } else {                            tempDeletWidth = tempDeletePaddingWidth - Math.abs(tempMaxWidth - txtWidth);                            if (tempDeletWidth < 0) {                                tempDeletWidth = 0;                            }                            tempMaxWidth = tempMaxWidth - paddingWidth;                        }                        tempMaxWidth += tempDeletWidth;                        $(this).height($(this).height() - me.liHeight);                        tempLIs.width(tempMaxWidth);                        me.sListBodyDiv[0].scrollLeft = scrollLeft;                        me.sListBodyDiv[0].scrollTop = scrollTop;                        // 触发change事件                        me._triggerHandler(e, eventChange, me._getSelectedData());                        return;                    }                    sOptDatas = me._getSelectedData();                    if (sOptDatas.length <= me.limitCount) {                        rDatas = sOptDatas;                        sSScrollTop = 0;                        isLast = false;                        me.isFirstSLimitCount = true;                        me._doSScrollLoad(rDatas, sSScrollTop, isLast, true);                    } else {                        sDivHight = me.sListBodyDiv[0].clientHeight;                        sScrollHight = me.sListBodyDiv[0].scrollHeight;                        sSScrollTop = me.sListBodyDiv[0].scrollTop;                        startIndex = Math.floor(sSScrollTop / me.liHeight);                        rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));                        if (sSScrollTop > 0 && (sSScrollTop + sDivHight) >= sScrollHight) {                            isLast = true;                            tempStart = sOptDatas.length - me.sRenderSize;                            if (tempStart < 0) {                                tempStart = 0;                                sSScrollTop = 0;                            }                            rDatas = sOptDatas.slice(tempStart);                        } else {                            isLast = false;                            if (sSScrollTop <= 0 || startIndex < 0) {                                startIndex = 0;                                sSScrollTop = 0;                                rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));                            }                        }                        me._doSScrollLoad(rDatas, sSScrollTop, isLast);                    }                    // 触发change事件                    me._triggerHandler(e, eventChange, me._getSelectedData());                }            })                    .appendTo(me.sListBodyDiv);            me.sListBodyDiv.appendTo(listDiv);            me.sListBodyDiv.hide();        },        /**         * @private         * @description 设置总数         * @param {Number} count 总数         */        _setTotalElCount: function(count) {            var me = this;            if (me.totalAEl) {                me.totalAEl.text(count);            }        },        /**         * @private         * @param {Number} count 设置选中记录数         */        _setSelectedSpanElCount: function(count) {            var me = this;            if (me.selectedAEl) {                me.selectedAEl.text(count);            }            if (me.sListUI) {                me.sListUI.height(count * me.liHeight);            }        },        /**         * @private         * @description 点击total的事件处理         */        _onTotalSpanClick: function() {            var me = this,                    disabled = me.options.disabled;            if (disabled) {                return;            }            //如果显示则不做处理            if ("block" == me.listBodyDiv.css("display")) {                return;            }            if (me.sListBodyDiv) {                me.sListBodyDiv.hide();            }            if (me.searchField) {                me.searchField.show();            }            if (me.separateEl) {                me.separateEl.show();            }            if (me.allEl) {                me.allEl.show();            }            if (me.listBodyDiv) {                me.listBodyDiv.show();            }            me._doLayout();        },        /**         * @private         * @description 点击selected的事件处理         */        _onSelectedSpanClick: function() {            var me = this,                    disabled = me.options.disabled,                    sOptDatas,                    rDatas;            if (disabled) {                return;            }            // 如果显示则不做处理            if ("block" == me.sListBodyDiv.css("display")) {                return;            }            if (me.searchField) {                me.searchField.hide();            }            if (me.separateEl) {                me.separateEl.hide();            }            if (me.allEl) {                me.allEl.hide();            }            if (me.listBodyDiv) {                me.listBodyDiv.hide();            }            if (me.sListBodyDiv) {                me.sListBodyDiv.show();            }            me.sListBodyDiv[0].scrollTop = 0;            sOptDatas = me._getSelectedData();            if (sOptDatas.length > me.limitCount) {                me._doSScrollEvent();                me.isFirstSLimitCount = false;                rDatas = sOptDatas.slice(0, (0 + me.sRenderSize));            } else {                me.isFirstSLimitCount = true;                rDatas = sOptDatas;            }            me.sListUI.find("li").remove();            me._doSScrollLoad(rDatas, 0, false, me.isFirstSLimitCount);        },        /**         * @private         * @description 滚动加载事件处理         */        _doSScrollEvent: function() {            var me = this,                    sSScrollTop = 0,                    sScrollHight = 0,                    sDivHight = 0,                    startIndex = 0,                    sOptDatas = [],                    rDatas = [],                    isLast = false,                    tempStart = 0;            // 先清楚绑定的scroll事件            me.sListBodyDiv.unbind("scroll");            me.sListBodyDiv.scroll(function(e) {                if (sSScrollTop == $(this).get(0).scrollTop) {                    return false;                }                isLast = false;                sDivHight = $(this)[0].clientHeight;                sScrollHight = $(this)[0].scrollHeight;                sSScrollTop = $(this)[0].scrollTop;                startIndex = Math.floor(sSScrollTop / me.liHeight);                sOptDatas = me._getSelectedData();                rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));                if (sSScrollTop > 0 && (sSScrollTop + sDivHight) >= sScrollHight) {                    isLast = true;                    tempStart = sOptDatas.length - me.sRenderSize;                    if (tempStart < 0) {                        tempStart = 0;                        sSScrollTop = 0;                    }                    rDatas = sOptDatas.slice(tempStart);                } else {                    isLast = false;                    if (sSScrollTop <= 0 || startIndex < 0) {                        startIndex = 0;                        sSScrollTop = 0;                        rDatas = sOptDatas.slice(startIndex, (startIndex + me.sRenderSize));                    }                }                me._doSScrollLoad(rDatas, sSScrollTop, isLast);                e.stopImmediatePropagation();                return false;            });        },        /**         * @private         * @description 生成LI选项         * @param {Array} datas 渲染节点的数据         * @param {Number} sScrollTop 向上滚动的距离         * @param {Boolean} isLast 是否加载到底部         * @param {Boolean} isRenderAll 是否一次性加载         */        _doSScrollLoad: function(datas, sScrollTop, isLast, isRenderAll) {            var me = this,                    liDoms,                    tempLi,                    sDivHight,                    listUI = me.sListUI,                    tempTop = me.tempRenderTop,                    paddingWidth = 20,                    listUIScrollLeft = 0,                    maxWidth = 0;            // 如果为一次性渲染            if (isRenderAll) {                me.sListBodyDiv.unbind("scroll");                listUIScrollLeft = me.sListBodyDiv.get(0).scrollLeft;                listUI.find("li").remove();                for (var i = 0; i < datas.length; i++) {                    tempLi = me._addSLiNode(datas[i], (i * me.liHeight));                    if (tempLi.get(0).scrollWidth > maxWidth) {                        maxWidth = tempLi.get(0).scrollWidth;                    }                }                // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                if (me.sListBodyDiv[0].clientWidth >= maxWidth) {                    maxWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;                }                liDoms = listUI.find("li");                $.each(liDoms, function(index, obj) {                    $(obj).width(maxWidth)                            .css({top: "", position: "relative"});                });                me.sListBodyDiv.get(0).scrollLeft = listUIScrollLeft;                return;            }            // 先预渲染下,取出本次渲染的最宽LI的宽度            for (var i = 0; i < datas.length; i++) {                tempLi = me._addSLiNode(datas[i], tempTop);                if (tempLi.get(0).scrollWidth > maxWidth) {                    maxWidth = tempLi.get(0).scrollWidth;                }                tempLi.remove();            }            // 如果到底,将滚动条设置到底部            if (isLast) {                me.sListBodyDiv[0].scrollTop = listUI.height() - me.sListBodyDiv[0].clientHeight;            }            // 由于本次要渲染的LI可能会出现横向滚动条,固高度重新计算,应减去底部横向滚动条所占的高            if (sScrollTop > 0) {                sDivHight = me.sListBodyDiv[0].clientHeight + sScrollTop;                // Y坐标                sScrollTop = sDivHight - datas.length * me.liHeight;            }            liDoms = listUI.find("li");            for (var i = 0; i < datas.length; i++) {                me._renderSLiNode(datas[i], (sScrollTop + i * me.liHeight), liDoms[i]);            }            // 如果主区域的宽大于LI最大宽,则设置主区域的宽		            if (me.sListBodyDiv[0].clientWidth >= maxWidth) {                maxWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;            }            liDoms = listUI.find("li");            $.each(liDoms, function(index, obj) {                $(obj).width(maxWidth);            });        },        /**         * @private         * @description 渲染列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liDom LI         * @returns {Object} liEl 当前操作的LI         */        _renderSLiNode: function(nodeCfg, top, liDom) {            var me = this,                    liEl,                    spanEls,                    textSpanEl,                    optSpanEl,                    text,                    qtip,                    disabled = me.options.disabled;            if (!liDom) {                me._addSLiNode(nodeCfg, top, 0);                return;            }            liEl = $(liDom);            liEl.css("top", top);            // 显示文本处理            text = $.nullToString(nodeCfg.text);            spanEls = liEl.find("span");            // 取第一个span            textSpanEl = $(spanEls[0]);            textSpanEl.text(text);            // 是否有tip提示            if (me.options.tip) {                qtip = nodeCfg["qtip"];                if (undefined === qtip || null === qtip) {                    qtip = nodeCfg.text;                }                textSpanEl.attr("title", qtip);            }            if (spanEls[1]) {                optSpanEl = $(spanEls[1]);                optSpanEl.data("value", nodeCfg.value);            }            if (disabled) {                me.setDisabled(disabled);            }            return liEl;        },        /**         * @private         * @description 生成列表li标签         * @param {Object} nodeCfg 节点信息         * @param {Number} top Y坐标         * @param {Number} liWidth LI的宽度         * @returns {Object} liEl 当前操作的LI         */        _addSLiNode: function(nodeCfg, top, liWidth) {            var me = this,                    liEl,                    spanEl,                    text,                    qtip,                    listUI = me.sListUI,                    paddingWidth = 20,                    disabled = me.options.disabled;            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass)                    .css("top", top);            if (liWidth && liWidth > 0) {                // 如果主区域的宽大于LI最大宽,则设置主区域的宽		                if (me.sListBodyDiv[0].clientWidth >= liWidth) {                    liWidth = me.sListBodyDiv[0].clientWidth - paddingWidth;                }                liEl.width(liWidth);            }            text = $.nullToString(nodeCfg.text);            spanEl = $("<span>").text(text).appendTo(liEl);            // 是否有tip提示            if (me.options.tip) {                qtip = nodeCfg["qtip"];                if (undefined === qtip || null === qtip) {                    qtip = nodeCfg.text;                }                spanEl.attr("title", qtip);            }            $("<span>").addClass(listCloseClass)                    .data("value", nodeCfg.value)                    .appendTo(liEl);            liEl.appendTo(listUI);            if (disabled) {                me.setDisabled(disabled);            }            return liEl;        },        /**         * @private         * @description 获取区域中li最宽的宽度         * @param {Object} listUL list面板         * @return {Number} maxWidth 最大宽度         */        _getLiMaxWidth: function(listUL) {            var maxWidth = 0,                    tempWidth = 0,                    liDoms,                    tEl;            if (!listUL) {                return maxWidth;            }            liDoms = listUL.find("li");            //计算最大宽度            for (var k = 0; k < liDoms.length; k++) {                if ("none" == $(liDoms[k]).css("display")) {                    continue;                }                tEl = $(liDoms[k]).children();                tempWidth = 0;                for (var t = 0; t < tEl.length; t++) {                    if ("none" != $(tEl[t]).css("display")) {                        tempWidth += $(tEl[t]).externalWidth();                    }                }                if (tempWidth > maxWidth) {                    maxWidth = tempWidth;                }            }            return maxWidth;        },        /**         * @private         * @description 销毁组件         */        _destroyWidget: function() {            var me = this;            if (me.listEl) {                me.listEl.remove();            }            if (me._resizeInfo) {                if (me._resizeInfo._$moveEl) {                    me._resizeInfo._$moveEl.remove();                }                me._resizeInfo = null;            }        },        /**         * @private         * @description 销毁缩放框         */        destroyMoveEl: function() {            var me = this;            if (me._resizeInfo && me._resizeInfo._$moveEl) {                me._resizeInfo._$moveEl.remove();                me._resizeInfo._$moveEl = null;                me._resizeInfo.isMouseDown = false;            }        },        /**         * @private         * @description 缩放处理:生成相关dom         */        __doCreateResizeEl: function() {            var me = this,                    listDiv = me.listDiv,                    resizeXYEl,                    resizeElXl,                    resizeElXr,                    resizeElYt,                    resizeElYb;            if (true == me.options.resizAble || "true" == me.options.resizAble || "xy" == me.options.resizAble) {                listDiv.css({"position": "absolute"});                resizeXYEl = $("<div>").addClass(listBodyResizeXYElClass)                        .appendTo(listDiv);                resizeElYt = $("<div>").addClass(listBodyResizeYtElClass)                        .appendTo(listDiv);                resizeElXr = $("<div>").addClass(listBodyResizeXrElClass).css({height: "calc(100% - 10px)"})                        .appendTo(listDiv);                resizeElYb = $("<div>").addClass(listBodyResizeYbElClass).css({width: "calc(100% - 10px)"})                        .appendTo(listDiv);                resizeElXl = $("<div>").addClass(listBodyResizeXlElClass)                        .appendTo(listDiv);                me.__registResizeEvent(resizeXYEl, "xy");                me.__registResizeEvent(resizeElYt, "yt");                me.__registResizeEvent(resizeElXr, "xr");                me.__registResizeEvent(resizeElYb, "yb");                me.__registResizeEvent(resizeElXl, "xl");            } else if ("x" == me.options.resizAble) {                listDiv.css({"position": "absolute"});                resizeElXr = $("<div>").addClass(listBodyResizeXrElClass)                        .appendTo(listDiv);                resizeElXl = $("<div>").addClass(listBodyResizeXlElClass)                        .appendTo(listDiv);                me.__registResizeEvent(resizeElXr, "xr");                me.__registResizeEvent(resizeElXl, "xl");            } else if ("y" == me.options.resizAble) {                listDiv.css({"position": "absolute"});                resizeElYt = $("<div>").addClass(listBodyResizeYtElClass)                        .appendTo(listDiv);                resizeElYb = $("<div>").addClass(listBodyResizeYbElClass)                        .appendTo(listDiv);                me.__registResizeEvent(resizeElYt, "yt");                me.__registResizeEvent(resizeElYb, "yb");            }        },        /**         * @private         * @description 缩放处理:注册鼠标事件         * @param {Object} rEl el对象         * @param {String} type 类型: x, y, xy         */        __registResizeEvent: function(rEl, type) {            var me = this;            if (!rEl) {                return;            }            rEl.bind("mousedown", {"me": me, "rEl": rEl, "type": type}, me._doResizeElMousedown);            rEl.bind("mousemove", {"me": me, "rEl": rEl, "type": type}, me._doResizeElMousemove);            rEl.bind("mouseup", {"me": me, "rEl": rEl, "type": type}, me._doResizeElMouseup);            rEl.bind("mouseover", {"me": me, "rEl": rEl, "type": type}, me._doResizeElMouseover);        },        /**         * @private         * @description 缩放处理:鼠标点下去事件         * @param {Object} e 事件对象         */        _doResizeElMousedown: function(e) {            var me = e.data.me,                    self = $(e.target),                    obj = self.get(0),                    type = e.data.type,                    winOffer,                    _tw1 = 1,                    _tw2 = 2,                    _tOffer = 0,                    _right,                    _bottom,                    _left,                    _top,                    _width,                    _height,                    _css,                    _zIndex;            me._resizeInfo.isMouseDown = true;            //记录点下时的X坐标值            me._resizeInfo.leftWidth = e.pageX;            me._resizeInfo.topHeight = e.pageY;            if (obj.setCapture) {                obj.setCapture();            } else if (window.captureEvents) {                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);            }            //防止在滑动时,选择中其它内容            me.listDiv.find("*").css({                "-moz-user-select": "none",                "-webkit-user-select": "none",                "-ms-user-select": "none",                "-khtml-user-select": "none",                "user-select": "none"            });            if (me._resizeInfo && me._resizeInfo._$moveEl) {                me._resizeInfo._$moveEl.remove();                me._resizeInfo._$moveEl = null;            }            if (!me.options.isBorder) {                _tOffer = 1;            }            winOffer = me.listDiv.offset();            _width = me.listDiv.width();            _height = me.listDiv.height();            _zIndex = $.getMaxZIndex(me.listDiv.css("z-index"));            //虚线框            if ("xl" == type) {                _right = me.listDiv.css("right");                if (me.renderEl && "absolute" == me.renderEl.css("position")) {                    _right = me.renderEl.css("right");                }                _right = parseInt(_right) - _tOffer;                _top = winOffer.top - _tOffer;                _css = {                    "width": _width,                    "height": _height,                    "right": _right,                    "top": _top,                    "z-index": _zIndex                };            } else if ("yt" == type) {                _top = winOffer.top;                _bottom = $("body").height() - _top - _height;                if (!me.options.isBorder) {                    _bottom -= _tw1;                } else {                    _bottom -= _tw2;                }                _left = winOffer.left - _tOffer;                _css = {                    "width": _width,                    "height": _height,                    "left": _left,                    "bottom": _bottom,                    "z-index": _zIndex                };            } else {                _left = winOffer.left - _tOffer;                _top = winOffer.top - _tOffer;                _css = {                    "width": _width,                    "height": _height,                    "left": _left,                    "top": _top,                    "z-index": _zIndex                };            }            me._resizeInfo._$moveEl = $("<div>").addClass(listBodyResizeElClass).css(_css).appendTo("body");            return false;        },        /**         * @private         * @description 缩放处理:鼠标滑动事件         * @param {Object} e 事件对象         */        _doResizeElMousemove: function(e) {            var me = e.data.me,                    self = $(e.target),                    type = e.data.type,                    bW = 0,                    initLeft = 0,                    initTop,                    tempOffset,                    tempWidth,                    tempHeight,                    pgX,                    pgY,                    tw,                    th,                    _twh5 = 5,                    flag;            if (me._resizeInfo.isMouseDown) {                tempOffset = me.listDiv.offset();                //用于外部适配宽高限制                flag = me._triggerHandler({offset: tempOffset, resizeInfo: me._resizeInfo, resizeType: type, event: e}, eventResizeElMove, me);                if (false == flag || "false" == flag) {                    return;                }                initLeft = tempOffset.left;                initTop = tempOffset.top;                pgX = e.pageX;                pgY = e.pageY;                tw = $(document).innerWidth() - _twh5;                th = $(document).innerHeight() - _twh5;                if (pgX > tw) {                    pgX = tw;                }                if (pgY > th) {                    pgY = th;                }                if (pgY <= _twh5) {                    pgY = _twh5;                }                if (pgX <= _twh5) {                    pgX = _twh5;                }                if (me.options.isBorder) {                    bW = 2;                }                //刷新宽度                if ("xy" == type || "xr" == type || "xl" == type) {                    //计算宽度                    if ("xl" == type) {                        tempWidth = me._resizeInfo.width + initLeft - pgX;                    } else {                        tempWidth = pgX - initLeft;                    }                    //如果小于最小宽度值,则设置成最小宽度值                    if (tempWidth < me._resizeInfo.initWidth) {                        me._resizeInfo._$moveEl.width(me._resizeInfo.initWidth - bW);                    } else {                        me._resizeInfo._$moveEl.width(tempWidth);                    }                }                //刷新高度                if ("xy" == type || "yt" == type || "yb" == type) {                    //计算宽度                    if ("yt" == type) {                        tempHeight = me._resizeInfo.height + initTop - pgY;                    } else {                        tempHeight = pgY - initTop;                    }                    //如果小于最小高度值,则设置成最小高度值                    if (tempHeight < me._resizeInfo.initHeight) {                        me._resizeInfo._$moveEl.height(me._resizeInfo.initHeight - bW);                    } else {                        me._resizeInfo._$moveEl.height(tempHeight);                    }                }            }            return false;        },        /**         * @private         * @description 缩放处理:鼠标移上去事件         * @param {Object} e 事件对象         */        _doResizeElMouseup: function(e) {            var me = e.data.me,                    self = $(e.target),                    obj = self.get(0),                    searchMarginBottom = 5,                    _th1 = 1,                    _th2 = 2,                    _tWidth = -1,                    _tHeight = -1,                    _h,                    _w,                    _cW,                    _cH;            me._resizeInfo.isMouseDown = false;            if (obj.releaseCapture) {                obj.releaseCapture();            } else if (window.captureEvents) {                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);            }            if (me._resizeInfo && me._resizeInfo._$moveEl) {                _tWidth = me._resizeInfo._$moveEl.width();                _tHeight = me._resizeInfo._$moveEl.height();                me._resizeInfo._$moveEl.remove();                me._resizeInfo._$moveEl = null;            }            //还原防止在滑动时,选择中其它内容            me.listDiv.find("*").css({                "-moz-user-select": "",                "-webkit-user-select": "",                "-ms-user-select": "",                "-khtml-user-select": "",                "user-select": ""            });            if (_tWidth < 0 || _tHeight < 0) {                return;            }            if (_tWidth < me._resizeInfo.initWidth) {                _tWidth = me._resizeInfo.initWidth;            }            if (_tHeight < me._resizeInfo.initHeight) {                _tHeight = me._resizeInfo.initHeight;            }            _cW = me._resizeInfo.width - _tWidth;            _cH = me._resizeInfo.height - _tHeight;            if (_cW >= -1 && _cW <= 1 && _cH >= -1 && _cH <= 1) {                return;            }            me._resizeInfo.width = _tWidth;            me._resizeInfo.height = _tHeight;            _w = me._resizeInfo.width + _th2;            _h = me._resizeInfo.height - searchMarginBottom;            _h += _th1;            if (!me.options.isBorder) {                _h -= _th2;                _w -= _th2;            }            if (me.options.search) {                _h += me.searchFiedlDiv.outerHeight(true) + searchMarginBottom;            }            if (me.options.sViewBar) {                _h += _th1;                if (me.options.all && me.options.multi) {                    _h -= _th2;                }            }            me._resizeLayout = true;            me.resizeLayout(_w, _h);            me.listDiv.unbind("resize");            return false;        },        /**         * @private         * @description 缩放处理:鼠标移上去事件         * @param {Object} e 事件对象         */        _doResizeElMouseover: function(e) {            var me = e.data.me,                    self = $(e.target);        }    });    /**     * 创建列表     * @name Sweet.list.OptimizeList     * @class      * @extends Sweet.list     * @requires      * <pre>     *  jquery.ui.core.js     *  jquery.ui.widget.js     *  jquery.sweet.widget.js     *  jquery.sweet.widget.list.js     * </pre>     * @example      * <pre>     *  var data = [{"value":"1", "text":"ONE"},     *                {"value":"2", "text":"TWO"},     *                {"value":"3", "text":"THREE"},     *                {"value":"4", "text":"FOUR"}];     *  sweetList = new Sweet.list.OptimizeList({     *               width : 100,     *               height : 150,     *               multi : true,     *               data : data,     *               renderTo :"sweet-list"     *           })     * sweetList.render("sweet-list");     * </pre>     */    Sweet.list.OptimizeList = $.sweet.widgetListList;}(jQuery));