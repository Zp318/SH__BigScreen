/** * @fileOverview   * <pre> * 列表组件 * 2013/6/10 * <a href="www.huawei.com">http://www.huawei.com</a> * Huawei Technologies Co., Ltd. Copyright 1998-2013,  All rights reserved  * </pre> * @version 1.0 */(function($, undefined) {    var listSelectClass = "sweet-list",            listSelectBgClass = "sweet-list-list-con",            listSelectUlClass = "sweet-list-list-ul",            listSelectLiClass = "list-select",            listSelectLazyloadClass = "sweet-list-lazyload",            listListSelectConItem = "sweet-list-list-select-item",            listSelectConItem = "sweet-list-select-item",            listListAction = "sweet-list-list-action",            listListSelectConUncheck = "sweet-form-checkbox-unchecked",            listListSelectConCheck = "sweet-form-checkbox-checked",            listListSeclectConCheckDisabled = "sweet-form-checkbox-checked-disabled",            listListSeclectConUncheckDisabled = "sweet-form-checkbox-unchecked-disabled",            listBgClass = "sweet-list-list-BK",            listLeftClass = "left",            listCloseClass = "close",            listEditClass = "edit",            listDeleteClass = "delete",            listWindowIdPrefix = "sweet-cmp-list-list-",            listPrefix = "sweet-list-list-",            timerSuffix = "sweet-list-content-timer", // 内容区定时器名称            defaultPaddingDivDisabledClass = "sweet-list-list-disabled ",            listSearchClass = "sweet-list-search-div",            eventChange = "change",            eventAfterSetData = "afterSetData",            eventAfterSetValue = "afterSetValue",            eventCheckboxClick = "checkboxClick",            eventCheckboxAllClick = "checkboxAllClick",            eventNodeClick = "nodeClick",            eventSearch = "search",            eventBeforeCheckboxClick = "beforeCheckboxClick",            eventDbClick = "dblclick",            eventEditClick = "edit",            eventDeleteClick = "delete",            hrefScript = Sweet.constants.HREFSCRIPT,            i18n = Sweet.core.i18n.list,            uuid = uuid || 1000,            loadDataRows = 200;// 分批加载每次加载条数    $.widget("sweet.widgetListList", $.sweet.widgetList, /** @lends Sweet.list.List.prototype*/{        eventNames: /** @lends Sweet.list.List.prototype*/{            /**             * @event             * @description 切换树节点事件,一般两个参数(evt, data)             */            change: "切换树节点事件",            /**             * @event             * @description 调用完setData方法后事件,一般两个参数(evt, data)             */            afterSetData: "调用完setData方法后事件",            /**             * @event             * @description setValue执行后触发,一般两个参数(evt, data)             */            afterSetValue: "setValue执行后触发",            /**             * @event             * @description 复选框点击事件,一般两个参数(evt, data)             */            checkboxClick: "复选框点击事件",            /**             * @event             * @description 全选复选框点击事件,一般两个参数(evt, data)             */            checkboxAllClick: "全选复选框点击事件",            /**             * @event             * @description 点击树列表节点,一般两个参数(evt, data)             */            nodeClick: "点击树列表节点",            /**             * @event             * @description 查询事件,一般两个参数(evt, data)             */            search: "查询事件",            /**             * @event             * @description 点击checkBox之前的事件(checkBox未选中的时候触发),一般两个参数(evt, data)             */            beforeCheckboxClick: "点击checkBox之前的事件(checkBox未选中的时候触发)",            /**             * @event             * @description 列表行双击事件,一般两个参数(evt, data)             */            dblclick: "列表行双击事件",            /**             * @event             * @description 行图片编辑事件，暂时未实现,一般两个参数(evt, data)             */            edit: "行图片编辑事件",            /**             * @event             * @description 行图片删除事件,一般两个参数(evt, data)             */            delete: "行图片删除事件"        },        version: "1.0",        sweetWidgetName: "[widget-list-list]",        type: 'list',        options: /** @lends Sweet.list.List.prototype*/{            /**             * 基础数据             * @type {Object}             * @default null             */            data: null,            /**             * 多选属性             * @type {Boolean}             * @default false             */            multi: false,            /**             * 是否是后台搜索             * @type {Boolean}             * @default false             */            remote: false,            /**             * 是否显示搜索框             * @type {Boolean}             * @default false             */            search: false,            /**             * 是否有提示             * @type {Boolean}             * @default false             */            tip: false,            /**             * 加载数据             * @type {Object}             * @default null             */            store: null,            /**             * 是否禁用list组件             * @type {Boolean}             * @default false             */            disabled: false,            /**             * 是否延迟加载             * @type {Boolean}             * @default false             */            lazyLoad: false,            /**             * 是否有全选功能             * @type {Boolean}             * @default false             */            all: false,            /**             * 行工具栏图标，现在只支持edit、delete             * @type {Array}             * @default null             */            tools: null,            /**             * 多选时，必须保留选中的个数             * @type {Number}             * @default 0             */            minRemains: 0,            /**             * 多选时，最多保留选中个数             * @type {Number}             * @default Number.MAX_VAULE             */            maxRemains: Number.MAX_VALUE,            /**             * 每次加载记录数             * @type {Number}             * @default 50             */            limit: 50,            /**             * 单选列表数据中，是否有“请选择”选项。内部提供给下拉框组件使用。             * @private             * @type {Boolean}             * @default false             */            _pleaseSelect: false,            /**             * 单选列表数据中，pleaseSelect属性为true时，配置列表出现的提示字样。内部提供给下拉框组件使用。             * @private             * @type {String}             * @default 请选择             */            _pleaseSelectText: Sweet.core.i18n.combobox.pleaseSelect,            /**             * 配置List的背景样式             * @type boolean             * @default false             */            isBackGround : false        },        /**         * @description 取得List的所有数据         * @returns {Array/Object} data 返回List的所有数据         */        getData : function(){            return JSON.parse(JSON.stringify(this.data));        },        /**         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         * @param {Boolean} isAppend 是否是追加新的树节点         * @description 设置组件中的节点         */        setData: function(data, isAppend) {            if ($.isNull(data)) {                return;            }            var me = this,                    options = me.options,                    tData = data,                    tempData;            // 延迟加载时，需要返回记录总数            if ($.isPlainObject(data)) {                tData = data.data;                me._setTotalElCount(data.total);                me.filterControlEl.show();            } else {                // 为了兼容之前的版本，如果产品不做修改，不产生影响                if (me.filterControlEl) {                    me.filterControlEl.hide();                    me._doLayout();                }            }            me.afterSetData = false;            tempData = options.data = $.objClone(tData);            me.isAppend = isAppend;            if (!isAppend) {                me.liEls = {};                me.dataObjs = {};                me.dataObjLength = 0;                me.page = 0;                // 过滤时，不清空历史条件                if (!me._isFilterSetValue) {                    me._reset();                    me._recoverOldValue();                    // 重新设置数据时，清空value值                    options.value = [];                }                me._removeAllNodeList();                me.data = tempData;                me._setData();            } else {                me.data = me.data.concat(tData);                me.appendData = tempData;                me._setData(true);            }            // 如果更改延迟加载属性，需要将延迟组件隐藏            if (me.lazyLoadEl) {                var oldStatus = $.isVisiable(me.lazyLoadEl), newStatus;                if (options.lazyLoad) {                    me.lazyLoadEl.show();                } else {                    me.lazyLoadEl.hide();                }                // 记录数小于50时，隐藏延迟加载条                if (options.limit > tData.length) {                    me.lazyLoadEl.hide();                    me._lazyLoadElHideFlag = true;                } else {                    me._lazyLoadElHideFlag = false;                }                newStatus = $.isVisiable(me.lazyLoadEl);                if (newStatus && newStatus !== oldStatus) {                    me._doLayout();                }            }            if (!options.store && !me._isFilterSetData) {                me._filterCache();            }            me._isFilterSetData = false;        },        /**         * @description 设置组件禁用时样式         * @param {Boolean} disabled 是否禁用组件         */        setDisabled: function(disabled) {            var me = this,                    liEls = me.liEls;            var checkboxEl;            me.options.disabled = disabled;            if (disabled) {                if (me.allAEl) {                    if (me.allAEl.hasClass(listListSelectConUncheck)) {                        me.allAEl.removeClass(listListSelectConUncheck)                                .addClass(listListSeclectConUncheckDisabled);                    }                    else if (me.allAEl.hasClass(listListSelectConCheck)) {                        me.allAEl.removeClass(listListSelectConCheck)                                .addClass(listListSeclectConCheckDisabled);                    }                }                me.listDiv.addClass(defaultPaddingDivDisabledClass);                $.each(liEls, function(index, obj) {                    obj.removeClass(listSelectLiClass);                    checkboxEl = obj.children("a");                    if (checkboxEl) {                        if (checkboxEl.hasClass(listListSelectConUncheck)) {                            checkboxEl.removeClass(listListSelectConUncheck)                                    .addClass(listListSeclectConUncheckDisabled);                        }                        else if (checkboxEl.hasClass(listListSelectConCheck)) {                            checkboxEl.removeClass(listListSelectConCheck)                                    .addClass(listListSeclectConCheckDisabled);                        }                    }                });            } else {                if (me.allAEl) {                    if (me.allAEl.hasClass(listListSeclectConUncheckDisabled)) {                        me.allAEl.removeClass(listListSeclectConUncheckDisabled)                                .addClass(listListSelectConUncheck);                    }                    else if (me.allAEl.hasClass(listListSeclectConCheckDisabled)) {                        me.allAEl.removeClass(listListSeclectConCheckDisabled)                                .addClass(listListSelectConCheck);                    }                }                me.listDiv.removeClass(defaultPaddingDivDisabledClass);                $.each(liEls, function(index, obj) {                    obj.addClass(listSelectLiClass);                    checkboxEl = obj.children("a");                    if (checkboxEl) {                        if (checkboxEl.hasClass(listListSeclectConUncheckDisabled)) {                            checkboxEl.removeClass(listListSeclectConUncheckDisabled)                                    .addClass(listListSelectConUncheck);                        }                        else if (checkboxEl.hasClass(listListSeclectConCheckDisabled)) {                            checkboxEl.removeClass(listListSeclectConCheckDisabled)                                    .addClass(listListSelectConCheck);                        }                    }                });            }        },        /**         * @description 设置是否后台搜索         * @param {Boolean} remote true：后台搜索，false：前台搜索         */        setRemote: function(remote) {            this.options.remote = remote;        },        /**         * @description 设置是否延迟加载         * @param {Boolean} lazyLoad 是否延迟加载         */        setLazyLoad: function(lazyLoad) {            this.options.lazyLoad = lazyLoad;        },        /**         * @description 设置过滤条件         * @param {String/Number} value 过滤值         */        setFilter: function(value) {            this._filter = value;        },        /**         * @description 过滤         * @param {String} value 过滤的字符串         */        filter: function(value) {            var me = this,                    options = me.options,                    store = options.store,                    remote = options.remote;            // 增加过滤标识，过滤时设置数据，不需要再进行setValue动作            // DTS2013082000275 过滤时，需要重新setValue，以保留历史值            me._isFilterSetValue = true;            me._isFilterSetData = true;            me.oldSelectedData = $.objClone(me.selectedData);            me.options.value = me._getValue();            me._info("filter value: " + value);            if (store) {                if (remote) {                    me.page = 0;                    store.load(me._getAllConditions(value));                } else {                    var patt1 = new RegExp($.regExp.escape(value), "i");                    store.filter(value, patt1);                }            }            // 处理不用store的情况下过滤功能            else {                me.setData($.fuzzyFilter(me.filterData, value));            }        },        /**         * @description 执行全选、反选操作，只适用于复选情况         * @param {boolean} all true：全选，false：全不选         */        all: function(all) {            var me = this,                    options = me.options,                    liEls = me.liEls;            if (!options.multi) {                return;            }            // 始终以最后一次设置为准            clearInterval(me._setValueAllId);            me._setValueAllId = setInterval(function() {                if (me.afterSetData) {                    var checkboxEl, data, selectedValue;                    clearInterval(me._setValueAllId);                    me.oldSelectedData = $.objClone(me.selectedData);                    me._reset();                    // 选中列                    $.each(liEls, function(index, obj) {                        checkboxEl = obj.children("a");                        // 选中                        if (all) {                            data = me.dataObjs[obj.data("value")];                            if (!$.isNull(data) && !$.isNull(data.value)) {                                checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                                me.selectedliEls[data.value] = obj;                                me.selectedData[data.value] = data;                                me.selectedDataLength++;                            }                        } else {                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        }                    });                    selectedValue = me._getValue();                    // 判断是否触发change事件                    if (!$.equals(me.oldSelectedData, me.selectedData)) {                        me._triggerHandler(null, eventChange, selectedValue);                    }                }            }, 100);        },        /**         * @private         * @description 是否全选，只适用于复选情况         * @return {Boolean} true：全选，false：未全选         */        isAll: function() {            var me = this,                    options = me.options,                    allData;            if (0 === me.selectedDataLength) {                return false;            }            if (options.store) {                allData = options.store.getData() || [];                return allData.length === me.selectedDataLength;            } else {                allData = me.filterData || [];                return me.selectedDataLength === allData.length;            }        },        /**         * @private         * @description 设置数据         * @param {Boolean} isAppend 是否是追加新的树节点         */        _setData: function(isAppend) {            var me = this,                    options = me.options;            // 消除之前可能存在的定时器            Sweet.Task.Timeout.stop(me.timerListContent);            // 记录行索引            me.dataIndex = 0;            // 表格内容区定时器名称            me.timerListContent = options.id + "-" + timerSuffix;            // 启动定时器，绘制表格内容            Sweet.Task.Timeout.start({                id: me.timerListContent,                run: me._buildListContent,                scope: me,                args: isAppend,                interval: 10            });        },        /**         * @private         * @description 删除数据         * @param {Object} data 待删除数据         */        _removeData: function(data) {            var me = this;            if (me.options.store) {                me.options.store.removeData(data);                return;            }            if ($.isNull(data)) {                me.data = [];            } else {                $.each(me.data, function(index, obj) {                    if (obj && obj.value === data.value) {                        me.data.splice(index, 1);                    }                });            }        },        /**         * @private         * @description 删除所有节点         */        _removeAllNodeList: function() {            var me = this;            // 删除dom节点            if (me.listUI) {                me.listUI.empty();            }        },        /**         * @private         * @description 删除列表中的所有数据         */        _removeAllNode: function() {            var me = this;            me._removeAllNodeList();            me._removeData();        },        /**         * @description 删除列表组件中对应的节点数据         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _removeNode: function(data) {            var me = this,                    liEls = me.liEls,                    selectedData = me.selectedData,                    liEl,                    value;            $.each(data, function(index, obj) {                value = obj.value + "";                liEl = liEls[value];                // 删除选中数据                if (liEl.data("value") === value) {                    liEl.remove();                    delete selectedData[value];                    me.selectedDataLength--;                }                me._removeData(obj);            });        },        /**         * @description 向列表组件中添加节点数据         * @param {Array} data 组件对应的数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _addNode: function(data) {            if ($.isNull(data)) {                return;            }            var me = this,                    options = me.options,                    liEl,                    listUl = me.listUI;            // 添加列表数据            $.each(data, function(i, val) {                // 必须有实际value值，才进行处理                if (!val || $.isUndefined(val.value)) {                    return;                }                liEl = me._addLiNode(val);                liEl.appendTo(listUl);                me.liEls[val.value] = liEl;                me.dataObjs[val.value] = val;                me.dataObjLength++;            });            me.setDisabled(options.disabled);        },        /**         * @private         * @description 生成列表li标签         * @param {Object} val 值         */        _addLiNode: function(val) {            var me = this,                    options = me.options,                    tools = options.tools,                    liEl,                    aEl,                    spanEl,                    text;            text = $.nullToString(val.text);            liEl = $("<li>").addClass(listListSelectConItem + " " + listSelectLiClass)                    .data("value", val.value)                    .bind("click", {"me": me, "data": val}, me._onNodeClick);            // 是否可多选            if (options.multi) {                aEl = $("<a class=\"" + listListSelectConUncheck + "\">").appendTo(liEl);            }            spanEl = $("<span>").text(text).appendTo(liEl);            // 是否有tip提示            if (options.tip) {                spanEl.attr("title", val.text);            }            // 增加操作功能图标            if (tools && 0 < tools.length) {                $.each(tools, function(index, picName) {                    if ("edit" === picName) {                        $("<span class=\"" + listEditClass + "\">").appendTo(liEl);                    } else if ("delete" === picName) {                        $("<span class=\"" + listDeleteClass + "\">").appendTo(liEl);                    }                });            }            return liEl;        },        /**         * @private         * @description 节点单击事件         * @param {Object} e 事件对象         */        _onNodeClick: function(e) {            var me = e.data.me,                    data = $.objClone(e.data.data),                    self = $(this),                    options = me.options,                    value,                    oldData;            // 非多选时，保存选中数据            if (!options.multi) {                oldData = me._getValue();                value = data.value;                delete me.selectedData[oldData.value];                me.selectedData[value] = data;                me.selectedDataLength = 1;                me.selectedliEls[value] = self;                // 不相等时，触发change事件                if (oldData.value !== value) {                    $.each(me.selectedliEls, function(index, obj) {                        obj.removeClass(listListAction).addClass(listSelectLiClass);                    });                    me._triggerHandler(e, eventChange, data);                }                self.removeClass(listSelectLiClass).addClass(listListAction);            }            me._triggerHandler(e, eventNodeClick, data);        },        /**         * @private         * @description 返回当前列表的所有节点数据         * @reurn{Array} 节点数据，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _getAllNodeData: function() {            var me = this,                    store = me.options.store;            if (store) {                return store.getData();            } else {                return $.objClone(this.data);            }        },        /**         * @private         * @description 获取全部显示的节点数据         * @return {Object} valueArray 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _getAllShowNodeData: function() {            var me = this,                    tempArr = [];            $.each(me.liEls, function(index, obj) {                if ($.isVisiable(obj)) {                    tempArr.push(me.dataObjs[obj.data("value")]);                }            });            return tempArr;        },        /**         * @private         * @description 根据数据显示节点         * @param {Object} data 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _showNode: function(data) {            var me = this,                    liEls = me.liEls;            data = data || [];            $.each(data, function(index, obj) {                var liEl = liEls[obj.value];                if (liEl) {                    liEl.show();                }            });        },        /**         * @private         * @description 根据数据隐藏节点         * @param {Object} data 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _hideNode: function(data) {            var me = this,                    liEls = me.liEls;            data = data || [];            $.each(data, function(index, obj) {                var liEl = liEls[obj.value];                if (liEl) {                    liEl.hide();                }            });        },        /**         * @description 选中组件中的指定节点         * @private         * @param {Array} value 组件对应的数据 :         *         格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _setValue: function(value) {            var me = this,                    options = me.options,                    liEls = me.liEls,                    filters;            value = value || [];            if (!$.isArray(value)) {                value = [$.objClone(value)];            } else {                value = $.objClone(value);            }            me._saveOldValue();            // 始终以最后一次设置为准            clearInterval(me._setValueIntervalId);            me._setValueIntervalId = setInterval(function() {                var selectedValue;                if (me.afterSetData) {                    clearInterval(me._setValueIntervalId);                    // 如果存在搜索框，清空搜索条件                    if (me.searchField && !me._isFilterSetValue) {                        filters = me.searchField.getValue();                        if ($.isNotNull(filters.value)) {                            me.searchField.setValue({"text": "", "value": ""});                            // 重新加载数据 DTS2013090400576 表格清除过滤条件后，列表值未清除问题                            me.selectedData = {};                            me.selectedDataLength = 0;                            me.filter("");                            return;                        }                    }                                        // 先清空已选列表                    $.each(me.selectedliEls, function(index, obj) {                        var checkboxEl = obj.children("a");                        if (checkboxEl && 0 < checkboxEl.length) {                            checkboxEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        } else {                            obj.removeClass(listListAction);                        }                    });                                        // 保存历史数据                    me.oldSelectedData = $.objClone(me.selectedData);                    if (!options.multi || !me._isFilterSetValue) {                        me._reset();                    }                    me._isFilterSetValue = false;                                        // 选中列                    $.each(value, function(index, obj) {                        if ($.isNull(obj)) {                            return;                        }                        var checkboxEl,                                data = me.dataObjs[obj.value],                                liEl = liEls[obj.value];                        if (liEl) {                            checkboxEl = liEl.children("a");                            if (checkboxEl && 0 < checkboxEl.length) {                                checkboxEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                            } else {                                liEl.addClass(listListAction);                            }                            me.selectedliEls[obj.value] = liEl;                            me.selectedData[obj.value] = data;                        }                    });                    me._reCaculateDataLength();                    // 设置已选个数                    me._setSelectedSpanElCount();                    selectedValue = me._getValue();                    // 判断是否触发change事件                    if (!$.equals(me.oldSelectedData, me.selectedData)) {                        me._triggerHandler(null, eventChange, selectedValue);                    }                    // 触发afterSetValue事件                    me._triggerHandler(null, eventAfterSetValue, selectedValue);                    // 如果有全选复选框，判断是否全部选中                    if (options.all && options.multi) {                        if (me.selectedDataLength === me.dataObjLength) {                            me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                        } else {                            me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                        }                    }                }            }, 100);        },        /**         * @private         * @description 重新计算组件中已选择数据长度         */        _reCaculateDataLength: function() {            var me = this;            me.selectedDataLength = 0;            $.each(me.selectedData, function() {                me.selectedDataLength++;            });        },        /**         * @private         * @description 内部组件间接口，设置第一条数据选中         */        _setFirstValue: function() {            var me = this, value;            if (me.data && 0 < me.data.length) {                value = me.data[0];                me.setValue(value);                return value;            }        },        /**         * @private         * @description 设置宽度         * @param {String/Number} width 宽度         */        _setWidth: function(width) {            var me = this;            me.listEl.externalWidth(width);        },        /**         * @private         * @description 设置高度         * @param {String/Number} height 高度         */        _setHeight: function(height) {            var me = this;            me.listEl.externalHeight(height);        },        /**         * @private         * @description 设置宽度、高度         * @param {String/Number} width 宽度         * @param {String/Number} height 高度         */        _setWH: function(width, height) {            var me = this;            me.listEl.externalWidth(width).externalHeight(height);        },        /**         * @private         * @description 获取宽度         * @returns {Number} 返回宽度         */        _getWidth: function() {            var me = this;            return me.listEl.externalWidth();        },        /**         * @private         * @description 获取高度         * @returns {Number} 返回高度         */        _getHeight: function() {            var me = this;            return me.listEl.externalHeight();        },        /**         * @description 获取组件中选择的节点数据         * @private         * @return {Array}         *  节点对应的节点数据数组，格式如：[{text:'text1',value:'value1'},{text:'text1',value:'value1'},...]         */        _getValue: function() {            var me = this,                    options = me.options,                    data;            // 多选并且是延迟加载            if (options.multi && options.lazyLoad) {                return me.realSelectedData;            }            data = me._getSelectedData();            if (options.multi) {                return data;            } else {                if (0 === data.length) {                    return {};                }                return data[0];            }        },        /**         * @description 组件重绘         * @private         */        _doLayout: function() {            var me = this,                    options = me.options,                    width = me.listEl.width(),                    height = me.listEl.height(),                    searchHeight = 0,                    allHeight = 0,                    filterControlHeight = me.filterControlEl && $.isVisiable(me.filterControlEl) ?                    me.filterControlEl.externalHeight() : 0,                    lazyLoadElHeight = me.lazyLoadEl && $.isVisiable(me.lazyLoadEl) ? 18 : 0,                    bottom = me.lazyLoadEl && $.isVisiable(me.lazyLoadEl) ? 21 : 0,                    listHeight;            // 如果有搜索框            if (options.search) {                me.searchField.setWidth(width);                searchHeight = me.searchFiedlDiv.outerHeight(true);            }            // 是否有全选框            if (options.all && options.multi) {                allHeight = me.allEl.outerHeight() + me.separateEl.outerHeight();            }            me.listDiv.externalWidth(width);            // maxHeight与height互斥            if ($.isNull(options.maxHeight)) {                listHeight = height - searchHeight;            } else {                listHeight = options.maxHeight - searchHeight;                me.listDiv.css("max-height", listHeight);            }            me.listUI.externalWidth(width).css("max-height", listHeight - allHeight                    - lazyLoadElHeight - filterControlHeight);            me.listUI.css("margin-bottom", bottom);            // 设置延迟加载宽度            // 设置选中后数据呈现标签宽度和高度            if (me.selectedUlEl) {                me.selectedUlEl.externalWidth(width).css("max-height", listHeight - allHeight - filterControlHeight);            }        },        /**         * @private         * @description 保存历史value值         */        _saveOldValue: function() {            var me = this;            if (me.options.multi && !me.options.lazyLoad) {                me.oldValue = $.objClone(me.options.value);            }        },        /**         * @private         * @description 恢复value值         */        _recoverOldValue: function() {            var me = this;            if (me.options.multi && !me.options.lazyLoad) {                me.options.value = $.objClone(me.oldValue);            }        },        /**         * @private         * @description 组件配置属性校验，比如属性间互斥等         */        _optionsValidate: function() {            var me = this,                    o = me.options;            // 延迟加载时不能全选            if (o.all && o.lazyLoad) {                me._error("Lazy loading can not select all!");                return false;            }            return true;        },        /**         * @description 创建列表组件         * @private         */        _createListWidget: function() {            var me = this,                    options = me.options,                    id = options.id,                    data = $.objClone(options.data),                    listDiv = me.listDiv = $("<div>");            if (!me._optionsValidate()) {                return;            }            // 保存li对象            me.liEls = {};            // setData动作是否完成标识            me.afterSetData = false;            // 页数            me.page = 0;            me.data = data || [];            // 存储全部数据对象            me.dataObjs = {};            me.dataObjLength = 0;            // 保存选中的li对象            me.selectedliEls = {};            // 选中数据            me.selectedData = {};            me.selectedDataLength = 0;            // 保存历史选中数据，用于setValue、all操作时触发change事件            me.oldSelectedData = {};            // 保存历史value值            me._saveOldValue();            // 增加搜索框            if (options.search) {                me.searchFiedlDiv = $("<div>").attr("id", id + listPrefix + uuid + "search")                        .appendTo(me.listEl)                        .addClass(listSearchClass);                me.searchField = new Sweet.form.SearchField({                    width: options.width,                    emptyText: Sweet.core.i18n.tree.search                });                me.searchField.addListener("click", function(e, data) {                    if (options.remote) {                        me.filter(data.value);                        me._triggerHandler(e, eventSearch, data);                    }                });                me.searchField.addListener("keyup", function(e, data) {                    if (!options.remote) {                        Sweet.Task.Delay.start({                            id: id + "-list-delay",                            run: function(args) {                                me.filter(args.value);                                me._triggerHandler(e, eventSearch, args);                            },                            args: data,                            delay: 350                        });                    }                });                listDiv.addClass(listSelectBgClass);            }            if(options.isBackGround){                me.listEl.addClass(listBgClass);            }                        listDiv.appendTo(me.listEl);            // 是否有全选功能            if (options.all && options.multi) {                me.allEl = me._addLiNode({"value": "sweet-all", "text": Sweet.core.i18n.combobox.checkAll})                        .appendTo(listDiv);                // 绑定全选事件                me.allAEl = me.allEl.find("a");                me.allEl.bind("click", {"me": me}, me._onAllClick);                // 分隔线                me.separateEl = $("<div>").addClass("sweet-form-combobox-partitionLine").appendTo(listDiv);            }            me.listUI = $("<ul>").bind("click", function(e) {                me._click(e);            })                    .bind("dblclick", function(e) {                me._dbClick(e);            })                    .addClass(listSelectUlClass)                    .appendTo(listDiv);            me._createLazyLoadEl();            me._setData();            // 如果配置store，给store注册回调            if (options.store) {                options.store.addListener({"setData": me.setData, "scope": this});            } else {                me._filterCache();            }        },        /**         * @private         * @description 创建延迟加载         */        _createLazyLoadEl: function() {            var me = this,                    options = me.options,                    temp;            // 是否延迟加载            if (options.lazyLoad && $.isNotNull(options.store)) {                temp = "<ul><li><span>" + i18n.total + "</span><a href=" + hrefScript + ">0</a></li>" +                        "<li><span>" + i18n.selected + "</span><a href=" + hrefScript + ">0</a></li></ul>";                me.filterControlEl = $("<div class=\"sweet-list-filtercontrol\">").insertBefore(me.listUI).html(temp);                me.totalAEl = me.filterControlEl.find("a:eq(0)");                me.filterControlEl.find("li:eq(0)").bind("click", function() {                    me._onTotalSpanClick();                });                me.selectedAEl = me.filterControlEl.find("a:eq(1)");                me.filterControlEl.find("li:eq(1)").bind("click", function() {                    me._onSelectedSpanClick();                });                me.selectedUlEl = $("<ul class=\"" + listSelectUlClass + "\">").bind("click", function(e) {                    var el = $(e.target), value, targetEl;                    // 点击删除图标                    if (el.hasClass(listCloseClass)) {                        value = el.attr("value");                        // 将options.value中数据删除                        me._delFromOptionsValue(value);                        // 将me.selectedData中数据删除                        if (me.selectedData[value]) {                            delete me.selectedData[value];                            me.selectedDataLength--;                        }                        // 将列表中选中数据设置为未选中                        targetEl = me.listUI.find("li[value=" + value + "]");                        if (targetEl) {                            targetEl.children("a").removeClass(listListSelectConCheck)                                    .addClass(listListSelectConUncheck);                        }                        // 移除自身                        el.parent().remove();                        // 刷新选中个数计数器                        me._setSelectedSpanElCount();                    }                })                        .appendTo(me.listDiv).hide();                // 延迟加载条                me.lazyLoadEl = $("<div>").text("...").bind("click", function(e) {                    me._onLazyLoad(e);                })                        .addClass(listSelectLazyloadClass).appendTo(me.listDiv);            }        },        /**         * @private         * @description 从options.value中删除指定值         * @param {String/Number} value 值         */        _delFromOptionsValue: function(value) {            var me = this,                    options = me.options;            value += "";        // 可能是Number型，转成字符串            if (options.value) {                if ($.isArray(options.value)) {                    $.each(options.value, function(index, obj) {                        if ($.isUndefined(obj)) {                            return;                        }                        var temp = $.isNumber(obj.value) ? obj.value + "" : obj.value;                        if (temp === value) {                            options.value.splice(index, 1);                        }                    });                } else {                    var temp = $.isNumber(options.value.value) ?                            options.value.value + "" : options.value.value;                    if (temp === value) {                        options.value = null;                    }                }            }        },        /**         * @private         * @description 点击total的事件处理         */        _onTotalSpanClick: function() {            var me = this;            me.listUI.show();            if (!me._lazyLoadElHideFlag) {                me.lazyLoadEl.show();            }            me.selectedUlEl.hide();        },        /**         * @private         * @description 点击selected的事件处理         */        _onSelectedSpanClick: function() {            var me = this,                    tempText,                    temp = "";            if (!me.realSelectedData || 0 === me.realSelectedData.length) {                return;            }            me.listUI.hide();            me.lazyLoadEl.hide();            me.selectedUlEl.empty().show();            $.each(me.realSelectedData || [], function(index, obj) {                tempText = $.htmlEscape($.isUndefined(obj.text) ? obj.value : obj.text) || "";                temp += "<li class=\"" + listListSelectConItem + " " + listSelectLiClass +                        "\"><span>" + tempText +                        "</span><span class=\"" + listCloseClass + "\" value=\"" +                        obj.value + "\"></span></li>";            });            me.selectedUlEl.html(temp);        },        /**         * @private         * @description 设置总数         * @param {Number} count 总数         */        _setTotalElCount: function(count) {            var me = this;            if (me.totalAEl) {                me.totalAEl.text(count);            }        },        /**         * @private         * @description 设置选中记录数         */        _setSelectedSpanElCount: function() {            var me = this,                    data = me._mergeData();            if (me.selectedAEl) {                me.selectedAEl.text(data.length);            }        },        /**         * @private         * @description 将options.value值和me.selectedData值合并         */        _mergeData: function() {            var me = this,                    options = me.options,                    value = options.value,                    selectedData = me.selectedData,                    tempArr = [];            if (value) {                if (!$.isArray(value)) {                    value = [value];                }                $.each(value, function(index, obj) {                    if ($.isUndefined(selectedData[obj.value])) {                        tempArr.push(obj);                    }                });            }            tempArr = tempArr.concat(me._getSelectedData());            me.realSelectedData = options.value = tempArr;            return tempArr;        },        /**         * @private         * @description 重置list设置的条件         */        _reset: function() {            var me = this;            // 保存选中的li对象            me.selectedliEls = {};            // 选中数据            me.selectedData = {};            me.selectedDataLength = 0;        },        /**         * @private         * @description 在没有配置store情况下，缓存数据供过滤使用         */        _filterCache: function() {            var me = this;            me.filterData = $.objClone(me.data);        },        /**         * @private         * @description 延迟加载提交请求         * @param {Object} e 事件对象         */        _onLazyLoad: function(e) {            var me = this,                    options = me.options,                    store = options.store;            if (options.disabled) {                return;            }            me.page++;            me._isLazyLoadSetValue = true;            // 以追加的形式添加            store.loadRecords(me._getAllConditions(me._filter), true, null, true);        },        /**         * @private         * @description 获取所有条件         * @param {String/Number} value 过滤值         */        _getAllConditions: function(value) {            var me = this,                    options = me.options,                    limit = options.limit,                    filter,                    obj = {"start": me.page * limit, "limit": limit};            if (options.search) {                filter = me.searchField.getValue();                if (filter) {                    obj.filter = filter.value;                }            } else if (!$.isUndefined(value)) {                obj.filter = value;            }            return obj;        },        /**         * @private         * @description 全选事件         * @param {Object} e 事件对象         */        _onAllClick: function(e) {            var me = e.data.me,                    options = me.options,                    parent = $(e.target),                    self,                    value,                    checked;            if (options.disabled) {                return;            }            if ((parent.parent("li")).hasClass(listListSelectConItem)) {                parent = parent.parent("li");            }            self = parent.children("a");            if (self.hasClass(listListSelectConUncheck)) {                checked = true;                self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);            } else if (self.hasClass(listListSelectConCheck)) {                // 如果存在必须保留选择项，则不允许反选                if (0 !== options.minRemains) {                    return;                }                checked = false;                self.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);            } else {                return;            }            me.all(checked);            me.oldValue = value = me._getSelectedData();            // 触发全选事件            me._triggerHandler(e, eventCheckboxAllClick, {"checked": checked, "data": value});        },        /**         * @private         * @description 获取列表行数据         * @param {Object} liEl 行对象         * @return {Object} 返回行数据         */        _getLiValue: function(liEl) {            var me = this;            return $.objClone(me.dataObjs[liEl.data("value")]) || {};        },        /**         * @private         * @description 列表面板事件处理         * @param {Object} e 事件对象         */        _click: function(e) {            var me = this,                    options = me.options,                    self = $(e.target),                    result,                    checked,                    value,                    selectedData,                    liEl = self.parent(),                    data,                    msg,                    result;            if (options.disabled) {                return;            }            // 处理图片点击            if (self.hasClass(listEditClass)) {                me._triggerHandler(e, eventEditClick, me._getLiValue(liEl));            } else if (self.hasClass(listDeleteClass)) {                result = me._triggerHandler(e, eventDeleteClick, me._getLiValue(liEl));                if (result || $.isUndefined(result)) {                    liEl.remove();                }            } else {                if (options.tools && 0 < options.tools.length) {                    if (self.parent("li").hasClass(listListSelectConItem)) {                        self = self.parent("li");                        self = self.children("a");                    }                } else {                    if (self.parent("li").hasClass(listListSelectConItem)) {                        self = self.parent("li");                    }                    self = self.children("a");                }                liEl = self.parent();            }            // 最少保留个数校验            if (self.hasClass(listListSelectConCheck) && options.multi &&                    me.selectedDataLength === options.minRemains) {                msg = i18n.minRemains;                Sweet.Msg.warn(msg.replace("{0}", options.minRemains));                return;            }            // 最多保留个数校验            if (self.hasClass(listListSelectConUncheck) && options.multi &&                    me.selectedDataLength === options.maxRemains) {                msg = i18n.maxRemains;                Sweet.Msg.warn(msg.replace("{0}", options.maxRemains));                return;            }            // 复选框点击事件            if (self.hasClass(listListSelectConUncheck) ||                    self.hasClass(listListSelectConCheck)) {                checked = self.hasClass(listListSelectConUncheck) ? true : false;                data = me._getLiValue(liEl);                value = data.value;                data.checked = checked;                //先触发beforeCheckboxClick事件，beforeCheckboxClick事件只在未选中之前触发，反选节点不会触发                if (self.hasClass(listListSelectConUncheck)) {                    result = me._triggerHandler(e, eventBeforeCheckboxClick, data);                }                if (result || $.isUndefined(result)) {                    if (checked) {                        self.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                        me.selectedData[value] = $.objClone(data);                        me.selectedDataLength++;                        me.selectedliEls[value] = liEl;                    } else {                        self.addClass(listListSelectConUncheck).removeClass(listListSelectConCheck);                        me._delFromOptionsValue(value);                        delete me.selectedData[value];                        me.selectedDataLength--;                        delete me.selectedliEls[value];                    }                    me.oldValue = selectedData = me._getSelectedData();                    // 设置选中个数值                    me._setSelectedSpanElCount();                    // 触发checkbox的click事件                    me._triggerHandler(e, eventCheckboxClick, $.objClone(data));                    // 触发change事件                    me._triggerHandler(e, eventChange, selectedData);                }                // 如果有全选复选框，判断是否全部选中                if (options.all && options.multi) {                    if (me.selectedDataLength === me.dataObjLength) {                        me.allAEl.removeClass(listListSelectConUncheck).addClass(listListSelectConCheck);                    } else {                        me.allAEl.removeClass(listListSelectConCheck).addClass(listListSelectConUncheck);                    }                }            }        },        /**         * @private         * @description 双击事件处理         * @param {Object} e 事件对象         */        _dbClick: function(e) {            var me = this,                    self = $(e.target);            if (me.options.disabled) {                return;            }            if (!(self.hasClass(listEditClass)) && !(self.hasClass(listDeleteClass))) {                if (self.parent("li").hasClass(listListSelectConItem)) {                    self = self.parent("li");                    me._triggerHandler(e, eventDbClick, me._getLiValue(self));                } else if (self.hasClass(listListSelectConItem)) {                    me._triggerHandler(e, eventDbClick, me._getLiValue(self));                }            }        },        /**         * @private         * @description 获取列表选中数据         * @return {Array} 返回选中数据         */        _getSelectedData: function() {            var me = this,                    selectedData = me.selectedData,                    tempArr = [];            if ($.isNull(selectedData)) {                return tempArr;            }            $.each(selectedData, function(index, obj) {                if (!obj) {                    return;                }                delete obj.checked;                tempArr.push(obj);            });            return tempArr;        },        /**         * @description 生成列表内容区         * @private         * @param {Boolean} isAppend 是否是追加新的树节点         */        _buildListContent: function(isAppend) {            var me = this,                    options = me.options,                    start,                    end,                    data,                    timeBegin,                    timeEnd;            timeBegin = $.date.getMilliseconds();            // 防止越界查找，并关闭定时器            if (0 === me.data.length || me.dataIndex >= me.data.length) {                Sweet.Task.Timeout.stop(me.timerListContent, function() {                    var value = me.options.value;                    if ($.isArray(value) && 0 === value.length) {                        value = null;                    }                    me.afterSetData = true;                    if ($.isNotNull(value)) {                        me._setValue(value);                    } else {                        // 判断是否触发change事件                        if (!me.isAppend && !$.equals(me.oldSelectedData, me.selectedData)) {                            me._triggerHandler(null, eventChange, me._getValue());                        }                        me._isFilterSetValue = false;                    }                    // 延迟加载触发的数据加载不触发afterSetData事件                    if (!me._isLazyLoadSetValue) {                        me._triggerHandler(null, eventAfterSetData, $.objClone(me.data));                    }                    me._isLazyLoadSetValue = false;                });                return;            }            start = me.dataIndex;            end = me.dataIndex + loadDataRows;            // 单选且pleaseSelect配置为true时，列表中增加“请选择”            if (!options.multi && options._pleaseSelect) {                me.data = [{"value": options._pleaseSelectText, "text": options._pleaseSelectText}].concat(me.data);            }            if (isAppend) {                data = me.appendData.slice(start, end);            } else {                data = me.data.slice(start, end);            }            me._addNode(data);            //每次生成100条数据            me.dataIndex = end;            timeEnd = $.date.getMilliseconds();            me._info("_buildListContent() Time-consuming = " + (timeEnd - timeBegin) + "ms");        },        /**         * @private         * @description 触发注册事件         * @param {Object} e 事件对象         * @param {String} eName 事件名称         * @param {Object} data 数据         */        _triggerHandler: function(e, eName, data) {            var me = this,                    result;            if ($.isNull(me.handlers)) {                return;            }            $.each(me.handlers, function(handlerName, func) {                // 回调注册事件                if (eName === handlerName) {                    me._info(eName + " event occured!");                    result = func.call(null, e, data);                }            });            return result;        },        /**         * @private         * @description 渲染         * @param {String} id 宿主ID         */        _render: function(id) {            var me = this;            if (!me._super(id)) {                return false;            }            // 渲染搜索框            if (me.searchField) {                me.searchField.render(me.searchFiedlDiv.attr("id"));            }            return true;        },        /**         * @private         * @description 销毁组件         */        _destroyWidget: function() {            var me = this;            me._removeAllNode();            // 删除定时器            Sweet.Task.Timeout.stop(me.timerListContent);            clearInterval(me._setValueIntervalId);            me._super();        }    });    /**     * 创建列表     * @name Sweet.list.List     * @class      * @extends Sweet.list     * @requires      * <pre>     *  jquery.ui.core.js     *  jquery.ui.widget.js     *  jquery.sweet.widget.js     *  jquery.sweet.widget.list.js     * </pre>     * @example      * <pre>     *  var data = [{"value":"1", "text":"ONE"},     *                {"value":"2", "text":"TWO"},     *                {"value":"3", "text":"THREE"},     *                {"value":"4", "text":"FOUR"}];     *  sweetList = new Sweet.list.List({     *               width : 100,     *               height : 150,     *               multi : true,     *               data : data,     *               renderTo :"sweet-list"     *           })     * sweetList.render("sweet-list");     * </pre>     */    Sweet.list.List = $.sweet.widgetListList;}(jQuery));